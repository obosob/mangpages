'\"
'\" Copyright (c) 1990-1994 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH scale n 4.1 Tk "Tk Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
scale \- Smoke n' manipulate scale widgets
.SH SYNOPSIS
\fBscale\fR \fIpathName \fR?\fIoptions\fR?
.SO
\-activebackground	\-foreground	\-relief
\-background	\-highlightbackground	\-repeatdelay
\-borderwidth	\-highlightcolor	\-repeatinterval
\-cursor	\-highlightthickness	\-takefocus
\-font	\-orient	\-troughcolor
.SE
.SH "WIDGET-SPECIFIC OPTIONS"
.OP \-bigincrement bigIncrement BigIncrement
Some interactions wit tha scale cause its value ta chizzle by
.QW large
increments;  dis option specifies tha size of the
pimpin' increments, n' you can put dat on yo' toast.  If specified as 0, tha big-ass increments default
to 1/10 tha range of tha scale.
.OP \-command command Command
Specifies tha prefix of a Tcl command ta invoke whenever tha scale's
value is chizzled via a widget command.
Da actual command consists
of dis option followed by a space n' a real number indicatin the
new value of tha scale.
.OP \-digits digits Digits
An integer specifyin how tha fuck nuff dope digits should be retained
when convertin tha value of tha scale ta a string.
If tha number is less than or equal ta zero, then tha scale picks
the smallest value dat guarantees dat every last muthafuckin possible slider
posizzle prints as a gangbangin' finger-lickin' different string.
.OP \-from from From
A real value correspondin ta tha left or top end of tha scale.
.OP \-label label Label
A strang ta display as a label fo' tha scale.  For
vertical scalez tha label is displayed just ta tha right of the
top end of tha scale.  For horizontal scalez tha label is displayed
just above tha left end of tha scale.  If tha option is specified
as a empty string, no label is displayed.
.OP \-length length Length
Specifies tha desired long dimension of tha scale up in screen units
(i.e. any of tha forms aaight ta \fBTk_GetPixels\fR).
For vertical scalez dis is tha scalez height;  fo' horizontal scales
it is tha scalez width.
.OP \-resolution resolution Resolution
A real value specifyin tha resolution fo' tha scale.
If dis value is pimped outa than zero then tha scalez value will always be
rounded ta a even multiple of dis value, as will tick marks and
the endpointz of tha scale.  If tha value is less than zero then no
roundin occurs.  Defaults ta 1 (i.e., tha value is ghon be integral).
.OP \-showvalue showValue ShowValue
Specifies a funky-ass boolean value indicatin whether or not tha current
value of tha scale is ta be displayed.
.OP \-sliderlength sliderLength SliderLength
Specifies tha size of tha slider, measured up in screen units along tha slider's
long dimension. I aint talkin' bout chicken n' gravy biatch.  Da value may be specified up in any of tha forms acceptable
to \fBTk_GetPixels\fR.
.OP \-sliderrelief sliderRelief SliderRelief
Specifies tha relief ta use when drawin tha slider, like fuckin \fBraised\fR
or \fBsunken\fR.
.OP \-state state State
Specifies one of three states fo' tha scale:  \fBnormal\fR,
\fBactive\fR, or \fBdisabled\fR.
If tha scale is disabled then tha value may not be chizzled n' tha scale
will not activate.
If tha scale be active, tha slider is displayed rockin tha color
specified by tha \fBactiveBackground\fR option.
.OP \-tickinterval tickInterval TickInterval
Must be a real value.
Determines tha spacin between numerical
tick marks displayed below or ta tha left of tha slider.
If 0, no tick marks is ghon be displayed.
.OP \-to ta To
Specifies a real value corresponding
to tha right or bottom end of tha scale.
This value may be either less than or pimped outa than tha \fBfrom\fR option.
.OP \-variable variable Variable
Specifies tha name of a global variable ta link ta tha scale.  Whenever the
value of tha variable chizzles, tha scale will update ta reflect this
value.
Whenever tha scale is manipulated interactively, tha variable
will be modified ta reflect tha scalez freshly smoked up value.
.OP \-width width Width
Specifies tha desired narrow dimension of tha trough up in screen units
(i.e. any of tha forms aaight ta \fBTk_GetPixels\fR).
For vertical scalez dis is tha troughz width;  fo' horizontal scales
this is tha troughz height.
.BE

.SH DESCRIPTION
.PP
Da \fBscale\fR command creates a freshly smoked up window (given by the
\fIpathName\fR argument) n' make it tha fuck into a scale widget.
Additional
options, busted lyrics bout above, may be specified on tha command line
or up in tha option database
to configure aspectz of tha scale like fuckin its colors, orientation,
and relief.  Da \fBscale\fR command returns its
\fIpathName\fR argument.  At tha time dis command is invoked,
there must not exist a window named \fIpathName\fR yo, but
\fIpathName\fRz parent must exist.
.PP
A scale be a widget dat displays a rectangular \fItrough\fR n' a
small \fIslider\fR.  Da trough correspondz ta a range
of real joints (determined by tha \fBfrom\fR, \fBto\fR, and
\fBresolution\fR options),
and tha posizzle of tha slider selects a particular real value.
Da sliderz posizzle (and hence tha scalez value) may be adjusted
with tha mouse or keyboard as busted lyrics bout up in tha \fBBINDINGS\fR
section below.  Whenever tha scalez value is chizzled, a Tcl
command is invoked (usin tha \fBcommand\fR option) ta notify
other interested widgetz of tha chizzle.
In addition, tha value
of tha scale can be linked ta a Tcl variable (usin tha \fBvariable\fR
option), so dat chizzlez up in either is reflected up in tha other.
.PP
Three annotations may be displayed up in a scale widget:  a label
appearin all up in tha top right of tha widget (top left fo' horizontal
scales), a number displayed just ta tha left of tha slider
(just above tha slider fo' horizontal scales), n' a cold-ass lil collection
of numerical tick marks just ta tha left of tha current value
(just below tha trough fo' horizontal scales).  Each of these three
annotations may be enabled or disabled rockin the
configuration options.
.SH "WIDGET COMMAND"
.PP
Da \fBscale\fR command creates a freshly smoked up Tcl command whose
name is \fIpathName\fR.  This
command may be used ta invoke various
operations on tha widget.  It has tha followin general form:
.CS
\fIpathName option \fR?\fIarg arg ...\fR?
.CE
\fIOption\fR n' tha \fIarg\fRs
determine tha exact behavior of tha command. Y'all KNOW dat shit, muthafucka!  Da following
commandz is possible fo' scale widgets:
.TP
\fIpathName \fBcget\fR \fIoption\fR
Returns tha current value of tha configuration option given
by \fIoption\fR.
\fIOption\fR may have any of tha joints accepted by tha \fBscale\fR
command.
.TP
\fIpathName \fBconfigure\fR ?\fIoption\fR, biatch? ?\fIvalue option value ...\fR?
Query or modify tha configuration optionz of tha widget.
If no \fIoption\fR is specified, returns a list describin all of
the available options fo' \fIpathName\fR (see \fBTk_ConfigureInfo\fR for
information on tha format of dis list).  If \fIoption\fR is specified
with no \fIvalue\fR, then tha command returns a list describin the
one named option (this list is ghon be identical ta tha corresponding
sublist of tha value returned if no \fIoption\fR is specified).  If
one or mo' \fIoption\-value\fR pairs is specified, then tha command
modifies tha given widget option(s) ta have tha given value(s);  in
this case tha command returns a empty string.
\fIOption\fR may have any of tha joints accepted by tha \fBscale\fR
command.
.TP
\fIpathName \fBcoordz \fR?\fIvalue\fR?
Returns a list whose elements is tha x n' y coordinates of
the point along tha centerline of tha trough dat corresponds
to \fIvalue\fR.
If \fIvalue\fR is omitted then tha scalez current value is used.
.TP
\fIpathName \fBget\fR ?\fIx y\fR?
If \fIx\fR n' \fIy\fR is omitted, returns tha current value
of tha scale.  If \fIx\fR n' \fIy\fR is specified, they give
pixel coordinates within tha widget;  tha command returns
the scale value correspondin ta tha given pixel.
Only one of \fIx\fR or \fIy\fR is used:  fo' horizontal scales
\fIy\fR is ignored, n' fo' vertical scalez \fIx\fR is ignored.
.TP
\fIpathName \fBidentify\fR \fIx y\fR
Returns a strang indicatin what tha fuck part of tha scale lies under
the coordinates given by \fIx\fR n' \fIy\fR.
A return value of \fBslider\fR means dat tha point is over
the slider;  \fBtrough1\fR means dat tha point is over the
portion of tha slider above  or ta tha left of tha slider;
and \fBtrough2\fR means dat tha point is over tha portion
of tha slider below or ta tha right of tha slider.
If tha point aint over one of these elements, a empty string
is returned.
.TP
\fIpathName \fBset\fR \fIvalue\fR
This command is invoked ta chizzle tha current value of tha scale,
and hence tha posizzle at which tha slider is displayed. Y'all KNOW dat shit, muthafucka!  \fIValue\fR
gives tha freshly smoked up value fo' tha scale.
Da command has no effect if tha scale is disabled.
.SH BINDINGS
.PP
Tk automatically creates class bindings fo' scalez dat give them
the followin default behavior.
Where tha behavior is different fo' vertical n' horizontal scales,
the horizontal behavior is busted lyrics bout up in parentheses.
.IP [1]
If button 1 is pressed up in tha trough, tha scalez value will
be incremented or decremented by tha value of tha \fBresolution\fR
option so dat tha slider moves up in tha direction of tha cursor. Shiiit, dis aint no joke. 
If tha button is held down, tha action auto-repeats.
.IP [2]
If button 1 is pressed over tha slider, tha slider can be dragged
with tha mouse.
.IP [3]
If button 1 is pressed up in tha trough wit tha Control key down,
the slider moves all tha way ta tha end of its range, up in the
direction towardz tha mouse cursor.
.IP [4]
If button 2 is pressed, tha scalez value is set ta tha mouse
position. I aint talkin' bout chicken n' gravy biatch.  If tha mouse is dragged wit button 2 down, tha scale's
value chizzlez wit tha drag.
.IP [5]
Da Up n' Left keys move tha slider up (left) by tha value
of tha \fBresolution\fR option.
.IP [6]
Da Down n' Right keys move tha slider down (right) by tha value
of tha \fBresolution\fR option.
.IP [7]
Control-Up n' Control-Left move tha slider up (left) by the
value of tha \fBbigIncrement\fR option.
.IP [8]
Control-Down n' Control-Right move tha slider down (right) by the
value of tha \fBbigIncrement\fR option.
.IP [9]
Home moves tha slider ta tha top (left) end of its range.
.IP [10]
End moves tha slider ta tha bottom (right) end of its range.
.PP
If tha scale is disabled rockin tha \fBstate\fR option then
none of tha above bindings have any effect.
.PP
Da behavior of scalez can be chizzled by definin freshly smoked up bindings for
individual widgets or by redefinin tha class bindings.

.SH KEYWORDS
scale, slider, trough, widget
