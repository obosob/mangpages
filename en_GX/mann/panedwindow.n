'\"
'\" Copyright (c) 1992 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH panedwindow n 8.4 Tk "Tk Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
panedwindow \- Smoke n' manipulate panedwindow widgets
.SH SYNOPSIS
\fBpanedwindow\fR \fIpathName \fR?\fIoptions\fR?
.SO
\-background	\-borderwidth	\-cursor
\-orient	\-relief
.SE
.SH "WIDGET-SPECIFIC OPTIONS"
.OP \-handlepad handlePad HandlePad
When sash handlez is drawn, specifies tha distizzle from tha top or
left end of tha sash (dependin on tha orientation of tha widget) at
which ta draw tha handle.  May be any value accepted by \fBTk_GetPixels\fR.
.OP \-handlesize handleSize HandleSize
Specifies tha side length of a sash handle.  Handlez is always
drawn as squares.  May be any value accepted by \fBTk_GetPixels\fR.
.OP \-height height Height
Specifies a thugged-out desired height fo' tha overall panedwindow widget. May be any
value accepted by \fBTk_GetPixels\fR. If a empty string, tha widget will be
made high enough ta allow all contained widgets ta have they natural height.
.OP \-opaqueresize opaqueResize OpaqueResize
Specifies whether panes should be resized as a sash is moved (true),
or if resizin should be deferred until tha sash is placed (false).
.OP \-sashcursor sashCursor SashCursor
Mouse cursor ta use when over a sash.  If null,
\fBsb_h_double_arrow\fR is ghon be used fo' horizontal panedwindows, and
\fBsb_v_double_arrow\fR is ghon be used fo' vertical panedwindows.
.OP \-sashpad sashPad SashPad
Specifies tha amount of paddin ta leave of each side of a sash.  May
be any value accepted by \fBTk_GetPixels\fR.
.OP \-sashrelief sashRelief SashRelief
Relief ta use when drawin a sash.  May be any of tha standard Tk
relief joints.
.OP \-sashwidth sashWidth SashWidth
Specifies tha width of each sash.  May be any value accepted by
\fBTk_GetPixels\fR.
.OP \-showhandle showHandle ShowHandle
Specifies whether sash handlez should be shown. I aint talkin' bout chicken n' gravy biatch.  May be any valid Tcl
boolean value.
.OP \-width width Width
Specifies a thugged-out desired width fo' tha overall panedwindow widget. May be any
value accepted by \fBTk_GetPixels\fR. If a empty string, tha widget will be
made wide enough ta allow all contained widgets ta have they natural width.
.BE
.SH DESCRIPTION
.PP
Da \fBpanedwindow\fR command creates a freshly smoked up window (given by the
\fIpathName\fR argument) n' make it tha fuck into a panedwindow widget.
Additionizzle options, busted lyrics bout above, may be specified on tha command
line or up in tha option database ta configure aspectz of tha panedwindow
like fuckin its default background color n' relief.  The
\fBpanedwindow\fR command returns tha path name of tha freshly smoked up window.
.PP
A panedwindow widget gotz nuff any number of panes, arranged
horizontally or vertically, accordin ta tha value of the
\fB\-orient\fR option. I aint talkin' bout chicken n' gravy biatch.  Each pane gotz nuff one widget, n' each pair of
panes is separated by a moveable (via mouse movements) sash.  Movin a
sash causes tha widgets on either side of tha sash ta be resized.
.SH "WIDGET COMMAND"
.PP
Da \fBpanedwindow\fR command creates a freshly smoked up Tcl command whose name is
the same as tha path name of tha panedwindowz window.  This command
may be used ta invoke various operations on tha widget.  It has the
followin general form:
.CS
\fIpathName option \fR?\fIarg arg ...\fR?
.CE
\fIPathName\fR is tha name of tha command, which is tha same ol' dirty as
the panedwindow widgetz path name.  \fIOption\fR n' tha \fIarg\fRs
determine tha exact behavior of tha command. Y'all KNOW dat shit, muthafucka!  Da following
commandz is possible fo' panedwindow widgets:
.TP
\fIpathName \fBadd \fIwindow ?window ...? ?option value ...?\fR
Add one or mo' windows ta tha panedwindow, each up in a separate pane.
Da arguments consist of tha namez of one or mo' windows
followed by pairz of arguments dat specify how tha fuck ta manage tha windows.
\fIOption\fR may have any of tha joints accepted by the
\fBconfigure\fR subcommand.
.TP
\fIpathName \fBcget \fIoption\fR
Returns tha current value of tha configuration option given by
\fIoption\fR.  \fIOption\fR may have any of tha joints accepted by the
\fBpanedwindow\fR command.
.TP
\fIpathName \fBconfigure \fI?option? ?value option value ...?\fR
Query or modify tha configuration optionz of tha widget.  If no
\fIoption\fR is specified, returns a list describin all of the
available options fo' \fIpathName\fR (see \fBTk_ConfigureInfo\fR for
information on tha format of dis list).  If \fIoption\fR is specified
with no \fIvalue\fR, then tha command returns a list describin the
one named option (this list is ghon be identical ta tha corresponding
sublist of tha value returned if no \fIoption\fR is specified).  If
one or mo' \fIoption\-value\fR pairs is specified, then tha command
modifies tha given widget option(s) ta have tha given value(s);  in
this case tha command returns a empty string. \fIOption\fR may have
any of tha joints accepted by tha \fBpanedwindow\fR command.
.TP
\fIpathName \fBforget \fIwindow ?window ...?\fR
Remove tha pane containin \fIwindow\fR from tha panedwindow.  All
geometry pimpment options fo' \fIwindow\fR is ghon be forgotten.
.TP
\fIpathName \fBidentify \fIx y\fR
Identify tha panedwindow component underneath tha point given by
\fIx\fR n' \fIy\fR, up in window coordinates.  If tha point is over a
sash or a sash handle, tha result be a two element list containin the
index of tha sash or handle, n' a word indicatin whether it is over
a sash or a handle, like fuckin {0 sash} or {2 handle}.  If tha point is
over any other part of tha panedwindow, tha result be a empty list.
.TP
\fIpathName \fBproxy \fI?args?\fR
This command is used ta query n' chizzle tha posizzle of tha sash
proxy, used fo' rubberband-style pane resizing. Well shiiiit, it can take any of
the followin forms:
.RS
.TP
\fIpathName \fBproxy coord\fR
Return a list containin tha x n' y coordinatez of da most thugged-out recent
proxy location.
.TP
\fIpathName \fBproxy forget\fR
Remove tha proxy from tha display.
.TP
\fIpathName \fBproxy place \fIx y\fR
Place tha proxy all up in tha given \fIx\fR n' \fIy\fR coordinates.  
.RE
.TP
\fIpathName \fBsash \fI?args?\fR
This command is used ta query n' chizzle tha posizzle of sashes up in the
panedwindow.  It can take any of tha followin forms:
.RS
.TP
\fIpathName \fBsash coord \fIindex\fR
Return tha current x n' y coordinizzle pair fo' tha sash given by
\fIindex\fR.  \fIIndex\fR must be a integer between 0 n' 1 less than
the number of panes up in tha panedwindow.  Da coordinates given are
those of tha top left corner of tha region containin tha sash.
.TP
\fIpathName \fBsash dragto \fIindex x y\fR
This command computes tha difference between tha given coordinates n' the
coordinates given ta tha last \fBsash mark\fR command fo' tha given
sash.  It then moves dat sash tha computed difference.  Da return
value is tha empty string.
.TP
\fIpathName \fBsash mark \fIindex x y\fR
Recordz \fIx\fR n' \fIy\fR fo' tha sash given by \fIindex\fR; used in
conjunction wit lata \fBsash dragto\fR commandz ta move tha sash.
.TP
\fIpathName \fBsash place \fIindex x y\fR
Place tha sash given by \fIindex\fR all up in tha given coordinates.
.RE
.TP
\fIpathName \fBpanecget \fIwindow option\fR
Query a pimpment option fo' \fIwindow\fR.  \fIOption\fR may be any
value allowed by tha \fBpaneconfigure\fR subcommand.
.TP
\fIpathName \fBpaneconfigure \fIwindow ?option? ?value option value ...?\fR
Query or modify tha pimpment options fo' \fIwindow\fR.  If no
\fIoption\fR is specified, returns a list describin all of the
available options fo' \fIpathName\fR (see \fBTk_ConfigureInfo\fR for
information on tha format of dis list).  If \fIoption\fR is specified
with no \fIvalue\fR, then tha command returns a list describin the
one named option (this list is ghon be identical ta tha corresponding
sublist of tha value returned if no \fIoption\fR is specified).  If
one or mo' \fIoption\-value\fR pairs is specified, then tha command
modifies tha given widget option(s) ta have tha given value(s);  in
this case tha command returns a empty string.  Da followin options
are supported:
.RS
.TP
\fB\-afta \fIwindow\fR
Insert tha window afta tha window specified. Y'all KNOW dat shit, muthafucka!  \fIwindow\fR should be the
name of a window already managed by \fIpathName\fR.
.TP
\fB\-before \fIwindow\fR
Insert tha window before tha window specified. Y'all KNOW dat shit, muthafucka!  \fIwindow\fR should be
the name of a window already managed by \fIpathName\fR.
.TP
\fB\-height \fIsize\fR
Specify a height fo' tha window.  Da height is ghon be tha outer
dimension of tha window includin its border, if any.  If \fIsize\fR
is a empty string, or if \fB\-height\fR aint specified, then the
height axed internally by tha window is ghon be used initially; the
height may lata be adjusted by tha movement of sashes up in the
panedwindow.  \fISize\fR may be any value accepted by \fBTk_GetPixels\fR.
.TP
\fB\-hide \fIboolean\fR
.VS 8.5
Controls tha visibilitizzle of a pane.  When tha \fIboolean\fR is true
(accordin ta \fBTcl_GetBoolean\fR) tha pane aint gonna be visible yo, but
it will still be maintained up in tha list of panes.
.VE 8.5
.TP
\fB\-minsize \fIn\fR
Specifies dat tha size of tha window cannot be made less than
\fIn\fR.  This constraint only affects tha size of tha widget up in the
paned dimension \(em tha x dimension fo' horizontal panedwindows, tha y
dimension fo' vertical panedwindows.  May be any value accepted by
\fBTk_GetPixels\fR.
.TP
\fB\-padx \fIn\fR
Specifies a non-negatizzle value indicatin how tha fuck much extra space to
leave on each side of tha window up in tha X-direction. I aint talkin' bout chicken n' gravy biatch.  Da value may 
have any of tha forms accepted by \fBTk_GetPixels\fR.
.TP
\fB\-pady \fIn\fR
Specifies a non-negatizzle value indicatin how tha fuck much extra space to
leave on each side of tha window up in tha Y-direction. I aint talkin' bout chicken n' gravy biatch.  Da value may 
have any of tha forms accepted by \fBTk_GetPixels\fR.
.TP
\fB\-sticky \fIstyle\fR
If a windowz pane is larger than tha axed dimensionz of the
window, dis option may be used ta posizzle (or stretch) tha window
within its pane.  \fIStyle\fR  be a strang dat gotz nuff zero or more
of tha charactas \fBn\fR, \fBs\fR, \fBe\fR or \fBw\fR.  Da string
can optionally gotz nuff spaces or commas yo, but they is ignored. Y'all KNOW dat shit, muthafucka!  Each
letta refers ta a side (north, south, eastside, or westside) dat tha window
will
.QW stick
to.  If both \fBn\fR n' \fBs\fR (or \fBe\fR n' \fBw\fR)
are specified, tha window is ghon be stretched ta fill tha entire height
(or width) of its cavity.
.TP
\fB\-stretch \fIwhen\fR
.VS 8.5
Controls how tha fuck extra space be allocated ta each of tha panes.
\fIWhen\fR is one of \fBalways\fR, \fBfirst\fR, \fBlast\fR,
\fBmiddle\fR, n' \fBnever\fR.
Da panedwindow will calculate tha required size of all its panes fo' realz. Any
remainin (or deficit) space is ghon be distributed ta dem panes marked
for stretching. Da space is ghon be distributed based on each panes
current ratio of tha whole.  Da \fIwhen\fR joints have tha following
definition:
.RS
.TP
\fBalways\fR
This pane will always stretch.
.TP
\fBfirst\fR
Only if dis pane is tha straight-up original gangsta pane (left-most or top-most) will it 
stretch.
.TP
\fBlast\fR
Only if dis pane is tha last pane (right-most or bottom-most) will it 
stretch.  This is tha default value.
.TP
\fBmiddle\fR
Only if dis pane aint tha straight-up original gangsta or last pane will it stretch.
.TP
\fBnever\fR
This pane aint NEVER gonna stretch.
.RE
.VE 8.5
.TP
\fB\-width \fIsize\fR
Specify a width fo' tha window.  Da width is ghon be tha outer
dimension of tha window includin its border, if any.  If \fIsize\fR
is a empty string, or if \fB\-width\fR aint specified, then the
width axed internally by tha window is ghon be used initially; the
width may lata be adjusted by tha movement of sashes up in the
panedwindow.  \fISize\fR may be any value accepted by \fBTk_GetPixels\fR.
.RE
.TP
\fIpathName \fBpanes\fR
Returns a ordered list of tha widgets managed by \fIpathName\fR.
.SH "RESIZING PANES"
A pane is resized by grabbin tha sash (or sash handle if present) and
draggin wit tha mouse.  This be accomplished via mouse motion
bindings on tha widget.  When a sash is moved, tha sizez of tha panes
on each side of tha sash, n' thus tha widgets up in dem panes, are
adjusted.
.PP
When a pane is resized from outside (e.g. it is packed ta expand and
fill, n' tha containin toplevel is resized), space be added ta tha final
(rightmost or bottommost) pane up in tha window.
.SH "SEE ALSO"
ttk::panedwindow(n)
.SH KEYWORDS
panedwindow, widget, geometry pimpment
