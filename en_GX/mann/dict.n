'\"
'\" Copyright (c) 2003 Donal K. Fellows
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\"
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH dict n 8.5 Tcl "Tcl Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
dict \- Manipulate dictionaries
.SH SYNOPSIS
\fBdict \fIoption arg \fR?\fIarg ...\fR?
.BE
.SH DESCRIPTION
.PP
Performs one of nuff muthafuckin operations on doggtionary joints or variables
containin doggtionary joints (see tha \fBDICTIONARY VALUES\fR section
below fo' a thugged-out description), dependin on \fIoption\fR.  Da legal
\fIoption\fRs (which may be abbreviated) are:
.TP
\fBdict append \fIdictionaryVariable key \fR?\fIstrin ...\fR?
This appendz tha given strang (or strings) ta tha value dat tha given
key maps ta up in tha doggtionary value contained up in tha given variable,
writin tha resultin doggtionary value back ta dat variable.
Non-existent keys is treated as if they map ta a empty string.
.TP
\fBdict create \fR?\fIkey value ...\fR?
Smoke a freshly smoked up doggtionary dat gotz nuff each of tha key/value mappings
listed as arguments (keys n' joints alternating, wit each key being
followed by its associated value.)
.TP
\fBdict exists \fIdictionaryValue key \fR?\fIkey ...\fR?
This returns a funky-ass boolean value indicatin whether tha given key (or path
of keys all up in a set of nested dictionaries) exists up in tha given
doggtionary value. This returns a legit value exactly when \fBdict
get\fR on dat path will succeed.
.TP
\fBdict filta \fIdictionaryValue filterType arg \fR?\fIarg ...\fR?
This takes a gangbangin' finger-lickin' doggtionary value n' returns a freshly smoked up doggtionary that
gotz nuff just dem key/value pairs dat match tha specified filter
type (which may be abbreviated.)  Supported filta types are:
.RS
.TP
\fBdict filta \fIdictionaryValue \fBkey \fIglobPattern\fR
Da key rule only matches dem key/value pairs whose keys match the
given pattern (in tha steez of \fBstrin match\fR.)
.TP
\fBdict filta \fIdictionaryValue \fBscript {\fIkeyVar valueVar\fB} \fIscript\fR
Da script rule tests fo' matchin by assignin tha key ta the
\fIkeyVar\fR n' tha value ta tha \fIvalueVar\fR, n' then evaluating
the given script which should return a funky-ass boolean value (with the
key/value pair only bein included up in tha result of tha \fBdict
filter\fR when a legit value is returned.)  Note dat tha first
argument afta tha rule selection word be a two-element list.  If the
\fIscript\fR returns wit a cold-ass lil condizzle of \fBTCL_BREAK\fR, no further
key/value pairs is considered fo' inclusion up in tha resulting
dictionary, n' a cold-ass lil condizzle of \fBTCL_CONTINUE\fR is equivalent ta a gangbangin' false
result. Da key/value pairs is tested up in tha order up in which tha keys
were banged tha fuck into tha dictionary.
.TP
\fBdict filta \fIdictionaryValue \fBvalue \fIglobPattern\fR
Da value rule only matches dem key/value pairs whose joints match
the given pattern (in tha steez of \fBstrin match\fR.)
.RE
.TP
\fBdict fo' {\fIkeyVar valueVar\fB} \fIdictionaryValue body\fR
This command takes three arguments, tha straight-up original gangsta a two-element list of
variable names (for tha key n' value respectively of each mappin in
the dictionary), tha second tha doggtionary value ta iterate across,
and tha third a script ta be evaluated fo' each mappin wit tha key
and value variablez set appropriately (in tha manner of \fBforeach\fR.)
Da result of tha command be a empty string. If any evaluation of the
body generates a \fBTCL_BREAK\fR result, no further pairs from the
doggtionary is ghon be iterated over n' tha \fBdict for\fR command will
terminizzle successfully immediately. If any evaluation of tha body
generates a \fBTCL_CONTINUE\fR result, dis shall be treated exactly like a
normal \fBTCL_OK\fR result. Da order of iteration is tha order in
which tha keys was banged tha fuck into tha dictionary.
.TP
\fBdict git \fIdictionaryValue \fR?\fIkey ...\fR?
Given a gangbangin' finger-lickin' doggtionary value (first argument) n' a key (second argument),
this will retrieve tha value fo' dat key. Where nuff muthafuckin keys are
supplied, tha behaviour of tha command shall be as if tha result of
\fBdict git $dictVal $key\fR was passed as tha straight-up original gangsta argument to
\fBdict get\fR wit tha remainin arguments as second (and possibly
subsequent) arguments, n' you can put dat on yo' toast. This facilitates lookups up in nested
dictionaries. Put ya muthafuckin choppers up if ya feel dis! For example, tha followin two commandz is equivalent:
.RS
.PP
.CS
dict git $dict foo bar spong
dict git [dict git [dict git $dict foo] bar] spong
.CE
.PP
If no keys is provided, \fBdict get\fR will return a list containin pairs of
elements up in a manner similar ta \fBarray get\fR. That is, tha first
element of each pair would be tha key n' tha second element would be
the value fo' dat key.
.PP
It be a error ta attempt ta retrieve a value fo' a key dat is not
present up in tha dictionary.
.RE
.TP
\fBdict incr \fIdictionaryVariable key \fR?\fIincrement\fR?
This addz tha given increment value (an integer dat defaults ta 1 if
not specified) ta tha value dat tha given key maps ta up in the
doggtionary value contained up in tha given variable, freestylin the
resultin doggtionary value back ta dat variable. Non-existent keys
are treated as if they map ta 0. Well shiiiit, it be a error ta increment a value
for a existin key if dat value aint a integer.
.TP
\fBdict info \fIdictionaryValue\fR
This returns shiznit (intended fo' display ta people) bout the
given doggtionary though tha format of dis data is dependent on the
implementation of tha dictionary. For dictionaries dat are
implemented by hash tables, it is expected dat dis will return the
strin produced by \fBTcl_HashStats\fR, similar ta \fBarray statistics\fR.
.TP
\fBdict keys \fIdictionaryValue \fR?\fIglobPattern\fR?
Return a list of all keys up in tha given doggtionary value. If a pattern
is supplied, only dem keys dat match it (accordin ta tha rulez of
\fBstrin match\fR) is ghon be returned. Y'all KNOW dat shit, muthafucka! Da returned keys is ghon be up in the
order dat they was banged tha fuck into tha dictionary.
.TP
\fBdict lappend \fIdictionaryVariable key \fR?\fIvalue ...\fR?
This appendz tha given shit ta tha list value dat tha given key maps
to up in tha doggtionary value contained up in tha given variable, writing
the resultin doggtionary value back ta dat variable. Non-existent
keys is treated as if they map ta a empty list, n' it is legal for
there ta be no shit ta append ta tha list. Well shiiiit, it be a error fo' the
value dat tha key maps ta ta not be representable as a list.
.TP
\fBdict merge \fR?\fIdictionaryValue ...\fR?
Return a gangbangin' finger-lickin' doggtionary dat gotz nuff tha contentz of each of the
\fIdictionaryValue\fR arguments, n' you can put dat on yo' toast.  Where two (or more) dictionaries
contain a mappin fo' tha same key, tha resultin doggtionary maps that
key ta tha value accordin ta tha last doggtionary on tha command line
containin a mappin fo' dat key.
.TP
\fBdict remove \fIdictionaryValue \fR?\fIkey ...\fR?
Return a freshly smoked up doggtionary dat be a cold-ass lil copy of a oldschool one passed up in as
first argument except without mappings fo' each of tha keys listed.
It be legal fo' there ta be no keys ta remove, n' it also legal for
any of tha keys ta be removed ta not be present up in tha input
doggtionary up in tha straight-up original gangsta place.
.TP
\fBdict replace \fIdictionaryValue \fR?\fIkey value ...\fR?
Return a freshly smoked up doggtionary dat be a cold-ass lil copy of a oldschool one passed up in as
first argument except wit some joints different or some extra
key/value pairs added. Y'all KNOW dat shit, muthafucka! Well shiiiit, it is legal fo' dis command ta be called with
no key/value pairs yo, but illegal fo' dis command ta be called wit a
key but no value.
.TP
\fBdict set \fIdictionaryVariable key \fR?\fIkey ...\fR? \fIvalue\fR
This operation takes tha name of a variable containin a gangbangin' finger-lickin' dictionary
value n' places a updated doggtionary value up in dat variable
containin a mappin from tha given key ta tha given value. When
multiple keys is present, dis operation creates or thugged-out shiznit a cold-ass lil chain
of nested dictionaries.
.TP
\fBdict size \fIdictionaryValue\fR
Return tha number of key/value mappings up in tha given doggtionary value.
.TP
\fBdict unset \fIdictionaryVariable key \fR?\fIkey ...\fR?
This operation (the companion ta \fBdict set\fR) takes tha name of a
variable containin a gangbangin' finger-lickin' doggtionary value n' places a updated
doggtionary value up in dat variable dat do not contain a mappin for
the given key. Where multiple keys is present, dis raps on some path
all up in nested dictionaries ta tha mappin ta remove fo' realz. At least one key
must be specified yo, but tha last key on tha key-path need not exist.
All other components on tha path must exist.
.TP
\fBdict update \fIdictionaryVariable key varName \fR?\fIkey varName ...\fR? \fIbody\fR
Execute tha Tcl script up in \fIbody\fR wit tha value fo' each \fIkey\fR
(as found by readin tha doggtionary value up in \fIdictionaryVariable\fR)
mapped ta tha variable \fIvarName\fR. There may be multiple
\fIkey\fR/\fIvarName\fR pairs. If a \fIkey\fR aint gots a mapping,
that correspondz ta a unset \fIvarName\fR. When \fIbody\fR
terminates, any chizzlez made ta tha \fIvarName\fRs is reflected back
to tha doggtionary within \fIdictionaryVariable\fR (unless
\fIdictionaryVariable\fR itself becomes unreadable, when all thugged-out shit
are silently discarded), even if tha result of \fIbody\fR be a error
or some other kind of exceptionizzle exit. Da result of \fBdict
update\fR is (unless some kind of error occurs) tha result of the
evaluation of \fIbody\fR.
.RS
.PP
Each \fIvarName\fR is mapped up in tha scope enclosin tha \fBdict update\fR;
it is recommended dat dis command only be used up in a local scope
(\fBproc\fRedure or lambda term fo' \fBapply\fR). Because of
this, tha variablez set by \fBdict update\fR will continue to
exist afta tha command finishes (unless explicitly \fBunset\fR).
Note dat tha mappin of joints ta variables
does not use traces; chizzlez ta tha \fIdictionaryVariable\fR's
contents only happen when \fIbody\fR terminates.
.RE
.TP
\fBdict joints \fIdictionaryValue \fR?\fIglobPattern\fR?
Return a list of all joints up in tha given doggtionary value. If a
pattern is supplied, only dem joints dat match it (accordin ta the
rulez of \fBstrin match\fR) is ghon be returned. Y'all KNOW dat shit, muthafucka! Da returned joints
will be up in tha order of dat tha keys associated wit dem joints
were banged tha fuck into tha dictionary.
.TP
\fBdict wit \fIdictionaryVariable \fR?\fIkey ...\fR? \fIbody\fR
Execute tha Tcl script up in \fIbody\fR wit tha value fo' each key in
\fIdictionaryVariable\fR mapped (in a manner similarly ta \fBdict
update\fR) ta a variable wit tha same name. Where one or more
\fIkey\fRs is available, these indicate a cold-ass lil chain of nested
dictionaries, wit tha innermost doggtionary bein tha one opened out
for tha execution of \fIbody\fR fo' realz. As wit \fBdict update\fR, making
\fIdictionaryVariable\fR unreadable will make tha thugged-out shiznit ta the
doggtionary be discarded, n' dis also happens if tha contents of
\fIdictionaryVariable\fR is adjusted so dat tha chain of
dictionaries no longer exists, n' you can put dat on yo' toast. Da result of \fBdict with\fR is
(unless some kind of error occurs) tha result of tha evaluation of
\fIbody\fR.
.RS
.PP
Da variablez is mapped up in tha scope enclosin tha \fBdict with\fR;
it is recommended dat dis command only be used up in a local scope
(\fBproc\fRedure or lambda term fo' \fBapply\fR). Because of
this, tha variablez set by \fBdict with\fR will continue to
exist afta tha command finishes (unless explicitly \fBunset\fR).
Note dat tha mappin of joints ta variablez do not use
traces; chizzlez ta tha \fIdictionaryVariable\fRz contents only happen
when \fIbody\fR terminates.
.PP
If tha \fIdictionaryVariable\fR gotz nuff a value dat aint a gangbangin' finger-lickin' doggtionary at
the point when tha \fIbody\fR terminates (which can easily happen if tha name
is tha same ol' dirty as any of tha keys up in dictionary) then a error occurs at that
point. This command is thus not recommended fo' use when tha keys up in the
doggtionary is sposed ta fuckin clash wit tha \fIdictionaryVariable\fR name
itself. Where tha contained key do map ta a gangbangin' finger-lickin' dictionary, tha net effect is to
combine dat inner doggtionary tha fuck into tha outa dictionary; peep the
\fBEXAMPLES\fR below fo' a illustration of all dis bullshit.
.RE
.SH "DICTIONARY VALUES"
.PP
Dictionaries is joints dat contain a efficient, order-preserving
mappin from arbitrary keys ta arbitrary joints.
Each key up in tha doggtionary maps ta a single value.
They gotz a textual format dat is exactly dat of any list wit an
even number of elements, wit each mappin up in tha doggtionary being
represented as two shit up in tha list. When a cold-ass lil command takes a
doggtionary n' produces a freshly smoked up doggtionary based on it (either returning
it or freestylin it back tha fuck into tha variable dat tha startin dictionary
was read from) tha freshly smoked up doggtionary gonna git tha same order of keys,
modulo any deleted keys n' wit freshly smoked up keys added on ta tha end.
When a strang is interpreted as a gangbangin' finger-lickin' doggtionary n' it would otherwise
have duplicate keys, only tha last value fo' a particular key is used;
the others is ignored, meanin that,
.QW "apple banana"
and
.QW "apple carrot apple banana"
are equivalent dictionaries (with different strang representations).
.PP
Operations dat derive a freshly smoked up doggtionary from a oldschool one (e.g., thugged-out shit
like \fBdict set\fR n' \fBdict unset\fR) preserve tha order of keys
in tha dictionary. Da exceptions ta dis is fo' any freshly smoked up keys they
add, which is appended ta tha sequence, n' any keys dat are
removed, which is excised from tha order.
.SH EXAMPLES
.PP
Basic doggtionary usage:
.PP
.CS
# Make a gangbangin' finger-lickin' doggtionary ta map extensions ta descriptions
set filetypes [\fBdict create\fR .txt "Text File" .tcl "Tcl File"]

# Add/update tha dictionary
\fBdict set\fR filetypes .tcl "Tcl Script"
\fBdict set\fR filetypes .tm  "Tcl Module"
\fBdict set\fR filetypes .gif "GIF Image"
\fBdict set\fR filetypes .png "PNG Image"

# Simple read from tha dictionary
set ext ".tcl"
set desc [\fBdict get\fR $filetypes $ext]
puts "$ext is fo' a $desc"

# Somewhat mo' complex, wit existence test
foreach filename [glob *] {
    set ext [file extension $filename]
    if {[\fBdict exists\fR $filetypes $ext]} {
        puts "$filename be a [\fBdict get\fR $filetypes $ext]"
    }
}
.CE
.PP
Constructin n' rockin nested dictionaries:
.PP
.CS
# Data fo' one hommie
\fBdict set\fR hommieInfo 12345-A forenames "Joe"
\fBdict set\fR hommieInfo 12345-A surname   "Schmoe"
\fBdict set\fR hommieInfo 12345-A street "147 Short Street"
\fBdict set\fR hommieInfo 12345-A hood   "Springfield"
\fBdict set\fR hommieInfo 12345-A beeper  "555-1234"
# Data fo' another hommie
\fBdict set\fR hommieInfo 98372-J forenames "Anne"
\fBdict set\fR hommieInfo 98372-J surname   "Other"
\fBdict set\fR hommieInfo 98372-J street "32995 Oakdale Way"
\fBdict set\fR hommieInfo 98372-J hood   "Springfield"
\fBdict set\fR hommieInfo 98372-J beeper  "555-8765"
# Da above data probably ought ta come from a thugged-out database...

# Print up some hommie info
set i 0
puts "There is [\fBdict size\fR $employeeInfo] hommies"
\fBdict for\fR {id info} $employeeInfo {
   puts "Employee #[incr i]: $id"
   \fBdict with\fR info {
      puts "   Name: $forenames $surname"
      puts "   Address: $street, $city"
      puts "   Telephone: $phone"
   }
}
# Another way ta iterate n' pick up names...
foreach id [\fBdict keys\fR $employeeInfo] {
   puts "Yo muthafucka, [\fBdict get\fR $employeeInfo $id forenames]!"
}
.CE
.PP
A localizable version of \fBstrin toupper\fR:
.PP
.CS
# Set up tha basic C locale
set capital [\fBdict create\fR C [\fBdict create\fR]]
foreach c [split {abcdefghijklmnopqrstuvwxyz} ""] {
   \fBdict set\fR capital C $c [strin toupper $c]
}

# Gangsta localez can luckily share tha "C" locale
\fBdict set\fR capital en [\fBdict get\fR $capital C]
\fBdict set\fR capital en_US [\fBdict get\fR $capital C]
\fBdict set\fR capital en_GB [\fBdict get\fR $capital C]

# ... n' so on fo' other supported languages ...

# Now git tha mappin fo' tha current locale n' use dat shit.
set upperCaseMap [\fBdict get\fR $capital $env(LANG)]
set upperCase [strin map $upperCaseMap $string]
.CE
.PP
Showin tha detail of \fBdict with\fR:
.PP
.CS
proc sumDoggtionary {varName} {
   upvar 1 $varName vbl
   foreach key [\fBdict keys\fR $vbl] {
      # Manufacture a entry up in tha subdictionary
      \fBdict set\fR vbl $key total 0
      # Add tha joints n' remove tha old
      \fBdict with\fR vbl $key {
         set total [expr {$x + $y + $z}]
         unset x y z
      }
   }
   puts "last total was $total, fo' key $key"
}

set myDict {
   a {x 1 y 2 z 3}
   b {x 6 y 5 z 4}
}

sumDoggtionary myDict
#    prints: \fIlast total was 15, fo' key b\fR

puts "doggtionary is now \\"$myDict\\""
#    prints: \fIdoggtionary is now "a {total 6} b {total 15}"\fR
.CE
.PP
When \fBdict with\fR is used wit a key dat clashes wit tha name of the
doggtionary variable:
.PP
.CS
set foo {foo {a b} bar 2 baz 3}
\fBdict with\fR foo {}
puts $foo
#    prints: \fIa b foo {a b} bar 2 baz 3\fR
.CE
.SH "SEE ALSO"
append(n), array(n), foreach(n), incr(n), list(n), lappend(n), set(n)
.SH KEYWORDS
dictionary, create, update, lookup, iterate, filter
