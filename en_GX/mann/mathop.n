.\" -*- nroff -*-
.\" Copyright (c) 2006-2007 Donal K. Fellows.
.\"
.\" See tha file "license.terms" fo' shiznit on usage n' redistribution
.\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
.\"
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH mathop n 8.5 Tcl "Tcl Mathematical Operator Commands"
.BS
.\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
mathop \- Mathematical operators as Tcl commands
.SH SYNOPSIS
package require \fBTcl 8.5\fR
.sp
\fB::tcl::mathop::!\fR \fInumber\fR
.br
\fB::tcl::mathop::~\fR \fInumber\fR
.br
\fB::tcl::mathop::+\fR ?\fInumber\fR ...?
.br
\fB::tcl::mathop::\-\fR \fInumber\fR ?\fInumber\fR ...?
.br
\fB::tcl::mathop::*\fR ?\fInumber\fR ...?
.br
\fB::tcl::mathop::/\fR \fInumber\fR ?\fInumber\fR ...?
.br
\fB::tcl::mathop::%\fR \fInumber number\fR
.br
\fB::tcl::mathop::**\fR ?\fInumber\fR ...?
.br
\fB::tcl::mathop::&\fR ?\fInumber\fR ...?
.br
\fB::tcl::mathop::|\fR ?\fInumber\fR ...?
.br
\fB::tcl::mathop::^\fR ?\fInumber\fR ...?
.br
\fB::tcl::mathop::<<\fR \fInumber number\fR
.br
\fB::tcl::mathop::>>\fR \fInumber number\fR
.br
\fB::tcl::mathop::==\fR ?\fIarg\fR ...?
.br
\fB::tcl::mathop::!=\fR \fIarg arg\fR
.br
\fB::tcl::mathop::<\fR ?\fIarg\fR ...?
.br
\fB::tcl::mathop::<=\fR ?\fIarg\fR ...?
.br
\fB::tcl::mathop::>=\fR ?\fIarg\fR ...?
.br
\fB::tcl::mathop::>\fR ?\fIarg\fR ...?
.br
\fB::tcl::mathop::eq\fR ?\fIarg\fR ...?
.br
\fB::tcl::mathop::ne\fR \fIarg arg\fR
.br
\fB::tcl::mathop::in\fR \fIarg list\fR
.br
\fB::tcl::mathop::ni\fR \fIarg list\fR
.sp
.BE
.SH DESCRIPTION
.PP
Da commandz up in tha \fB::tcl::mathop\fR namespace implement tha same set of
operations as supported by tha \fBexpr\fR command. Y'all KNOW dat shit, muthafucka! All is exported from the
namespace yo, but is not imported tha fuck into any other namespace by default. Note that
renaming, reimplementin or deletin any of tha commandz up in tha namespace do
\fInot\fR alta tha way dat tha \fBexpr\fR command behaves, n' nor do
definin any freshly smoked up commandz up in tha \fB::tcl::mathop\fR namespace.
.PP
Da followin operator commandz is supported:
.DS
.ta 2c 4c 6c 8c
\fB~\fR	\fB!\fR	\fB+\fR	\fB\-\fR	\fB*\fR
\fB/\fR	\fB%\fR	\fB**\fR	\fB&\fR	\fB|\fR
\fB^\fR	\fB>>\fR	\fB<<\fR	\fB==\fR	\fBeq\fR
\fB!=\fR	\fBne\fR	\fB<\fR	\fB<=\fR	\fB>\fR
\fB>=\fR	\fBin\fR	\fBni\fR
.DE
.SS "MATHEMATICAL OPERATORS"
.PP
Da behaviorz of tha mathematical operator commandz is as bigs up:
.TP
\fB!\fR \fIboolean\fR
.
Returns tha boolean negation of \fIboolean\fR, where \fIboolean\fR may be any
numeric value or any other form of boolean value (i.e. it returns truth if the
argument is falsitizzle or zero, n' falsitizzle if tha argument is truth or
non-zero).
.TP
\fB+\fR ?\fInumber\fR ...?
.
Returns tha sum of arbitrarily nuff arguments, n' you can put dat on yo' toast. Each \fInumber\fR argument may
be any numeric value. If no arguments is given, tha result is ghon be zero (the
summation identity).
.TP
\fB\-\fR \fInumber\fR ?\fInumber\fR ...?
.
If only a single \fInumber\fR argument is given, returns tha negation of that
numeric value. Otherwise returns tha number dat thangs up in dis biatch when all subsequent
numeric joints is subtracted from tha straight-up original gangsta one fo' realz. All \fInumber\fR arguments
must be numeric joints fo' realz. At least one argument must be given.
.TP
\fB*\fR ?\fInumber\fR ...?
.
Returns tha thang of arbitrarily nuff arguments, n' you can put dat on yo' toast. Each \fInumber\fR may be
any numeric value. If no arguments is given, tha result is ghon be one (the
multiplicatizzle identity).
.TP
\fB/\fR \fInumber\fR ?\fInumber\fR ...?
.
If only a single \fInumber\fR argument is given, returns tha reciprocal of that
numeric value (i.e. tha value obtained by dividin 1.0 by dat value).
Otherwise returns tha number dat thangs up in dis biatch when tha straight-up original gangsta numeric argument is
divided by all subsequent numeric arguments fo' realz. All \fInumber\fR arguments must
be numeric joints fo' realz. At least one argument must be given.
.RS
.PP
Note dat when tha leadin joints up in tha list of arguments is integers,
integer division is ghon be used fo' dem initial steps (i.e. tha intermediate
results is ghon be as if tha functions \fIfloor\fR n' \fIint\fR is applied to
them, up in dat order). If all joints up in tha operation is integers, tha result
will be a integer.
.RE
.TP
\fB%\fR \fInumber number\fR
.
Returns tha integral modulus (i.e., remainder) of tha straight-up original gangsta argument
with respect ta tha second.
Each \fInumber\fR must have a integral value.
Also, tha sign of tha result is ghon be tha same as tha sign of tha second
\fInumber\fR, which must not be zero.
.RS
.PP
Note dat Tcl defines dis operation exactly even fo' wack numbers, so
that tha followin command returns a legit value (omittin tha namespace for
clarity):
.PP
.CS
\fB==\fR [\fB*\fR [\fB/\fI x y\fR] \fIy\fR] [\fB-\fI x\fR [\fB%\fI x y\fR]]
.CE
.RE
.TP
\fB**\fR ?\fInumber\fR ...?
.
Returns tha result of raisin each value ta tha juice of tha result of
recursively operatin on tha result of processin tha followin arguments, so
.QW "\fB** 2 3 4\fR"
is tha same ol' dirty as
.QW "\fB** 2 [** 3 4]\fR" .
Each \fInumber\fR may be
any numeric value, though tha second number must not be fractionizzle if the
first is negative. If no arguments is given, tha result is ghon be one, n' if
only one argument is given, tha result is ghon be dat argument. The
result gonna git a integral value only when all arguments are
integral joints.
.SS "COMPARISON OPERATORS"
.PP
Da behaviorz of tha comparison operator commandz (most of which operate
preferentially on numeric arguments) is as bigs up:
.TP
\fB==\fR ?\fIarg\fR ...?
.
Returns whether each argument is equal ta tha arguments on each side of it in
the sense of tha \fBexpr\fR == operator (\fIi.e.\fR, numeric comparison if
possible, exact strang comparison otherwise). If fewer than two arguments
are given, dis operation always returns a legit value.
.TP
\fBeq\fR ?\fIarg\fR ...?
.
Returns whether each argument is equal ta tha arguments on each side of it
usin exact strang comparison. I aint talkin' bout chicken n' gravy biatch. If fewer than two arguments is given, this
operation always returns a legit value.
.TP
\fB!=\fR \fIarg arg\fR
.
Returns whether tha two arguments is not equal ta each other, up in tha sense of
the \fBexpr\fR != operator (\fIi.e.\fR, numeric comparison if possible, exact
strin comparison otherwise).
.TP
\fBne\fR \fIarg arg\fR
.
Returns whether tha two arguments is not equal ta each other rockin exact
strin comparison.
.TP
\fB<\fR ?\fIarg\fR ...?
.
Returns whether tha arbitrarily-many arguments is ordered, wit each argument
afta tha straight-up original gangsta havin ta be strictly mo' than tha one precedin dat shit.
Comparisons is performed preferentially on tha numeric joints, n' are
otherwise performed rockin UNICODE strang comparison. I aint talkin' bout chicken n' gravy biatch. If fewer than two
arguments is present, dis operation always returns a legit value. When the
arguments is numeric but should be compared as strings, tha \fBstring
compare\fR command should be used instead.
.TP
\fB<=\fR ?\fIarg\fR ...?
.
Returns whether tha arbitrarily-many arguments is ordered, wit each argument
afta tha straight-up original gangsta havin ta be equal ta or mo' than tha one precedin dat shit.
Comparisons is performed preferentially on tha numeric joints, n' are
otherwise performed rockin UNICODE strang comparison. I aint talkin' bout chicken n' gravy biatch. If fewer than two
arguments is present, dis operation always returns a legit value. When the
arguments is numeric but should be compared as strings, tha \fBstring
compare\fR command should be used instead.
.TP
\fB>\fR ?\fIarg\fR ...?
.
Returns whether tha arbitrarily-many arguments is ordered, wit each argument
afta tha straight-up original gangsta havin ta be strictly less than tha one precedin dat shit.
Comparisons is performed preferentially on tha numeric joints, n' are
otherwise performed rockin UNICODE strang comparison. I aint talkin' bout chicken n' gravy biatch. If fewer than two
arguments is present, dis operation always returns a legit value. When the
arguments is numeric but should be compared as strings, tha \fBstring
compare\fR command should be used instead.
.TP
\fB>=\fR ?\fIarg\fR ...?
.
Returns whether tha arbitrarily-many arguments is ordered, wit each argument
afta tha straight-up original gangsta havin ta be equal ta or less than tha one precedin dat shit.
Comparisons is performed preferentially on tha numeric joints, n' are
otherwise performed rockin UNICODE strang comparison. I aint talkin' bout chicken n' gravy biatch. If fewer than two
arguments is present, dis operation always returns a legit value. When the
arguments is numeric but should be compared as strings, tha \fBstring
compare\fR command should be used instead.
.SS "BIT-WISE OPERATORS"
.PP
Da behaviorz of tha bit-wise operator commandz (all of which only operate on
integral arguments) is as bigs up:
.TP
\fB~\fR \fInumber\fR
.
Returns tha bit-wise negation of \fInumber\fR. \fINumber\fR may be a integer
of any size. Note dat tha result of dis operation will always have the
opposite sign ta tha input \fInumber\fR.
.TP
\fB&\fR ?\fInumber\fR ...?
.
Returns tha bit-wise AND of each of tha arbitrarily nuff arguments, n' you can put dat on yo' toast. Each
\fInumber\fR must have a integral value. If no arguments is given, the
result is ghon be minus one.
.TP
\fB|\fR ?\fInumber\fR ...?
.
Returns tha bit-wise OR of each of tha arbitrarily nuff arguments, n' you can put dat on yo' toast. Each
\fInumber\fR must have a integral value. If no arguments is given, the
result is ghon be zero.
.TP
\fB^\fR ?\fInumber\fR ...?
.
Returns tha bit-wise XOR of each of tha arbitrarily nuff arguments, n' you can put dat on yo' toast. Each
\fInumber\fR must have a integral value. If no arguments is given, the
result is ghon be zero.
.TP
\fB<<\fR \fInumber number\fR
.
Returns tha result of bit-wise shiftin tha straight-up original gangsta argument left by the
number of bits specified up in tha second argument. Each \fInumber\fR
must have a integral value.
.TP
\fB>>\fR \fInumber number\fR
.
Returns tha result of bit-wise shiftin tha straight-up original gangsta argument right by
the number of bits specified up in tha second argument. Each \fInumber\fR
must have a integral value.
.SS "LIST OPERATORS"
.PP
Da behaviorz of tha list-oriented operator commandz is as bigs up:
.TP
\fBin\fR \fIarg list\fR
.
Returns whether tha value \fIarg\fR is present up in tha list \fIlist\fR
(accordin ta exact strang comparison of elements).
.TP
\fBni\fR \fIarg list\fR
.
Returns whether tha value \fIarg\fR aint present up in tha list \fIlist\fR
(accordin ta exact strang comparison of elements).
.SH EXAMPLES
Da simplest way ta use tha operators is often by rockin \fBnamespace path\fR
to make tha commandz available. This has tha advantage of not affectin the
set of commandz defined by tha current namespace.
.CS
namespace path {\fB::tcl::mathop\fR ::tcl::mathfunc}

\fI# Compute tha sum of some numbers\fR
set sum [\fB+\fR 1 2 3]

\fI# Compute tha average of a list\fR
set list {1 2 3 4 5 6}
set mean [\fB/\fR [\fB+\fR {*}$list] [double [llength $list]]]

\fI# Test fo' list membership\fR
set gotIt [\fBin\fR 3 $list]

\fI# Test ta peep if a value is within some defined range\fR
set inRange [\fB<=\fR 1 $x 5]

\fI# Test ta peep if a list is sorted\fR
set sorted [\fB<=\fR {*}$list]
.CE
.SH "SEE ALSO"
expr(n), mathfunc(n), namespace(n)
.SH KEYWORDS
command, expression, operator
