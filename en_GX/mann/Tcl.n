'\"
'\" Copyright (c) 1993 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\"
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH Tcl n "8.5" Tcl "Tcl Built-In Commands"
.BS
.SH NAME
Tcl \- Tool Command Language
.SH SYNOPSIS
Summary of Tcl language syntax.
.BE
.SH DESCRIPTION
.PP
Da followin rulez define tha syntax n' semantics of tha Tcl language:
.IP "[1] \fBCommands.\fR"
A Tcl script be a strang containin one or mo' commands.
Semi-colons n' newlines is command separators unless quoted as
busted lyrics bout below.
Close brackets is command terminators durin command substitution
(see below) unless quoted.
.IP "[2] \fBEvaluation.\fR"
A command is evaluated up in two steps.
First, tha Tcl interpreta breaks tha command tha fuck into \fIwords\fR
and performs substitutions as busted lyrics bout below.
These substitutions is performed up in tha same way fo' all
commands.
Da first word is used ta locate a cold-ass lil command procedure to
carry up tha command, then all of tha lyrics of tha command are
passed ta tha command procedure.
Da command procedure is free ta interpret each of its lyrics
in any way it likes, like fuckin a integer, variable name, list,
or Tcl script.
Different commandz interpret they lyrics differently.
.IP "[3] \fBWords.\fR"
Lyrics of a cold-ass lil command is separated by white space (except for
newlines, which is command separators).
.IP "[4] \fBDouble quotes.\fR"
If tha straight-up original gangsta characta of a word is double-quote
.PQ \N'34'
then tha word is terminated by tha next double-quote character.
If semi-colons, close brackets, or white space characters
(includin newlines) step tha fuck up between tha quotes then they is treated
as ordinary charactas n' included up in tha word.
Command substitution, variable substitution, n' backslash substitution
are performed on tha charactas between tha quotes as busted lyrics bout below.
Da double-quotes is not retained as part of tha word.
.VS 8.5 br
.IP "[5] \fBArgument expansion.\fR"
If a word starts wit tha string
.QW {*}
followed by a non-whitespace character, then tha leading
.QW {*}
is removed n' tha rest of tha word is parsed n' substituted as any other
word. Y'all KNOW dat shit, muthafucka! Afta substitution, tha word is parsed as a list (without command or
variable substitutions; backslash substitutions is performed as be aiiight for
a list n' individual internal lyrics may be surrounded by either braces or
double-quote characters), n' its lyrics is added ta tha command being
substituted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. For instance,
.QW "cmd a {*}{b [c]} d {*}{$e f \N'34'g h\N'34'}"
is equivalent to
.QW "cmd a funky-ass b {[c]} d {$e} f \N'34'g h\N'34'" .
.VE 8.5
.IP "[6] \fBBraces.\fR"
If tha straight-up original gangsta characta of a word be a open brace
.PQ {
and rule [5] do not apply, then
the word is terminated by tha matchin close brace
.PQ } "" .
Braces nest within tha word: fo' each additionizzle open
brace there must be a additionizzle close brace (however,
if a open brace or close brace within tha word is
quoted wit a funky-ass backslash then it aint counted up in locatin the
matchin close brace).
No substitutions is performed on tha charactas between the
braces except fo' backslash-newline substitutions busted lyrics about
below, nor do semi-colons, newlines, close brackets,
or white space receive any special interpretation.
Da word will consist of exactly tha charactas between the
outa braces, not includin tha braces theyselves.
.IP "[7] \fBCommand substitution.\fR"
If a word gotz nuff a open bracket
.PQ [
then Tcl performs \fIcommand substitution\fR.
To do dis it invokes tha Tcl interpreta recursively ta process
the charactas followin tha open bracket as a Tcl script.
Da script may contain any number of commandz n' must be terminated
by a cold-ass lil close bracket
.PQ ] "" .
Da result of tha script (i.e. tha result of its last command) is
substituted tha fuck into tha word up in place of tha brackets n' all of the
charactas between em.
There may be any number of command substitutions up in a single word.
Command substitution aint performed on lyrics enclosed up in braces.
.IP "[8] \fBVariable substitution.\fR"
If a word gotz nuff a thugged-out dollar-sign
.PQ $
followed by one of tha forms
busted lyrics bout below, then Tcl performs \fIvariable
substitution\fR:  tha dollar-sign n' tha followin charactas are
replaced up in tha word by tha value of a variable.
Variable substitution may take any of tha followin forms:
.RS
.TP 15
\fB$\fIname\fR
\fIName\fR is tha name of a scalar variable;  tha name be a sequence
of one or mo' charactas dat is a letter, digit, underscore,
or namespace separators (two or mo' colons).
.TP 15
\fB$\fIname\fB(\fIindex\fB)\fR
\fIName\fR gives tha name of a array variable n' \fIindex\fR gives
the name of a element within dat array.
\fIName\fR must contain only letters, digits, underscores, and
namespace separators, n' may be a empty string.
Command substitutions, variable substitutions, n' backslash
substitutions is performed on tha charactaz of \fIindex\fR.
.TP 15
\fB${\fIname\fB}\fR
\fIName\fR is tha name of a scalar variable.  It may contain any
charactas whatsoever except fo' close braces.
.LP
There may be any number of variable substitutions up in a single word.
Variable substitution aint performed on lyrics enclosed up in braces.
.RE
.IP "[9] \fBBackslash substitution.\fR"
If a funky-ass backslash
.PQ \e
appears within a word then \fIbackslash substitution\fR occurs.
In all cases but dem busted lyrics bout below tha backslash is dropped and
the followin characta is treated as a ordinary
characta n' included up in tha word.
This allows charactas like fuckin double quotes, close brackets,
and dollar signs ta be included up in lyrics without triggering
special processing.
Da followin table lists tha backslash sequences dat are
handled specially, along wit tha value dat replaces each sequence.
.RS
.TP 7
\e\fBa\fR
Audible alert (bell) (0x7).
.TP 7
\e\fBb\fR
Backspace (0x8).
.TP 7
\e\fBf\fR
Form feed (0xc).
.TP 7
\e\fBn\fR
Newline (0xa).
.TP 7
\e\fBr\fR
Carriage-return (0xd).
.TP 7
\e\fBt\fR
Tab (0x9).
.TP 7
\e\fBv\fR
Vertical tab (0xb).
.TP 7
\e\fB<newline>\fIwhiteSpace\fR
.
A single space characta replaces tha backslash, newline, n' all spaces
and tabs afta tha newline.  This backslash sequence is unique up in dat it
is replaced up in a separate pre-pass before tha command is straight-up parsed.
This means dat it is ghon be replaced even when it occurs between braces,
and tha resultin space is ghon be treated as a word separator if it is not
in braces or quotes.
.TP 7
\e\e
Backslash
.PQ \e "" .
.TP 7
\e\fIooo\fR 
.
Da digits \fIooo\fR (one, two, or three of them) give a eight-bit octal 
value fo' tha Unicode characta dat is ghon be inserted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Da upper bitz of the
Unicode characta is ghon be 0.
.TP 7
\e\fBx\fIhh\fR 
.
Da hexadecimal digits \fIhh\fR give a eight-bit hexadecimal value fo' the
Unicode characta dat is ghon be inserted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Any number of hexadecimal digits
may be present; however, all but tha last two is ignored (the result is
always a one-byte quantity).  Da upper bitz of tha Unicode characta will
be 0.
.TP 7
\e\fBu\fIhhhh\fR 
.
Da hexadecimal digits \fIhhhh\fR (one, two, three, or four of them) give a
sixteen-bit hexadecimal value fo' tha Unicode characta dat will be
inserted.
.LP
Backslash substitution aint performed on lyrics enclosed up in braces,
except fo' backslash-newline as busted lyrics bout above.
.RE
.IP "[10] \fBComments.\fR"
If a hash character
.PQ #
appears at a point where Tcl is
expectin tha straight-up original gangsta characta of tha straight-up original gangsta word of a cold-ass lil command,
then tha hash characta n' tha charactas dat follow it, up
all up in tha next newline, is treated as a cold-ass lil comment n' ignored.
Da comment characta only has significizzle when it appears
at tha beginnin of a cold-ass lil command.
.IP "[11] \fBOrder of substitution.\fR"
Each characta is processed exactly once by tha Tcl interpreter
as part of bustin tha lyrics of a cold-ass lil command.
For example, if variable substitution occurs then no further
substitutions is performed on tha value of tha variable;  the
value is banged tha fuck into tha word verbatim.
If command substitution occurs then tha nested command is
processed entirely by tha recursive call ta tha Tcl interpreter;
no substitutions is performed before makin tha recursive
call n' no additionizzle substitutions is performed on tha result
of tha nested script.
.RS
.LP
Substitutions take place from left ta right, n' each substitution is
evaluated straight-up before attemptin ta evaluate tha next.  Thus, a
sequence like
.CS
set y [set x 0][incr x][incr x]
.CE
will always set tha variable \fIy\fR ta tha value, \fI012\fR.
.RE
.IP "[12] \fBSubstitution n' word boundaries.\fR"
Substitutions do not affect tha word boundariez of a cold-ass lil command,
except fo' argument expansion as specified up in rule [5].
For example, durin variable substitution tha entire value of
the variable becomes part of a single word, even if tha variable's
value gotz nuff spaces.
