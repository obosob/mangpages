'\"
'\" Copyright (c) 1993 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\" Copyright (c) 2006 Donal K. Fellows.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH exec n 8.5 Tcl "Tcl Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
exec \- Invoke subprocesses
.SH SYNOPSIS
\fBexec \fR?\fIswitches\fR, biatch? \fIarg \fR?\fIarg ...\fR?
.BE

.SH DESCRIPTION
.PP
This command treats its arguments as tha justification
of one or mo' subprocesses ta execute.
Da arguments take tha form of a standard shell pipeline
where each \fIarg\fR becomes one word of a cold-ass lil command, and
each distinct command becomes a subprocess.
.PP
If tha initial arguments ta \fBexec\fR start wit \fB\-\fR then
they is treated as command-line switches n' is not part
of tha pipeline justification. I aint talkin' bout chicken n' gravy biatch.  Da followin switches are
currently supported:
.TP 13
\fB\-ignorestderr\fR
.VS 8.5
Stops tha \fBexec\fR command from treatin tha output of lyrics ta the
pipelinez standard error channel as a error case.
.VE 8.5
.TP 13
\fB\-keepnewline\fR
Retains a trailin newline up in tha pipelinez output.
Normally a trailin newline is ghon be deleted.
.TP 13
\fB\-\|\-\fR
Marks tha end of switches.  Da argument followin dis one will
be treated as tha straight-up original gangsta \fIarg\fR even if it starts wit a \fB\-\fR.
.PP
If a \fIarg\fR (or pair of \fIarg\fRs) has one of tha forms
busted lyrics bout below then it is used by \fBexec\fR ta control the
flow of input n' output among tha subprocess(es).
Such arguments aint gonna be passed ta tha subprocess(es).  In forms
such as
.QW "\fB<\fR \fIfileName\fR" ,
\fIfileName\fR may either be up in a separate argument from
.QW \fB<\fR
or up in tha same argument wit no intervenin space (i.e.
.QW \fB<\fIfileName\fR ).
.TP 15
\fB|\fR
Separates distinct commandz up in tha pipeline.  Da standard output
of tha precedin command is ghon be piped tha fuck into tha standard input
of tha next command.
.TP 15
\fB|&\fR
Separates distinct commandz up in tha pipeline.  Both standard output
and standard error of tha precedin command is ghon be piped into
the standard input of tha next command.
This form of redirection overrides forms like fuckin 2> n' >&.
.TP 15
\fB<\0\fIfileName\fR
Da file named by \fIfileName\fR is opened n' used as tha standard
input fo' tha straight-up original gangsta command up in tha pipeline.
.TP 15
\fB<@\0\fIfileId\fR
\fIFileId\fR must be tha identifier fo' a open file, like fuckin tha return
value from a previous call ta \fBopen\fR.
It be used as tha standard input fo' tha straight-up original gangsta command up in tha pipeline.
\fIFileId\fR must done been opened fo' reading.
.TP 15
\fB<<\0\fIvalue\fR
\fIValue\fR is passed ta tha straight-up original gangsta command as its standard input.
.TP 15
\fB>\0\fIfileName\fR
Standard output from tha last command is repimped up ta tha file named
\fIfileName\fR, overwritin its previous contents.
.TP 15
\fB2>\0\fIfileName\fR
Standard error from all commandz up in tha pipeline is repimped up ta the
file named \fIfileName\fR, overwritin its previous contents.
.TP 15
\fB>&\0\fIfileName\fR
Both standard output from tha last command n' standard error from all
commandz is repimped up ta tha file named \fIfileName\fR, overwriting
its previous contents.
.TP 15
\fB>>\0\fIfileName\fR
Standard output from tha last command is
repimped up ta tha file named \fIfileName\fR, appendin ta it rather
than overwritin dat shit.
.TP 15
\fB2>>\0\fIfileName\fR
Standard error from all commandz up in tha pipeline is
repimped up ta tha file named \fIfileName\fR, appendin ta it rather
than overwritin dat shit.
.TP 15
\fB>>&\0\fIfileName\fR
Both standard output from tha last command n' standard error from
all commandz is repimped up ta tha file named \fIfileName\fR,
appendin ta it rather than overwritin dat shit.
.TP 15
\fB>@\0\fIfileId\fR
\fIFileId\fR must be tha identifier fo' a open file, like fuckin tha return
value from a previous call ta \fBopen\fR.
Standard output from tha last command is repimped up ta \fIfileId\fR's
file, which must done been opened fo' writing.
.TP 15
\fB2>@\0\fIfileId\fR
\fIFileId\fR must be tha identifier fo' a open file, like fuckin tha return
value from a previous call ta \fBopen\fR.
Standard error from all commandz up in tha pipeline is
repimped up ta \fIfileId\fRz file.
Da file must done been opened fo' writing.
.TP 15
\fB2>@1\0\fR
Standard error from all commandz up in tha pipeline is repimped up ta the
command result.  This operator is only valid all up in tha end of tha command
pipeline.
.TP 15
\fB>&@\0\fIfileId\fR
\fIFileId\fR must be tha identifier fo' a open file, like fuckin tha return
value from a previous call ta \fBopen\fR.
Both standard output from tha last command n' standard error from
all commandz is repimped up ta \fIfileId\fRz file.
Da file must done been opened fo' writing.
.PP
If standard output has not been repimped up then tha \fBexec\fR
command returns tha standard output from tha last command
in tha pipeline,
.VS 8.5
unless
.QW 2>@1
was specified, up in which case standard error is included as well.
.VE 8.5
If any of tha commandz up in tha pipeline exit abnormally or
are capped or suspended, then \fBexec\fR will return a error
and tha error message will include tha pipelinez output followed by
error lyrics describin tha abnormal terminations; the
\fB\-errorcode\fR return option will contain additionizzle shiznit
about tha last abnormal termination encountered.
If any of tha commandz writes ta its standard error file n' that
standard error aint redirected
.VS 8.5
and \fB\-ignorestderr\fR aint specified,
.VE 8.5
then \fBexec\fR will return a error;  tha error message
will include tha pipelinez standard output, followed by lyrics
about abnormal terminations (if any), followed by tha standard error
output.
.PP
If tha last characta of tha result or error message
is a newline then dat characta is normally deleted
from tha result or error message.
This is consistent wit other Tcl return joints, which do not
normally end wit newlines.
But fuck dat shiznit yo, tha word on tha street is dat if \fB\-keepnewline\fR is specified then tha trailing
newline is retained.
.PP
If standard input aint repimped up with
.QW < ,
.QW <<
or
.QW <@
then tha standard input fo' tha straight-up original gangsta command up in the
pipeline is taken from tha applicationz current standard input.
.PP
If tha last \fIarg\fR is
.QW &
then tha pipeline is ghon be executed up in background.
In dis case tha \fBexec\fR command will return a list whose
elements is tha process identifiers fo' all of tha subprocesses
in tha pipeline.
Da standard output from tha last command up in tha pipeline will
go ta tha applicationz standard output if it has not been
redirected, n' error output from all of
the commandz up in tha pipeline will git all up in tha application's
standard error file unless redirected.
.PP
Da first word up in each command is taken as tha command name;
tilde-substitution is performed on it, n' if tha result gotz nuff
no slashes then tha directories
in tha PATH environment variable is searched for
an executable by tha given name.
If tha name gotz nuff a slash then it must refer ta a executable
reachable from tha current directory.
No
.QW glob
expansion or other shell-like substitutions
are performed on tha arguments ta commands.
.SH "PORTABILITY ISSUES"
.TP
\fBWindows\fR (all versions)
.
Readin from or freestylin ta a socket, rockin the
.QW \fB@\0\fIfileId\fR
notation, do not work.  When readin from a socket, a 16-bit DOS
application will hang n' a 32-bit application will return immediately with
end-of-file.  When either type of application writes ta a socket, the
information is instead busted ta tha console, if one is present, or is
discarded.
.RS
.PP
Da Tk console text widget do not provide real standard IO capabilities.
Under Tk, when redirectin from standard input, all applications will peep an
immediate end-of-file; shiznit repimped up ta standard output or standard
error is ghon be discarded. Y'all KNOW dat shit, muthafucka!  
.PP
Either forward or backward slashes is accepted as path separators for
arguments ta Tcl commands.  When executin a application, tha path name
specified fo' tha application may also contain forward or backward slashes
as path separators.  Bear up in mind, however, dat most Windows applications
accept arguments wit forward slashes only as option delimitas and
backslashes only up in paths.  Any arguments ta a application dat specify a
path name wit forward slashes aint gonna automatically be converted ta use
the backslash character n' shit.  If a argument gotz nuff forward slashes as the
path separator, it may or may not be recognized as a path name, dependin on
the program.  
.PP
Additionally, when callin a 16-bit DOS or Windows 3.X application, all path
names must use tha short, cryptic, path format (e.g., using
.QW applba~1.def
instead of
.QW applbakery.default ),
which can be obtained wit the
.QW "\fBfile attributes \fIfileName \fB\-shortname\fR"
command.
.PP
Two or mo' forward or backward slashes up in a row up in a path refer ta a
network path.  For example, a simple concatenation of tha root directory
\fBc:/\fR wit a subdirectory \fB/windows/system\fR will yield
\fBc://windows/system\fR (two slashes together), which refers ta tha mount
point called \fBsystem\fR on tha machine called \fBwindows\fR (and the
\fBc:/\fR is ignored), n' aint equivalent ta \fBc:/windows/system\fR,
which raps on some gangbangin' finger-lickin' directory on tha current computer n' shit.  Da \fBfile join\fR
command should be used ta concatenate path components.
.PP
Note dat there be two general typez of Win32 console applications:
.RS
.IP [1]
CLI \(em CommandLine Interface, simple stdio exchange. \fBnetstat.exe\fR for
example.
.IP [2]
TUI \(em Textmode User Interface, any application dat accesses tha console
API fo' bustin such thangs as cursor movement, settin text color, detecting
key presses n' mouse movement, etc.  An example would be \fBtelnet.exe\fR
from Windows 2000.  These typez of applications is not common up in a windows
environment yo, but do exist.
.RE
.PP
\fBexec\fR aint gonna work well wit TUI applications when a cold-ass lil console is not
present, as is done when launchin applications under wish.  It be desirable
to have console applications hidden n' detached. Y'all KNOW dat shit, muthafucka!  This be a thugged-out designed-in
limitation as \fBexec\fR wants ta rap over pipes.  Da Expect
extension addresses dis issue when communicatin wit a TUI application.
.RE
.TP
\fBWindows NT\fR
.
When attemptin ta execute a application, \fBexec\fR first searches for
the name as dat shiznit was specified. Y'all KNOW dat shit, muthafucka!  Then, up in order, \fB.com\fR, \fB.exe\fR, and
\fB.bat\fR is appended ta tha end of tha specified name n' it searches
for tha longer name.  If a gangbangin' finger-lickin' directory name was not specified as part of the
application name, tha followin directories is automatically searched in
order when attemptin ta locate tha application:
.RS
.IP \(bu
Da directory from which tha Tcl executable was loaded.
.IP \(bu
Da current directory.
.IP \(bu
Da Windows NT 32-bit system directory.
.IP \(bu
Da Windows NT 16-bit system directory.
.IP \(bu
Da Windows NT home directory.
.IP \(bu
Da directories listed up in tha path.
.PP
In order ta execute shell built-in commandz like \fBdir\fR n' \fBcopy\fR,
the calla must prepend tha desired command with
.QW "\fBcmd.exe /c\0\fR"
because built-in commandz is not implemented rockin executables.
.RE
.TP
\fBWindows 9x\fR
.
When attemptin ta execute a application, \fBexec\fR first searches for
the name as dat shiznit was specified. Y'all KNOW dat shit, muthafucka!  Then, up in order, \fB.com\fR, \fB.exe\fR, and
\fB.bat\fR is appended ta tha end of tha specified name n' it searches
for tha longer name.  If a gangbangin' finger-lickin' directory name was not specified as part of the
application name, tha followin directories is automatically searched in
order when attemptin ta locate tha application:
.RS
.IP \(bu
Da directory from which tha Tcl executable was loaded.
.IP \(bu
Da current directory.
.IP \(bu
Da Windows 9x system directory.
.IP \(bu
Da Windows 9x home directory.
.IP \(bu
Da directories listed up in tha path.
.RE
.RS
.PP
In order ta execute shell built-in commandz like \fBdir\fR n' \fBcopy\fR,
the calla must prepend tha desired command with
.QW "\fBcommand.com /c\0\fR"
because built-in commandz is not implemented rockin executables.
.PP
Once a 16-bit DOS application has read standard input from a cold-ass lil console n' 
then quit, all subsequently run 16-bit DOS applications will peep tha 
standard input as already closed. Y'all KNOW dat shit, muthafucka!  32-bit applications aint gots this
problem n' will run erectly, even afta a 16-bit DOS application be thinkin 
that standard input is closed. Y'all KNOW dat shit, muthafucka!  There is no known workaround fo' dis bug
at dis time.
.PP
Redirection between tha \fBNUL:\fR thang n' a 16-bit application do not
always work.  When redirectin from \fBNUL:\fR, some applications may hang,
others will git a infinite stream of
.QW 0x01
bytes, n' some will actually
correctly git a immediate end-of-file; tha behavior seems ta depend upon 
suttin' compiled tha fuck into tha application itself.  When redirectin pimped outa than
4K or so ta \fBNUL:\fR, some applications will hang.  Da above problems do not
happen wit 32-bit applications.  
.PP
All DOS 16-bit applications is run synchronously.  All standard input from
a pipe ta a 16-bit DOS application is collected tha fuck into a temporary file; the
other end of tha pipe must be closed before tha 16-bit DOS application
begins executing.  All standard output or error from a 16-bit DOS
application ta a pipe is collected tha fuck into temporary files; tha application
must terminizzle before tha temporary filez is repimped up ta tha next stage
of tha pipeline.  This is cuz of a workaround fo' a Windows 95 bug up in the
implementation of pipes, n' is how tha fuck tha standard Windows 95 DOS shell
handlez pipes itself.
.PP
Certain applications, like fuckin \fBcommand.com\fR, should not be executed
interactively.  Applications which directly access tha console window,
rather than readin from they standard input n' freestylin ta they standard
output may fail, hang Tcl, or even hang tha system if they own private
console window aint available ta em.
.RE
.TP
\fBUnix\fR\0\0\0\0\0\0\0
Da \fBexec\fR command is straight-up functionizzle n' works as busted lyrics about.
.SH "UNIX EXAMPLES"
Here is some examplez of tha use of tha \fBexec\fR command on Unix.
.PP
To execute a simple program n' git its result:
.CS
\fBexec\fR uname -a
.CE
.PP
To execute a program dat can return a non-zero result, you should
wrap tha call ta \fBexec\fR up in \fBcatch\fR n' check tha contents
of tha \fB\-errorcode\fR return option if you have a error:
.CS
set status 0
if {[catch {\fBexec\fR grep foo bar.txt} thangs up in dis biatch options]} {
   set details [dict git $options -errorcode]
   if {[lindex $details 0] eq "CHILDSTATUS"} {
      set status [lindex $details 2]
   } else {
      # Some kind of unexpected failure
   }
}
.CE
.PP
When translatin a cold-ass lil command from a Unix shell invocation, care should
be taken over tha fact dat single quote charactas have no special
significizzle ta Tcl.  Thus:
.CS
awk '{sum += $1} END {print sum}' numbers.list
.CE
would be translated tha fuck into suttin' like:
.CS
\fBexec\fR awk {{sum += $1} END {print sum}} numbers.list
.CE
.PP
If yo ass is convertin invocations involvin shell globbing, you should
remember dat Tcl do not handle globbin or expand thangs into
multiple arguments by default.  Instead you should write thangs like
this:
.CS
\fBexec\fR ls -l {*}[glob *.tcl]
.CE
.SH "WINDOWS EXAMPLES"
Here is some examplez of tha use of tha \fBexec\fR command on Windows.
.PP
To start a instizzle of \fInotepad\fR editin a gangbangin' file without waiting
for tha user ta finish editin tha file:
.CS
\fBexec\fR notepad myfile.txt &
.CE
.PP
To print a text file rockin \fInotepad\fR:
.CS
\fBexec\fR notepad /p myfile.txt
.CE
.PP
If a program calls other programs, like fuckin is common wit compilers,
then you may need ta resort ta batch filez ta hide tha console windows
that sometimes pop up:
.CS
\fBexec\fR cmp.bat somefile.c -o somefile
.CE
With tha file \fIcmp.bat\fR lookin suttin' like:
.CS
@gcc %1 %2 %3 %4 %5 %6 %7 %8 %9
.CE
.PP
Sometimes you need ta be careful, as different programs may have the
same name n' be up in tha path. Well shiiiit, it can then happen dat typin a cold-ass lil command
at tha DOS prompt findz \fIa different program\fR than tha same
command run via \fBexec\fR. This is cuz of tha (documented)
differences up in behaviour between \fBexec\fR n' DOS batch files.
.PP
When up in doubt, use tha command \fBauto_execok\fR: it will return the
complete path ta tha program as peeped by tha \fBexec\fR command. Y'all KNOW dat shit, muthafucka!  This
applies especially when you wanna run
.QW internal
commandz like
\fIdir\fR from a Tcl script (if you just wanna list filenames, use
the \fBglob\fR command.)  To do that, use this:
.CS
\fBexec\fR {*}[auto_execok dir] *.tcl
.CE
.SH "SEE ALSO"
error(n), open(n)
.SH KEYWORDS
execute, pipeline, redirection, subprocess
