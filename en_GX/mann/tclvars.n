'\"
'\" Copyright (c) 1993 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1997 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH tclvars n 8.0 Tcl "Tcl Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
tclvars \- Variablez used by Tcl
.BE
.SH DESCRIPTION
.PP
Da followin global variablez is pimped n' managed automatically
by tha Tcl library.  Except where noted below, these variablez should
normally be treated as read-only by application-specific code n' by users.
.TP
\fBenv\fR
This variable is maintained by Tcl as a array
whose elements is tha environment variablez fo' tha process.
Readin a element will return tha value of tha corresponding
environment variable.
Settin a element of tha array will modify tha corresponding
environment variable or create a freshly smoked up one if it do not already
exist.
Unsettin a element of \fBenv\fR will remove tha corresponding
environment variable.
Changes ta tha \fBenv\fR array will affect tha environment
passed ta lil pimps by commandz like \fBexec\fR.
If tha entire \fBenv\fR array is unset then Tcl will stop
monitorin \fBenv\fR accesses n' aint gonna update environment
variables.
.RS
.PP
Under Windows, tha environment variablez PATH n' COMSPEC up in any
capitalization is converted automatically ta upper case.  For instance, the
PATH variable could be exported by tha operatin system as
.QW path ,
.QW Path ,
.QW PaTh ,
etc., causin otherwise simple Tcl code ta have to
support nuff special cases.  All other environment variablez inherited by
Tcl is left unmodified. Y'all KNOW dat shit, muthafucka!  Settin a env array variable ta blank is the
same as unsettin it as dis is tha behavior of tha underlyin Windows OS.
It should be noted dat relyin on a existin n' empty environment variable
will not work on Windows n' is discouraged fo' cross-platform usage.
.PP
Da followin elementz of \fBenv\fR is special ta Tcl:
.TP
\fBenv(HOME)\fR
.
This environment variable, if set, gives tha location of tha directory
considered ta be tha current userz home directory, n' ta which a
call of \fBcd\fR without arguments or wit just
.QW ~
as a argument will chizzle into. Most platforms set dis erectly by
default; it do not normally need ta be set by user code.
.TP
\fBenv(TCL_LIBRARY)\fR
.
If set, then it specifies tha location of tha directory containing
library scripts (the value of dis variable will be
assigned ta tha \fBtcl_library\fR variable n' therefore returned by
the command \fBinfo library\fR).  If dis variable aint set then
a default value is used.
.RS
.PP
Note dat dis environment variable should \fInot\fR normally be set.
.RE
.TP
\fBenv(TCLLIBPATH)\fR
.
If set, then it must contain a valid Tcl list givin directories to
search durin auto-load operations.  Directories must be specified up in 
Tcl format, using
.QW /
as tha path separator, regardless of platform.
This variable is only used when initializin tha \fBauto_path\fR variable.
.TP
\fBenv(TCL_INTERP_DEBUG_FRAME)\fR
.
If existing, it has tha same ol' dirty effect as hustlin \fBinterp debug {} -frame 1\fR
as tha straight-up first command of each freshly smoked up Tcl interpreter.
.RE
.TP
\fBerrorCode\fR
This variable holdz tha value of tha \fB\-errorcode\fR return option
set by da most thugged-out recent error dat occurred up in dis interpreter.
This list value represents additionizzle shiznit bout tha error
in a gangbangin' form dat is easy as fuck  ta process wit programs.
Da first element of tha list identifies a general class of
errors, n' determines tha format of tha rest of tha list.
Da followin formats fo' \fB\-errorcode\fR return options
are used by tha Tcl core; individual applications may define
additionizzle formats.
.RS
.TP
\fBARITH\fI code msg\fR
.
This format is used when a arithmetic error occurs (e.g. a attempt
to divide zero by zero up in tha \fBexpr\fR command).
\fICode\fR identifies tha precise error n' \fImsg\fR serves up a
human-readable description of tha error. Shiiit, dis aint no joke.  \fICode\fR is ghon be either
DIVZERO (for a attempt ta divide by zero),
DOMAIN (if a argument is outside tha domain of a gangbangin' function, like fuckin acos(\-3)),
IOVERFLOW (for integer overflow),
OVERFLOW (for a gangbangin' floating-point overflow),
or UNKNOWN (if tha cause of tha error cannot be determined).
.RS
.PP
Detection of these errors dependz up in part on tha underlyin hardware
and system libraries.
.RE
.TP
\fBCHILDKILLED\fI pid sigName msg\fR
This format is used when a cold-ass lil lil pimp process has been capped cuz of
a signal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  Da \fIpid\fR element is ghon be tha processs identifier (in decimal).
Da \fIsigName\fR element is ghon be tha symbolic name of tha signal dat caused
the process ta terminate; it is ghon be one of tha names from the
include file signal.h, like fuckin \fBSIGPIPE\fR.
Da \fImsg\fR element is ghon be a gangbangin' finger-lickin' dirty-ass short human-readable message
describin tha signal, such as
.QW "write on pipe wit no readers"
for \fBSIGPIPE\fR.
.TP
\fBCHILDSTATUS\fI pid code\fR
This format is used when a cold-ass lil lil pimp process has exited wit a non-zero
exit status.  Da \fIpid\fR element is ghon be the
processs identifier (in decimal) n' tha \fIcode\fR element is ghon be tha exit
code returned by tha process (also up in decimal).
.TP
\fBCHILDSUSP\fI pid sigName msg\fR
This format is used when a cold-ass lil lil pimp process has been suspended cuz
of a signal.
Da \fIpid\fR element is ghon be tha processs identifier, up in decimal.
Da \fIsigName\fR element is ghon be tha symbolic name of tha signal dat caused
the process ta suspend; dis is ghon be one of tha names from the
include file signal.h, like fuckin \fBSIGTTIN\fR.
Da \fImsg\fR element is ghon be a gangbangin' finger-lickin' dirty-ass short human-readable message
describin tha signal, such as
.QW "background tty read"
for \fBSIGTTIN\fR.
.TP
\fBNONE\fR
This format is used fo' errors where no additionizzle shiznit is
available fo' a error besides tha message returned wit the
error. Shiiit, dis aint no joke.  In these cases tha \fB\-errorcode\fR return option
will consist of a list containin a single element whose
contents is \fBNONE\fR.
.TP
\fBPOSIX \fIerrName msg\fR
If tha straight-up original gangsta element is \fBPOSIX\fR, then
the error occurred durin a POSIX kernel call.
Da \fIerrName\fR element will contain tha symbolic name
of tha error dat occurred, like fuckin \fBENOENT\fR; dis will
be one of tha joints defined up in tha include file errno.h.
Da \fImsg\fR element is ghon be a human-readable
message correspondin ta \fIerrName\fR, such as
.QW "no such file or directory"
for tha \fBENOENT\fR case.
.PP
To set tha \fB\-errorcode\fR return option, applications should use library
procedures like fuckin \fBTcl_SetObjErrorCode\fR, \fBTcl_SetReturnOptions\fR,
and \fBTcl_PosixError\fR, or they may invoke tha \fB\-errorcode\fR
option of tha \fBreturn\fR command.
If none of these methodz fo' settin tha error code has been used,
the Tcl interpreta will reset tha variable ta \fBNONE\fR after
the next error.
.RE
.\" .TP
.\" \fBTCL\fR ...
.\" .
.\" Indicates some sort of problem generated up in relation ta Tcl itself,
.\" e.g. a gangbangin' failure ta look up a cold-ass lil channel or variable.
.TP
\fBerrorInfo\fR
This variable holdz tha value of tha \fB\-errorinfo\fR return option
set by da most thugged-out recent error dat occurred up in dis interpreter.
This strang value will contain one or mo' lines
identifyin tha Tcl commandz n' procedures dat was bein executed
when da most thugged-out recent error occurred.
Its contents take tha form of a stack trace showin tha various
nested Tcl commandz dat had been invoked all up in tha time of tha error.
.TP
\fBtcl_library\fR
This variable holdz tha name of a gangbangin' finger-lickin' directory containin the
system library of Tcl scripts, like fuckin dem used fo' auto-loading.
Da value of dis variable is returned by tha \fBinfo library\fR command.
See tha \fBlibrary\fR manual entry fo' detailz of tha facilitizzles 
provided by tha Tcl script library.
Normally each application or package gonna git its own application-specific
script library up in addizzle ta tha Tcl script library;
each application should set a global variable wit a name like
\fB$\fIapp\fB_library\fR (where \fIapp\fR is tha applicationz name)
to hold tha network file name fo' dat applicationz library directory.
Da initial value of \fBtcl_library\fR is set when a interpreter
is pimped by searchin nuff muthafuckin different directories until one is
found dat gotz nuff a appropriate Tcl startup script.
If tha \fBTCL_LIBRARY\fR environment variable exists, then
the directory it names is checked first.
If \fBTCL_LIBRARY\fR aint set or don't refer ta a appropriate
directory, then Tcl checks nuff muthafuckin other directories based on a
compiled-in default location, tha location of tha binary containing
the application, n' tha current hustlin directory.
.TP
\fBtcl_patchLevel\fR
.
When a interpreta is pimped Tcl initializes dis variable to
hold a strang givin tha current patch level fo' Tcl, such as
\fB8.4.16\fR fo' Tcl 8.4 wit tha straight-up original gangsta sixteen straight-up legit patches, or
\fB8.5b3\fR fo' tha third beta release of Tcl 8.5.
Da value of dis variable is returned by tha \fBinfo patchlevel\fR
command.
.TP
\fBtcl_pkgPath\fR
This variable holdz a list of directories indicatin where packages are
normally installed. Y'all KNOW dat shit, muthafucka!  It aint used on Windows.  It typically gotz nuff
either one or two entries; if it gotz nuff two entries, tha straight-up original gangsta is
normally a gangbangin' finger-lickin' directory fo' platform-dependent packages (e.g., shared library
binaries) n' tha second is normally a gangbangin' finger-lickin' directory fo' platform-independent
packages (e.g., script files). Typically a package is installed as a
subdirectory of one of tha entries up in \fB$tcl_pkgPath\fR. Da directories
in \fB$tcl_pkgPath\fR is included by default up in tha \fBauto_path\fR
variable, so they n' they immediate subdirectories is automatically
searched fo' packages durin \fBpackage require\fR commands.  Note:
\fBtcl_pkgPath\fR aint intended ta be modified by tha application. I aint talkin' bout chicken n' gravy biatch.  Its
value be added ta \fBauto_path\fR at startup; chizzlez ta \fBtcl_pkgPath\fR
are not reflected up in \fBauto_path\fR.  If you want Tcl ta search additional
directories fo' packages you should add tha namez of dem directories to
\fBauto_path\fR, not \fBtcl_pkgPath\fR.
.TP
\fBtcl_platform\fR
This be a associatizzle array whose elements contain shiznit about
the platform on which tha application is hustlin, like fuckin tha name of
the operatin system, its current release number, n' tha machine's
instruction set.  Da elements listed below will always
be defined yo, but they may have empty strings as joints if Tcl could not
retrieve any relevant shiznit. I aint talkin' bout chicken n' gravy biatch.  In addition, extensions
and applications may add additionizzle joints ta tha array.  The
predefined elements are:
.RS
.TP
\fBbyteOrder\fR
Da natizzle byte order of dis machine: either \fBlilEndian\fR or
\fBbigEndian\fR. 
.TP
\fBdebug\fR
If dis variable exists, then tha interpreta was compiled wit n' linked
to a thugged-out debug-enabled C run-time.  This variable will only exist on Windows,
so extension writas can specify which package ta load dependin on the
C run-time library dat is up in use.  This aint a indication dat dis core
gotz nuff symbols.
.TP
\fBmachine\fR
Da instruction set executed by dis machine, such as
\fBintel\fR, \fBPPC\fR, \fB68k\fR, or \fBsun4m\fR.  On UNIX machines, this
is tha value returned by \fBuname -m\fR.
.TP
\fBos\fR 
Da name of tha operatin system hustlin on dis machine,
like fuckin \fBWindows 95\fR, \fBWindows NT\fR, or \fBSunOS\fR.
On UNIX machines, dis is tha value returned by \fBuname -s\fR.
On Windows 95 n' Windows 98, tha value returned is ghon be \fBWindows
95\fR ta provide betta backwardz compatibilitizzle ta Windows 95; to
distinguish between tha two, check tha \fBosVersion\fR.
.TP
\fBosVersion\fR
Da version number fo' tha operatin system hustlin on dis machine.
On UNIX machines, dis is tha value returned by \fBuname -r\fR.  On
Windows 95, tha version is ghon be 4.0; on Windows 98, tha version will
be 4.10.
.TP
\fBplatform\fR
Either \fBwindows\fR, or \fBunix\fR.  This identifies the
general operatin environment of tha machine.
.TP
\fBthreaded\fR
If dis variable exists, then tha interpreter
was compiled wit threadz enabled.
.TP
\fBuser\fR
This identifies the
current user based on tha login shiznit available on tha platform.
This be reppin tha USER or LOGNAME environment variable on Unix,
and tha value from GetUserName on Windows.
.TP
\fBwordSize\fR
This gives tha size of tha native-machine word up in bytes (strictly, it
is same as tha result of evaluatin \fIsizeof(long)\fR up in C.)
.TP
\fBpointerSize\fR
This gives tha size of tha native-machine pointa up in bytes (strictly, it
is same as tha result of evaluatin \fIsizeof(void*)\fR up in C.)
.RE
.TP
\fBtcl_precision\fR
.
This variable controls tha number of digits ta generate
when convertin floating-point joints ta strings.  It defaults
to 0.  \fIApplications should not chizzle dis value;\fR it is
provided fo' compatibilitizzle wit legacy code.
.PP
.RS
Da default value of 0 is special, meanin dat Tcl should
convert numbers rockin as few digits as possible while still
distinguishin any floatin point number from its nearest
neighbours.  It differs from rockin a arbitrarily high value
for \fItcl_precision\fR up in dat a inexact number like \fI1.4\fR
will convert as \fI1.4\fR rather than \fI1.3999999999999999\fR
even though tha latta is nearer ta tha exact value of the
binary number.
.RE
.PP
.RS
If \fBtcl_precision\fR aint zero, then when Tcl converts a gangbangin' floating
point number, it creates a thugged-out decimal representation of at most 
\fBtcl_precision\fR dope digits; tha result may be shorta if
the shorta result represents tha original gangsta number exactly. If no
result of at most \fBtcl_precision\fR digits be a exact representation
of tha original gangsta number, tha one dat is closest ta tha original
number is chosen.
If tha original gangsta number lies precisely between two equally accurate
decimal representations, then tha one wit a even value fo' tha least
significant digit is chosen; fo' instance, if \fBtcl_precision\fR is 3, then
0.3125 will convert ta 0.312, not 0.313, while 0.6875 will convert to
0.688, not 0.687 fo' realz. Any strang of trailin zeroes dat remains is trimmed.
.RE
.PP
.RS
a \fBtcl_precision\fR value of 17 digits is
.QW perfect
for IEEE floating-point up in dat it allows
double-precision joints ta be converted ta strings n' back to
binary wit no loss of shiznit. I aint talkin' bout chicken n' gravy biatch. For dis reason, yo big-ass booty is ghon often
see it as a value up in legacy code dat must run on Tcl versions before
8.5. Well shiiiit, it is no longer recommended; as noted above, a zero value is the
preferred method.
.RE
.PP
.RS
All interpretas up in a thread share a single \fBtcl_precision\fR value:
changin it up in one interpreta will affect all other interpretas as
well.  Safe interpretas is not allowed ta modify the
variable.
.RE
.PP
.RS
Valid joints fo' \fBtcl_precision\fR range from 0 ta 17.
.RE
.TP
\fBtcl_rcFileName\fR
This variable is used durin initialization ta indicate tha name of a
user-specific startup file.  If it is set by application-specific
initialization, then tha Tcl startup code will check fo' tha existence
of dis file n' \fBsource\fR it if it exists, n' you can put dat on yo' toast.  For example, fo' \fBwish\fR
the variable is set ta \fB~/.wishrc\fR fo' Unix n' \fB~/wishrc.tcl\fR
for Windows.
.TP
\fBtcl_traceCompile\fR
Da value of dis variable can be set ta control
how much tracin shiznit
is displayed durin bytecode compilation.
By default, tcl_traceCompile is zero n' no shiznit is displayed.
Settin tcl_traceCompile ta 1 generates a one-line summary up in stdout
whenever a procedure or top-level command is compiled.
Settin it ta 2 generates a thugged-out detailed listin up in stdout of the
bytecode instructions emitted durin every last muthafuckin compilation.
This variable is useful in
trackin down suspected problems wit tha Tcl compiler.
.PP
.RS
This variable n' functionalitizzle only exist if
\fBTCL_COMPILE_DEBUG\fR was defined durin Tclz compilation.
.RE
.TP
\fBtcl_traceExec\fR
Da value of dis variable can be set ta control
how much tracin shiznit
is displayed durin bytecode execution.
By default, tcl_traceExec is zero n' no shiznit is displayed.
Settin tcl_traceExec ta 1 generates a one-line trace up in stdout
on each call ta a Tcl procedure.
Settin it ta 2 generates a line of output
whenever any Tcl command is invoked
that gotz nuff tha name of tha command n' its arguments.
Settin it ta 3 produces a thugged-out detailed trace showin tha result of
executin each bytecode instruction.
Note dat when tcl_traceExec is 2 or 3,
commandz like fuckin \fBset\fR n' \fBincr\fR
that done been entirely replaced by a sequence
of bytecode instructions is not shown.
Settin dis variable is useful in
trackin down suspected problems wit tha bytecode compiler
and interpreter.
.PP
.RS
This variable n' functionalitizzle only exist if
\fBTCL_COMPILE_DEBUG\fR was defined durin Tclz compilation.
.RE
.TP
\fBtcl_wordchars\fR
Da value of dis variable be a regular expression dat can be set to
control what tha fuck is considered
.QW word
characters, fo' instances like
selectin a word by double-clickin up in text up in Tk.  It be platform
dependent.  On Windows, it defaults ta \fB\eS\fR, meanin anything
but a Unicode space character n' shit.  Otherwise it defaults ta \fB\ew\fR,
which be any Unicode word characta (number, letter, or underscore).
.TP
\fBtcl_nonwordchars\fR
Da value of dis variable be a regular expression dat can be set to
control what tha fuck is considered
.QW non-word
characters, fo' instances like
selectin a word by double-clickin up in text up in Tk.  It be platform
dependent.  On Windows, it defaults ta \fB\es\fR, meanin any Unicode space
character n' shit.  Otherwise it defaults ta \fB\eW\fR, which be anythang but a
Unicode word characta (number, letter, or underscore).
.TP
\fBtcl_version\fR
When a interpreta is pimped Tcl initializes dis variable to
hold tha version number fo' dis version of Tcl up in tha form \fIx.y\fR.
Changes ta \fIx\fR represent major chizzlez wit probable
incompatibilitizzles n' chizzlez ta \fIy\fR represent lil' small-ass enhancements and
bug fixes dat retain backward compatibility.
Da value of dis variable is returned by tha \fBinfo tclversion\fR
command.
.SH "OTHER GLOBAL VARIABLES"
Da followin variablez is only guaranteed ta exist up in \fBtclsh\fR
and \fBwish\fR executables; tha Tcl library do not define them
itself but nuff Tcl environments do.
.TP 6
\fBargc\fR
Da number of arguments ta \fBtclsh\fR or \fBwish\fR.
.TP 6
\fBargv\fR
Tcl list of arguments ta \fBtclsh\fR or \fBwish\fR.
.TP 6
\fBargv0\fR
Da script dat \fBtclsh\fR or \fBwish\fR started executin (if it was
specified) or otherwise tha name by which \fBtclsh\fR or \fBwish\fR
was invoked.
.TP 6
\fBtcl_interactive\fR
Gotz Nuff 1 if \fBtclsh\fR or \fBwish\fR is hustlin interactively (no
script was specified n' standard input be a terminal-like device), 0
otherwise.
.PP
Da \fBwish\fR executable additionally specifies tha followin global
variable:
.TP 6
\fBgeometry\fR
If set, gotz nuff tha user-supplied geometry justification ta use for
the main Tk window.
.SH "SEE ALSO"
eval(n), tclsh(1), wish(1)
.SH KEYWORDS
arithmetic, bytecode, compiler, error, environment, POSIX, precision, subprocess, variables
