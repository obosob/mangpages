'\"
'\" Copyright (c) 1990-1994 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH scrollbar n 4.1 Tk "Tk Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
scrollbar \- Smoke n' manipulate scrollbar widgets
.SH SYNOPSIS
\fBscrollbar\fR \fIpathName \fR?\fIoptions\fR?
.SO
\-activebackground	\-highlightcolor	\-repeatdelay
\-background	\-highlightthickness	\-repeatinterval
\-borderwidth	\-jump	\-takefocus
\-cursor	\-orient	\-troughcolor
\-highlightbackground	\-relief
.SE
.SH "WIDGET-SPECIFIC OPTIONS"
.OP \-activerelief activeRelief ActiveRelief
Specifies tha relief ta use when displayin tha element dat is
active, if any.
Elements other than tha actizzle element is always displayed with
a raised relief.
.OP \-command command Command
Specifies tha prefix of a Tcl command ta invoke ta chizzle tha view
in tha widget associated wit tha scrollbar. Shiiit, dis aint no joke.  When a user requests
a view chizzle by manipulatin tha scrollbar, a Tcl command is
invoked. Y'all KNOW dat shit, muthafucka!  Da actual command consistz of dis option followed by
additionizzle shiznit as busted lyrics bout later n' shit.  This option almost always has
a value like fuckin \fB.t xview\fR or \fB.t yview\fR, consistin of the
name of a widget n' either \fBxview\fR (if tha scrollbar is for
horizontal scrolling) or \fByview\fR (for vertical scrolling).
All scrollable widgets have \fBxview\fR n' \fByview\fR commands
that take exactly tha additionizzle arguments appended by tha scrollbar
as busted lyrics bout up in \fBSCROLLING COMMANDS\fR below.
.OP \-elementborderwidth elementBorderWidth BorderWidth
Specifies tha width of bordaz drawn round tha internal elements
of tha scrollbar (the two arrows n' tha slider).  Da value may
have any of tha forms aaight ta \fBTk_GetPixels\fR.
If dis value is less than zero, tha value of tha \fBborderWidth\fR
option is used up in its place.
.OP \-width width Width
Specifies tha desired narrow dimension of tha scrollbar window,
not includin 3-D border, if any.  For vertical
scrollbars dis is ghon be tha width n' fo' horizontal scrollbars
this is ghon be tha height.
Da value may have any of tha forms aaight ta \fBTk_GetPixels\fR.
.BE
.SH DESCRIPTION
.PP
Da \fBscrollbar\fR command creates a freshly smoked up window (given by the
\fIpathName\fR argument) n' make it tha fuck into a scrollbar widget.
Additionizzle options, busted lyrics bout above, may be specified on tha command
line or up in tha option database ta configure aspectz of tha scrollbar
like fuckin its colors, orientation, n' relief.
Da \fBscrollbar\fR command returns its \fIpathName\fR argument.
At tha time dis command is invoked, there must not exist a window
named \fIpathName\fR yo, but \fIpathName\fRz parent must exist.
.PP
A scrollbar be a widget dat displays two arrows, one at each end of
the scrollbar, n' a \fIslider\fR up in tha middle portion of the
scrollbar.
It serves up shiznit bout what tha fuck is visible up in a \fIassociated window\fR
that displays a thugged-out document of some sort (like fuckin a gangbangin' file bein edited or
a drawing).
Da posizzle n' size of tha slider indicate which portion of the
document is visible up in tha associated window.  For example, if the
slider up in a vertical scrollbar covers tha top third of tha area
between tha two arrows, it means dat tha associated window displays
the top third of its document.
.PP
Scrollbars can be used ta adjust tha view up in tha associated window
by clickin or draggin wit tha mouse.  See tha \fBBINDINGS\fR section
below fo' details.
.SH "ELEMENTS"
.PP
A scrollbar displays five elements, which is referred ta up in the
widget commandz fo' tha scrollbar:
.TP 10
\fBarrow1\fR
Da top or left arrow up in tha scrollbar.
.TP 10
\fBtrough1\fR
Da region between tha slider n' \fBarrow1\fR.
.TP 10
\fBslider\fR
Da rectangle dat indicates what tha fuck is visible up in tha associated widget.
.TP 10
\fBtrough2\fR
Da region between tha slider n' \fBarrow2\fR.
.TP 10
\fBarrow2\fR
Da bottom or right arrow up in tha scrollbar.
.SH "WIDGET COMMAND"
.PP
Da \fBscrollbar\fR command creates a freshly smoked up Tcl command whose
name is \fIpathName\fR.  This
command may be used ta invoke various
operations on tha widget.  It has tha followin general form:
.CS
\fIpathName option \fR?\fIarg arg ...\fR?
.CE
\fIOption\fR n' tha \fIarg\fRs
determine tha exact behavior of tha command. Y'all KNOW dat shit, muthafucka!  Da following
commandz is possible fo' scrollbar widgets:
.TP
\fIpathName \fBactivate \fR?\fIelement\fR?
Marks tha element indicated by \fIelement\fR as active, which
causes it ta be displayed as specified by tha \fBactiveBackground\fR
and \fBactiveRelief\fR options.
Da only element joints understood by dis command is \fBarrow1\fR,
\fBslider\fR, or \fBarrow2\fR.
If any other value is specified then no element of tha scrollbar
will be active.
If \fIelement\fR aint specified, tha command returns
the name of tha element dat is currently active, or a empty string
if no element be active.
.TP
\fIpathName \fBcget\fR \fIoption\fR
Returns tha current value of tha configuration option given
by \fIoption\fR.
\fIOption\fR may have any of tha joints accepted by tha \fBscrollbar\fR
command.
.TP
\fIpathName \fBconfigure\fR ?\fIoption\fR? ?\fIvalue option value ...\fR?
Query or modify tha configuration optionz of tha widget.
If no \fIoption\fR is specified, returns a list describin all of
the available options fo' \fIpathName\fR (see \fBTk_ConfigureInfo\fR for
information on tha format of dis list).  If \fIoption\fR is specified
with no \fIvalue\fR, then tha command returns a list describin the
one named option (this list is ghon be identical ta tha corresponding
sublist of tha value returned if no \fIoption\fR is specified).  If
one or mo' \fIoption\-value\fR pairs is specified, then tha command
modifies tha given widget option(s) ta have tha given value(s);  in
this case tha command returns a empty string.
\fIOption\fR may have any of tha joints accepted by tha \fBscrollbar\fR
command.
.TP
\fIpathName \fBdelta \fIdeltaX deltaY\fR
Returns a real number indicatin tha fractionizzle chizzle in
the scrollbar settin dat correspondz ta a given chizzle
in slider position. I aint talkin' bout chicken n' gravy biatch.  For example, if tha scrollbar is horizontal,
the result indicates how tha fuck much tha scrollbar settin must chizzle
to move tha slider \fIdeltaX\fR pixels ta tha right (\fIdeltaY\fR is
ignored up in dis case).
If tha scrollbar is vertical, tha result indicates how tha fuck much the
scrollbar settin must chizzle ta move tha slider \fIdeltaY\fR pixels
down. I aint talkin' bout chicken n' gravy biatch.  Da arguments n' tha result may be zero or negative.
.TP
\fIpathName \fBfraction \fIx y\fR
Returns a real number between 0 n' 1 indicatin where tha point
given by \fIx\fR n' \fIy\fR lies up in tha trough area of tha scrollbar.
Da value 0 correspondz ta tha top or left of tha trough, the
value 1 correspondz ta tha bottom or right, 0.5 correspondz to
the middle, n' so on.
\fIX\fR n' \fIy\fR must be pixel coordinates relatizzle ta tha scrollbar
widget.
If \fIx\fR n' \fIy\fR refer ta a point outside tha trough, tha closest
point up in tha trough is used.
.TP
\fIpathName \fBget\fR
Returns tha scrollbar settings up in tha form of a list whose
elements is tha arguments ta da most thugged-out recent \fBset\fR widget command.
.TP
\fIpathName \fBidentify\fR \fIx y\fR
Returns tha name of tha element under tha point given by \fIx\fR and
\fIy\fR (like fuckin \fBarrow1\fR), or a empty strang if tha point do
not lie up in any element of tha scrollbar.
\fIX\fR n' \fIy\fR must be pixel coordinates relatizzle ta tha scrollbar
widget.
.TP
\fIpathName \fBset\fR \fIfirst last\fR
This command is invoked by tha scrollbarz associated widget to
tell tha scrollbar bout tha current view up in tha widget.
Da command takes two arguments, each of which be a real fraction
between 0 n' 1.
Da fractions describe tha range of tha document dat is visible in
the associated widget.
For example, if \fIfirst\fR is 0.2 n' \fIlast\fR is 0.4, it means
that tha straight-up original gangsta part of tha document visible up in tha window is 20%
of tha way all up in tha document, n' tha last visible part is 40%
of tha way through.
.SH "SCROLLING COMMANDS"
.PP
When tha user interacts wit tha scrollbar, fo' example by dragging
the slider, tha scrollbar notifies tha associated widget dat it
must chizzle its view.
Da scrollbar make tha notification by evaluatin a Tcl command
generated from tha scrollbarz \fB\-command\fR option.
Da command may take any of tha followin forms.
In each case, \fIprefix\fR is tha contentz of the
\fB\-command\fR option, which probably has a gangbangin' form like \fB.t yview\fR
.TP
\fIprefix \fBmoveto \fIfraction\fR
\fIFraction\fR be a real number between 0 n' 1.
Da widget should adjust its view so dat tha point given
by \fIfraction\fR appears all up in tha beginnin of tha widget.
If \fIfraction\fR is 0 it refers ta tha beginnin of the
document.  1.0 refers ta tha end of tha document, 0.333
refers ta a point one-third of tha way all up in tha document,
and so on.
.TP
\fIprefix \fBscroll \fInumber \fBunits\fR
Da widget should adjust its view by \fInumber\fR units.
Da units is defined up in whatever way make sense fo' tha widget,
like fuckin charactas or lines up in a text widget.
\fINumber\fR is either 1, which means one unit should scroll off
the top or left of tha window, or \-1, which means dat one unit
should scroll off tha bottom or right of tha window.
.TP
\fIprefix \fBscroll \fInumber \fBpages\fR
Da widget should adjust its view by \fInumber\fR pages.
It be up ta tha widget ta define tha meanin of a page;  typically
it is slightly less than what tha fuck fits up in tha window, so dat there
is a slight overlap between tha oldschool n' freshly smoked up views.
\fINumber\fR is either 1, which means tha next page should
become visible, or \-1, which means dat tha previous page should
become visible.
.SH "OLD COMMAND SYNTAX"
.PP
In versionz of Tk before 4.0, tha \fBset\fR n' \fBget\fR widget
commandz used a gangbangin' finger-lickin' different form.
This form is still supported fo' backward compatibilitizzle yo, but it
is deprecated.
In tha oldschool command syntax, tha \fBset\fR widget command has the
followin form:
.TP
\fIpathName \fBset\fR \fItotalUnits windowUnits firstUnit lastUnit\fR
In dis form tha arguments is all integers.
\fITotalUnits\fR gives tha total size of tha object bein displayed up in the
associated widget.  Da meanin of one unit dependz on tha associated
widget;  fo' example, up in a text editor widget units might
correspond ta lines of
text.  \fIWindowUnits\fR indicates tha total number of units that
can fit up in tha associated window at one time.  \fIFirstUnit\fR
and \fIlastUnit\fR give tha indicez of tha straight-up original gangsta n' last units
currently visible up in tha associated window (zero correspondz ta the
first unit of tha object).
.LP
Under tha oldschool syntax tha \fBget\fR widget command returns a list
of four integers, consistin of tha \fItotalUnits\fR, \fIwindowUnits\fR,
\fIfirstUnit\fR, n' \fIlastUnit\fR joints from tha last \fBset\fR
widget command.
.PP
Da commandz generated by scrollbars also gotz a gangbangin' finger-lickin' different form
when tha oldschool syntax is bein used:
.TP
\fIprefix\fR \fIunit\fR
\fIUnit\fR be a integer dat indicates what tha fuck should step tha fuck up at
the top or left of tha associated widgetz window.
It has tha same ol' dirty meanin as tha \fIfirstUnit\fR n' \fIlastUnit\fR
arguments ta tha \fBset\fR widget command.
.LP
Da most recent \fBset\fR widget command determines whether or not
to use tha oldschool syntax.
If it is given two real arguments then tha freshly smoked up syntax will be
used up in tha future, n' if it is given four integer arguments then
the oldschool syntax is ghon be used.
.SH BINDINGS
Tk automatically creates class bindings fo' scrollbars dat give them
the followin default behavior.
If tha behavior is different fo' vertical n' horizontal scrollbars,
the horizontal behavior is busted lyrics bout up in parentheses.
.IP [1]
Pressin button 1 over \fBarrow1\fR causes tha view up in the
associated widget ta shift up (left) by one unit so dat the
document appears ta move down (right) one unit.
If tha button is held down, tha action auto-repeats.
.IP [2]
Pressin button 1 over \fBtrough1\fR causes tha view up in the
associated widget ta shift up (left) by one screenful so dat the
document appears ta move down (right) one screenful.
If tha button is held down, tha action auto-repeats.
.IP [3]
Pressin button 1 over tha slider n' draggin causes tha view
to drag wit tha slider.
If tha \fBjump\fR option is true, then tha view do not drag along
with tha slider;  it chizzlez only when tha mouse button is busted out.
.IP [4]
Pressin button 1 over \fBtrough2\fR causes tha view up in the
associated widget ta shift down (right) by one screenful so dat the
document appears ta move up (left) one screenful.
If tha button is held down, tha action auto-repeats.
.IP [5]
Pressin button 1 over \fBarrow2\fR causes tha view up in the
associated widget ta shift down (right) by one unit so dat the
document appears ta move up (left) one unit.
If tha button is held down, tha action auto-repeats.
.IP [6]
If button 2 is pressed over tha trough or tha slider, it sets
the view ta correspond ta tha mouse position;  draggin the
mouse wit button 2 down causes tha view ta drag wit tha mouse.
If button 2 is pressed over one of tha arrows, it causes the
same behavior as pressin button 1.
.IP [7]
If button 1 is pressed wit tha Control key down, then if the
mouse is over \fBarrow1\fR or \fBtrough1\fR tha view chizzles
to tha straight-up top (left) of tha document;  if tha mouse is over
\fBarrow2\fR or \fBtrough2\fR tha view chizzles
to tha straight-up bottom (right) of tha document;  if tha mouse is
anywhere else then tha button press has no effect.
.IP [8]
In vertical scrollbars tha Up n' Down keys have tha same behavior
as mouse clicks over \fBarrow1\fR n' \fBarrow2\fR, respectively.
In horizontal scrollbars these keys have no effect.
.IP [9]
In vertical scrollbars Control-Up n' Control-Down have tha same
behavior as mouse clicks over \fBtrough1\fR n' \fBtrough2\fR, respectively.
In horizontal scrollbars these keys have no effect.
.IP [10]
In horizontal scrollbars tha Up n' Down keys have tha same behavior
as mouse clicks over \fBarrow1\fR n' \fBarrow2\fR, respectively.
In vertical scrollbars these keys have no effect.
.IP [11]
In horizontal scrollbars Control-Up n' Control-Down have tha same
behavior as mouse clicks over \fBtrough1\fR n' \fBtrough2\fR, respectively.
In vertical scrollbars these keys have no effect.
.IP [12]
Da Prior n' Next keys have tha same behavior
as mouse clicks over \fBtrough1\fR n' \fBtrough2\fR, respectively.
.IP [13]
Da Home key adjusts tha view ta tha top (left edge) of tha document.
.IP [14]
Da End key adjusts tha view ta tha bottom (right edge) of tha document.
.SH EXAMPLE
Smoke a window wit a scrollable \fBtext\fR widget:
.CS
toplevel .tl
text .tl.t \-yscrollcommand {.tl.s set}
\fBscrollbar\fR .tl.s \-command {.tl.t yview}
grid .tl.t .tl.s \-sticky nsew
grid columnconfigure .tl 0 \-weight 1
grid rowconfigure .tl 0 \-weight 1
.CE
.SH "SEE ALSO"
ttk:scrollbar(n)
.SH KEYWORDS
scrollbar, widget
