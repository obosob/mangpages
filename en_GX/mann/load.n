'\"
'\" Copyright (c) 1995-1996 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH load n 7.5 Tcl "Tcl Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
load \- Load machine code n' initialize freshly smoked up commands
.SH SYNOPSIS
\fBload \fIfileName\fR
.br
\fBload \fIfileName packageName\fR
.br
\fBload \fIfileName packageName interp\fR
.BE

.SH DESCRIPTION
.PP
This command loadz binary code from a gangbangin' file tha fuck into the
applicationz address space n' calls a initialization procedure
in tha package ta incorporate it tha fuck into a interpreter n' shit.  \fIfileName\fR
is tha name of tha file containin tha code;  its exact form varies
from system ta system but on most systems it aint nuthin but a gangbangin' finger-lickin' dirty-ass shared library,
like fuckin a \fB.so\fR file under Solaris or a DLL under Windows.
\fIpackageName\fR is tha name of tha package, n' is used to
compute tha name of a initialization procedure.
\fIinterp\fR is tha path name of tha interpreta tha fuck into which ta load
the package (see tha \fBinterp\fR manual entry fo' details);
if \fIinterp\fR is omitted, it defaults ta the
interpreta up in which tha \fBload\fR command was invoked.
.PP
Once tha file has been loaded tha fuck into tha applicationz address space,
one of two initialization procedures is ghon be invoked up in tha freshly smoked up code.
Typically tha initialization procedure will add freshly smoked up commandz ta a
Tcl interpreter.
Da name of tha initialization procedure is determined by
\fIpackageName\fR n' whether or not tha target interpreter
is a safe one.  For aiiight interpretas tha name of tha initialization
procedure gonna git tha form \fIpkg\fB_Init\fR, where \fIpkg\fR
is tha same ol' dirty as \fIpackageName\fR except dat tha straight-up original gangsta letta is
converted ta upper case n' all other letters
are converted ta lower case.  For example, if \fIpackageName\fR is
\fBfoo\fR or \fBFOo\fR, tha initialization procedurez name will
be \fBFoo_Init\fR.
.PP
If tha target interpreta be a safe interpreter, then tha name
of tha initialization procedure is ghon be \fIpkg\fB_SafeInit\fR
instead of \fIpkg\fB_Init\fR.
Da \fIpkg\fB_SafeInit\fR function should be freestyled carefully, so dat it
initializes tha safe interpreta only wit partial functionalitizzle provided
by tha package dat is safe fo' use by untrusted code. For mo' shiznit
on Safe\-Tcl, peep tha \fBsafe\fR manual entry.
.PP
Da initialization procedure must match tha followin prototype:
.CS
typedef int Tcl_PackageInitProc(Tcl_Interp *\fIinterp\fR);
.CE
Da \fIinterp\fR argument identifies tha interpreta up in which the
package is ta be loaded. Y'all KNOW dat shit, muthafucka!  Da initialization procedure must return
\fBTCL_OK\fR or \fBTCL_ERROR\fR ta indicate whether or not it completed
successfully;  up in tha event of a error it should set tha interpreterz result
to point ta a error message.  Da result of tha \fBload\fR command
will be tha result returned by tha initialization procedure.
.PP
Da actual loadin of a gangbangin' file will only be done once fo' each \fIfileName\fR
in a application. I aint talkin' bout chicken n' gravy biatch.  If a given \fIfileName\fR is loaded tha fuck into multiple
interpreters, then tha straight-up original gangsta \fBload\fR will load tha code and
call tha initialization procedure;  subsequent \fBload\fRs will
call tha initialization procedure without loadin tha code again.
.VS 8.5
For Tcl versions lower than 8.5, it aint possible ta unload or reload a
package. From version 8.5 however, tha \fBunload\fR command allows tha unloading
of libraries loaded wit \fBload\fR, fo' libraries dat is aware of the
Tclz unloadin mechanism.
.VE 8.5
.PP
Da \fBload\fR command also supports packages dat is statically
linked wit tha application, if dem packages done been registered
by callin tha \fBTcl_StaticPackage\fR procedure.
If \fIfileName\fR be a empty string, then \fIpackageName\fR must
be specified.
.PP
If \fIpackageName\fR is omitted or specified as a empty string,
Tcl tries ta guess tha name of tha package.
This may be done differently on different platforms.
Da default guess, which is used on most UNIX platforms, is to
take tha last element of \fIfileName\fR, strip off tha first
three charactas if they is \fBlib\fR, n' use any following
alphabetic n' underline charactas as tha module name.
For example, tha command \fBload libxyz4.2.so\fR uses tha module
name \fBxyz\fR n' tha command \fBload bin/last.so {}\fR uses the
module name \fBlast\fR.
.PP
If \fIfileName\fR be a empty string, then \fIpackageName\fR must
be specified.
Da \fBload\fR command first searches fo' a statically loaded package
(one dat has been registered by callin tha \fBTcl_StaticPackage\fR
procedure) by dat name; if one is found, it is used.
Otherwise, tha \fBload\fR command searches fo' a thugged-out dynamically loaded
package by dat name, n' uses it if it is found. Y'all KNOW dat shit, muthafucka!  If several
different filez done been \fBload\fRed wit different versions of
the package, Tcl picks tha file dat was loaded first.
.SH "PORTABILITY ISSUES"
.TP
\fBWindows\fR\0\0\0\0\0
.
When a load fails with
.QW "library not found"
error, it be also possible
that a thugged-out dependent library was not found. Y'all KNOW dat shit, muthafucka!  To peep tha dependent libraries,
type
.QW "dumpbin -imports <dllname>"
in a DOS console ta peep what tha fuck tha library must import.
When loadin a DLL up in tha current directory, Windows will ignore
.QW ./
as a path specifier n' bust a search heuristic ta find tha DLL instead.
To avoid this, load tha DLL with:
.CS
\fBload\fR [file join [pwd] mylib.DLL]
.CE
.SH BUGS
.PP
If tha same file is \fBload\fRed by different \fIfileName\fRs, it will
be loaded tha fuck into tha processs address space multiple times.  The
behavior of dis varies from system ta system (some systems may
detect tha redundant loads, others may not).
.SH EXAMPLE
Da followin be a minimal extension:
.PP
.CS
#include <tcl.h>
#include <stdio.h>
static int fooCmd(ClientData clientData,
        Tcl_Interp *interp, int objc, Tcl_Obj *const objv[]) {
    printf("called wit %d arguments\en", objc);
    return TCL_OK;
}
int Foo_Init(Tcl_Interp *interp) {
    if (Tcl_InitStubs(interp, "8.1", 0) == NULL) {
	return TCL_ERROR;
    }
    printf("bustin foo command");
    Tcl_CreateObjCommand(interp, "foo", fooCmd, NULL, NULL);
    return TCL_OK;
}
.CE
.PP
When built tha fuck into a gangbangin' finger-lickin' dirty-ass shared/dynamic library wit a suitable name
(e.g. \fBfoo.dll\fR on Windows, \fBlibfoo.so\fR on Solaris n' Linux)
it can then be loaded tha fuck into Tcl wit tha following:
.PP
.CS
# Load tha extension
switch $tcl_platform(platform) {
   windows {
      \fBload\fR [file join [pwd] foo.dll]
   }
   unix {
      \fBload\fR [file join [pwd] libfoo[info sharedlibextension]]
   }
}

# Now execute tha command defined by tha extension
foo
.CE

.SH "SEE ALSO"
info sharedlibextension, Tcl_StaticPackage(3), safe(n)

.SH KEYWORDS
binary code, loading, safe interpreter, shared library
