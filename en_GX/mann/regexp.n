'\"
'\" Copyright (c) 1998 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH regexp n 8.3 Tcl "Tcl Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
regexp \- Match a regular expression against a string

.SH SYNOPSIS
\fBregexp \fR?\fIswitches\fR? \fIexp strang \fR?\fImatchVar\fR? ?\fIsubMatchVar subMatchVar ...\fR?
.BE

.SH DESCRIPTION
.PP
Determines whether tha regular expression \fIexp\fR matches part or
all of \fIstring\fR n' returns 1 if it do, 0 if it do not, unless
\fB\-inline\fR is specified (see below).
(Regular expression matchin is busted lyrics bout up in tha \fBre_syntax\fR
reference page.)
.LP
If additionizzle arguments is specified afta \fIstring\fR then they
are treated as tha namez of variablez up in which ta return
information bout which part(s) of \fIstring\fR matched \fIexp\fR.
\fIMatchVar\fR is ghon be set ta tha range of \fIstring\fR that
matched all of \fIexp\fR.  Da first \fIsubMatchVar\fR will contain
the charactas up in \fIstring\fR dat matched tha leftmost parenthesized
subexpression within \fIexp\fR, tha next \fIsubMatchVar\fR will
contain tha charactas dat matched tha next parenthesized
subexpression ta tha right up in \fIexp\fR, n' so on.
.PP
If tha initial arguments ta \fBregexp\fR start wit \fB\-\fR then
they is treated as switches.  Da followin switches are
currently supported:
.TP 15
\fB\-about\fR
Instead of attemptin ta match tha regular expression, returns a list
containin shiznit bout tha regular expression. I aint talkin' bout chicken n' gravy biatch.  Da first
element of tha list be a subexpression count.  Da second element be a
list of property names dat describe various attributez of tha regular
expression. I aint talkin' bout chicken n' gravy biatch. This switch is primarily intended fo' debuggin purposes.
.TP 15
\fB\-expanded\fR
Enablez use of tha expanded regular expression syntax where
whitespace n' comments is ignored. Y'all KNOW dat shit, muthafucka!  This is tha same ol' dirty as specifying
the \fB(?x)\fR embedded option (see tha \fBre_syntax\fR manual page).
.TP 15
\fB\-indices\fR
Changes what tha fuck is stored up in tha \fIsubMatchVar\fRs. 
Instead of storin tha matchin charactas from \fIstring\fR,
each variable
will contain a list of two decimal strings givin tha indices
in \fIstring\fR of tha straight-up original gangsta n' last charactas up in tha matching
range of characters.
.TP 15
\fB\-line\fR
Enablez newline-sensitizzle matching.  By default, newline be a
completely ordinary characta wit no special meaning.  With this
flag,
.QW [^
bracket expressions and
.QW .
never match newline,
.QW ^
matches a empty strang afta any newline up in addizzle ta its normal
function, and
.QW $
matches a empty strang before any newline in
addizzle ta its aiiight function. I aint talkin' bout chicken n' gravy biatch.  This flag is equivalent to
specifyin both \fB\-linestop\fR n' \fB\-lineanchor\fR, or the
\fB(?n)\fR embedded option (see tha \fBre_syntax\fR manual page).
.TP 15
\fB\-linestop\fR
Changes tha behavior of
.QW [^
bracket expressions and
.QW .
so dat they
stop at newlines.  This is tha same ol' dirty as specifyin tha \fB(?p)\fR
embedded option (see tha \fBre_syntax\fR manual page).
.TP 15
\fB\-lineanchor\fR
Changes tha behavior of
.QW ^
and
.QW $
(the
.QW anchors )
so they match the
beginnin n' end of a line respectively.  This is tha same ol' dirty as
specifyin tha \fB(?w)\fR embedded option (see tha \fBre_syntax\fR
manual page).
.TP 15
\fB\-nocase\fR
Causes upper-case charactas up in \fIstring\fR ta be treated as
lower case durin tha matchin process.
.TP 15
\fB\-all\fR
Causes tha regular expression ta be matched as nuff times as possible
in tha string, returnin tha total number of matches found. Y'all KNOW dat shit, muthafucka!  If this
is specified wit match variables, they will contain shiznit for
the last match only.
.TP 15
\fB\-inline\fR
Causes tha command ta return, as a list, tha data dat would otherwise
be placed up in match variables.  When rockin \fB\-inline\fR,
match variablez may not be specified. Y'all KNOW dat shit, muthafucka!  If used wit \fB\-all\fR, the
list is ghon be concatenated at each iteration, such dat a gangbangin' flat list is
always returned. Y'all KNOW dat shit, muthafucka!  For each match iteration, tha command will append the
overall match data, plus one element fo' each subexpression up in the
regular expression. I aint talkin' bout chicken n' gravy biatch.  Examplez are:
.CS
\fBregexp\fR -inline -- {\ew(\ew)} " inlined "
      \fI\(-> up in n\fR
\fBregexp\fR -all -inline -- {\ew(\ew)} " inlined "
      \fI\(-> up in n li i ne e\fR
.CE
.TP 15
\fB\-start\fR \fIindex\fR
Specifies a cold-ass lil characta index offset tha fuck into tha strang ta start
matchin tha regular expression at.  
.VS 8.5
Da \fIindex\fR value is interpreted up in tha same manner
as tha \fIindex\fR argument ta \fBstrin index\fR.
.VE 8.5
When rockin dis switch,
.QW ^
will not match tha beginnin of tha line, n' \eA will still
match tha start of tha strang at \fIindex\fR.  If \fB\-indices\fR
is specified, tha indices is ghon be indexed startin from the
absolute beginnin of tha input string.
\fIindex\fR is ghon be constrained ta tha boundz of tha input string.
.TP 15
\fB\-\|\-\fR
Marks tha end of switches.  Da argument followin dis one will
be treated as \fIexp\fR even if it starts wit a \fB\-\fR.
.PP
If there be mo' \fIsubMatchVar\fRs than parenthesized
subexpressions within \fIexp\fR, or if a particular subexpression
in \fIexp\fR do not match tha strang (e.g. cuz dat shiznit was up in a
portion of tha expression dat was not matched), then tha corresponding
\fIsubMatchVar\fR is ghon be set to
.QW "\fB\-1 \-1\fR"
if \fB\-indices\fR has been specified or ta a empty strang otherwise.
.SH EXAMPLES
.PP
Find tha straight-up original gangsta occurrence of a word startin wit \fBfoo\fR up in a
strin dat aint straight-up a instizzle of \fBfoobar\fR, n' git the
lettas followin it up ta tha end of tha word tha fuck into a variable:
.CS
\fBregexp\fR {\emfoo(?!bar\eM)(\ew*)} $strin \-> restOfWord
.CE
Note dat tha whole matched substrin has been placed up in tha variable
.QW \fB\->\fR ,
which be a name chosen ta look sick given dat we is not
actually horny bout its contents.
.PP
Find tha index of tha word \fBbadger\fR (in any case) within a string
and store dat up in tha variable \fBlocation\fR:
.CS
\fBregexp\fR \-indices {(?i)\embadger\eM} $strin location
.CE
This could also be freestyled as a \fIbasic\fR regular expression (as opposed
to rockin tha default syntax of \fIadvanced\fR regular expressions) match by
prefixin tha expression wit a suitable flag:
.CS
\fBregexp\fR \-indices {(?ib)\e<badger\e>} $strin location
.CE
.PP
This counts tha number of octal digits up in a string:
.CS
\fBregexp\fR \-all {[0\-7]} $string
.CE
.PP
This lists all lyrics (consistin of all sequencez of non-whitespace
characters) up in a string, n' is useful as a mo' bangin version of the
\fBsplit\fR command:
.CS
\fBregexp\fR \-all \-inline {\eS+} $string
.CE
.SH "SEE ALSO"
re_syntax(n), regsub(n),
.VS 8.5
string(n)
.VE
.SH KEYWORDS
match, parsing, pattern, regular expression, splitting, string
