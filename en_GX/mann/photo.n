'\"
'\" Copyright (c) 1994 Da Australian Nationizzle University
'\" Copyright (c) 1994-1997 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
'\" Author: Pizzle Mackerras (paulus@cs.anu.edu.au),
'\"	    Department of Computa Science,
'\"	    Australian Nationizzle University.
'\"
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH photo n 4.0 Tk "Tk Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
photo \- Full-color images
.SH SYNOPSIS
\fBimage create photo \fR?\fIname\fR, biatch? ?\fIoptions\fR?
.BE

.SH DESCRIPTION
.PP
A photo be a image whose pixels can display any color or be
transparent.  A photo image is stored internally up in full color (32
bits per pixel), n' is displayed rockin ditherin if necessary.  Image
data fo' a photo image can be obtained from a gangbangin' file or a string, or it
can be supplied from
C code all up in a procedural intercourse.  At present, only GIF n' PPM/PGM
formats is supported yo, but a intercourse exists ta allow additional
image file formats ta be added doggystyle.  A photo image is transparent
in regions where no image data has been supplied
or where it has been set transparent by tha \fBtransparency set\fR
subcommand.
.SH "CREATING PHOTOS"
.PP
Like all images, photos is pimped rockin tha \fBimage create\fR
command.
Photos support tha followin \fIoptions\fR:
.TP
\fB\-data \fIstring\fR
Specifies tha contentz of tha image as a string.  Da strang should
contain binary data or, fo' some formats, base64-encoded data (this is
currently guaranteed ta be supported fo' GIF images).  Da format of the
strin must be one of dem fo' which there be a image file format
handlez dat will accept strang data.  If both tha \fB\-data\fR
and \fB\-file\fR options is specified, tha \fB\-file\fR option takes
precedence.
.TP
\fB\-format \fIformat-name\fR
Specifies tha name of tha file format fo' tha data specified wit the
\fB\-data\fR or \fB\-file\fR option.
.TP
\fB\-file \fIname\fR
\fIname\fR gives tha name of a gangbangin' file dat is ta be read ta supply data
for tha photo image.  Da file format must be one of dem fo' which
there be a image file format handlez dat can read data.
.TP
\fB\-gamma \fIvalue\fR
Specifies dat tha flavas allocated fo' displayin dis image up in a
window should be erected fo' a non-linear display wit tha specified
gamma exponent value.  (Da intensitizzle produced by most
CRT displays be a juice function of tha input value, ta a good
approximation; gamma is tha exponent n' is typically round 2).
Da value specified must be pimped outa than zero.  Da default
value is one (no erection).  In general, joints pimped outa than one
will make tha image lighter, n' joints less than one will make it
darker.
.TP
\fB\-height \fInumber\fR
Specifies tha height of tha image, up in pixels.  This option is useful
primarily up in thangs where tha user wishes ta build up tha contents
of tha image piece by piece.  A value of zero (the default) allows the
image ta expand or shrink vertically ta fit tha data stored up in dat shit.
.TP
\fB\-palette \fIpalette-spec\fR
Specifies tha resolution of tha color cube ta be allocated for
displayin dis image, n' thus tha number of flavas used from the
colormapz of tha windows where it is displayed. Y'all KNOW dat shit, muthafucka!  The
\fIpalette-spec\fR strang may be either a single decimal number,
specifyin tha number of shadez of gray ta use, or three decimal
numbers separated by slashes (/), specifyin tha number of shades of
red, chronic n' blue ta use, respectively.  If tha straight-up original gangsta form (a single
number) is used, tha image is ghon be displayed up in monochrome (i.e.,
grayscale).
.TP
\fB\-width \fInumber\fR
Specifies tha width of tha image, up in pixels.    This option is useful
primarily up in thangs where tha user wishes ta build up tha contents
of tha image piece by piece.  A value of zero (the default) allows the
image ta expand or shrink horizontally ta fit tha data stored up in dat shit.
.SH "IMAGE COMMAND"
.PP
When a photo image is pimped, Tk also creates a freshly smoked up command
whose name is tha same ol' dirty as tha image.
This command may be used ta invoke various operations
on tha image.
It has tha followin general form:
.CS
\fIimageName option \fR?\fIarg arg ...\fR?
.CE
\fIOption\fR n' tha \fIarg\fRs
determine tha exact behavior of tha command.
.PP
Those options dat write data ta tha image generally expand tha size
of tha image, if necessary, ta accommodate tha data freestyled ta the
image, unless tha user has specified non-zero joints fo' the
\fB\-width\fR and/or \fB\-height\fR configuration options, up in which
case tha width and/or height, respectively, of tha image aint gonna be
changed.
.PP
Da followin commandz is possible fo' photo images:
.TP
\fIimageName \fBblank\fR
Blank tha image; dat is, set tha entire image ta have no data, so it
will be displayed as transparent, n' tha background of whatever
window it is displayed up in will show through.
.TP
\fIimageName \fBcget\fR \fIoption\fR
Returns tha current value of tha configuration option given
by \fIoption\fR.
\fIOption\fR may have any of tha joints accepted by the
\fBimage create photo\fR command.
.TP
\fIimageName \fBconfigure\fR ?\fIoption\fR, biatch? ?\fIvalue option value ...\fR?
Query or modify tha configuration options fo' tha image.
If no \fIoption\fR is specified, returns a list describin all of
the available options fo' \fIimageName\fR (see \fBTk_ConfigureInfo\fR for
information on tha format of dis list).  If \fIoption\fR is specified
with no \fIvalue\fR, then tha command returns a list describin the
one named option (this list is ghon be identical ta tha corresponding
sublist of tha value returned if no \fIoption\fR is specified).  If
one or mo' \fIoption\-value\fR pairs is specified, then tha command
modifies tha given option(s) ta have tha given value(s);  in
this case tha command returns a empty string.
\fIOption\fR may have any of tha joints accepted by the
\fBimage create photo\fR command.
.TP
\fIimageName \fBcopy\fR \fIsourceImage\fR ?\fIoption value(s) ...\fR?
Copies a region from tha image called \fIsourceImage\fR (which must
be a photo image) ta tha image called \fIimageName\fR, possibly with
pixel zoomin and/or subsampling.  If no options is specified, this
command copies tha whole of \fIsourceImage\fR tha fuck into \fIimageName\fR,
startin at coordinates (0,0) up in \fIimageName\fR.  Da following
options may be specified:
.RS
.TP
\fB\-from \fIx1 y1 x2 y2\fR
Specifies a rectangular sub-region of tha source image ta be copied.
(\fIx1,y1\fR) n' (\fIx2,y2\fR) specify diagonally opposite corners of
the rectangle.  If \fIx2\fR n' \fIy2\fR is not specified, the
default value is tha bottom-right corner of tha source image.  The
pixels copied will include tha left n' top edgez of tha specified
rectangle but not tha bottom or right edges.  If tha \fB\-from\fR
option aint given, tha default is tha whole source image.
.TP
\fB\-to \fIx1 y1 x2 y2\fR
Specifies a rectangular sub-region of tha destination image ta be
affected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  (\fIx1,y1\fR) n' (\fIx2,y2\fR) specify diagonally opposite
cornerz of tha rectangle.  If \fIx2\fR n' \fIy2\fR is not specified,
the default value is (\fIx1,y1\fR) plus tha size of tha source
region (afta subsamplin n' zooming, if specified).  If \fIx2\fR and
\fIy2\fR is specified, tha source region is ghon be replicated if
necessary ta fill tha destination region up in a tiled fashion.
.TP
\fB\-shrink\fR
Specifies dat tha size of tha destination image should be reduced, if
necessary, so dat tha region bein copied tha fuck into be all up in tha bottom-right
corner of tha image.  This option aint gonna affect tha width or height
of tha image if tha user has specified a non-zero value fo' the
\fB\-width\fR or \fB\-height\fR configuration option, respectively.
.TP
\fB\-zoom \fIx y\fR
Specifies dat tha source region should be magnified by a gangbangin' factor of
\fIx\fR up in tha X direction n' \fIy\fR up in tha Y direction. I aint talkin' bout chicken n' gravy biatch.  If \fIy\fR
is not given, tha default value is tha same ol' dirty as \fIx\fR.  With this
option, each pixel up in tha source image is ghon be expanded tha fuck into a funky-ass block
of \fIx\fR x \fIy\fR pixels up in tha destination image, all tha same
color. Shiiit, dis aint no joke.  \fIx\fR n' \fIy\fR must be pimped outa than 0.
.TP
\fB\-subsample \fIx y\fR
Specifies dat tha source image should be reduced up in size by using
only every last muthafuckin \fIx\fRth pixel up in tha X direction n' \fIy\fRth pixel in
the Y direction. I aint talkin' bout chicken n' gravy biatch.  Negatizzle joints will cause tha image ta be flipped
about tha Y or X axes, respectively.  If \fIy\fR aint given, the
default value is tha same ol' dirty as \fIx\fR.
.TP
\fB\-compositingrule \fIrule\fR
Specifies how tha fuck transparent pixels up in tha source image is combined with
the destination image.  When a cold-ass lil compositin rule of \fIoverlay\fR is
set, tha oldschool contentz of tha destination image is visible, as if the
source image was printed on a piece of transparent film n' placed
over tha top of tha destination. I aint talkin' bout chicken n' gravy biatch.  When a cold-ass lil compositin rule of \fIset\fR
is set, tha oldschool contentz of tha destination image is discarded and
the source image is used as-is.  Da default compositin rule is
\fIoverlay\fR.
.RE
.TP
\fIimageName \fBdata ?\fIoption value(s) ...\fR?
Returns image data up in tha form of a string. Da followin options
may be specified:
.RS
.TP
\fB\-background\fI color\fR
If tha color is specified, tha data aint gonna contain any transparency
information. I aint talkin' bout chicken n' gravy biatch. In all transparent pixels tha color is ghon be replaced by
the specified color.
.TP
\fB\-format\fI format-name\fR
Specifies tha name of tha image file format handlez ta be used.
Specifically, dis subcommand searches
for tha straight-up original gangsta handlez whose name matches a initial substrin of
\fIformat-name\fR n' which has tha capabilitizzle ta write a string
containin dis image data.
If dis option aint given, dis subcommand uses a gangbangin' format that
consistz of a list (one element per row) of lists (one element per
pixel/column) of flavas in
.QW \fB#\fIrrggbb\fR
format (where \fIrr\fR be a pair of hexadecimal digits fo' tha red
channel, \fIgg\fR fo' green, n' \fIbb\fR fo' blue).
.TP
\fB\-from \fIx1 y1 x2 y2\fR
Specifies a rectangular region of \fIimageName\fR ta be returned.
If only \fIx1\fR n' \fIy1\fR is specified, tha region
extendz from \fI(x1,y1)\fR ta tha bottom-right corner of
\fIimageName\fR.  If all four coordinates is given, they specify
diagonally opposite cornerz of tha rectangular region, includin x1,y1
and excludin x2,y2.  Da default, if dis option aint given, is the
whole image.
.TP
\fB\-grayscale\fR
If dis options is specified, tha data aint gonna contain color
information. I aint talkin' bout chicken n' gravy biatch fo' realz. All pixel data is ghon be transformed tha fuck into grayscale.
.RE
.TP
\fIimageName \fBget\fR \fIx y\fR
Returns tha color of tha pixel at coordinates (\fIx\fR,\fIy\fR) up in the
image as a list of three integers between 0 n' 255, representin the
red, chronic n' blue components respectively.
.TP
\fIimageName \fBput\fR \fIdata\fR ?\fIoption value(s) ...\fR?
Sets pixels up in \fI imageName\fR ta tha data specified up in \fIdata\fR.
This command first searches tha list of image file format handlezs for
a handlez dat can interpret tha data up in \fIdata\fR, n' then reads
the image encoded within tha fuck into \fIimageName\fR (the destination image).
If \fIdata\fR do not match any known format, a attempt ta interpret
it as a (top-to-bottom) list of scan-lines is made, wit each
scan-line bein a (left-to-right) list of pixel flavas (see
\fBTk_GetColor\fR fo' a thugged-out description of valid colors.)  Every scan-line
must be of tha same length.  Note dat when \fIdata\fR be a single
color name, yo ass is instructin Tk ta fill a rectangular region with
that color. Shiiit, dis aint no joke.  Da followin options may be specified:
.RS
.TP
\fB\-format \fIformat-name\fR
Specifies tha format of tha image data up in \fIdata\fR.
Specifically, only image file format handlezs whose names begin with
\fIformat-name\fR is ghon be used while searchin fo' a image data
format handlez ta read tha data.
.TP
\fB\-to \fIx1 y1\fR ?\fIx2 y2\fR?
Specifies tha coordinatez of tha top-left corner (\fIx1\fR,\fIy1\fR)
of tha region of \fIimageName\fR tha fuck into which tha image data will be
copied. Y'all KNOW dat shit, muthafucka!  Da default posizzle is (0,0).  If \fIx2\fR,\fIy2\fR is given
and \fIdata\fR aint big-ass enough ta cover tha rectangle specified by
this option, tha image data extracted is ghon be tiled so it covers the
entire destination rectangle.  Note dat if \fIdata\fR specifies a
single color value, then a region extendin ta tha bottom-right corner
represented by (\fIx2\fR,\fIy2\fR) is ghon be filled wit dat color.
.RE
.TP
\fIimageName \fBread\fR \fIfilename\fR ?\fIoption value(s) ...\fR?
Readz image data from tha file named \fIfilename\fR tha fuck into tha image.
This command first searches tha list of
image file format handlezs fo' a handlez dat can interpret tha data
in \fIfilename\fR, n' then readz tha image up in \fIfilename\fR into
\fIimageName\fR (the destination image).  Da followin options may be
specified:
.RS
.TP
\fB\-format \fIformat-name\fR
Specifies tha format of tha image data up in \fIfilename\fR.
Specifically, only image file format handlezs whose names begin with
\fIformat-name\fR is ghon be used while searchin fo' a image data
format handlez ta read tha data.
.TP
\fB\-from \fIx1 y1 x2 y2\fR
Specifies a rectangular sub-region of tha image file data ta be copied
to tha destination image.  If only \fIx1\fR n' \fIy1\fR are
specified, tha region extendz from (\fIx1,y1\fR) ta tha bottom-right
corner of tha image up in tha image file.  If all four coordinates are
specified, they specify diagonally opposite corners or tha region.
Da default, if dis option aint specified, is tha whole of the
image up in tha image file.
.TP
\fB\-shrink\fR
If dis option, tha size of \fIimageName\fR is ghon be reduced, if
necessary, so dat tha region tha fuck into which tha image file data is read
is all up in tha bottom-right corner of tha \fIimageName\fR.  This option
will not affect tha width or height of tha image if tha user has
specified a non-zero value fo' tha \fB\-width\fR or \fB\-height\fR
configuration option, respectively.
.TP
\fB\-to \fIx y\fR
Specifies tha coordinatez of tha top-left corner of tha region of
\fIimageName\fR tha fuck into which data from \fIfilename\fR is ta be read.
Da default is (0,0).
.RE
.TP
\fIimageName \fBredither\fR
Da ditherin algorithm used up in displayin photo images propagates
quantization errors from one pixel ta its neighbors.
If tha image data fo' \fIimageName\fR is supplied up in pieces, the
dithered image may not be exactly erect.  Normally tha difference is
not noticeable yo, but if it aint nuthin but a problem, dis command can be used to
recalculate tha dithered image up in each window where tha image is
displayed.
.TP
\fIimageName \fBtransparency \fIsubcommand ?arg arg ...?\fR
Allows examination n' manipulation of tha transparency shiznit in
the photo image.  Several subcommandz is available:
.RS
.TP
\fIimageName \fBtransparency git \fIx y\fR
Returns a funky-ass boolean indicatin if tha pixel at (\fIx\fR,\fIy\fR) is
transparent.
.TP
\fIimageName \fBtransparency set \fIx y boolean\fR
Makes tha pixel at (\fIx\fR,\fIy\fR) transparent if \fIboolean\fR is
true, n' make dat pixel opaque otherwise.
.RE
.TP
\fIimageName \fBwrite \fIfilename\fR ?\fIoption value(s) ...\fR?
Writes image data from \fIimageName\fR ta a gangbangin' file named \fIfilename\fR.
Da followin options may be specified:
.RS
.TP
\fB\-background\fI color\fR
If tha color is specified, tha data aint gonna contain any transparency
information. I aint talkin' bout chicken n' gravy biatch. In all transparent pixels tha color is ghon be replaced by
the specified color.
.TP
\fB\-format\fI format-name\fR
Specifies tha name of tha image file format handlez ta be used to
write tha data ta tha file.  Specifically, dis subcommand searches
for tha straight-up original gangsta handlez whose name matches a initial substrin of
\fIformat-name\fR n' which has tha capabilitizzle ta write a image
file.  If dis option aint given, dis subcommand uses tha first
handlez dat has tha capabilitizzle ta write a image file.
.TP
\fB\-from \fIx1 y1 x2 y2\fR
Specifies a rectangular region of \fIimageName\fR ta be freestyled ta the
image file.  If only \fIx1\fR n' \fIy1\fR is specified, tha region
extendz from \fI(x1,y1)\fR ta tha bottom-right corner of
\fIimageName\fR.  If all four coordinates is given, they specify
diagonally opposite cornerz of tha rectangular region. I aint talkin' bout chicken n' gravy biatch.  Da default,
if dis option aint given, is tha whole image.
.TP
\fB\-grayscale\fR
If dis options is specified, tha data aint gonna contain color
information. I aint talkin' bout chicken n' gravy biatch fo' realz. All pixel data is ghon be transformed tha fuck into grayscale.
.RE
.SH "IMAGE FORMATS"
.PP
Da photo image code is structured ta allow handlezs fo' additional
image file formats ta be added doggystyle.  Da photo image code maintains
a list of these handlezs.  Handlezs is added ta tha list by
registerin dem wit a cold-ass lil call ta \fBTk_CreatePhotoImageFormat\fR.  The
standard Tk distribution comes wit handlezs fo' PPM/PGM n' GIF formats,
which is automatically registered on initialization.
.PP
When readin a image file or processing
strin data specified wit tha \fB\-data\fR configuration option, the
photo image code invokes each handlez up in turn until one is
found dat fronts ta be able ta read tha data up in tha file or string.
Usually dis will find tha erect handlez yo, but if it do not, the
user may give a gangbangin' format name wit tha \fB\-format\fR option ta specify
which handlez ta use.  In fact tha photo image code will try them
handlezs whose names begin wit tha strang specified fo' the
\fB\-format\fR option (the comparison is case-insensitive).  For
example, if tha user specifies \fB\-format gif\fR, then a handlez
named GIF87 or GIF89 may be invoked yo, but a handlez
named JPEG may not (assumin dat such handlezs had been
registered).
.PP
When freestylin image data ta a gangbangin' file, tha processin of the
\fB\-format\fR option is slightly different: tha strang value given
for tha \fB\-format\fR option must begin wit tha complete name of the
axed handlez, n' may contain additionizzle shiznit following
that, which tha handlez can use, fo' example, ta specify which variant
to use of tha formats supported by tha handlez.
Note dat not all image handlezs may support freestylin transparency data
to a gangbangin' file, even where tha target image format do.
.SH "COLOR ALLOCATION"
.PP
When a photo image is displayed up in a window, tha photo image code
allocates flavas ta use ta display tha image n' dithers tha image, if
necessary, ta display a reasonable approximation ta tha image using
the flavas dat is available.  Da flavas is allocated as a cold-ass lil color
cube, dat is, tha number of flavas allocated is tha thang of the
number of shadez of red, chronic n' blue.
.PP
Normally, tha number of
colors allocated is chosen based on tha depth of tha window.  For
example, up in a 8-bit PseudoColor window, tha photo image code will
attempt ta allocate seven shadez of red, seven shadez of chronic and
four shadez of blue, fo' a total of 198 colors.  In a 1-bit StaticGray
(monochrome) window, it will allocate two colors, black n' white.  In
a 24-bit DirectColor or TrueColor window, it will allocate 256 shades
each of red, chronic n' blue.  Fortunately, cuz of tha way that
pixel joints can be combined up in DirectColor n' TrueColor windows,
this only requires 256 flavas ta be allocated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If not all of the
colors can be allocated, tha photo image code reduces tha number of
shadez of each primary color n' tries again.
.PP
Da user can exercise some control over tha number of flavas dat a
photo image uses wit tha \fB\-palette\fR configuration option. I aint talkin' bout chicken n' gravy biatch.  If
this option is used, it specifies tha maximum number of shades of
each primary color ta try ta allocate.  It can also be used ta force
the image ta be displayed up in shadez of gray, even on a cold-ass lil color display,
by givin a single number rather than three numbers separated by
slashes.
.SH CREDITS
.PP
Da photo image type was designed n' implemented by Pizzle Mackerras,
based on his wild lil' fuckin earlier photo widget n' some suggestions from
Jizzy Ousterhout.
.SH EXAMPLE
Load a image from a gangbangin' file n' tile it ta tha size of a window, which
is useful fo' producin a tiled background:
.CS
# These lines should be called once
\fBimage create photo\fR untiled \-file "theFile.ppm"
\fBimage create photo\fR tiled

# These lines should be called whenever .someWidget chizzles
# size; a <Configure> bindin is useful here
set width  [winfo width .someWidget]
set height [winfo height .someWidget]
tiled \fBcopy\fR untiled \-to 0 0 $width $height \-shrink
.CE

.SH "SEE ALSO"
image(n)

.SH KEYWORDS
photo, image, color
