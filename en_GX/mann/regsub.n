'\"
'\" Copyright (c) 1993 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\" Copyright (c) 2000 Scriptics Corporation.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH regsub n 8.3 Tcl "Tcl Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
regsub \- Perform substitutions based on regular expression pattern matching
.SH SYNOPSIS
\fBregsub \fR?\fIswitches\fR, biatch? \fIexp strang subSpec \fR?\fIvarName\fR?
.BE
.SH DESCRIPTION
.PP
This command matches tha regular expression \fIexp\fR against
\fIstring\fR,
and either copies \fIstring\fR ta tha variable whose name is
given by \fIvarName\fR or returns \fIstring\fR if \fIvarName\fR is not
present.
(Regular expression matchin is busted lyrics bout up in tha \fBre_syntax\fR
reference page.)
If there be a match, then while copyin \fIstring\fR ta \fIvarName\fR
(or ta tha result of dis command if \fIvarName\fR aint present)
the portion of \fIstring\fR that
matched \fIexp\fR is replaced wit \fIsubSpec\fR.
If \fIsubSpec\fR gotz nuff a
.QW &
or
.QW \e0 ,
then it is replaced up in tha substitution wit tha portion of
\fIstring\fR dat matched \fIexp\fR.
If \fIsubSpec\fR gotz nuff a
.QW \e\fIn\fR ,
where \fIn\fR be a gangbangin' finger-lickin' digit
between 1 n' 9, then it is replaced up in tha substitution with
the portion of \fIstring\fR dat matched tha \fIn\fR'th
parenthesized subexpression of \fIexp\fR.
Additionizzle backslashes may be used up in \fIsubSpec\fR ta prevent special
interpretation of
.QW & ,
.QW \e0 ,
.QW \e\fIn\fR
and backslashes.
Da use of backslashes up in \fIsubSpec\fR tendz ta interact badly
with tha Tcl parserz use of backslashes, so it is generally
safest ta enclose \fIsubSpec\fR up in braces if it includes
backslashes.
.LP
If tha initial arguments ta \fBregsub\fR start wit \fB\-\fR then
they is treated as switches.  Da followin switches are
currently supported:
.TP 10
\fB\-all\fR
All ranges up in \fIstring\fR dat match \fIexp\fR is found and
substitution is performed fo' each of these ranges.
Without dis switch only tha first
matchin range is found n' substituted.
If \fB\-all\fR is specified, then
.QW &
and
.QW \e\fIn\fR
sequences is handled fo' each substitution rockin tha shiznit
from tha correspondin match.
.TP 15
\fB\-expanded\fR
Enablez use of tha expanded regular expression syntax where
whitespace n' comments is ignored. Y'all KNOW dat shit, muthafucka!  This is tha same ol' dirty as specifying
the \fB(?x)\fR embedded option (see tha \fBre_syntax\fR manual page).
.TP 15
\fB\-line\fR
Enablez newline-sensitizzle matching.  By default, newline be a
completely ordinary characta wit no special meaning.  With dis flag,
.QW [^
bracket expressions and
.QW .
never match newline,
.QW ^
matches a empty strang afta any newline up in addizzle ta its normal
function, and
.QW $
matches a empty strang before any newline in
addizzle ta its aiiight function. I aint talkin' bout chicken n' gravy biatch.  This flag is equivalent to
specifyin both \fB\-linestop\fR n' \fB\-lineanchor\fR, or the
\fB(?n)\fR embedded option (see tha \fBre_syntax\fR manual page).
.TP 15
\fB\-linestop\fR
Changes tha behavior of
.QW [^
bracket expressions and
.QW .
so dat they
stop at newlines.  This is tha same ol' dirty as specifyin tha \fB(?p)\fR
embedded option (see tha \fBre_syntax\fR manual page).
.TP 15
\fB\-lineanchor\fR
Changes tha behavior of
.QW ^
and
.QW $
(the
.QW anchors )
so they match the
beginnin n' end of a line respectively.  This is tha same ol' dirty as
specifyin tha \fB(?w)\fR embedded option (see tha \fBre_syntax\fR
manual page).
.TP 10
\fB\-nocase\fR
Upper-case charactas up in \fIstring\fR is ghon be converted ta lower-case
before matchin against \fIexp\fR;  however, substitutions specified
by \fIsubSpec\fR use tha original gangsta unconverted form of \fIstring\fR.
.TP 10
\fB\-start\fR \fIindex\fR
Specifies a cold-ass lil characta index offset tha fuck into tha strang ta start
matchin tha regular expression at.  
.VS 8.5
Da \fIindex\fR value is interpreted up in tha same manner
as tha \fIindex\fR argument ta \fBstrin index\fR.
.VE 8.5
When rockin dis switch,
.QW ^
will not match tha beginnin of tha line, n' \eA will still
match tha start of tha strang at \fIindex\fR.
\fIindex\fR is ghon be constrained ta tha boundz of tha input string.
.TP 10
\fB\-\|\-\fR
Marks tha end of switches.  Da argument followin dis one will
be treated as \fIexp\fR even if it starts wit a \fB\-\fR.
.PP
If \fIvarName\fR is supplied, tha command returns a cold-ass lil count of the
number of matchin ranges dat was found n' replaced, otherwise the
strin afta replacement is returned.
See tha manual entry fo' \fBregexp\fR fo' details on tha interpretation
of regular expressions.
.SH EXAMPLES
.PP
Replace (in tha strang up in variable \fIstring\fR) every last muthafuckin instizzle of
\fBfoo\fR which be a word by itself wit \fBbar\fR:
.CS
\fBregsub\fR -all {\emfoo\eM} $strin bar string
.CE
or (usin the
.QW "basic regular expression"
syntax):
.CS
\fBregsub\fR -all {(?b)\e<foo\e>} $strin bar string
.CE
.PP
Insert double-quotes round tha straight-up original gangsta instizzle of tha word
\fBinteresting\fR, however it is capitalized.
.CS
\fBregsub\fR -nocase {\eyinteresting\ey} $strin {"&"} string
.CE
.PP
Convert all non-ASCII n' Tcl-significant charactas tha fuck into \eu escape
sequences by rockin \fBregsub\fR n' \fBsubst\fR up in combination:
.CS
# This RE is just a cold-ass lil characta class fo' almost every last muthafuckin thang "bad"
set RE {[][{};#\e\e\e$ \er\et\eu0080-\euffff]}

# Us thugs will substitute wit a gangbangin' fragment of Tcl script up in brackets
set substitution {[format \e\e\e\eu%04x [scan "\e\e&" %c]]}

# Now we apply tha substitution ta git a subst-strin that
# will big-ass up tha computationizzle partz of tha conversion. I aint talkin' bout chicken n' gravy biatch. Note
# dat newline is handled specially all up in \fBstrin map\fR since
# backslash-newline be a special sequence.
set quoted [subst [strin map {\en {\e\eu000a}} \e
        [\fBregsub\fR -all $RE $strin $substitution]]]
.CE
.SH "SEE ALSO"
regexp(n), re_syntax(n), subst(n),
.VS 8.5
string(n)
.VE
.SH KEYWORDS
match, pattern, quoting, regular expression, substitute
