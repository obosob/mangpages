'\"
'\" Copyright (c) 1996 Sun Microsystems, Inc.
'\" Copyright (c) 1998-2000 Ajuba Solutions.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH event n 8.3 Tk "Tk Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
event \- Miscellaneous event facilities: define virtual events n' generate events
.SH SYNOPSIS
\fBevent\fI option \fR?\fIarg arg ...\fR?
.BE
.SH DESCRIPTION
.PP
Da \fBevent\fR command serves up nuff muthafuckin facilitizzles fo' dealin with
window system events, like fuckin definin virtual events n' synthesizing
events, n' you can put dat on yo' toast.  Da command has nuff muthafuckin different forms, determined by the
first argument.  Da followin forms is currently supported:
.TP
\fBevent add <<\fIvirtual\fB>>\fI sequence \fR?\fIsequence ...\fR?
Associates tha virtual event \fIvirtual\fR wit tha physical
event sequence(s) given by tha \fIsequence\fR arguments, so that
the virtual event will trigger whenever any one of tha \fIsequence\fRs
occurs.
\fIVirtual\fR may be any strang value n' \fIsequence\fR may have
any of tha joints allowed fo' tha \fIsequence\fR argument ta the
\fBbind\fR command.
If \fIvirtual\fR be already defined, tha freshly smoked up physical event sequences
add ta tha existin sequences fo' tha event.
.TP
\fBevent delete <<\fIvirtual\fB>> \fR?\fIsequence\fR \fIsequence ...\fR?
Deletes each of tha \fIsequence\fRs from dem associated with
the virtual event given by \fIvirtual\fR.
\fIVirtual\fR may be any strang value n' \fIsequence\fR may have
any of tha joints allowed fo' tha \fIsequence\fR argument ta the
\fBbind\fR command.
Any \fIsequence\fRs not currently associated wit \fIvirtual\fR
are ignored.
If no \fIsequence\fR argument is provided, all physical event sequences
are removed fo' \fIvirtual\fR, so dat tha virtual event will not
trigger no mo'.
.TP
\fBevent generate \fIwindow event \fR?\fIoption value option value ...\fR?
Generates a window event n' arranges fo' it ta be processed just as if
it had come from tha window system.
\fIWindow\fR gives tha path name of tha window fo' which tha event
will be generated; it may also be a identifier (like fuckin returned by
\fBwinfo id\fR) as long as it is fo' a window up in tha current application.
\fIEvent\fR serves up a funky-ass basic description of
the event, like fuckin \fB<Shift-Button-2>\fR or \fB<<Paste>>\fR.
If \fIWindow\fR is empty tha whole screen is meant, n' coordinates
are relatizzle ta tha screen.
\fIEvent\fR may have any of tha forms allowed fo' tha \fIsequence\fR
argument of tha \fBbind\fR command except dat it must consist
of a single event pattern, not a sequence.
\fIOption-value\fR pairs may be used ta specify additional
attributez of tha event, like fuckin tha x n' y mouse position;  see
\fBEVENT FIELDS\fR below.  If tha \fB\-when\fR option aint specified, the
event is processed immediately:  all of tha handlezs fo' tha event
will complete before tha \fBevent generate\fR command returns.
If tha \fB\-when\fR option is specified then it determines when the
event is processed. Y'all KNOW dat shit, muthafucka!  Certain events, like fuckin key events, require
that tha window has focus ta receive tha event properly.
.TP
\fBevent info \fR?\fB<<\fIvirtual\fB>>\fR?
Returns shiznit bout virtual events.
If tha \fB<<\fIvirtual\fB>>\fR argument is omitted, tha return value
is a list of all tha virtual events dat is currently defined.
If \fB<<\fIvirtual\fB>>\fR is specified then tha return value is
a list whose elements is tha physical event sequences currently
defined fo' tha given virtual event;  if tha virtual event is
not defined then a empty strang is returned.
.RS
.PP
Note dat virtual events dat that is not bound ta physical event
sequences is \fInot\fR returned by \fBevent info\fR.
.RE
.SH "EVENT FIELDS"
.PP
Da followin options is supported fo' tha \fBevent generate\fR
command. Y'all KNOW dat shit, muthafucka!  These correspond ta the
.QW %
expansions allowed up in bindin scripts fo' tha \fBbind\fR command.
.TP
\fB\-above\fI window\fR
\fIWindow\fR specifies tha \fIabove\fR field fo' tha event,
either as a window path name or as a integer window id.
Valid fo' \fBConfigure\fR events.
Correspondz ta tha \fB%a\fR substitution fo' bindin scripts.
.TP
\fB\-borderwidth\fI size\fR
\fISize\fR must be a screen distance;  it specifies the
\fIborder_width\fR field fo' tha event.
Valid fo' \fBConfigure\fR events.
Correspondz ta tha \fB%B\fR substitution fo' bindin scripts.
.TP
\fB\-button\fI number\fR
\fINumber\fR must be a integer;  it specifies tha \fIdetail\fR field
for a \fBButtonPress\fR or \fBButtonRelease\fR event, overriding
any button  number provided up in tha base \fIevent\fR argument.
Correspondz ta tha \fB%b\fR substitution fo' bindin scripts.
.TP
\fB\-count\fI number\fR
\fINumber\fR must be a integer;  it specifies tha \fIcount\fR field
for tha event.  Valid fo' \fBExpose\fR events.
Correspondz ta tha \fB%c\fR substitution fo' bindin scripts.
.VS 8.5
.TP
\fB\-data\fI string\fR
\fIString\fR may be any value; it specifies tha \fIuser_data\fR field
for tha event.  Only valid fo' virtual events, n' you can put dat on yo' toast.  Correspondz ta the
\fB%d\fR substitution fo' virtual events up in bindin scripts.
.VE 8.5
.TP
\fB\-delta\fI number\fR
\fINumber\fR must be a integer;  it specifies tha \fIdelta\fR field
for tha \fBMouseWheel\fR event.  Da \fIdelta\fR refers ta the
direction n' magnitude tha mouse wheel was rotated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Note tha value
is not a screen distizzle but is unitz of motion up in tha mouse wheel.
Typically these joints is multiplez of 120.  For example, 120 should
scroll tha text widget up 4 lines n' \-240 would scroll tha text
widget down 8 lines.  Of course, other widgets may define different
behaviors fo' mouse wheel motion. I aint talkin' bout chicken n' gravy biatch.  This field correspondz ta the
\fB%D\fR substitution fo' bindin scripts.
.TP
\fB\-detail\fI detail\fR
\fIDetail\fR specifies tha \fIdetail\fR field fo' tha event
and must be one of tha following:
.RS
.DS
.ta 6c
\fBNotifyAncestor\fR	\fBNotifyNonlinearVirtual\fR
\fBNotifyDetailNone\fR	\fBNotifyPointer\fR
\fBNotifyInferior\fR	\fBNotifyPointerRoot\fR
\fBNotifyNonlinear\fR	\fBNotifyVirtual\fR
.DE
Valid fo' \fBEnter\fR, \fBLeave\fR, \fBFocusIn\fR and
\fBFocusOut\fR events.
Correspondz ta tha \fB%d\fR substitution fo' bindin scripts.
.RE
.TP
\fB\-focus\fI boolean\fR
\fIBoolean\fR must be a funky-ass boolean value;  it specifies tha \fIfocus\fR
field fo' tha event.
Valid fo' \fBEnter\fR n' \fBLeave\fR events.
Correspondz ta tha \fB%f\fR substitution fo' bindin scripts.
.TP
\fB\-height\fI size\fR
\fISize\fR must be a screen distance;  it specifies tha \fIheight\fR
field fo' tha event.  Valid fo' \fBConfigure\fR events.
Correspondz ta tha \fB%h\fR substitution fo' bindin scripts.
.TP
\fB\-keycode\fI number\fR
\fINumber\fR  must be a integer;  it specifies tha \fIkeycode\fR
field fo' tha event.
Valid fo' \fBKeyPress\fR n' \fBKeyRelease\fR events.
Correspondz ta tha \fB%k\fR substitution fo' bindin scripts.
.TP
\fB\-keysym\fI name\fR
\fIName\fR must be tha name of a valid keysym, like fuckin \fBg\fR,
\fBspace\fR, or \fBReturn\fR;  its corresponding
keycode value is used as tha \fIkeycode\fR field fo' event, overriding
any detail specified up in tha base \fIevent\fR argument.
Valid fo' \fBKeyPress\fR n' \fBKeyRelease\fR events.
Correspondz ta tha \fB%K\fR substitution fo' bindin scripts.
.TP
\fB\-mode\fI notify\fR
\fINotify\fR specifies tha \fImode\fR field fo' tha event n' must be
one of \fBNotifyNormal\fR, \fBNotifyGrab\fR, \fBNotifyUngrab\fR, or
\fBNotifyWhileGrabbed\fR.
Valid fo' \fBEnter\fR, \fBLeave\fR, \fBFocusIn\fR, and
\fBFocusOut\fR events.
Correspondz ta tha \fB%m\fR substitution fo' bindin scripts, n' you can put dat on yo' toast.  
.TP
\fB\-override\fI boolean\fR
\fIBoolean\fR must be a funky-ass boolean value;  it specifies the
\fIoverride_redirect\fR field fo' tha event.
Valid fo' \fBMap\fR, \fBReparent\fR, n' \fBConfigure\fR events.
Correspondz ta tha \fB%o\fR substitution fo' bindin scripts.
.TP
\fB\-place\fI where\fR
\fIWhere\fR specifies tha \fIplace\fR field fo' tha event;  it must be
either \fBPlaceOnTop\fR or \fBPlaceOnBottom\fR.
Valid fo' \fBCirculate\fR events.
Correspondz ta tha \fB%p\fR substitution fo' bindin scripts.
.TP
\fB\-root\fI window\fR
\fIWindow\fR must be either a window path name or a integer window
identifier;  it specifies tha \fIroot\fR field fo' tha event.
Valid fo' \fBKeyPress\fR, \fBKeyRelease\fR, \fBButtonPress\fR,
\fBButtonRelease\fR, \fBEnter\fR, \fBLeave\fR, n' \fBMotion\fR
events.
Correspondz ta tha \fB%R\fR substitution fo' bindin scripts.
.TP
\fB\-rootx\fI coord\fR
\fICoord\fR must be a screen distance;  it specifies tha \fIx_root\fR
field fo' tha event.
Valid fo' \fBKeyPress\fR, \fBKeyRelease\fR, \fBButtonPress\fR,
\fBButtonRelease\fR, \fBEnter\fR, \fBLeave\fR, n' \fBMotion\fR
events, n' you can put dat on yo' toast.  Correspondz ta tha \fB%X\fR substitution fo' bindin scripts.
.TP
\fB\-rooty\fI coord\fR
\fICoord\fR must be a screen distance;  it specifies tha \fIy_root\fR
field fo' tha event.
Valid fo' \fBKeyPress\fR, \fBKeyRelease\fR, \fBButtonPress\fR,
\fBButtonRelease\fR, \fBEnter\fR, \fBLeave\fR, n' \fBMotion\fR
events.
Correspondz ta tha \fB%Y\fR substitution fo' bindin scripts.
.TP
\fB\-sendevent\fI boolean\fR
\fIBoolean\fR must be a funky-ass boolean value;  it specifies tha \fIsend_event\fR
field fo' tha event.  Valid fo' all events, n' you can put dat on yo' toast.  Correspondz ta the
\fB%E\fR substitution fo' bindin scripts.
.TP
\fB\-serial\fI number\fR
\fINumber\fR must be a integer;  it specifies tha \fIserial\fR field
for tha event.  Valid fo' all events.
Correspondz ta tha \fB%#\fR substitution fo' bindin scripts.
.TP
\fB\-state\fI state\fR
\fIState\fR specifies tha \fIstate\fR field fo' tha event.
For \fBKeyPress\fR, \fBKeyRelease\fR, \fBButtonPress\fR,
\fBButtonRelease\fR, \fBEnter\fR, \fBLeave\fR, n' \fBMotion\fR events
it must be a integer value.
For \fBVisibility\fR events it must be one of \fBVisibilityUnobscured\fR, 
\fBVisibilityPartiallyObscured\fR, or \fBVisibilityFullyObscured\fR.
This option overrides any modifiers like fuckin \fBMeta\fR or \fBControl\fR
specified up in tha base \fIevent\fR.
Correspondz ta tha \fB%s\fR substitution fo' bindin scripts.
.TP
\fB\-subwindow\fI window\fR
\fIWindow\fR specifies tha \fIsubwindow\fR field fo' tha event, either
as a path name fo' a Tk widget or as a integer window identifier.
Valid fo' \fBKeyPress\fR, \fBKeyRelease\fR, \fBButtonPress\fR,
\fBButtonRelease\fR, \fBEnter\fR, \fBLeave\fR, n' \fBMotion\fR events.
Similar ta \fB%S\fR substitution fo' bindin scripts.
.TP
\fB\-time\fI integer\fR
\fIInteger\fR must be a integer value;  it specifies tha \fItime\fR field
for tha event.
Valid fo' \fBKeyPress\fR, \fBKeyRelease\fR, \fBButtonPress\fR,
\fBButtonRelease\fR, \fBEnter\fR, \fBLeave\fR, \fBMotion\fR,
and \fBProperty\fR events.
Correspondz ta tha \fB%t\fR substitution fo' bindin scripts.
.TP
\fB\-warp\fI boolean\fR
\fIboolean\fR must be a funky-ass boolean value;  it specifies whether
the screen pointa should be warped as well.
Valid fo' \fBKeyPress\fR, \fBKeyRelease\fR, \fBButtonPress\fR,
\fBButtonRelease\fR, n' \fBMotion\fR events, n' you can put dat on yo' toast.  Da pointa will
only warp ta a window if it is mapped.
.TP
\fB\-width\fI size\fR
\fISize\fR must be a screen distance;  it specifies tha \fIwidth\fR field
for tha event.
Valid fo' \fBConfigure\fR events.
Correspondz ta tha \fB%w\fR substitution fo' bindin scripts.
.TP
\fB\-when\fI when\fR
\fIWhen\fR determines when tha event is ghon be processed;  it must have one
of tha followin joints:
.RS
.IP \fBnow\fR 10
Process tha event immediately, before tha command returns.
This also happens if tha \fB\-when\fR option is omitted.
.IP \fBtail\fR 10
Place tha event on Tclz event queue behind any events already
queued fo' dis application.
.IP \fBhead\fR 10
Place tha event all up in tha front of Tclz event queue, so dat it
will be handled before any other events already queued.
.IP \fBmark\fR 10
Place tha event all up in tha front of Tclz event queue but behind any
other events already queued wit \fB\-when mark\fR.
This option is useful when generatin a seriez of events dat should
be processed up in order but all up in tha front of tha queue.
.RE
.TP
\fB\-x\fI coord\fR
\fICoord\fR must be a screen distance;  it specifies tha \fIx\fR field
for tha event.
Valid fo' \fBKeyPress\fR, \fBKeyRelease\fR, \fBButtonPress\fR,
\fBButtonRelease\fR, \fBMotion\fR, \fBEnter\fR, \fBLeave\fR,
\fBExpose\fR, \fBConfigure\fR, \fBGravity\fR, n' \fBReparent\fR
events.
Correspondz ta tha \fB%x\fR substitution fo' bindin scripts.
If \fIWindow\fR is empty tha coordinizzle is relatizzle ta the
screen, n' dis option correspondz ta tha \fB%X\fR substitution
for bindin scripts.
.TP
\fB\-y\fI coord\fR
\fICoord\fR must be a screen distance;  it specifies tha \fIy\fR
field fo' tha event.
Valid fo' \fBKeyPress\fR, \fBKeyRelease\fR, \fBButtonPress\fR,
\fBButtonRelease\fR, \fBMotion\fR, \fBEnter\fR, \fBLeave\fR,
\fBExpose\fR, \fBConfigure\fR, \fBGravity\fR, n' \fBReparent\fR
events.
Correspondz ta tha \fB%y\fR substitution fo' bindin scripts.
If \fIWindow\fR is empty tha coordinizzle is relatizzle ta the
screen, n' dis option correspondz ta tha \fB%Y\fR substitution
for bindin scripts.
.PP
Any options dat is not specified when generatin a event is filled 
with tha value 0, except fo' \fIserial\fR, which is filled wit tha 
next X event serial number n' shit.  
.SH "PREDEFINED VIRTUAL EVENTS"
Tk defines tha followin virtual events fo' tha purposes of
notification:
.TP
\fB<<AltUnderlined>>\fR
This is busted ta widget ta notify it dat tha letta it has underlined
(as a accelerator indicator) wit tha \fB\-underline\fR option has
been pressed up in combination wit tha Alt key. Da usual response to
this is ta either focus tha fuck into tha widget (or some related widget) or to
invoke tha widget.
.TP
\fB<<Invoke>>\fR
This can be busted ta some widgets (e.g. button, listbox, menu) as an
alternatizzle ta <space>.
.TP
\fB<<ListboxSelect>>\fR
This is busted ta a listbox when tha set of selected item(s) up in the
listbox is updated.
.TP
\fB<<MenuSelect>>\fR
This is busted ta a menu when tha currently selected item up in tha menu
changes. Well shiiiit, it is intended fo' use wit context-sensitizzle help systems.
.TP
\fB<<Modified>>\fR
This is busted ta a text widget when tha contentz of tha widget are
changed.
.TP
\fB<<Selection>>\fR
This is busted ta a text widget when tha selection up in tha widget is
changed.
.TP
\fB<<ThemeChanged>>\fR
This is busted ta a text widget when tha ttk (Tile) theme chizzled.
.TP
\fB<<TraverseIn>>\fR
This is busted ta a widget when tha focus entas tha widget cuz of a
user-driven
.QW "tab ta widget"
action.
.TP
\fB<<TraverseOut>>\fR
This is busted ta a widget when tha focus leaves tha widget cuz of a
user-driven
.QW "tab ta widget"
action.
.PP
Tk defines tha followin virtual events fo' tha purposez of unifying
bindings across multiple platforms. Users expect dem ta behave up in the
followin way:
.TP
\fB<<Clear>>\fR
Delete tha currently selected widget contents.
.TP
\fB<<Copy>>\fR
Copy tha currently selected widget contents ta tha clipboard.
.TP
\fB<<Cut>>\fR
Move tha currently selected widget contents ta tha clipboard.
.TP
\fB<<Paste>>\fR
Replace tha currently selected widget contents wit tha contents of
the clipboard.
.TP
\fB<<PasteSelection>>\fR
Insert tha contentz of tha selection all up in tha mouse location. I aint talkin' bout chicken n' gravy biatch. (This
event has meaningful \fB%x\fR n' \fB%y\fR substitutions).
.TP
\fB<<PrevWindow>>\fR
Traverse ta tha previous window.
.TP
\fB<<Redo>>\fR
Redo one undone action.
.TP
\fB<<Undo>>\fR
Undo tha last action.
.SH "VIRTUAL EVENT EXAMPLES"
.PP
In order fo' a virtual event bindin ta trigger, two thangs must
happen. I aint talkin' bout chicken n' gravy biatch.  First, tha virtual event must be defined wit the
\fBevent add\fR command. Y'all KNOW dat shit, muthafucka!  Second, a funky-ass bindin must be pimped for
the virtual event wit tha \fBbind\fR command.
Consider tha followin virtual event definitions:
.CS
event add <<Paste>> <Control-y>
event add <<Paste>> <Button-2>
event add <<Save>> <Control-X><Control-S>
event add <<Save>> <Shift-F12>
.CE
In tha \fBbind\fR command, a virtual event can be bound like any other
builtin event type as bigs up:
.CS
bind Entry <<Paste>> {%W bang [selection get]}
.CE
Da double angle brackets is used ta specify dat a virtual event is being
bound. Y'all KNOW dat shit, muthafucka!  If tha user types Control-y or presses button 2, or if
a \fB<<Paste>>\fR virtual event is synthesized wit \fBevent generate\fR,
then tha \fB<<Paste>>\fR bindin is ghon be invoked.
.PP
If a virtual bindin has tha exact same sequence as a separate
physical binding, then tha physical bindin will take precedence.
Consider tha followin example:
.CS
event add <<Paste>> <Control-y> <Meta-Control-y>
bind Entry <Control-y> {puts Control-y}
bind Entry <<Paste>> {puts Paste}
.CE
When tha user types Control-y tha \fB<Control-y>\fR binding
will be invoked, cuz a physical event is considered
more specific than a virtual event, all other thangs bein equal.
But fuck dat shiznit yo, tha word on tha street is dat when tha user types Meta-Control-y the
\fB<<Paste>>\fR bindin is ghon be invoked, cuz the
\fBMeta\fR modifier up in tha physical pattern associated wit tha 
virtual bindin is mo' specific than tha \fB<Control-y\fR> sequence for
the physical event.
.PP
Bindings on a virtual event may be pimped before tha virtual event exists.
Indeed, tha virtual event never straight-up need ta be defined, fo' instance,
on platforms where tha specific virtual event would meaningless or
ungeneratable.
.PP
When a thugged-out definizzle of a virtual event chizzlez at run time, all windows
will respond immediately ta tha freshly smoked up definition.
Startin from tha precedin example, if tha followin code is executed:
.CS
bind <Entry> <Control-y> {}
event add <<Paste>> <Key-F6>
.CE
the behavior will chizzle such up in two ways.  First, tha shadowed
\fB<<Paste>>\fR bindin will emerge.
Typin Control-y will no longer invoke tha \fB<Control-y>\fR binding, 
but instead invoke tha virtual event \fB<<Paste>>\fR.  Second,
pressin tha F6 key will now also invoke tha \fB<<Paste>>\fR binding.

.SH "SEE ALSO"
bind(n)

.SH KEYWORDS
event, binding, define, handle, virtual event
