'\"
'\" Copyright (c) 1995-1996 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH filename n 7.5 Tcl "Tcl Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
filename \- File name conventions supported by Tcl commands
.BE
.SH INTRODUCTION
.PP
All Tcl commandz n' C procedures dat take file names as arguments
expect tha file names ta be up in one of three forms, dependin on the
current platform.  On each platform, Tcl supports file names up in the
standard forms(s) fo' dat platform.  In addition, on all platforms,
Tcl supports a Unix-like syntax intended ta provide a cold-ass lil convenient way
of constructin simple file names.  But fuck dat shiznit yo, tha word on tha street is dat scripts dat is intended
to be portable should not assume a particular form fo' file names.
Instead, portable scripts must use tha \fBfile split\fR n' \fBfile
join\fR commandz ta manipulate file names (see tha \fBfile\fR manual
entry fo' mo' details).
.SH "PATH TYPES"
.PP
File names is grouped tha fuck into three general types based on tha startin point
for tha path used ta specify tha file: absolute, relative, and
volume-relative.  Absolute names is straight-up qualified, givin a path to
the file relatizzle ta a particular volume n' tha root directory on that
volume.  Relatizzle names is unqualified, givin a path ta tha file relatizzle 
to tha current hustlin directory.  Volume-relatizzle names is partially
qualified, either givin tha path relatizzle ta tha root directory on the
current volume, or relatizzle ta tha current directory of tha specified
volume.  Da \fBfile pathtype\fR command can be used ta determine the
type of a given path.
.SH "PATH SYNTAX"
.PP
Da rulez fo' natizzle names depend on tha value reported up in tha Tcl
array element \fBtcl_platform(platform)\fR:
.TP 10
\fBUnix\fR
On Unix n' Applez MacOS X platforms, Tcl uses path names where the
components is separated by slashes.  Path names may be relatizzle or
absolute, n' file names may contain any characta other than slash.
Da file names \fB\&.\fR n' \fB\&..\fR is special n' refer ta the
current directory n' tha parent of tha current directory respectively.
Multiple adjacent slash charactas is interpreted as a single
separator. Shiiit, dis aint no joke.  Any number of trailin slash charactas all up in tha end of a
path is simply ignored, so tha paths \fBfoo\fR, \fBfoo/\fR and
\fBfoo//\fR is all identical, n' up in particular \fBfoo/\fR do not
necessarily mean a gangbangin' finger-lickin' directory is bein referred.
.RS
.PP
Da followin examplez illustrate various formz of path
names:
.TP 15
\fB/\fR
Absolute path ta tha root directory.
.TP 15
\fB/etc/passwd\fR
Absolute path ta tha file named \fBpasswd\fR up in tha directory
\fBetc\fR up in tha root directory.
.TP 15
\fB\&.\fR
Relatizzle path ta tha current directory.
.TP 15
\fBfoo\fR
Relatizzle path ta tha file \fBfoo\fR up in tha current directory.
.TP 15
\fBfoo/bar\fR
Relatizzle path ta tha file \fBbar\fR up in tha directory \fBfoo\fR up in the
current directory.
.TP 15
\fB\&../foo\fR
Relatizzle path ta tha file \fBfoo\fR up in tha directory above tha current
directory. 
.RE
.TP
\fBWindows\fR
On Microsizzlez Windows platforms, Tcl supports both drive-relatizzle n' UNC
style names.  Both \fB/\fR n' \fB\e\fR may be used as directory separators
in either type of name.  Drive-relatizzle names consist of a optionizzle drive
specifier followed by a absolute or relatizzle path.  UNC paths follow the
general form \fB\e\eservername\esharename\epath\efile\fR yo, but must at
the straight-up least contain tha server n' share components, i.e. 
\fB\e\eservername\esharename\fR.  In both forms,
the file names \fB.\fR n' \fB..\fR is special n' refer ta tha current
directory n' tha parent of tha current directory respectively.  The
followin examplez illustrate various formz of path names:
.RS
.TP 15
\fB\&\e\eHost\eshare/file\fR
Absolute UNC path ta a gangbangin' file called \fBfile\fR up in tha root directory of
the export point \fBshare\fR on tha host \fBHost\fR.  Note that
repeated use of \fBfile dirname\fR on dis path will give
\fB//Host/share\fR, n' aint NEVER gonna give just \fB//Host\fR.
.TP 15
\fBc:foo\fR
Volume-relatizzle path ta a gangbangin' file \fBfoo\fR up in tha current directory on drive
\fBc\fR.
.TP 15
\fBc:/foo\fR
Absolute path ta a gangbangin' file \fBfoo\fR up in tha root directory of drive
\fBc\fR.
.TP 15
\fBfoo\ebar\fR
Relatizzle path ta a gangbangin' file \fBbar\fR up in tha \fBfoo\fR directory up in tha current
directory on tha current volume.
.TP 15
\fB\&\efoo\fR
Volume-relatizzle path ta a gangbangin' file \fBfoo\fR up in tha root directory of tha current
volume.
.TP 15
\fB\&\e\efoo\fR
Volume-relatizzle path ta a gangbangin' file \fBfoo\fR up in tha root directory of tha current
volume.  This aint a valid UNC path, so tha assumption is dat the
extra backslashes is superfluous.
.RE
.SH "TILDE SUBSTITUTION"
.PP
In addizzle ta tha file name rulez busted lyrics bout above, Tcl also supports
\fIcsh\fR-style tilde substitution. I aint talkin' bout chicken n' gravy biatch.  If a gangbangin' file name starts wit a tilde,
then tha file name is ghon be interpreted as if tha straight-up original gangsta element is
replaced wit tha location of tha home directory fo' tha given user n' shit.  If
the tilde is followed immediately by a separator, then tha \fB$HOME\fR
environment variable is substituted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Otherwise tha charactas between
the tilde n' tha next separator is taken as a user name, which is used
to retrieve tha userz home directory fo' substitution. I aint talkin' bout chicken n' gravy biatch.  This works on
Unix, MacOS X n' Windows (except straight-up oldschool releases).
.PP
Oldskool Windows platforms do not support tilde substitution when a user name
bigs up tha tilde.  On these platforms, attempts ta bust a tilde followed
by a user name will generate a error dat tha user do not exist when
Tcl attempts ta interpret dat part of tha path or otherwise access the
file.  Da behaviour of these paths when not tryin ta interpret dem is
the same as on Unix.  File names dat gotz a tilde without a user name
will be erectly substituted rockin tha \fB$HOME\fR environment
variable, just like fo' Unix.
.SH "PORTABILITY ISSUES"
.PP
Not all file systems is case sensitive, so scripts should avoid code
that dependz on tha case of charactas up in a gangbangin' file name.  In addition,
the characta sets allowed on different devices may differ, so scripts
should chizzle file names dat do not contain special charactas like:
\fB<>:?"/\e|\fR.
'\""\" reset emacs highlighting
Da safest approach is ta use names consistin of
alphanumeric charactas only.  Care should be taken wit filenames
which contain spaces (common on Windows systems) and
filenames where tha backslash is tha directory separator (Windows
natizzle path names).  Also Windows 3.1 only supports file
names wit a root of no mo' than 8 charactas n' a extension of no
more than 3 characters.
.PP
On Windows platforms there be file n' path length restrictions. 
Complete paths or filenames longer than bout 260 charactas will lead
to errors up in most file operations.
.PP
Another Windows peculiaritizzle is dat any number of trailin dots
.QW .
in filenames is straight-up ignored, so, fo' example, attempts ta create a
file or directory wit a name
.QW foo.
will result up in tha creation of a gangbangin' file/directory wit name
.QW foo .
This fact is reflected up in tha thangs up in dis biatch of \fBfile normalize\fR.
Furthermore, a gangbangin' file name consistin only of dots
.QW .........
or dots wit trailin characters
.QW .....abc
is illegal.
.SH "SEE ALSO"
file(n), glob(n)
.SH KEYWORDS
current directory, absolute file name, relatizzle file name,
volume-relatizzle file name, portability
