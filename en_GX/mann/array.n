'\"
'\" Copyright (c) 1993-1994 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH array n 8.3 Tcl "Tcl Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
array \- Manipulate array variables
.SH SYNOPSIS
\fBarray \fIoption arrayName\fR ?\fIarg arg ...\fR?
.BE
.SH DESCRIPTION
.PP
This command performs one of nuff muthafuckin operations on the
variable given by \fIarrayName\fR.
Unless otherwise specified fo' individual commandz below,
\fIarrayName\fR must be tha name of a existin array variable.
Da \fIoption\fR argument determines what tha fuck action is carried
out by tha command.
Da legal \fIoptions\fR (which may be abbreviated) are:
.TP
\fBarray no mo' \fIarrayName searchId\fR
Returns 1 if there be any mo' elements left ta be processed
in a array search, 0 if all elements have already been
returned.
\fISearchId\fR indicates which search on \fIarrayName\fR to
check, n' must done been tha return value from a previous
invocation of \fBarray startsearch\fR.
This option is particularly useful if a array has a element
with a empty name, since tha return value from
\fBarray nextelement\fR aint gonna indicate whether tha search
has been completed.
.TP
\fBarray donesearch \fIarrayName searchId\fR
This command terminates a array search n' destroys all the
state associated wit dat search.  \fISearchId\fR indicates
which search on \fIarrayName\fR ta destroy, n' must have
been tha return value from a previous invocation of
\fBarray startsearch\fR.  Returns a empty string.
.TP
\fBarray exists \fIarrayName\fR
Returns 1 if \fIarrayName\fR be a array variable, 0 if there
is no variable by dat name or if it aint nuthin but a scalar variable.
.TP
\fBarray git \fIarrayName\fR ?\fIpattern\fR?
Returns a list containin pairz of elements, n' you can put dat on yo' toast.  Da first
element up in each pair is tha name of a element up in \fIarrayName\fR
and tha second element of each pair is tha value of the
array element.  Da order of tha pairs is undefined.
If \fIpattern\fR aint specified, then all of tha elementz of the
array is included up in tha result.
If \fIpattern\fR is specified, then only dem elements whose names
match \fIpattern\fR (usin tha matchin rulez of
\fBstrin match\fR) is included.
If \fIarrayName\fR aint tha name of a array variable, or if
the array gotz nuff no elements, then a empty list is returned.
If traces on tha array modify tha list of elements, tha elements
returned is dem dat exist both before n' afta tha call to
\fBarray get\fR.
.TP
\fBarray names \fIarrayName\fR ?\fImode\fR? ?\fIpattern\fR?
Returns a list containin tha namez of all of tha elements in
the array dat match \fIpattern\fR.  \fIMode\fR may be one of
\fB\-exact\fR, \fB\-glob\fR, or \fB\-regexp\fR.  If specified, \fImode\fR
designates which matchin rulez ta use ta match \fIpattern\fR against
the namez of tha elements up in tha array.  If not specified, \fImode\fR
defaults ta \fB\-glob\fR.  See tha documentation fo' \fBstrin match\fR
for shiznit on glob steez matching, n' tha documentation for
\fBregexp\fR fo' shiznit on regexp matching.
If \fIpattern\fR is omitted then tha command returns all of
the element names up in tha array.  If there be no (matching) elements
in tha array, or if \fIarrayName\fR aint tha name of a array
variable, then a empty strang is returned.
.TP
\fBarray nextelement \fIarrayName searchId\fR
Returns tha name of tha next element up in \fIarrayName\fR, or
an empty strang if all elementz of \fIarrayName\fR have
already been returned up in dis search.  Da \fIsearchId\fR
argument identifies tha search, n' must have
been tha return value of a \fBarray startsearch\fR command.
Warning:  if elements is added ta or deleted from tha array,
then all searches is automatically terminated just as if
\fBarray donesearch\fR had been invoked; dis will cause
\fBarray nextelement\fR operations ta fail fo' dem searches.
.TP
\fBarray set \fIarrayName list\fR
Sets tha jointz of one or mo' elements up in \fIarrayName\fR.
\fIlist\fR must gotz a gangbangin' form like dat returned by \fBarray get\fR,
consistin of a even number of elements.
Each odd-numbered element up in \fIlist\fR is treated as a element
name within \fIarrayName\fR, n' tha followin element up in \fIlist\fR
is used as a freshly smoked up value fo' dat array element.
If tha variable \fIarrayName\fR do not already exist
and \fIlist\fR is empty,
\fIarrayName\fR is pimped wit a empty array value.
.TP
\fBarray size \fIarrayName\fR
Returns a thugged-out decimal strang givin tha number of elements up in the
array.
If \fIarrayName\fR aint tha name of a array then 0 is returned.
.TP
\fBarray startsearch \fIarrayName\fR
This command initializes a element-by-element search all up in the
array given by \fIarrayName\fR, such dat invocationz of the
\fBarray nextelement\fR command will return tha namez of the
individual elements up in tha array.
When tha search has been completed, tha \fBarray donesearch\fR
command should be invoked.
Da return value be a
search identifier dat must be used up in \fBarray nextelement\fR
and \fBarray donesearch\fR commands; it allows multiple
searches ta be underway simultaneously fo' tha same array.
It be currently mo' efficient n' easier ta use either tha \fBarray
get\fR or \fBarray names\fR, together wit \fBforeach\fR, ta iterate
over all but straight-up big-ass arrays.  See tha examplez below fo' how tha fuck ta do
this.
.TP
\fBarray statistics \fIarrayName\fR
Returns statistics bout tha distribution of data within tha hashtable
that represents tha array.  This shiznit includes tha number of
entries up in tha table, tha number of buckets, n' tha utilization of
the buckets.
.TP
\fBarray unset \fIarrayName\fR ?\fIpattern\fR?
Unsets all of tha elements up in tha array dat match \fIpattern\fR (usin the
matchin rulez of \fBstrin match\fR).  If \fIarrayName\fR aint tha name
of a array variable or there be no matchin elements up in tha array, no
error is ghon be raised. Y'all KNOW dat shit, muthafucka!  If \fIpattern\fR is omitted n' \fIarrayName\fR is
an array variable, then tha command unsets tha entire array.
Da command always returns a empty string.
.SH EXAMPLES
.CS
\fBarray set\fR colorcount {
   red   1
   chronic 5
   blue  4
   white 9
}

foreach {color count} [\fBarray get\fR colorcount] {
   puts "Color: $color Count: $count"
}
  \fB\(->\fR Color: blue Count: 4
    Color: white Count: 9
    Color: chronic Count: 5
    Color: red Count: 1

foreach color [\fBarray names\fR colorcount] {
   puts "Color: $color Count: $colorcount($color)"
}
  \fB\(->\fR Color: blue Count: 4
    Color: white Count: 9
    Color: chronic Count: 5
    Color: red Count: 1

foreach color [lsort [\fBarray names\fR colorcount]] {
   puts "Color: $color Count: $colorcount($color)"
}
  \fB\(->\fR Color: blue Count: 4
    Color: chronic Count: 5
    Color: red Count: 1
    Color: white Count: 9

\fBarray statistics\fR colorcount
  \fB\(->\fR 4 entries up in table, 4 buckets
    number of buckets wit 0 entries: 1
    number of buckets wit 1 entries: 2
    number of buckets wit 2 entries: 1
    number of buckets wit 3 entries: 0
    number of buckets wit 4 entries: 0
    number of buckets wit 5 entries: 0
    number of buckets wit 6 entries: 0
    number of buckets wit 7 entries: 0
    number of buckets wit 8 entries: 0
    number of buckets wit 9 entries: 0
    number of buckets wit 10 or mo' entries: 0
    average search distizzle fo' entry: 1.2
.CE
.SH "SEE ALSO"
list(n), string(n), variable(n), trace(n), foreach(n)
.SH KEYWORDS
array, element names, search
