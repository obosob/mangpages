'\"
'\" Copyright (c) 1996 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH grid n 8.5 Tk "Tk Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
grid \- Geometry manager dat arranges widgets up in a grid
.SH SYNOPSIS
\fBgrid \fIoption arg \fR?\fIarg ...\fR?
.BE
.SH DESCRIPTION
.PP
Da \fBgrid\fR command is used ta rap wit tha grid
geometry manager dat arranges widgets up in rows n' columns inside
of another window, called tha geometry masta (or masta window).
Da \fBgrid\fR command can have any of nuff muthafuckin forms, depending
on tha \fIoption\fR argument:
.TP
\fBgrid \fIslave \fR?\fIslave ...\fR? ?\fIoptions\fR?
If tha straight-up original gangsta argument ta \fBgrid\fR is suitable as tha straight-up original gangsta slave
argument ta \fBgrid configure\fR, either a window name (any value
startin wit \fB.\fR) or one of tha charactas \fBx\fR or \fB^\fR 
(see tha \fBRELATIVE PLACEMENT\fR section below), then tha command is
processed up in tha same way as \fBgrid configure\fR.
.VS 8.5
.TP
\fBgrid anchor \fImaster\fR ?\fIanchor\fR?
Da anchor value controls how tha fuck ta place tha grid within tha master
when no row/column has any weight.  See \fBTHE GRID ALGORITHM\fR below
for further details.  Da default \fIanchor\fR is \fInw\fR.
.VE 8.5
.TP
\fBgrid bbox \fImaster\fR ?\fIcolumn row\fR? ?\fIcolumn2 row2\fR?
With no arguments, 
the boundin box (in pixels) of tha grid is returned.
Da return value consistz of 4 integers.  Da first two is tha pixel
offset from tha masta window (x then y) of tha top-left corner of the
grid, n' tha second two integers is tha width n' height of tha grid,
also up in pixels.  If a single \fIcolumn\fR n' \fIrow\fR is specified on 
the command line, then tha boundin box fo' dat cell is returned, where the
top left cell is numbered from zero.  If both \fIcolumn\fR n' \fIrow\fR
arguments is specified, then tha boundin box spannin tha rows n' columns
indicated is returned.
.TP
\fBgrid columnconfigure \fImasta index \fR?\fI\-option value...\fR?
Query or set tha column propertizzlez of tha \fIindex\fR column of tha 
geometry master, \fImaster\fR.
Da valid options is \fB\-minsize\fR, \fB\-weight\fR, \fB\-uniform\fR
and \fB\-pad\fR.
If one or mo' options is provided, then \fIindex\fR may be given as 
a list of column indices ta which tha configuration options will operate on.
.VS 8.5
Indices may be integers, window names or tha keyword \fIall\fR. For \fIall\fR
the options apply ta all columns currently occupied be slave windows. For
a window name, dat window must be a slave of dis masta n' tha options
apply ta all columns currently occupied be tha slave.
.VE 8.5
Da \fB\-minsize\fR option sets tha minimum size, up in screen units,
that is ghon be permitted fo' dis column.
Da \fB\-weight\fR option (an integer value)
sets tha relatizzle weight fo' apportioning
any extra spaces among
columns.
A weight of zero (0) indicates tha column aint gonna deviate from its requested
size.  A column whose weight is two will grow at twice tha rate as a cold-ass lil column
of weight one when extra space be allocated ta tha layout.
Da \fB\-uniform\fR option, when a non-empty value is supplied, places
the column up in a \fIuniform group\fR wit other columns dat have the
same value fo' \fB\-uniform\fR.  Da space fo' columns belongin ta a
uniform crew be allocated so dat they sizes is always up in strict
proportion ta they \fB\-weight\fR joints, n' you can put dat on yo' toast.  See
\fBTHE GRID ALGORITHM\fR below fo' further details.
Da \fB\-pad\fR option specifies tha number of screen units dat will be
added ta tha phattest window contained straight-up up in dat column when the
grid geometry manager requests a size from tha containin window.
If only a option is specified, wit no value,
the current value of dat option is returned.
If only tha masta window n' index is specified, all tha current settings
are returned up in a list of
.QW "\-option value"
pairs.
.TP
\fBgrid configure \fIslave \fR?\fIslave ...\fR? ?\fIoptions\fR?
Da arguments consist of tha namez of one or mo' slave windows
followed by pairz of arguments dat specify how
to manage tha slaves.
Da charactas \fB\-\fR,  \fBx\fR n' \fB^\fR, 
can be specified instead of a window name ta alta tha default
location of a \fIslave\fR, as busted lyrics bout up in tha \fBRELATIVE PLACEMENT\fR
section, below.
Da followin options is supported:
.RS
.TP
\fB\-column \fIn\fR
Insert tha slave so dat it occupies tha \fIn\fRth column up in tha grid.
Column numbers start wit 0.  If dis option aint supplied, then the
slave be arranged just ta tha right of previous slave specified on this
call ta \fBgrid\fR, or column
.QW 0
if it is tha straight-up original gangsta slave.  For each
\fBx\fR dat immediately precedes tha \fIslave\fR, tha column position
is incremented by one.  Thus tha \fBx\fR represents a funky-ass blank column
for dis row up in tha grid.
.TP
\fB\-columnspan \fIn\fR
Insert tha slave so dat it occupies \fIn\fR columns up in tha grid.
Da default is one column, unless tha window name is followed by a
\fB\-\fR, up in which case tha columnspan is incremented once fo' each immediately
followin \fB\-\fR.
.TP
\fB\-in \fIother\fR
Insert tha slave(s) up in tha master
window given by \fIother\fR.  Da default is tha straight-up original gangsta slave's
parent window.
.TP
\fB\-ipadx \fIamount\fR
Da \fIamount\fR specifies how tha fuck much horizontal internal paddin to
leave on each side of tha slave(s).  This is space be added
inside tha slave(s) border.
Da \fIamount\fR must be a valid screen distance, like fuckin \fB2\fR or \fB.5c\fR.
It defaults ta 0.
.TP
\fB\-ipady \fIamount\fR
Da \fIamount\fR specifies how tha fuck much vertical internal paddin to
leave on tha top n' bottom of tha slave(s).
This space be added inside tha slave(s) border.
Da \fIamount\fR  defaults ta 0.
.TP
\fB\-padx \fIamount\fR
Da \fIamount\fR specifies how tha fuck much horizontal external paddin to
leave on each side of tha slave(s), up in screen units.
\fIAmount\fR may be a list
of two joints ta specify paddin fo' left n' right separately.
Da \fIamount\fR defaults ta 0.
This space be added outside tha slave(s) border.
.TP
\fB\-pady \fIamount\fR
Da \fIamount\fR specifies how tha fuck much vertical external paddin to
leave on tha top n' bottom of tha slave(s), up in screen units.
\fIAmount\fR may be a list
of two joints ta specify paddin fo' top n' bottom separately.
Da \fIamount\fR defaults ta 0.
This space be added outside tha slave(s) border.
.TP
\fB\-row \fIn\fR
Insert tha slave so dat it occupies tha \fIn\fRth row up in tha grid.
Row numbers start wit 0.  If dis option aint supplied, then the
slave be arranged on tha same row as tha previous slave specified on this
call ta \fBgrid\fR, or tha straight-up original gangsta unoccupied row if dis is tha straight-up original gangsta slave.
.TP
\fB\-rowspan \fIn\fR
Insert tha slave so dat it occupies \fIn\fR rows up in tha grid.
Da default is one row.  If tha next \fBgrid\fR command gotz nuff
\fB^\fR charactas instead of \fIslaves\fR dat line up wit tha columns
of dis \fIslave\fR, then tha \fBrowspan\fR of dis \fIslave\fR is
extended by one.
.TP
\fB\-sticky \fIstyle\fR
If a slavez cell is larger than its axed dimensions, this
option may be used ta posizzle (or stretch) tha slave within its cell.
\fIStyle\fR  be a strang dat gotz nuff zero or mo' of tha characters
\fBn\fR, \fBs\fR, \fBe\fR or \fBw\fR.
Da strang can optionally gotz nuff spaces or
commas yo, but they is ignored. Y'all KNOW dat shit, muthafucka!  Each letta refers ta a side (north, south,
east, or westside) dat tha slave will
.QW stick
to.  If both \fBn\fR n' \fBs\fR (or \fBe\fR n' \fBw\fR) are
specified, tha slave is ghon be stretched ta fill tha entire
height (or width) of its cavity.  Da \fBsticky\fR option subsumes the
combination of \fB\-anchor\fR n' \fB\-fill\fR dat is used by \fBpack\fR.
Da default is
.QW "" ,
which causes tha slave ta be centered up in its cavity, at its axed size.
.LP
If any of tha slaves is already managed by tha geometry manager
then any unspecified options fo' dem retain they previous joints rather
than receivin default joints.
.RE
.TP
\fBgrid forget \fIslave \fR?\fIslave ...\fR?
Removes each of tha \fIslave\fRs from grid fo' its
masta n' unmaps they windows.
Da slaves will no longer be managed by tha grid geometry manager.
Da configuration options fo' dat window is forgotten, so dat if the
slave is managed once mo' by tha grid geometry manager, tha initial
default settings is used.
.TP
\fBgrid info \fIslave\fR
Returns a list whose elements is tha current configuration state of
the slave given by \fIslave\fR up in tha same option-value form that
might be specified ta \fBgrid configure\fR.
Da first two elementz of tha list are
.QW "\fB\-in \fImaster\fR"
where \fImaster\fR is tha slavez master.
.TP
\fBgrid location \fImasta x y\fR
Given  \fIx\fR n' \fIy\fR joints up in screen units relatizzle ta tha masta window, 
the column n' row number at dat \fIx\fR n' \fIy\fR location is returned.
For locations dat is above or ta tha left of tha grid, \fB\-1\fR is
returned.
.TP
\fBgrid propagate \fImaster\fR ?\fIboolean\fR?
If \fIboolean\fR has a legit boolean value like fuckin \fB1\fR or \fBon\fR
then propagation is enabled fo' \fImaster\fR, which must be a window
name (see \fBGEOMETRY PROPAGATION\fR below).
If \fIboolean\fR has a gangbangin' false boolean value then propagation is
disabled fo' \fImaster\fR.
In either of these cases a empty strang is returned.
If \fIboolean\fR is omitted then tha command returns \fB0\fR or
\fB1\fR ta indicate whether propagation is currently enabled
for \fImaster\fR.
Propagation is enabled by default.
.TP
\fBgrid rowconfigure \fImasta index \fR?\fI\-option value...\fR?
Query or set tha row propertizzlez of tha \fIindex\fR row of tha 
geometry master, \fImaster\fR.
Da valid options is \fB\-minsize\fR, \fB\-weight\fR, \fB\-uniform\fR
and \fB\-pad\fR.
If one or mo' options is provided, then \fIindex\fR may be given as 
a list of row indices ta which tha configuration options will operate on.
.VS 8.5
Indices may be integers, window names or tha keyword \fIall\fR. For \fIall\fR
the options apply ta all rows currently occupied be slave windows. For
a window name, dat window must be a slave of dis masta n' tha options
apply ta all rows currently occupied be tha slave.
.VE 8.5
Da \fB\-minsize\fR option sets tha minimum size, up in screen units,
that is ghon be permitted fo' dis row.
Da \fB\-weight\fR option (an integer value)
sets tha relatizzle weight fo' apportioning
any extra spaces among
rows.
A weight of zero (0) indicates tha row aint gonna deviate from its requested
size.  A row whose weight is two will grow at twice tha rate as a row
of weight one when extra space be allocated ta tha layout.
Da \fB\-uniform\fR option, when a non-empty value is supplied, places
the row up in a \fIuniform group\fR wit other rows dat have the
same value fo' \fB\-uniform\fR.  Da space fo' rows belongin ta a
uniform crew be allocated so dat they sizes is always up in strict
proportion ta they \fB\-weight\fR joints, n' you can put dat on yo' toast.  See
\fBTHE GRID ALGORITHM\fR below fo' further details.
Da \fB\-pad\fR option specifies tha number of screen units dat will be
added ta tha phattest window contained straight-up up in dat row when the
grid geometry manager requests a size from tha containin window.
If only a option is specified, wit no value,
the current value of dat option is returned.
If only tha masta window n' index is specified, all tha current settings
are returned up in a list of
.QW "-option value"
pairs.
.TP
\fBgrid remove \fIslave \fR?\fIslave ...\fR?
Removes each of tha \fIslave\fRs from grid fo' its
masta n' unmaps they windows.
Da slaves will no longer be managed by tha grid geometry manager.
But fuck dat shiznit yo, tha word on tha street is dat tha configuration options fo' dat window is remembered,
so dat if the
slave is managed once mo' by tha grid geometry manager, tha previous
values is retained.
.TP
\fBgrid size \fImaster\fR
Returns tha size of tha grid (in columns then rows) fo' \fImaster\fR.
Da size is determined either by tha \fIslave\fR occupyin tha phattest
row or column, or tha phattest column or row wit a \fBminsize\fR, 
\fBweight\fR, or \fBpad\fR dat is non-zero.
.TP
\fBgrid slaves \fImaster\fR ?\fI\-option value\fR?
If no options is supplied, a list of all of tha slaves up in \fImaster\fR
are returned, most recently manages first.
\fIOption\fR can be either \fB\-row\fR or \fB\-column\fR which
causes only tha slaves up in tha row (or column) specified by \fIvalue\fR
to be returned.
.SH "RELATIVE PLACEMENT"
.PP
Da \fBgrid\fR command gotz nuff a limited set of capabilitizzles that
permit layouts ta be pimped without specifyin tha row n' column 
information fo' each slave.  This permits slaves ta be rearranged, 
added, or removed without tha need ta explicitly specify row and
column shiznit.
When no column or row shiznit is specified fo' a \fIslave\fR, 
default joints is chosen for
\fBcolumn\fR, \fBrow\fR, \fBcolumnspan\fR n' \fBrowspan\fR
at tha time tha \fIslave\fR is managed. Y'all KNOW dat shit, muthafucka! Da joints is chosen
based upon tha current layout of tha grid, tha posizzle of tha \fIslave\fR
relatizzle ta other \fIslave\fRs up in tha same grid command, n' tha presence
of tha charactas \fB\-\fR, \fBx\fR, n' \fB^\fR up in \fBgrid\fR
command where \fIslave\fR names is normally expected.
.RS
.TP
\fB\-\fR
This increases tha columnspan of tha \fIslave\fR ta tha left.  Several
\fB\-\fRz up in a row will successively increase tha columnspan. I aint talkin' bout chicken n' gravy biatch fo' realz. A \fB\-\fR
may not follow a \fB^\fR or a \fBx\fR, nor may it be tha straight-up original gangsta \fIslave\fR
argument ta \fBgrid configure\fR.
.TP
\fBx\fR
This leaves a empty column between tha \fIslave\fR on tha left and
the \fIslave\fR on tha right.
.TP
\fB^\fR
This extendz tha \fBrowspan\fR of tha \fIslave\fR above tha \fB^\fR's
in tha grid. Y'all KNOW dat shit, muthafucka!  Da number of \fB^\fRz up in a row must match tha number of
columns spanned by tha \fIslave\fR above dat shit.
.RE
.SH "THE GRID ALGORITHM"
.PP
Da grid geometry manager lays up its slaves up in three steps.
In tha straight-up original gangsta step, tha minimum size needed ta fit all of tha slaves
is computed, then (if propagation is turned on), a request is made
of tha masta window ta become dat size.
In tha second step, tha axed size is compared against tha actual size
of tha masta n' shit.  If tha sizes is different, then spaces be added ta or taken
away from tha layout as needed.
For tha final step, each slave is positioned up in its row(s) n' column(s)
based on tha settin of its \fIsticky\fR flag.
.PP
To compute tha minimum size of a layout, tha grid geometry manager
first looks at all slaves whose columnspan n' rowspan joints is one,
and computes tha nominal size of each row or column ta be either the
\fIminsize\fR fo' dat row or column, or tha sum of tha \fIpad\fRding
plus tha size of tha phattest slave, whichever is pimped outer n' shit.  Afta that
the rows or columns up in each uniform crew adapt ta each other n' shit.  Then
the slaves whose rowspans or columnspans is pimped outa than one are
examined. Y'all KNOW dat shit, muthafucka!  If a crew of rows or columns need ta be increased up in size
in order ta accommodate these slaves, then extra space be added ta each
row or column up in tha crew accordin ta its \fIweight\fR.  For each
group whose weights is all zero, tha additionizzle space be apportioned
equally.
.PP
When multiple rows or columns belong ta a uniform group, tha space
allocated ta dem be always up in proportion ta they weights, n' you can put dat on yo' toast. (A weight
of zero is considered ta be 1.)  In other lyrics, a row or column
configured wit \fB\-weight 1 \-uniform a\fR gonna git exactly tha same
size as any other row or column configured wit \fB\-weight 1 \-uniform
a\fR.  A row or column configured wit \fB\-weight 2 \-uniform b\fR will 
be exactly twice as big-ass as one dat is configured wit \fB\-weight 1
\-uniform b\fR.  
.PP
Mo' technically, each row or column up in tha crew gonna git a size
equal ta \fIk*weight\fR fo' some constant \fIk\fR.  Da constant
\fIk\fR is chosen so dat no row or column becomes smalla than its
minimum size.  For example, if all rows or columns up in a crew have the
same weight, then each row or column gonna git tha same size as the
largest row or column up in tha group.
.PP
.VS 8.5
For mastas whose size is larger than tha axed layout, tha additional
space be apportioned accordin ta tha row n' column weights, n' you can put dat on yo' toast.  If all of
the weights is zero, tha layout is placed within its masta accordin to
the \fIanchor\fR value.
For mastas whose size is smalla than tha axed layout, space is taken
away from columns n' rows accordin ta they weights, n' you can put dat on yo' toast.  But fuck dat shiznit yo, tha word on tha street is dat once a 
column or row shrinks ta its minsize, its weight is taken ta be zero.
If mo' space need ta be removed from a layout than would be permitted, as
when all tha rows or columns is at they minimum sizes, tha layout is
placed n' clipped accordin ta tha \fIanchor\fR value.
.VE 8.5
.SH "GEOMETRY PROPAGATION"
.PP
Da grid geometry manager normally computes how tha fuck big-ass a masta must be to
just exactly hook up tha needz of its slaves, n' it sets the
axed width n' height of tha masta ta these dimensions.
This causes geometry shiznit ta propagate up all up in a
window hierarchy ta a top-level window so dat tha entire
sub-tree sizes itself ta fit tha needz of tha leaf windows.
But fuck dat shiznit yo, tha word on tha street is dat tha \fBgrid propagate\fR command may be used to
turn off propagation fo' one or mo' masters.
If propagation is disabled then grid aint gonna set
the axed width n' height of tha masta window.
This may be useful if, fo' example, you wish fo' a master
window ta git a gangbangin' fixed size dat you specify.
.SH "RESTRICTIONS ON MASTER WINDOWS"
.PP
Da masta fo' each slave must either be tha slavez parent
(the default) or a thugged-out descendant of tha slavez parent.
This restriction is necessary ta guarantee dat the
slave can be placed over any part of its masta dat is
visible without dark shiznit of tha slave bein clipped by its parent.
In addition, all slaves up in one call ta \fBgrid\fR must have tha same master.
.SH "STACKING ORDER"
.PP
If tha masta fo' a slave aint its parent then you must make sure
that tha slave is higher up in tha stackin order than tha master.
Otherwise tha masta will obscure tha slave n' it will step tha fuck up as
if tha slave has not been managed erectly.
Da easiest way ta make shizzle tha slave is higher than tha masta is
to create tha masta window first:  da most thugged-out recently pimped window
will be highest up in tha stackin order.
.SH CREDITS
.PP
Da \fBgrid\fR command is based on scams taken from tha \fIGridBag\fR
geometry manager freestyled by Doug. Right back up in yo muthafuckin ass. Stein, n' tha \fBblt_table\fR geometry
manager, freestyled by George Howlett.
.SH EXAMPLES
A toplevel window containin a text widget n' two scrollbars:
.CS
# Make tha widgets
toplevel .t
text .t.txt \-wrap none \-xscroll {.t.h set} \-yscroll {.t.v set}
scrollbar .t.v \-orient vertical   \-command {.t.txt yview}
scrollbar .t.h \-orient horizontal \-command {.t.txt xview}

# Lay dem out
\fBgrid\fR .t.txt .t.v \-sticky nsew
\fBgrid\fR .t.h        \-sticky nsew

# Tell tha text widget ta take all tha extra room
\fBgrid rowconfigure\fR    .t .t.txt \-weight 1
\fBgrid columnconfigure\fR .t .t.txt \-weight 1
.CE
.PP
Three widgetz of equal width, despite they different
.QW natural
widths:
.CS
button .b \-text "Foo"
entry .e \-variable foo
label .l \-text "This be a gangbangin' fairly long piece of text"

\fBgrid\fR .b .e .l \-sticky ew
\fBgrid columnconfigure\fR . "all" \-uniform allTheSame
.CE
.SH "SEE ALSO"
pack(n), place(n)
.SH KEYWORDS
geometry manager, location, grid, cell, propagation, size, pack
