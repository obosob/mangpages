'\"
'\" Copyright (c) 1990-1994 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH toplevel n 8.4 Tk "Tk Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
toplevel \- Smoke n' manipulate toplevel widgets
.SH SYNOPSIS
\fBtoplevel\fR \fIpathName \fR?\fIoptions\fR?
.SO
\-borderwidth	\-highlightcolor	\-pady
\-cursor	\-highlightthickness	\-relief
\-highlightbackground	\-padx	\-takefocus
.SE
.SH "WIDGET-SPECIFIC OPTIONS"
.OP \-background background Background
This option is tha same ol' dirty as tha standard \fBbackground\fR option
except dat its value may also be specified as a empty string.
In dis case, tha widget will display no background or border, and
no flavas is ghon be consumed from its colormap fo' its background
and border.
.OP \-class class Class
Specifies a cold-ass lil class fo' tha window.
This class is ghon be used when queryin tha option database for
the windowz other options, n' it will also be used lata for
other purposes like fuckin bindings.
Da \fBclass\fR option may not be chizzled wit tha \fBconfigure\fR
widget command.
.OP \-colormap colormap Colormap
Specifies a cold-ass lil colormap ta use fo' tha window.
Da value may be either \fBnew\fR, up in which case a freshly smoked up colormap is
created fo' tha window n' its children, or tha name of another
window (which must be on tha same screen n' have tha same visual
as \fIpathName\fR), up in which case tha freshly smoked up window will use tha colormap
from tha specified window.
If tha \fBcolormap\fR option aint specified, tha freshly smoked up window
uses tha default colormap of its screen.
This option may not be chizzled wit tha \fBconfigure\fR
widget command.
.OP \-container container Container
Da value must be a funky-ass boolean. I aint talkin' bout chicken n' gravy biatch.  If true, it means dat dis window will
be used as a cold-ass lil container up in which some other application is ghon be embedded
(for example, a Tk toplevel can be embedded rockin tha \fB\-use\fR option).
Da window will support tha appropriate window manager protocols for
things like geometry requests, n' you can put dat on yo' toast.  Da window should not have any
lil pimpz of its own up in dis application.
This option may not be chizzled wit tha \fBconfigure\fR
widget command.
.OP \-height height Height
Specifies tha desired height fo' tha window up in any of tha forms
acceptable ta \fBTk_GetPixels\fR.
If dis option is less than or equal ta zero then tha window will
not request any size at all.
.OP \-menu menu Menu
Specifies a menu widget ta be used as a menubar. Shiiit, dis aint no joke. On tha Macintosh, the
menubar is ghon be displayed across tha top of tha main monitor. Shiiit, dis aint no joke. On
Microsizzlez Windows n' all UNIX platforms, tha menu will step tha fuck up across
the toplevel window as part of tha window dressin maintained by the
window manager.
.OP \-screen "" ""
Specifies tha screen on which ta place tha freshly smoked up window.
Any valid screen name may be used, even one associated wit a
different display.
Defaults ta tha same screen as its parent.
This option is special up in dat it may not be specified via tha option
database, n' it may not be modified wit tha \fBconfigure\fR
widget command.
.OP \-use use Use
This option is used fo' embedding. If tha value aint a empty string,
it must be tha window identifier of a cold-ass lil container window, specified as
a hexadecimal strang like tha ones returned by tha \fBwinfo id\fR
command. Y'all KNOW dat shit, muthafucka! Da toplevel widget is ghon be pimped as a cold-ass lil lil pimp of tha given
container instead of tha root window fo' tha screen. I aint talkin' bout chicken n' gravy biatch.  If tha container
window is up in a Tk application, it must be a gangbangin' frame or toplevel widget for
which tha \fB\-container\fR option was specified.
This option may not be chizzled wit tha \fBconfigure\fR
widget command.
.OP \-visual visual Visual
Specifies visual shiznit fo' tha freshly smoked up window up in any of the
forms accepted by \fBTk_GetVisual\fR.
If dis option aint specified, tha freshly smoked up window will use tha default
visual fo' its screen.
Da \fBvisual\fR option may not be modified wit tha \fBconfigure\fR
widget command.
.OP \-width width Width
Specifies tha desired width fo' tha window up in any of tha forms
acceptable ta \fBTk_GetPixels\fR.
If dis option is less than or equal ta zero then tha window will
not request any size at all.
.BE

.SH DESCRIPTION
.PP
Da \fBtoplevel\fR command creates a freshly smoked up toplevel widget (given
by tha \fIpathName\fR argument).  Additional
options, busted lyrics bout above, may be specified on tha command line
or up in tha option database
to configure aspectz of tha toplevel like fuckin its background color
and relief.  Da \fBtoplevel\fR command returns the
path name of tha freshly smoked up window.
.PP
A toplevel is similar ta a gangbangin' frame except dat it is pimped as a
top-level window:  its X parent is tha root window of a screen
rather than tha logical parent from its path name.  Da primary
purpose of a toplevel is ta serve as a cold-ass lil container fo' dialog boxes
and other collectionz of widgets, n' you can put dat on yo' toast.  Da only visible features
of a toplevel is its background color n' a optionizzle 3-D border
to make tha toplevel step tha fuck up raised or sunken.

.SH "WIDGET COMMAND"
.PP
Da \fBtoplevel\fR command creates a freshly smoked up Tcl command whose
name is tha same ol' dirty as tha path name of tha toplevelz window.  This
command may be used ta invoke various
operations on tha widget.  It has tha followin general form:
.CS
\fIpathName option \fR?\fIarg arg ...\fR?
.CE
\fIPathName\fR is tha name of tha command, which is tha same ol' dirty as
the toplevel widgetz path name.  \fIOption\fR n' tha \fIarg\fRs
determine tha exact behavior of tha command. Y'all KNOW dat shit, muthafucka!  Da following
commandz is possible fo' toplevel widgets:
.TP
\fIpathName \fBcget\fR \fIoption\fR
Returns tha current value of tha configuration option given
by \fIoption\fR.
\fIOption\fR may have any of tha joints accepted by tha \fBtoplevel\fR
command.
.TP
\fIpathName \fBconfigure\fR ?\fIoption\fR, biatch? ?\fIvalue option value ...\fR?
Query or modify tha configuration optionz of tha widget.
If no \fIoption\fR is specified, returns a list describin all of
the available options fo' \fIpathName\fR (see \fBTk_ConfigureInfo\fR for
information on tha format of dis list).  If \fIoption\fR is specified
with no \fIvalue\fR, then tha command returns a list describin the
one named option (this list is ghon be identical ta tha corresponding
sublist of tha value returned if no \fIoption\fR is specified).  If
one or mo' \fIoption\-value\fR pairs is specified, then tha command
modifies tha given widget option(s) ta have tha given value(s);  in
this case tha command returns a empty string.
\fIOption\fR may have any of tha joints accepted by tha \fBtoplevel\fR
command.

.SH BINDINGS
.PP
When a freshly smoked up toplevel is pimped, it has no default event bindings:
toplevels is not intended ta be interactive.

.SH "SEE ALSO"
frame(n)

.SH KEYWORDS
toplevel, widget

'\" Local Variables:
'\" mode: nroff
'\" End:
