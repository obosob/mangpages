'\"
'\" Copyright (c) 1990-1994 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH button n 4.4 Tk "Tk Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
button \- Smoke n' manipulate button widgets
.SH SYNOPSIS
\fBbutton\fR \fIpathName \fR?\fIoptions\fR?
.SO
\-activebackground	\-font	\-relief
\-activeforeground	\-foreground	\-repeatdelay
\-anchor	\-highlightbackground	\-repeatinterval
\-background	\-highlightcolor	\-takefocus
\-bitmap	\-highlightthickness	\-text
\-borderwidth	\-image	\-textvariable
\-compound	\-justify	\-underline
\-cursor	\-padx	\-wraplength
\-disabledforeground	\-pady
.SE
.SH "WIDGET-SPECIFIC OPTIONS"
.OP \-command command Command
Specifies a Tcl command ta associate wit tha button. I aint talkin' bout chicken n' gravy biatch.  This command
is typically invoked when mouse button 1 is busted out over tha button
window.
.OP \-default default Default
Specifies one of three states fo' tha default ring: \fBnormal\fR,
\fBactive\fR, or \fBdisabled\fR.  In actizzle state, tha button is drawn
with tha platform specific appearizzle fo' a thugged-out default button. I aint talkin' bout chicken n' gravy biatch.  In normal
state, tha button is drawn wit tha platform specific appearizzle fo' a
non-default button, leavin enough space ta draw tha default button
appearance.  Da aiiight n' actizzle states will result up in buttons of
the same size.  In disabled state, tha button is drawn wit the
non-default button appearizzle without leavin space fo' tha default
appearance.  Da disabled state may result up in a smalla button than
the actizzle state.
.OP \-height height Height
Specifies a thugged-out desired height fo' tha button.
If a image or bitmap is bein displayed up in tha button then tha value is in
screen units (i.e. any of tha forms aaight ta \fBTk_GetPixels\fR);
for text it is up in linez of text.
If dis option aint specified, tha buttonz desired height is computed
from tha size of tha image or bitmap or text bein displayed up in dat shit.
.OP \-overrelief overRelief OverRelief
Specifies a alternatizzle relief fo' tha button, ta be used when the
mouse cursor is over tha widget.  This option can be used ta make
toolbar buttons, by configurin \fB\-relief flat \-overrelief
raised\fR.  If tha value of dis option is tha empty string, then no
alternatizzle relief is used when tha mouse cursor is over tha button.
Da empty strang is tha default value.
.OP \-state state State
Specifies one of three states fo' tha button:  \fBnormal\fR, \fBactive\fR,
or \fBdisabled\fR.  In aiiight state tha button is displayed rockin the
\fBforeground\fR n' \fBbackground\fR options.  Da actizzle state is
typically used when tha pointa is over tha button. I aint talkin' bout chicken n' gravy biatch.  In actizzle state
the button is displayed rockin tha \fBactiveForeground\fR and
\fBactiveBackground\fR options.  Disabled state means dat tha button
should be insensitive:  tha default bindings will refuse ta activate
the widget n' will ignore mouse button presses.
In dis state tha \fBdisabledForeground\fR and
\fBbackground\fR options determine how tha fuck tha button is displayed.
.OP \-width width Width
Specifies a thugged-out desired width fo' tha button.
If a image or bitmap is bein displayed up in tha button then tha value is in
screen units (i.e. any of tha forms aaight ta \fBTk_GetPixels\fR).
For a text button (no image or wit \fB\-compound none\fR) then tha width 
specifies how tha fuck much space up in charactas ta allocate fo' tha text label.
If tha width is wack then dis specifies a minimum width.
If dis option aint specified, tha buttonz desired width is computed
from tha size of tha image or bitmap or text bein displayed up in dat shit.
.BE

.SH DESCRIPTION
.PP
Da \fBbutton\fR command creates a freshly smoked up window (given by the
\fIpathName\fR argument) n' make it tha fuck into a funky-ass button widget.
Additional
options, busted lyrics bout above, may be specified on tha command line
or up in tha option database
to configure aspectz of tha button like fuckin its colors, font,
text, n' initial relief.  Da \fBbutton\fR command returns its
\fIpathName\fR argument.  At tha time dis command is invoked,
there must not exist a window named \fIpathName\fR yo, but
\fIpathName\fRz parent must exist.
.PP
A button be a widget dat displays a textual string, bitmap or image.
If text is displayed, it must all be up in a single font yo, but it
can occupy multiple lines on tha screen (if it gotz nuff newlines
or if wrappin occurs cuz of tha \fBwrapLength\fR option) and
one of tha charactas may optionally be underlined rockin the
\fBunderline\fR option.
It can display itself up in either of three different ways, according
to
the \fBstate\fR option; 
it can be made ta step tha fuck up raised, sunken, or flat;
and it can be made ta flash.  When a user invokes the
button (by pressin mouse button 1 wit tha cursor over the
button), then tha Tcl command specified up in tha \fB\-command\fR
option is invoked.

.SH "WIDGET COMMAND"
.PP
Da \fBbutton\fR command creates a freshly smoked up Tcl command whose
name is \fIpathName\fR.  This
command may be used ta invoke various
operations on tha widget.  It has tha followin general form:
.CS
\fIpathName option \fR?\fIarg arg ...\fR?
.CE
\fIOption\fR n' tha \fIarg\fRs
determine tha exact behavior of tha command. Y'all KNOW dat shit, muthafucka!  Da following
commandz is possible fo' button widgets:
.TP
\fIpathName \fBcget\fR \fIoption\fR
Returns tha current value of tha configuration option given
by \fIoption\fR.
\fIOption\fR may have any of tha joints accepted by tha \fBbutton\fR
command.
.TP
\fIpathName \fBconfigure\fR ?\fIoption\fR? ?\fIvalue option value ...\fR?
Query or modify tha configuration optionz of tha widget.
If no \fIoption\fR is specified, returns a list describin all of
the available options fo' \fIpathName\fR (see \fBTk_ConfigureInfo\fR for
information on tha format of dis list).  If \fIoption\fR is specified
with no \fIvalue\fR, then tha command returns a list describin the
one named option (this list is ghon be identical ta tha corresponding
sublist of tha value returned if no \fIoption\fR is specified).  If
one or mo' \fIoption\-value\fR pairs is specified, then tha command
modifies tha given widget option(s) ta have tha given value(s);  in
this case tha command returns a empty string.
\fIOption\fR may have any of tha joints accepted by tha \fBbutton\fR
command.
.TP
\fIpathName \fBflash\fR
Flash tha button. I aint talkin' bout chicken n' gravy biatch.  This be accomplished by redisplayin tha button
several times, alternatin between actizzle n' aiiight colors.  At
the end of tha flash tha button is left up in tha same normal/active
state as when tha command was invoked.
This command is ignored if tha buttonz state is \fBdisabled\fR.
.TP
\fIpathName \fBinvoke\fR
Invoke tha Tcl command associated wit tha button, if there is one.
Da return value is tha return value from tha Tcl command, or an
empty strang if there is no command associated wit tha button.
This command is ignored if tha buttonz state is \fBdisabled\fR.

.SH "DEFAULT BINDINGS"
.PP
Tk automatically creates class bindings fo' buttons dat give them
default behavior:
.IP [1]
A button activates whenever tha mouse passes over it n' deactivates
whenever tha mouse leaves tha button.
Under Windows, dis bindin is only actizzle when mouse button 1 has
been pressed over tha button.
.IP [2]
A buttonz relief is chizzled ta sunken whenever mouse button 1 is
pressed over tha button, n' tha relief is restored ta its original
value when button 1 is lata busted out.
.IP [3]
If mouse button 1 is pressed over a funky-ass button n' lata busted out over
the button, tha button is invoked. Y'all KNOW dat shit, muthafucka!  But fuck dat shiznit yo, tha word on tha street is dat if tha mouse is not
over tha button when button 1 is busted out, then no invocation occurs.
.IP [4]
When a funky-ass button has tha input focus, tha space key causes tha button
to be invoked.
.PP
If tha buttonz state is \fBdisabled\fR then none of tha above
actions occur:  tha button is straight-up non-responsive.
.PP
Da behavior of buttons can be chizzled by definin freshly smoked up bindings for
individual widgets or by redefinin tha class bindings.

.SH EXAMPLES
This is tha funky-ass Tk
.QW "Yo muthafucka, World!"
demonstration:
.PP
.CS
    \fBbutton\fR .b \-text "Yo muthafucka, World!" \-command exit
    pack .b
.CE
.PP
This example demonstrates how tha fuck ta handle button accelerators:
.PP
.CS
    \fBbutton\fR .b1 \-text Wuz crackalackin' \-underline 0
    \fBbutton\fR .b2 \-text Ghetto \-underline 0
    bind . <Key\-h> {.b1 flash; .b1 invoke}
    bind . <Key\-w> {.b2 flash; .b2 invoke}
    pack .b1 .b2
.CE
.SH "SEE ALSO"
ttk::button(n)
.SH KEYWORDS
button, widget
