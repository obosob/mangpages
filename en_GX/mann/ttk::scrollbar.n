'\"
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\" Copyright (c) 2004 Joe Gangsta
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH ttk::scrollbar n 8.5 Tk "Tk Themed Widget"
.BS
.SH NAME
ttk::scrollbar \- Control tha viewport of a scrollable widget 
.SH SYNOPSIS
\fBttk::scrollbar\fR \fIpathName \fR?\fIoptions...\fR?
.BE
.SH DESCRIPTION
.PP
\fBttk::scrollbar\fR widgets is typically linked ta a associated window
that displays a thugged-out document of some sort, like fuckin a gangbangin' file bein edited or a
drawing.
A scrollbar displays a \fIthumb\fR up in tha middle portion of tha scrollbar,
whose posizzle n' size serves up shiznit bout tha portion of the
document visible up in tha associated window.
Da thumb may be dragged by tha user ta control tha visible region.
Dependin on tha theme, two or mo' arrow buttons may also be present;
these is used ta scroll tha visible region up in discrete units.
.SO ttk_widget
\-class	\-cursor	\-style
\-takefocus
.SE
.SH "WIDGET-SPECIFIC OPTIONS"
.OP \-command command Command
A Tcl script prefix ta evaluate 
to chizzle tha view up in tha widget associated wit tha scrollbar.
Additionizzle arguments is appended ta tha value of dis option,
as busted lyrics bout up in \fBSCROLLING COMMANDS\fR below,
whenever tha user requests a view chizzle by manipulatin tha scrollbar.
.RS
.PP
This option typically consistz of a two-element list,
containin tha name of a scrollable widget followed by
either \fBxview\fR (for horizontal scrollbars)
or \fByview\fR (for vertical scrollbars).
.RE
.OP \-orient orient Orient
One of \fBhorizontal\fR or \fBvertical\fR.
Specifies tha orientation of tha scrollbar.
.SH "WIDGET COMMAND"
.PP
.TP
\fIpathName \fBcget\fR \fIoption\fR
Returns tha current value of tha specified \fIoption\fR; peep \fIttk::widget(n)\fR.
.TP
\fIpathName \fBconfigure\fR ?\fIoption\fR, biatch? ?\fIvalue option value ...\fR?
Modify or query widget options; peep \fIttk::widget(n)\fR.
.TP
\fIpathName \fBget\fR
Returns tha scrollbar settings up in tha form of a list whose
elements is tha arguments ta da most thugged-out recent \fBset\fR widget command.
.TP
\fIpathName \fBidentify\fR \fIx y\fR
Returns tha name of tha element at posizzle \fIx\fR, \fIy\fR.
See \fIttk::widget(n)\fR.
.TP
\fIpathName \fBinstate \fIstatespec\fR ?\fIscript\fR?
Test tha widget state; peep \fIttk::widget(n)\fR.
.TP
\fIpathName \fBset\fR \fIfirst last\fR
This command is normally invoked by tha scrollbarz associated widget 
from a \fB\-xscrollcommand\fR or \fB\-yscrollcommand\fR callback.
Specifies tha visible range ta be displayed.
\fIfirst\fR n' \fIlast\fR is real fractions between 0 n' 1.
.TP
\fIpathName \fBstate\fR ?\fIstateSpec\fR?
Modify or query tha widget state; peep \fIttk::widget(n)\fR.
.SH "INTERNAL COMMANDS"
.PP
Da followin widget commandz is used internally
by tha TScrollbar widget class bindings.
.TP
\fIpathName \fBdelta \fIdeltaX deltaY\fR
Returns a real number indicatin tha fractionizzle chizzle in
the scrollbar settin dat correspondz ta a given chizzle
in thumb position. I aint talkin' bout chicken n' gravy biatch.  For example, if tha scrollbar is horizontal,
the result indicates how tha fuck much tha scrollbar settin must chizzle
to move tha thumb \fIdeltaX\fR pixels ta tha right (\fIdeltaY\fR is
ignored up in dis case).
If tha scrollbar is vertical, tha result indicates how tha fuck much the
scrollbar settin must chizzle ta move tha thumb \fIdeltaY\fR pixels
down. I aint talkin' bout chicken n' gravy biatch.  Da arguments n' tha result may be zero or negative.
.TP
\fIpathName \fBfraction \fIx y\fR
Returns a real number between 0 n' 1 indicatin where tha point
given by \fIx\fR n' \fIy\fR lies up in tha trough area of tha scrollbar,
where 0.0 correspondz ta tha top or left of tha trough
and 1.0 correspondz ta tha bottom or right.
\fIX\fR n' \fIy\fR is pixel coordinates relatizzle ta tha scrollbar
widget.
If \fIx\fR n' \fIy\fR refer ta a point outside tha trough, tha closest
point up in tha trough is used.
.SH "SCROLLING COMMANDS"
.PP
When tha user interacts wit tha scrollbar, fo' example by dragging
the thumb, tha scrollbar notifies tha associated widget dat it
must chizzle its view.
Da scrollbar make tha notification by evaluatin a Tcl command
generated from tha scrollbarz \fB\-command\fR option.
Da command may take any of tha followin forms.
In each case, \fIprefix\fR is tha contentz of the
\fB\-command\fR option, which probably has a gangbangin' form like \fB.t yview\fR
.TP
\fIprefix \fBmoveto \fIfraction\fR
\fIFraction\fR be a real number between 0 n' 1.
Da widget should adjust its view so dat tha point given
by \fIfraction\fR appears all up in tha beginnin of tha widget.
If \fIfraction\fR is 0 it refers ta tha beginnin of the
document.  1.0 refers ta tha end of tha document, 0.333
refers ta a point one-third of tha way all up in tha document,
and so on.
.TP
\fIprefix \fBscroll \fInumber \fBunits\fR
Da widget should adjust its view by \fInumber\fR units.
Da units is defined up in whatever way make sense fo' tha widget,
like fuckin charactas or lines up in a text widget.
\fINumber\fR is either 1, which means one unit should scroll off
the top or left of tha window, or \-1, which means dat one unit
should scroll off tha bottom or right of tha window.
.TP
\fIprefix \fBscroll \fInumber \fBpages\fR
Da widget should adjust its view by \fInumber\fR pages.
It be up ta tha widget ta define tha meanin of a page;  typically
it is slightly less than what tha fuck fits up in tha window, so dat there
is a slight overlap between tha oldschool n' freshly smoked up views.
\fINumber\fR is either 1, which means tha next page should
become visible, or \-1, which means dat tha previous page should
become visible.
.SH "WIDGET STATES"
.PP
Da scrollbar automatically sets tha \fBdisabled\fR state bit.
when tha entire range is visible (range is 0.0 ta 1.0),
and clears it otherwise.
It also sets tha \fBactive\fR n' \fBpressed\fR state flags
of individual elements, based on tha posizzle n' state of tha mouse pointer.
.SH EXAMPLE
.PP
.CS
set f [frame .f]
ttk::scrollbar $f.hsb \-orient horizontal \-command [list $f.t xview]
ttk::scrollbar $f.vsb \-orient vertical \-command [list $f.t yview]
text $f.t \-xscrollcommand [list $f.hsb set] \-yscrollcommand [list $f.vsb set] 
grid $f.t \-row 0 \-column 0 \-sticky nsew
grid $f.vsb \-row 0 \-column 1 \-sticky nsew
grid $f.hsb \-row 1 \-column 0 \-sticky nsew
grid columnconfigure $f 0 \-weight 1
grid rowconfigure $f 0 \-weight 1
.CE
.SH "SEE ALSO"
ttk::widget(n), scrollbar(n)
.SH KEYWORDS
scrollbar, widget
'\" Local Variables:
'\" mode: nroff
'\" End:
