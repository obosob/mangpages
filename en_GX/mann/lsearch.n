'\" 
'\" Copyright (c) 1993 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\" Copyright (c) 2001 Kevin B. Kenny <kennykb@acm.org>.  All muthafuckin rights reserved.
'\" Copyright (c) 2003-2004 Donal K. Fellows.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type, biatch? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version, biatch? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH lsearch n 8.5 Tcl "Tcl Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
lsearch \- See if a list gotz nuff a particular element
.SH SYNOPSIS
\fBlsearch \fR?\fIoptions\fR, biatch? \fIlist pattern\fR
.BE

.SH DESCRIPTION
.PP
This command searches tha elementz of \fIlist\fR ta peep if one
of dem matches \fIpattern\fR.  If so, tha command returns tha index
of tha straight-up original gangsta matchin element
(unless tha options \fB\-all\fR or \fB\-inline\fR is specified.)
If not, tha command returns \fB\-1\fR.  Da \fIoption\fR arguments
indicates how tha fuck tha elementz of tha list is ta be matched against
\fIpattern\fR n' must have one of tha joints below:
.SS "MATCHING STYLE OPTIONS"
If all matchin steez options is omitted, tha default matchin style
is \fB\-glob\fR.  If mo' than one matchin steez is specified, the
last matchin steez given takes precedence.
.TP
\fB\-exact\fR
\fIPattern\fR be a literal strang dat is compared fo' exact equality
against each list element.
.TP
\fB\-glob\fR
\fIPattern\fR be a glob-style pattern which is matched against each list
element rockin tha same rulez as tha \fBstrin match\fR command.
.TP
\fB\-regexp\fR
\fIPattern\fR is treated as a regular expression n' matched against
each list element rockin tha rulez busted lyrics bout up in tha \fBre_syntax\fR
reference page.
.TP
\fB\-sorted\fR
Da list elements is up in sorted order n' shit.  If dis option is specified,
\fBlsearch\fR will bust a mo' efficient searchin algorithm ta search
\fIlist\fR.  If no other options is specified, \fIlist\fR be assumed
to be sorted up in increasin order, n' ta contain ASCII strings.  This
option is mutually exclusive wit \fB\-glob\fR n' \fB\-regexp\fR, and
is treated exactly like \fB\-exact\fR when either \fB\-all\fR or
\fB\-not\fR is specified.
.SS "GENERAL MODIFIER OPTIONS"
These options may be given wit all matchin styles.
.TP
\fB\-all\fR
.
Changes tha result ta be tha list of all matchin indices (or all matching
values if \fB\-inline\fR is specified as well.) If indices is returned, the
indices is ghon be up in numeric order n' shit. If joints is returned, tha order of the
values is ghon be tha order of dem joints within tha input \fIlist\fR.
.TP
\fB\-inline\fR
Da matchin value is returned instead of its index (or a empty
strin if no value matches.)  If \fB\-all\fR be also specified, then
the result of tha command is tha list of all joints dat matched.
.TP
\fB\-not\fR
This negates tha sense of tha match, returnin tha index of tha first
non-matchin value up in tha list.
.TP
\fB\-start\fR\0\fIindex\fR
Da list is searched startin at posizzle \fIindex\fR.
.VS 8.5
Da interpretation of tha \fIindex\fR value is tha same ol' dirty as
for tha command \fBstrin index\fR, supportin simple index
arithmetic n' indices relatizzle ta tha end of tha list.
.VE 8.5
.SS "CONTENTS DESCRIPTION OPTIONS"
These options describe how tha fuck ta interpret tha shit up in tha list being
searched. Y'all KNOW dat shit, muthafucka!  They is only meaningful when used wit tha \fB\-exact\fR
and \fB\-sorted\fR options.  If mo' than one is specified, tha last
one takes precedence.  Da default is \fB\-ascii\fR.
.TP
\fB\-ascii\fR
Da list elements is ta be examined as Unicode strings (the name is
for backward-compatibilitizzle reasons.)
.TP
\fB\-dictionary\fR
Da list elements is ta be compared rockin dictionary-style
comparisons (see \fBlsort\fR fo' a gangbangin' fulla description). Note dat this
only cook up a meaningful difference from tha \fB\-ascii\fR option when
the \fB\-sorted\fR option is given, cuz joints is only
dictionary-equal when exactly equal.
.TP
\fB\-integer\fR
Da list elements is ta be compared as integers.
.VS 8.5
.TP
\fB\-nocase\fR
Causes comparisons ta be handled up in a cold-ass lil case-insensitizzle manner n' shit.  Has no
effect if combined wit tha \fB\-dictionary\fR, \fB\-integer\fR, or 
\fB\-real\fR options.
.VE 8.5
.TP
\fB\-real\fR
Da list elements is ta be compared as floating-point joints.
.SS "SORTED LIST OPTIONS"
These options (only meaningful wit tha \fB\-sorted\fR option) specify
how tha list is sorted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  If mo' than one is given, tha last one takes
precedence.  Da default option is \fB\-increasing\fR.
.TP
\fB\-decreasing\fR
Da list elements is sorted up in decreasin order n' shit.  This option is only
meaningful when used wit \fB\-sorted\fR.
.TP
\fB\-increasing\fR
Da list elements is sorted up in increasin order n' shit.  This option is only
meaningful when used wit \fB\-sorted\fR.
.SS "NESTED LIST OPTIONS"
.VS 8.5
These options is used ta search listz of lists, n' you can put dat on yo' toast.  They may be used
with any other options.
.TP
\fB\-index\fR\0\fIindexList\fR
This option is designed fo' use when searchin within nested lists.
Da \fIindexList\fR argument gives a path of indices (much as might be
used wit tha \fBlindex\fR or \fBlset\fR commands) within each element
to allow tha location of tha term bein matched against.
.TP
\fB\-subindices\fR
If dis option is given, tha index result from dis command (or every
index result when \fB\-all\fR be also specified) is ghon be a cold-ass lil complete
path (suitable fo' use wit \fBlindex\fR or \fBlset\fR) within the
overall list ta tha term found. Y'all KNOW dat shit, muthafucka!  This option has no effect unless the
\fI\-index\fR be also specified, n' is just a cold-ass lil convenience short-cut.
.VE 8.5
.SH EXAMPLES
Basic searching:
.CS
\fBlsearch\fR {a b c d e} c
      \fI\(-> 2\fR
\fBlsearch\fR -all {a b c a funky-ass b c} c
      \fI\(-> 2 5\fR
.CE
.PP
Usin \fBlsearch\fR ta filta lists:
.CS
\fBlsearch\fR -inline {a20 b35 c47} b*
      \fI\(-> b35\fR
\fBlsearch\fR -inline -not {a20 b35 c47} b*
      \fI\(-> a20\fR
\fBlsearch\fR -all -inline -not {a20 b35 c47} b*
      \fI\(-> a20 c47\fR
\fBlsearch\fR -all -not {a20 b35 c47} b*
      \fI\(-> 0 2\fR
.CE
.PP
This can even do a
.QW set-like
removal operation:
.CS
\fBlsearch\fR -all -inline -not -exact {a b c a thugged-out d e a gangbangin' f g a} a
      \fI\(-> b c d e f g\fR
.CE
.PP
Searchin may start part-way all up in tha list:
.CS
\fBlsearch\fR -start 3 {a b c a funky-ass b c} c
      \fI\(-> 5\fR
.CE
.PP
It be also possible ta search inside elements:
.CS
\fBlsearch\fR -index 1 -all -inline {{a abc} {b bcd} {c cde}} *bc*
      \fI\(-> {a abc} {b bcd}\fR
.CE
.SH "SEE ALSO"
foreach(n), list(n), lappend(n), lindex(n), linsert(n), llength(n), 
lset(n), lsort(n), lrange(n), lreplace(n),
.VS 8.5
string(n)
.VE
.SH KEYWORDS
list, match, pattern, regular expression, search, string
'\" Local Variables:
'\" mode: nroff
'\" End:
