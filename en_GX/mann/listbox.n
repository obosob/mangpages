'\"
'\" Copyright (c) 1990 Da Regentz of tha Universitizzle of California.
'\" Copyright (c) 1994-1997 Sun Microsystems, Inc.
'\"
'\" See tha file "license.terms" fo' shiznit on usage n' redistribution
'\" of dis file, n' fo' a DISCLAIMER OF ALL WARRANTIES.
'\" 
.\" Da -*- nroff -*- definitions below is fo' supplemenstrual macros used
.\" up in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describin a argument ta a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" ta describe whether procedure readz or modifies arg,
.\"	and indent is equivalent ta second arg of .IP (shouldn't eva be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizez of arguments fo' settin tab stops.  Type and
.\"	name is examplez of phattest possible arguments dat is ghon be passed
.\"	to .AP later n' shit.  If args is omitted, default tab stops is used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, every last muthafuckin thang will be
.\"	enclosed up in one big-ass box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, fo' use up in markin newly-changed parts
.\"	of playa pages.  Da first argument is ignored n' used fo' recording
.\"	the version when tha .VS was added, so dat tha sidebars can be
.\"	found n' removed when they reach a cold-ass lil certain age.  If another argument
.\"	is present, then a line break is forced before startin tha sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin a indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options fo' a Tk widget. Da manpage
.\"	argument defines where ta look up tha standard options; if
.\"	omitted, defaults ta "options". Da options follow on successive
.\"	lines, up in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options fo' a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option. I aint talkin' bout chicken n' gravy biatch.  cmdName gives the
.\"	optionz name as specified up in tha class command, dbName gives
.\"	the optionz name up in tha option database, n' dbClass gives
.\"	the optionz class up in tha option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 up in quotes, then arg2 normally (for trailin punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print a open parenthesis, arg1 up in quotes, then arg2 normally
.\"	(for trailin punctuation) n' then a cold-ass lil closin parenthesis.
.\"
.\"	# Set up traps n' other miscellaneous shiznit fo' Tcl/Tk playa pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start a argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbin joints fo' .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = startin y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally yo, but don't draw top of
.\"	box if tha box started on a earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = startin y location
.\"	# ^v = 1 (for troff;  fo' nroff dis don't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro ta handle page bottom:  finish off current
.\"	# box/sidebar if up in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if dis is tha boxz first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See tha \\*(So manual entry fo' details on tha standard options.
..
.\"	# OP - start of full description fo' a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks ta word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens n' quotation marks ta word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.TH listbox n 8.4 Tk "Tk Built-In Commands"
.BS
'\" Note:  do not modify tha .SH NAME line immediately below!
.SH NAME
listbox \- Smoke n' manipulate listbox widgets
.SH SYNOPSIS
\fBlistbox\fR \fIpathName \fR?\fIoptions\fR?
.SO
\-background	\-borderwidth	\-cursor
\-disabledforeground	\-exportselection	\-font
\-foreground	\-highlightbackground	\-highlightcolor
\-highlightthickness	\-relief	\-selectbackground
\-selectborderwidth	\-selectforeground	\-setgrid
\-takefocus	\-xscrollcommand	\-yscrollcommand
.SE
.SH "WIDGET-SPECIFIC OPTIONS"
.OP \-activestyle activeStyle ActiveStyle
Specifies tha steez up in which ta draw tha actizzle element.  This must be
one of \fBdotbox\fR (show a gangbangin' focus rang round tha actizzle element),
\fBnone\fR (no special indication of actizzle element) or
\fBunderline\fR (underline tha actizzle element).
Da default is \fBunderline\fR on Windows, n' \fBdotbox\fR elsewhere.
.OP \-height height Height
Specifies tha desired height fo' tha window, up in lines.
If zero or less, then tha desired height fo' tha window is made just
pimpin' enough ta hold all tha elements up in tha listbox.
.OP \-listvariable listVariable Variable
Specifies tha name of a global variable.  Da value of tha variable be a list to
be displayed inside tha widget; if tha variable value chizzlez then the
widget will automatically update itself ta reflect tha freshly smoked up value.  Attempts
to assign a variable wit a invalid list value ta \fB\-listvariable\fR
will cause a error. Shiiit, dis aint no joke.  Attempts ta unset a variable up in use as a
\fB\-listvariable\fR will fail but aint gonna generate a error.
.OP \-selectmode selectMode SelectMode
Specifies one of nuff muthafuckin stylez fo' manipulatin tha selection.
Da value of tha option may be arbitrary yo, but tha default bindings
expect it ta be either \fBsingle\fR, \fBbrowse\fR, \fBmultiple\fR,
or \fBextended\fR;  tha default value is \fBbrowse\fR.
.OP \-state state State
Specifies one of two states fo' tha listbox:  \fBnormal\fR or \fBdisabled\fR.
If tha listbox is disabled then shit may not be banged or deleted,
items is drawn up in tha \fB\-disabledforeground\fR color, n' selection
cannot be modified n' aint shown (though selection shiznit is retained).
.OP \-width width Width
Specifies tha desired width fo' tha window up in characters.
If tha font aint gots a uniform width then tha width of tha character
.QW 0
is used up in translatin from characta units ta screen units.
If zero or less, then tha desired width fo' tha window is made just
pimpin' enough ta hold all tha elements up in tha listbox.
.BE
.SH DESCRIPTION
.PP
Da \fBlistbox\fR command creates a freshly smoked up window (given by the
\fIpathName\fR argument) n' make it tha fuck into a listbox widget.
Additional
options, busted lyrics bout above, may be specified on tha command line
or up in tha option database
to configure aspectz of tha listbox like fuckin its colors, font,
text, n' relief.  Da \fBlistbox\fR command returns its
\fIpathName\fR argument.  At tha time dis command is invoked,
there must not exist a window named \fIpathName\fR yo, but
\fIpathName\fRz parent must exist.
.PP
A listbox be a widget dat displays a list of strings, one per line.
When first pimped, a freshly smoked up listbox has no elements.
Elements may be added or deleted rockin widget commandz busted lyrics about
below.  In addition, one or mo' elements may be selected as busted lyrics about
below.
If a listbox is exportin its selection (see \fBexportSelection\fR
option), then it will observe tha standard X11 protocols
for handlin tha selection.
Listbox selections is available as type \fBSTRING\fR;
the value of tha selection is ghon be tha text of tha selected elements, with
newlines separatin tha elements.
.PP
It aint necessary fo' all tha elements ta be
displayed up in tha listbox window at once;  commandz busted lyrics bout below
may be used ta chizzle tha view up in tha window.  Listboxes allow
scrollin up in both directions rockin tha standard \fBxScrollCommand\fR
and \fByScrollCommand\fR options.
They also support scanning, as busted lyrics bout below.
.SH "INDICES"
.PP
Many of tha widget commandz fo' listboxes take one or mo' indices
as arguments.
An index specifies a particular element of tha listbox, up in any of
the followin ways:
.TP 12
\fInumber\fR
Specifies tha element as a numerical index, where 0 corresponds
to tha straight-up original gangsta element up in tha listbox.
.TP 12
\fBactive\fR
Indicates tha element dat has tha location cursor. Shiiit, dis aint no joke.  This element
will be displayed as specified by \fB\-activestyle\fR when tha listbox
has tha keyboard focus, n' it is specified wit tha \fBactivate\fR
widget command.
.TP 12
\fBanchor\fR
Indicates tha anchor point fo' tha selection, which is set wit the
\fBselection anchor\fR widget command.
.TP 12
\fBend\fR
Indicates tha end of tha listbox.
For most commandz dis refers ta tha last element up in tha listbox,
but fo' all dem commandz like fuckin \fBindex\fR n' \fBinsert\fR
it refers ta tha element just afta tha last one.
.TP 12
\fB@\fIx\fB,\fIy\fR
Indicates tha element dat covers tha point up in tha listbox window
specified by \fIx\fR n' \fIy\fR (in pixel coordinates).  If no
element covers dat point, then tha closest element ta that
point is used.
.LP
In tha widget command descriptions below, arguments named \fIindex\fR,
\fIfirst\fR, n' \fIlast\fR always contain text indices up in one of
the above forms.
.SH "WIDGET COMMAND"
.PP
Da \fBlistbox\fR command creates a freshly smoked up Tcl command whose
name is \fIpathName\fR.  This
command may be used ta invoke various
operations on tha widget.  It has tha followin general form:
.CS
\fIpathName option \fR?\fIarg arg ...\fR?
.CE
\fIOption\fR n' tha \fIarg\fRs
determine tha exact behavior of tha command. Y'all KNOW dat shit, muthafucka!  Da following
commandz is possible fo' listbox widgets:
.TP
\fIpathName \fBactivate\fR \fIindex\fR
Sets tha actizzle element ta tha one indicated by \fIindex\fR.
If \fIindex\fR is outside tha range of elements up in tha listbox
then tha closest element be activated.
Da actizzle element is drawn as specified by \fB\-activestyle\fR when the
widget has tha input focus, n' its index may be retrieved wit the
index \fBactive\fR.
.TP
\fIpathName \fBbbox\fR \fIindex\fR
Returns a list of four numbers describin tha boundin box of
the text up in tha element given by \fIindex\fR.
Da first two elementz of tha list give tha x n' y coordinates
of tha upper-left corner of tha screen area covered by tha text
(specified up in pixels relatizzle ta tha widget) n' tha last two
elements give tha width n' height of tha area, up in pixels.
If no part of tha element given by \fIindex\fR is visible on the
screen,
or if \fIindex\fR refers ta a non-existent element,
then tha result be a empty string;  if tha element is
partially visible, tha result gives tha full area of tha element,
includin any parts dat is not visible.
.TP
\fIpathName \fBcget\fR \fIoption\fR
Returns tha current value of tha configuration option given
by \fIoption\fR.
\fIOption\fR may have any of tha joints accepted by tha \fBlistbox\fR
command.
.TP
\fIpathName \fBconfigure\fR ?\fIoption\fR? ?\fIvalue option value ...\fR?
Query or modify tha configuration optionz of tha widget.
If no \fIoption\fR is specified, returns a list describin all of
the available options fo' \fIpathName\fR (see \fBTk_ConfigureInfo\fR for
information on tha format of dis list).  If \fIoption\fR is specified
with no \fIvalue\fR, then tha command returns a list describin the
one named option (this list is ghon be identical ta tha corresponding
sublist of tha value returned if no \fIoption\fR is specified).  If
one or mo' \fIoption\-value\fR pairs is specified, then tha command
modifies tha given widget option(s) ta have tha given value(s);  in
this case tha command returns a empty string.
\fIOption\fR may have any of tha joints accepted by tha \fBlistbox\fR
command.
.TP
\fIpathName \fBcurselection\fR
Returns a list containin tha numerical indices of
all of tha elements up in tha listbox dat is currently selected.
If there be no elements selected up in tha listbox then a empty
strin is returned.
.TP
\fIpathName \fBdelete \fIfirst \fR?\fIlast\fR?
Deletes one or mo' elementz of tha listbox.  \fIFirst\fR n' \fIlast\fR
are indices specifyin tha straight-up original gangsta n' last elements up in tha range
to delete.  If \fIlast\fR aint specified it defaults to
\fIfirst\fR, i.e. a single element is deleted.
.TP
\fIpathName \fBget \fIfirst\fR ?\fIlast\fR?
If \fIlast\fR is omitted, returns tha contentz of tha listbox
element indicated by \fIfirst\fR,
or a empty strang if \fIfirst\fR refers ta a non-existent element.
If \fIlast\fR is specified, tha command returns a list whose elements
are all of tha listbox elements between \fIfirst\fR n' \fIlast\fR,
inclusive.
Both \fIfirst\fR n' \fIlast\fR may have any of tha standard
forms fo' indices.
.TP
\fIpathName \fBindex \fIindex\fR
Returns tha integer index value dat correspondz ta \fIindex\fR.
If \fIindex\fR is \fBend\fR tha return value be a cold-ass lil count of tha number
of elements up in tha listbox (not tha index of tha last element).
.TP
\fIpathName \fBinsert \fIindex \fR?\fIelement element ...\fR?
Inserts zero or mo' freshly smoked up elements up in tha list just before the
element given by \fIindex\fR.  If \fIindex\fR is specified as
\fBend\fR then tha freshly smoked up elements is added ta tha end of the
list.  Returns a empty string.
.TP
\fIpathName \fBitemcget \fIindex option\fR
Returns tha current value of tha item configuration option given
by \fIoption\fR. \fIOption\fR may have any of tha joints accepted 
by tha \fBlistbox itemconfigure\fR command.
.TP
\fIpathName \fBitemconfigure \fIindex\fR ?\fIoption\fR? ?\fIvalue\fR? ?\fIoption value ...\fR?
Query or modify tha configuration optionz of a item up in tha listbox.
If no \fIoption\fR is specified, returns a list describin all of
the available options fo' tha item (see \fBTk_ConfigureInfo\fR for
information on tha format of dis list).  If \fIoption\fR is specified
with no \fIvalue\fR, then tha command returns a list describin the
one named option (this list is ghon be identical ta tha corresponding
sublist of tha value returned if no \fIoption\fR is specified).  If
one or mo' \fIoption\-value\fR pairs is specified, then tha command
modifies tha given widget option(s) ta have tha given value(s);  in
this case tha command returns a empty string. Da followin options
are currently supported fo' items:
.RS
.TP
\fB\-background \fIcolor\fR
\fIColor\fR specifies tha background color ta use when displayin tha 
item. Well shiiiit, it may have any of tha forms accepted by \fBTk_GetColor\fR.
.TP
\fB\-foreground \fIcolor\fR
\fIColor\fR specifies tha foreground color ta use when displayin the
item. Well shiiiit, it may have any of tha forms accepted by \fBTk_GetColor\fR.
.TP
\fB\-selectbackground \fIcolor\fR
\fIcolor\fR specifies tha background color ta use when displayin the
item while it is selected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Well shiiiit, it may have any of tha forms accepted by
\fBTk_GetColor\fR.
.TP
\fB\-selectforeground \fIcolor\fR
\fIcolor\fR specifies tha foreground color ta use when displayin the
item while it is selected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Well shiiiit, it may have any of tha forms accepted by
\fBTk_GetColor\fR.
.RE
.TP
\fIpathName \fBnearest \fIy\fR
Given a y-coordinizzle within tha listbox window, dis command returns
the index of tha (visible) listbox element nearest ta dat y-coordinate.
.TP
\fIpathName \fBscan\fR \fIoption args\fR
This command is used ta implement scannin on listboxes.  It has
two forms, dependin on \fIoption\fR:
.RS
.TP
\fIpathName \fBscan mark \fIx y\fR
Recordz \fIx\fR n' \fIy\fR n' tha current view up in tha listbox
window;  used up in conjunction wit lata \fBscan dragto\fR commands.
Typically dis command be associated wit a mouse button press in
the widget.  It returns a empty string.
.TP
\fIpathName \fBscan dragto \fIx y\fR.
This command computes tha difference between its \fIx\fR n' \fIy\fR
arguments n' tha \fIx\fR n' \fIy\fR arguments ta tha last
\fBscan mark\fR command fo' tha widget.
It then adjusts tha view by 10 times the
difference up in coordinates.  This command is typically associated
with mouse motion events up in tha widget, ta produce tha effect of
draggin tha list at high speed all up in tha window.  Da return
value be a empty string.
.RE
.TP
\fIpathName \fBsee \fIindex\fR
Adjust tha view up in tha listbox so dat tha element given by \fIindex\fR
is visible.
If tha element be already visible then tha command has no effect;
if tha element is near one edge of tha window then tha listbox
scrolls ta brang tha element tha fuck into view all up in tha edge;  otherwise
the listbox scrolls ta centa tha element.
.TP
\fIpathName \fBselection \fIoption arg\fR
This command is used ta adjust tha selection within a listbox.  It
has nuff muthafuckin forms, dependin on \fIoption\fR:
.RS
.TP
\fIpathName \fBselection anchor \fIindex\fR
Sets tha selection anchor ta tha element given by \fIindex\fR.
If \fIindex\fR refers ta a non-existent element, then tha closest
element is used.
Da selection anchor is tha end of tha selection dat is fixed
while draggin up a selection wit tha mouse.
Da index \fBanchor\fR may be used ta refer ta tha anchor
element.
.TP
\fIpathName \fBselection clear \fIfirst \fR?\fIlast\fR?
If any of tha elements between \fIfirst\fR n' \fIlast\fR
(inclusive) is selected, they is deselected.
Da selection state aint chizzled fo' elements outside
this range.
.TP
\fIpathName \fBselection includes \fIindex\fR
Returns 1 if tha element indicated by \fIindex\fR is currently
selected, 0 if it is not.
.TP
\fIpathName \fBselection set \fIfirst \fR?\fIlast\fR?
Selects all of tha elements up in tha range between
\fIfirst\fR n' \fIlast\fR, inclusive, without affecting
the selection state of elements outside dat range.
.RE
.TP
\fIpathName \fBsize\fR
Returns a thugged-out decimal strang indicatin tha total number of elements
in tha listbox.
.TP
\fIpathName \fBxview \fIargs\fR
This command is used ta query n' chizzle tha horizontal posizzle of the
information up in tha widgetz window.  It can take any of tha following
forms:
.RS
.TP
\fIpathName \fBxview\fR
Returns a list containin two elements.
Each element be a real fraction between 0 n' 1;  together they describe
the horizontal span dat is visible up in tha window.
For example, if tha straight-up original gangsta element is .2 n' tha second element is .6,
20% of tha listboxz text is off-screen ta tha left, tha middle 40% is visible
in tha window, n' 40% of tha text is off-screen ta tha right.
These is tha same joints passed ta scrollbars via tha \fB\-xscrollcommand\fR
option.
.TP
\fIpathName \fBxview\fR \fIindex\fR
Adjusts tha view up in tha window so dat tha characta posizzle given by
\fIindex\fR is displayed all up in tha left edge of tha window.
Characta positions is defined by tha width of tha characta \fB0\fR.
.TP
\fIpathName \fBxview moveto\fI fraction\fR
Adjusts tha view up in tha window so dat \fIfraction\fR of the
total width of tha listbox text is off-screen ta tha left.
\fIfraction\fR must be a gangbangin' fraction between 0 n' 1.
.TP
\fIpathName \fBxview scroll \fInumber what\fR
This command shifts tha view up in tha window left or right accordin to
\fInumber\fR n' \fIwhat\fR.
\fINumber\fR must be a integer.
\fIWhat\fR must be either \fBunits\fR or \fBpages\fR or a abbreviation
of one of these.
If \fIwhat\fR is \fBunits\fR, tha view adjusts left or right by
\fInumber\fR characta units (the width of tha \fB0\fR character)
on tha display;  if it is \fBpages\fR then tha view adjusts by
\fInumber\fR screenfuls.
If \fInumber\fR is wack then charactas farther ta tha left
become visible;  if it is positizzle then charactas farther ta tha right
become visible.
.RE
.TP
\fIpathName \fByview \fI?args\fR?
This command is used ta query n' chizzle tha vertical posizzle of the
text up in tha widgetz window.
It can take any of tha followin forms:
.RS
.TP
\fIpathName \fByview\fR
Returns a list containin two elements, both of which is real fractions
between 0 n' 1.
Da first element gives tha posizzle of tha listbox element at the
top of tha window, relatizzle ta tha listbox as a whole (0.5 means
it is halfway all up in tha listbox, fo' example).
Da second element gives tha posizzle of tha listbox element just after
the last one up in tha window, relatizzle ta tha listbox as a whole.
These is tha same joints passed ta scrollbars via tha \fB\-yscrollcommand\fR
option.
.TP
\fIpathName \fByview\fR \fIindex\fR
Adjusts tha view up in tha window so dat tha element given by
\fIindex\fR is displayed all up in tha top of tha window.
.TP
\fIpathName \fByview moveto\fI fraction\fR
Adjusts tha view up in tha window so dat tha element given by \fIfraction\fR
appears all up in tha top of tha window.
\fIFraction\fR be a gangbangin' fraction between 0 n' 1;  0 indicates tha first
element up in tha listbox, 0.33 indicates tha element one-third the
way all up in tha listbox, n' so on.
.TP
\fIpathName \fByview scroll \fInumber what\fR
This command adjusts tha view up in tha window up or down accordin to
\fInumber\fR n' \fIwhat\fR.
\fINumber\fR must be a integer.
\fIWhat\fR must be either \fBunits\fR or \fBpages\fR.
If \fIwhat\fR is \fBunits\fR, tha view adjusts up or down by
\fInumber\fR lines;  if it is \fBpages\fR then
the view adjusts by \fInumber\fR screenfuls.
If \fInumber\fR is wack then earlier elements
become visible;  if it is positizzle then lata elements
become visible.
.RE
.SH "DEFAULT BINDINGS"
.PP
Tk automatically creates class bindings fo' listboxes dat give them
Motif-like behavior. Shiiit, dis aint no joke.  Much of tha behavior of a listbox is determined
by its \fBselectMode\fR option, which selects one of four ways
of dealin wit tha selection.
.PP
If tha selection mode is \fBsingle\fR or \fBbrowse\fR, at most one
element can be selected up in tha listbox at once.
In both modes, clickin button 1 on a element selects
it n' deselects any other selected item.
In \fBbrowse\fR mode it be also possible ta drag tha selection
with button 1.
.VS 8.5
On button 1, tha listbox will also take focus if it has a \fBnormal\fR
state n' \fB\-takefocus\fR is true.
.VE 8.5
.PP
If tha selection mode is \fBmultiple\fR or \fBextended\fR,
any number of elements may be selected at once, includin discontiguous
ranges.  In \fBmultiple\fR mode, clickin button 1 on a element
togglez its selection state without affectin any other elements.
In \fBextended\fR mode, pressin button 1 on a element selects
it, deselects every last muthafuckin thang else, n' sets tha anchor ta tha element
under tha mouse;  draggin tha mouse wit button 1
down extendz tha selection ta include all tha elements between
the anchor n' tha element under tha mouse, inclusive.
.PP
Most playas will probably wanna use \fBbrowse\fR mode for
single selections n' \fBextended\fR mode fo' multiple selections;
the other modes step tha fuck up ta be useful only up in special thangs.
.PP
Any time tha selection chizzlez up in tha listbox, tha virtual event
\fB<<ListboxSelect>>\fR is ghon be generated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  It be easiest ta bind
to dis event ta be made aware of any chizzlez ta listbox selection.
.PP
In addizzle ta tha above behavior, tha followin additionizzle behavior
is defined by tha default bindings:
.IP [1]
In \fBextended\fR mode, tha selected range can be adjusted by pressing
button 1 wit tha Shift key down:  dis modifies tha selection to
consist of tha elements between tha anchor n' tha element under
the mouse, inclusive.
Da un-anchored end of dis freshly smoked up selection can also be dragged with
the button down.
.IP [2]
In \fBextended\fR mode, pressin button 1 wit tha Control key down
starts a toggle operation: tha anchor is set ta tha element under
the mouse, n' its selection state is reversed. Y'all KNOW dat shit, muthafucka!  Da selection state
of other elements aint chizzled.
If tha mouse is dragged wit button 1 down, then tha selection state
of all elements between tha anchor n' tha element under tha mouse
is set ta match dat of tha anchor element;  tha selection state of
all other elements remains what tha fuck dat shiznit was before tha toggle operation
fuckin started.
.IP [3]
If tha mouse leaves tha listbox window wit button 1 down, tha window
scrolls away from tha mouse, makin shiznit visible dat used
to be off-screen on tha side of tha mouse.
Da scrollin continues until tha mouse re-entas tha window, the
button is busted out, or tha end of tha listbox is reached.
.IP [4]
Mouse button 2 may be used fo' scanning.
If it is pressed n' dragged over tha listbox, tha contents of
the listbox drag at high speed up in tha direction tha mouse moves.
.IP [5]
If tha Up or Down key is pressed, tha location cursor (active
element) moves up or down one element.
If tha selection mode is \fBbrowse\fR or \fBextended\fR then the
new actizzle element be also selected n' all other elements are
deselected.
In \fBextended\fR mode tha freshly smoked up actizzle element becomes the
selection anchor.
.IP [6]
In \fBextended\fR mode, Shift-Up n' Shift-Down move tha location
cursor (actizzle element) up or down one element n' also extend
the selection ta dat element up in a gangbangin' fashizzle similar ta dragging
with mouse button 1.
.IP [7]
Da Left n' Right keys scroll tha listbox view left n' right
by tha width of tha characta \fB0\fR.
Control-Left n' Control-Right scroll tha listbox view left and
right by tha width of tha window.
Control-Prior n' Control-Next also scroll left n' right by
the width of tha window.
.IP [8]
Da Prior n' Next keys scroll tha listbox view up n' down
by one page (the height of tha window).
.IP [9]
Da Home n' End keys scroll tha listbox horizontally to
the left n' right edges, respectively.
.IP [10]
Control-Home sets tha location cursor ta tha straight-up original gangsta element in
the listbox, selects dat element, n' deselects every last muthafuckin thang else
in tha listbox.
.IP [11]
Control-End sets tha location cursor ta tha last element in
the listbox, selects dat element, n' deselects every last muthafuckin thang else
in tha listbox.
.IP [12]
In \fBextended\fR mode, Control-Shift-Home extendz tha selection
to tha straight-up original gangsta element up in tha listbox n' Control-Shift-End extends
the selection ta tha last element.
.IP [13]
In \fBmultiple\fR mode, Control-Shift-Home moves tha location cursor
to tha straight-up original gangsta element up in tha listbox n' Control-Shift-End moves
the location cursor ta tha last element.
.IP [14]
Da space n' Select keys cook up a selection all up in tha location cursor
(actizzle element) just as if mouse button 1 had been pressed over
this element.
.IP [15]
In \fBextended\fR mode, Control-Shift-space n' Shift-Select
extend tha selection ta tha actizzle element just as if button 1
had been pressed wit tha Shift key down.
.IP [16]
In \fBextended\fR mode, tha Escape key cancels da most thugged-out recent
selection n' restores all tha elements up in tha selected range
to they previous selection state.
.IP [17]
Control-slash selects every last muthafuckin thang up in tha widget, except in
\fBsingle\fR n' \fBbrowse\fR modes, up in which case it selects
the actizzle element n' deselects every last muthafuckin thang else.
.IP [18]
Control-backslash deselects every last muthafuckin thang up in tha widget, except in
\fBbrowse\fR mode where it has no effect.
.IP [19]
Da F16 key (labelled Copy on nuff Sun workstations) or Meta-w
copies tha selection up in tha widget ta tha clipboard, if there is
a selection.
.PP
Da behavior of listboxes can be chizzled by definin freshly smoked up bindings for
individual widgets or by redefinin tha class bindings.
.SH "SEE ALSO"
ttk_treeview(n)
.SH KEYWORDS
listbox, widget
