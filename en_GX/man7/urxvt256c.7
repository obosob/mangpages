.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some characta translations n' predefined strings.  \*(-- will
.\" give a unbreakable dash, \*(PI'ma give pi, \*(L" will give a left
.\" double quote, n' \*(R" will give a right double quote.  \*(C+ will
.\" give a sickr C++.  Capital omega is used ta do unbreakable dashes and
.\" therefore won't be available.  \*(C` n' \*(C' expand ta `' up in nroff,
.\" not a god damn thang up in troff, fo' use wit C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    dz -- \(*W-
.    dz PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    dz L" ""
.    dz R" ""
.    dz C` ""
.    dz C' ""
'br\}
.el\{\
.    dz -- \|\(em\|
.    dz PI \(*p
.    dz L" ``
.    dz R" ''
.    dz C`
.    dz C'
'br\}
.\"
.\" Escape single quotes up in literal strings from groffz Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If tha F regista is turned on, we'll generate index entries on stderr for
.\" titlez (.TH), headaz (.SH), subsections (.SS), shit (.Ip), n' index
.\" entries marked wit X<> up in POD.  Of course, you gonna gotta process the
.\" output yo ass up in some meaningful fashion.
.\"
.\" Avoid warnin from groff bout undefined regista 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear. Shiiit, dis aint no joke.  Run. I aint talkin' bout chicken n' gravy biatch.  Save yo ass.  No user-serviceable parts.
.    \" fudge factors fo' nroff n' troff
.if n \{\
.    dz #H 0
.    dz #V .8m
.    dz #F .3m
.    dz #[ \f1
.    dz #] \fP
.\}
.if t \{\
.    dz #H ((1u-(\\\\n(.fu%2u))*.13m)
.    dz #V .6m
.    dz #F 0
.    dz #[ \&
.    dz #] \&
.\}
.    \" simple accents fo' nroff n' troff
.if n \{\
.    dz ' \&
.    dz ` \&
.    dz ^ \&
.    dz , \&
.    dz ~ ~
.    dz /
.\}
.if t \{\
.    dz ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    dz ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    dz ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    dz , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    dz ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    dz / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff n' (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" erections fo' vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" fo' low resolution devices (crt n' lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    dz : e
.    dz 8 ss
.    dz o a
.    dz d- d\h'-1'\(ga
.    dz D- D\h'-1'\(hy
.    dz th \o'bp'
.    dz Th \o'LP'
.    dz ae ae
.    dz Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "urxvt256c 7"
.TH urxvt256c 7 "2014-04-26" "9.20" "RXVT-UNICODE"
.\" For nroff, turn off justification. I aint talkin' bout chicken n' gravy biatch.  Always turn off hyphenation; it makes
.\" way too nuff mistakes up in technical documents.
.if n .ad l
.nh
.SH "NAME"
RXVT REFERENCE \- FAQUIZZY, command sequences n' other background shiznit
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&   # set a freshly smoked up font set
\&   printf \*(Aq\e33]50;%s\e007\*(Aq 9x15,xft:Kochi" Mincho"
\&
\&   # chizzle tha locale n' tell rxvt\-unicode bout it
\&   export LC_CTYPE=ja_JP.EUC\-JP; printf "\e33]701;$LC_CTYPE\e007"
\&
\&   # set window title
\&   printf \*(Aq\e33]2;%s\e007\*(Aq "new window title"
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document gotz nuff tha \s-1FAQ,\s0 tha \s-1RXVT TECHNICAL REFERENCE\s0 documenting
all escape sequences, n' other background shiznit.
.PP
Da newest version of dis document be also available on tha Ghetto Wide Web at
<http://pod.tst.eu/http://cvs.schmorp.de/rxvt\-unicode/doc/rxvt.7.pod>.
.PP
Da main manual page fo' urxvt256c itself be available at
<http://pod.tst.eu/http://cvs.schmorp.de/rxvt\-unicode/doc/rxvt.1.pod>.
.SH "RXVT\-UNICODE/URXVT FREQUENTLY ASKED QUESTIONS"
.IX Header "RXVT-UNICODE/URXVT FREQUENTLY ASKED QUESTIONS"
.SS "Meta, Features & Commandline Issues"
.IX Subsection "Meta, Features & Commandline Issues"
\fIMy fuckin question aint answered here, can I ask a human?\fR
.IX Subsection "My fuckin question aint answered here, can I ask a human?"
.PP
Before bustin  me mail, you could git all up in \s-1IRC: \s0\f(CW\*(C`irc.freenode.net\*(C'\fR,
channel \f(CW\*(C`#rxvt\-unicode\*(C'\fR has some rxvt-unicode enthusiasts dat might be
horny bout peepin' bout freshly smoked up n' bangin problems (but not FAQUIZZYs :).
.PP
\fII use Gentoo, n' I gots a problem...\fR
.IX Subsection "I use Gentoo, n' I gots a problem..."
.PP
There is three big-ass problems wit Gentoo Linux: first of all, most if not
all Gentoo systems is straight-up fucked up (missin or mismatched header
files, fucked up compila etc. is just tha tip of tha iceberg); secondly,
the Gentoo maintainer be thinkin it aint nuthin but a phat scam ta add fucked up patches to
the code; n' lastly, it should be called Gentoo GNU/Linux.
.PP
For these reasons, it is impossible ta support rxvt-unicode on
Gentoo. Problems appearin on Gentoo systems will probably simply be
ignored unless they can be reproduced on non-Gentoo systems.
.PP
\fIDo it support tabs, can I gots a tabbed rxvt-unicode?\fR
.IX Subsection "Do it support tabs, can I gots a tabbed rxvt-unicode?"
.PP
Beginnin wit version 7.3, there be a perl extension dat implements a
simple tabbed terminal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Well shiiiit, it is installed by default, so any of these should
give you tabs:
.PP
.Vb 1
\&   urxvt \-pe tabbed
\&
\&   URxvt.perl\-ext\-common: default,tabbed
.Ve
.PP
It will also work fine wit tabbin functionalitizzle of nuff window managers
or similar tabbin programs, n' its embedding-features allow it ta be
embedded tha fuck into other programs, as witnessed by \fIdoc/rxvt\-tabbed\fR or
the upcomin \f(CW\*(C`Gtk2::URxvt\*(C'\fR perl module, which features a tabbed urxvt
(murxvt) terminal as a example embeddin application.
.PP
\fIHow tha fuck do I know which rxvt-unicode version I be using?\fR
.IX Subsection "How tha fuck do I know which rxvt-unicode version I be using?"
.PP
Da version number is displayed wit tha usage (\-h) fo' realz. Also tha escape
sequence \f(CW\*(C`ESC [ 8 n\*(C'\fR sets tha window title ta tha version number n' shit. When
usin tha urxvtc client, tha version displayed is dat of the
daemon.
.PP
\fIRxvt-unicode uses gobz of memory, how tha fuck can I reduce that?\fR
.IX Subsection "Rxvt-unicode uses gobz of memory, how tha fuck can I reduce that?"
.PP
Rxvt-unicode tries ta obey tha rule of not chargin you fo' suttin' you
don't use. One thang you should try is ta configure up all settings that
you don't need, fo' example, Xft support be a resource hog by design,
when used. Y'all KNOW dat shit, muthafucka! Compilin it up ensures dat no Xft font is ghon be loaded
accidentally when rxvt-unicode tries ta find a gangbangin' font fo' yo' characters.
.PP
Also, nuff playas (me included) like big-ass windows n' even larger
scrollback buffers: Without \f(CW\*(C`\-\-enable\-unicode3\*(C'\fR, rxvt-unicode will use
6 bytes per screen cell. For a 160x?, biatch? window dis amounts ta almost a
kilobyte per line fo' realz. A scrollback buffer of 10000 lines will then (if full)
use 10 Megabytez of memory. With \f(CW\*(C`\-\-enable\-unicode3\*(C'\fR it gets worse, as
rxvt-unicode then uses 8 bytes per screen cell.
.PP
\fIHow tha fuck can I start urxvtd up in a race-free way?\fR
.IX Subsection "How tha fuck can I start urxvtd up in a race-free way?"
.PP
Try \f(CW\*(C`urxvtd \-f \-o\*(C'\fR, which  drops some lyrics ta urxvtd ta open the
display, create tha listenin socket n' then fork.
.PP
\fIHow tha fuck can I start urxvtd automatically when I run urxvtc?\fR
.IX Subsection "How tha fuck can I start urxvtd automatically when I run urxvtc?"
.PP
If you wanna start urxvtd automatically whenever you run
urxvtc n' tha daemon aint hustlin yet, use dis script:
.PP
.Vb 6
\&   #!/bin/sh
\&   urxvtc "$@"
\&   if [ $, biatch? \-eq 2 ]; then
\&      urxvtd \-q \-o \-f
\&      urxvtc "$@"
\&   fi
.Ve
.PP
This tries ta create a freshly smoked up terminal, n' if fails wit exit status 2,
meanin it couldn't connect ta tha daemon, it will start tha daemon and
re-run tha command. Y'all KNOW dat shit, muthafucka! Subsequent invocationz of tha script will re-use the
existin daemon.
.PP
\fIHow tha fuck do I distinguish whether I be hustlin rxvt-unicode or a regular xterm, biatch? I need dis ta decizzle bout settin colours etc.\fR
.IX Subsection "How tha fuck do I distinguish whether I be hustlin rxvt-unicode or a regular xterm, biatch? I need dis ta decizzle bout settin colours etc."
.PP
Da original gangsta rxvt n' rxvt-unicode always export tha variable \*(L"\s-1COLORTERM\*(R",\s0
so you can check n' peep if dat is set. Note dat nuff muthafuckin programs, \s-1JED,\s0
slrn, Midnight Commander automatically check dis variable ta decide
whether or not ta use colour.
.PP
\fIHow tha fuck do I set tha erect, full \s-1IP\s0 address fo' tha \s-1DISPLAY\s0 variable?\fR
.IX Subsection "How tha fuck do I set tha erect, full IP address fo' tha DISPLAY variable?"
.PP
If you've compiled rxvt-unicode wit \s-1DISPLAY_IS_IP\s0 n' have enabled
insecure mode then it is possible ta use tha followin shell script
snippets ta erectly set tha display. If yo' version of rxvt-unicode
wasn't also compiled wit \s-1ESCZ_ANSWER \s0(as assumed up in these snippets) then
the \s-1COLORTERM\s0 variable can be used ta distinguish rxvt-unicode from a
regular xterm.
.PP
Courtesy of Chuck Blake <cblake@BBN.COM> wit tha followin shell script
snippets:
.PP
.Vb 12
\&   # Bourne/Korn/POSIX crew of shells:
\&   [ ${TERM:\-foo} = foo ] && TERM=xterm # assume a xterm if our phat asses don\*(Aqt know
\&   if [ ${TERM:\-foo} = xterm ]; then
\&      stty \-icanon \-echo min 0 time 15 # peep if enhanced rxvt or not
\&      printf "\eeZ"
\&      read term_id
\&      stty icanon echo
\&      if [ ""${term_id} = \*(Aq^[[?1;2C\*(Aq \-a ${DISPLAY:\-foo} = foo ]; then
\&         printf \*(Aq\ee[7n\*(Aq        # query tha rxvt we is up in fo' tha DISPLAY string
\&         read DISPLAY          # set it up in our local shell
\&      fi
\&   fi
.Ve
.PP
\fIHow tha fuck do I compile tha manual pages on mah own?\fR
.IX Subsection "How tha fuck do I compile tha manual pages on mah own?"
.PP
Yo ass need ta git a recent version of perl installed as \fI/usr/bin/perl\fR,
one dat comes wit \fIpod2man\fR, \fIpod2text\fR n' \fIpod2xhtml\fR (from
\&\fIPod::Xhtml\fR). Then git all up in tha doc subdirectory n' enta \f(CW\*(C`make alldoc\*(C'\fR.
.PP
\fIIsn't rxvt-unicode supposed ta be small, biatch? Don't all dem features bloat?\fR
.IX Subsection "Isn't rxvt-unicode supposed ta be small, biatch? Don't all dem features bloat?"
.PP
I often git axed bout this, n' I think, no, they didn't cause extra
bloat. If you compare a minimal rxvt n' a minimal urxvt, you can see
that tha urxvt binary is larger (due ta some encodin tablez always being
compiled in) yo, but it straight-up uses less memory (\s-1RSS\s0) afta startup. Even
with \f(CW\*(C`\-\-disable\-everything\*(C'\fR, dis comparison be a lil' bit unfair, as many
features unique ta urxvt (locale, encodin conversion, iso14755 etc.) are
already up in use up in dis mode.
.PP
.Vb 3
\&    text    data     bss     drs     rss filename
\&   98398    1664      24   15695    1824 rxvt \-\-disable\-everything
\&  188985    9048   66616   18222    1788 urxvt \-\-disable\-everything
.Ve
.PP
When you \f(CW\*(C`\-\-enable\-everything\*(C'\fR (which \fIis\fR unfair, as dis involves xft
and full locale/XIM support which is like bloaty inside libX11 n' my
libc), tha two diverge yo, but not unreasonably so.
.PP
.Vb 3
\&    text    data     bss     drs     rss filename
\&  163431    2152      24   20123    2060 rxvt \-\-enable\-everything
\& 1035683   49680   66648   29096    3680 urxvt \-\-enable\-everything
.Ve
.PP
Da straight-up big-ass size of tha text section is explained by tha eastside-asian
encodin tables, which, if unused, take up disk space but not a god damn thang else
and can be compiled up unless you rely on X11 core fonts dat use them
encodings. Da \s-1BSS\s0 size be reppin tha 64k emergency buffer dat mah c++
compila allocates (but of course don't use unless yo ass is up of
memory) fo' realz. Also, rockin a xft font instead of a cold-ass lil core font immediately addz a
few megabytez of \s-1RSS.\s0 Xft indeed is responsible fo' a shitload of \s-1RSS\s0 even when
not used.
.PP
Of course, cuz of every last muthafuckin characta rockin two or four bytes instead of one,
a big-ass scrollback buffer will ultimately make rxvt-unicode use more
memory.
.PP
Compared ta e.g. Eterm (5112k), aterm (3132k) n' xterm (4680k), this
still fares rather well fo' realz. And compared ta some monstas like gnome-terminal
(21152k + extra 4204k up in separate processes) or konsole (22200k + extra
43180k up in daemons dat stay round afta exit, plus half a minute of
startup time, includin tha hundredz of warnings it spits out), it fares
extremely well *g*.
.PP
\fIWhy \*(C+, aint dat unportable/bloated/uncool?\fR
.IX Subsection "Why , aint dat unportable/bloated/uncool?"
.PP
Is dis a question, biatch? WHAT! It comes up straight-up often. I aint talkin' bout chicken n' gravy biatch. Da simple answer is: I had
to write it, n' \*(C+ allowed mah crazy ass ta write n' maintain it up in a gangbangin' fraction
of tha time n' effort (which be a scarce resource fo' me). Put even
shorter: It simply wouldn't exist without \*(C+.
.PP
My fuckin underground stizzle on dis is dat \*(C+ is less portable than C yo, but in
the case of rxvt-unicode dis hardly matters, as its portabilitizzle limits
are defined by thangs like X11, pseudo terminals, locale support n' unix
domain sockets, which is all less portable than \*(C+ itself.
.PP
Regardin tha bloat, peep tha above question: It aint nuthin but easy as fuck  ta write programs
in C dat use gobz of memory, n' certainly possible ta write programs in
\&\*(C+ dat don't. \*(C+ also often comes wit big-ass libraries yo, but dis is
not necessarily tha case wit \s-1GCC.\s0 Here is what tha fuck rxvt links against on my
system wit a minimal config:
.PP
.Vb 4
\&   libX11.so.6 => /usr/X11R6/lib/libX11.so.6 (0x00002aaaaabc3000)
\&   libc.so.6 => /lib/libc.so.6 (0x00002aaaaadde000)
\&   libdl.so.2 => /lib/libdl.so.2 (0x00002aaaab01d000)
\&   /lib64/ld\-linux\-x86\-64.so.2 (0x00002aaaaaaab000)
.Ve
.PP
And here is rxvt-unicode:
.PP
.Vb 5
\&   libX11.so.6 => /usr/X11R6/lib/libX11.so.6 (0x00002aaaaabc3000)
\&   libgcc_s.so.1 => /lib/libgcc_s.so.1 (0x00002aaaaada2000)
\&   libc.so.6 => /lib/libc.so.6 (0x00002aaaaaeb0000)
\&   libdl.so.2 => /lib/libdl.so.2 (0x00002aaaab0ee000)
\&   /lib64/ld\-linux\-x86\-64.so.2 (0x00002aaaaaaab000)
.Ve
.PP
No big-ass bloated libraries (of course, none was linked up in statically),
except maybe libX11 :)
.SS "Rendering, Font & Look n' Feel Issues"
.IX Subsection "Rendering, Font & Look n' Feel Issues"
\fII can't git transparency working, what tha fuck is I bustin wrong?\fR
.IX Subsection "I can't git transparency working, what tha fuck is I bustin wrong?"
.PP
First of all, transparency aint officially supported up in rxvt-unicode, so
yo ass is mostly on yo' own. I aint talkin' bout chicken n' gravy biatch. Do not bug tha lyricist bout it (but you may
bug dem hoes else) fo' realz. Also, if you can't git it hustlin consider it a rite
of passage: ... n' you failed.
.PP
Here is four ways ta git transparency. \fBDo\fR read tha manpage n' option
descriptions fo' tha programs mentioned n' rxvt-unicode. Really, do dat shiznit son!
.PP
1. Use transparent mode:
.PP
.Vb 2
\&   Esetroot wallpaper.jpg
\&   urxvt \-tr \-tint red \-sh 40
.Ve
.PP
That works. If you be thinkin it don't, you lack transparency n' tinting
support, or yo ass is unable ta read.
This method requires dat tha background-settin program sets the
_XROOTPMAP_ID or \s-1ESETROOT_PMAP_ID\s0 property. Compatible programs
are Esetroot, hsetroot n' feh.
.PP
2. Use a simple pixmap n' emulate pseudo-transparency. This enablez you
to use effects other than tintin n' shading: Just shade/tint/whatever
your picture wit gimp or any other tool:
.PP
.Vb 2
\&   convert wallpaper.jpg \-blur 20x20 \-modulate 30 background.jpg
\&   urxvt \-pixmap "background.jpg;:root"
.Ve
.PP
That works. If you be thinkin it don't, you lack GDK-PixBuf support, or you
are unable ta read.
.PP
3. Use a \s-1ARGB\s0 visual:
.PP
.Vb 1
\&   urxvt \-depth 32 \-fg grey90 \-bg rgba:0000/0000/4444/cccc
.Ve
.PP
This requires \s-1XFT\s0 support, n' tha support of yo' X\-server n' shit. If that
doesn't work fo' you, blame Xorg n' Keith Packard. Y'all KNOW dat shit, muthafucka! \s-1ARGB\s0 visuals aren't
there yet, no matta what tha fuck they claim. Rxvt-Unicode gotz nuff tha necessary
bugfixes n' workaroundz fo' Xft n' Xlib ta make it work yo, but that
doesn't mean dat yo' \s-1WM\s0 has tha required kludges up in place.
.PP
4. Use xcompmgr n' let it do tha thang:
.PP
.Vb 2
\&  xprop \-frame \-f _NET_WM_WINDOW_OPACITY 32c \e
\&        \-set _NET_WM_WINDOW_OPACITY 0xc0000000
.Ve
.PP
Then click on a window you wanna make transparent. Replace \f(CW0xc0000000\fR
by other joints ta chizzle tha degree of opacity. If it don't work and
your server crashes, you gots ta keep tha pieces.
.PP
\fIWhy do rxvt-unicode sometimes leave pixel droppings?\fR
.IX Subsection "Why do rxvt-unicode sometimes leave pixel droppings?"
.PP
Most fonts was not designed fo' terminal use, which means dat character
size varies all muthafuckin day. It make me wanna hollar playa! A font dat is otherwise fine fo' terminal use might
contain some charactas dat is simply too wide. Rxvt-unicode will avoid
these characters. For charactas dat is just \*(L"a bit\*(R" too wide a special
\&\*(L"careful\*(R" renderin mode is used dat redraws adjacent characters.
.PP
All of dis requires dat fonts do not lie bout characta sizes,
however: Xft fonts often draw glyphs larger than they hyped bounding
box, n' rxvt-unicode has no way of detectin dis (the erect way is to
ask fo' tha characta boundin box, which unfortunately is wack up in these
cases).
.PP
It aint nuthin but not clear (to me at least), whether dis be a funky-ass bug up in Xft, freetype,
or tha respectizzle font. If you encounta dis problem you might try using
the \f(CW\*(C`\-lsp\*(C'\fR option ta give tha font mo' height. If dat don't work, you
might be forced ta bust a gangbangin' finger-lickin' different font.
.PP
All of dis aint a problem when rockin X11 core fonts, as they bounding
box data is erect.
.PP
\fIHow tha fuck can I keep rxvt-unicode from rockin reverse vizzle so much?\fR
.IX Subsection "How tha fuck can I keep rxvt-unicode from rockin reverse vizzle so much?"
.PP
First of all, make shizzle yo ass is hustlin wit tha right terminal settings
(\f(CW\*(C`TERM=rxvt\-unicode\*(C'\fR), which will git rid of most of these effects, n' you can put dat on yo' toast. Then
make shizzle you have specified colours fo' italic n' bold, as otherwise
rxvt-unicode might use reverse vizzle ta simulate tha effect:
.PP
.Vb 2
\&   URxvt.colorBD:  white
\&   URxvt.colorIT:  green
.Ve
.PP
\fISome programs assume straight-up weird colours (red instead of blue), how tha fuck can I fix that?\fR
.IX Subsection "Some programs assume straight-up weird colours (red instead of blue), how tha fuck can I fix that?"
.PP
For some unexplainable reason, some rare programs assume a straight-up weird
colour palette when confronted wit a terminal wit mo' than tha standard
8 colours (rxvt-unicode supports 88). Da right fix is, of course, ta fix
these programs not ta assume non-ISO colours without straight-up phat reasons.
.PP
In tha meantime, you can either edit yo' \f(CW\*(C`rxvt\-unicode\*(C'\fR terminfo
definizzle ta only claim 8 colour support or use \f(CW\*(C`TERM=rxvt\*(C'\fR, which will
fix colours but keep you from rockin other rxvt-unicode features.
.PP
\fICan I switch tha fonts at runtime?\fR
.IX Subsection "Can I switch tha fonts at runtime?"
.PP
Yes, rockin a escape sequence. Try suttin' like this, which has tha same
effect as rockin tha \f(CW\*(C`\-fn\*(C'\fR switch, n' takes effect immediately:
.PP
.Vb 1
\&   printf \*(Aq\e33]50;%s\e007\*(Aq "9x15bold,xft:Kochi Gothic"
.Ve
.PP
This is useful if you e.g. work primarily wit japanese (and prefer a
japanese font) yo, but you gotta switch ta chinese temporarily, where
japanese fonts would only be up in yo' way.
.PP
Yo ass can be thinkin of dis as a kind of manual \s-1ISO\-2022\s0 switching.
.PP
\fIWhy do italic charactas look as if clipped?\fR
.IX Subsection "Why do italic charactas look as if clipped?"
.PP
Many fonts have bullshit wit italic charactas n' hinting. For
example, tha otherwise straight-up sickly hinted font \f(CW\*(C`xft:Bitstream Vera Sans
Mono\*(C'\fR straight-up fails up in its italic grill fo' realz. A workaround might be to
enable freetype autohinting, i.e. like this:
.PP
.Vb 2
\&   URxvt.italicFont:        xft:Bitstream Vera Sans Mono:italic:autohint=true
\&   URxvt.boldItalicFont:    xft:Bitstream Vera Sans Mono:bold:italic:autohint=true
.Ve
.PP
\fICan I speed up Xft renderin somehow?\fR
.IX Subsection "Can I speed up Xft renderin somehow?"
.PP
Yes, da most thugged-out obvious way ta speed it up is ta avoid Xft entirely, as
it is simply slow. If you still want Xft fonts you might try ta disable
antialiasin (by appendin \f(CW\*(C`:antialias=false\*(C'\fR), which saves fuckin shitloadz of
memory n' also speedz up renderin considerably.
.PP
\fIRxvt-unicode don't seem ta anti-alias its fonts, what tha fuck is wrong?\fR
.IX Subsection "Rxvt-unicode don't seem ta anti-alias its fonts, what tha fuck is wrong?"
.PP
Rxvt-unicode will use whatever you specify as a gangbangin' font. If it needz to
fall back ta its default font search list it will prefer X11 core
fonts, cuz they is lil' small-ass n' fast, n' then use Xft fonts, n' you can put dat on yo' toast. Well shiiiit, it has
antialiasin disabled fo' most of them, cuz tha lyricist be thinkin they
look dopest dat way.
.PP
If you want antialiasing, you gotta specify tha fonts manually.
.PP
\fIWhatz wit dis bold/blink stuff?\fR
.IX Subsection "Whatz wit dis bold/blink stuff?"
.PP
If no bold colour is set via \f(CW\*(C`colorBD:\*(C'\fR, bold will invert text rockin the
standard foreground colour.
.PP
For tha standard background colour, blinkin will straight-up make
the text blink when compiled wit \f(CW\*(C`\-\-enable\-text\-blink\*(C'\fR. Without
\&\f(CW\*(C`\-\-enable\-text\-blink\*(C'\fR, tha blink attribute is ghon be ignored.
.PP
On \s-1ANSI\s0 colours, bold/blink attributes is used ta set high-intensity
foreground/background colours.
.PP
color0\-7 is tha low-intensitizzle colours.
.PP
color8\-15 is tha correspondin high-intensitizzle colours.
.PP
\fII don't like tha screen colours.  How tha fuck do I chizzle them?\fR
.IX Subsection "I don't like tha screen colours yo. How tha fuck do I chizzle them?"
.PP
Yo ass can chizzle tha screen colours at run-time rockin \fI~/.Xdefaults\fR
resources (or as long-options).
.PP
Here is joints dat is supposed ta resemble a \s-1VGA\s0 screen,
includin tha murky brown dat passes fo' low-intensitizzle yellow:
.PP
.Vb 8
\&   URxvt.color0:   #000000
\&   URxvt.color1:   #A80000
\&   URxvt.color2:   #00A800
\&   URxvt.color3:   #A8A800
\&   URxvt.color4:   #0000A8
\&   URxvt.color5:   #A800A8
\&   URxvt.color6:   #00A8A8
\&   URxvt.color7:   #A8A8A8
\&
\&   URxvt.color8:   #000054
\&   URxvt.color9:   #FF0054
\&   URxvt.color10:  #00FF54
\&   URxvt.color11:  #FFFF54
\&   URxvt.color12:  #0000FF
\&   URxvt.color13:  #FF00FF
\&   URxvt.color14:  #00FFFF
\&   URxvt.color15:  #FFFFFF
.Ve
.PP
And here be a mo' complete set of non-standard colours.
.PP
.Vb 10
\&   URxvt.cursorColor:  #dc74d1
\&   URxvt.pointerColor: #dc74d1
\&   URxvt.background:   #0e0e0e
\&   URxvt.foreground:   #4ad5e1
\&   URxvt.color0:       #000000
\&   URxvt.color8:       #8b8f93
\&   URxvt.color1:       #dc74d1
\&   URxvt.color9:       #dc74d1
\&   URxvt.color2:       #0eb8c7
\&   URxvt.color10:      #0eb8c7
\&   URxvt.color3:       #dfe37e
\&   URxvt.color11:      #dfe37e
\&   URxvt.color5:       #9e88f0
\&   URxvt.color13:      #9e88f0
\&   URxvt.color6:       #73f7ff
\&   URxvt.color14:      #73f7ff
\&   URxvt.color7:       #e1dddd
\&   URxvt.color15:      #e1dddd
.Ve
.PP
They done been busted lyrics bout (not by me) as \*(L"pretty girly\*(R".
.PP
\fIWhy do some charactas look so much different than others?\fR
.IX Subsection "Why do some charactas look so much different than others?"
.PP
See next entry.
.PP
\fIHow tha fuck do rxvt-unicode chizzle fonts?\fR
.IX Subsection "How tha fuck do rxvt-unicode chizzle fonts?"
.PP
Most fonts do not contain tha full range of Unicode, which is
fine. Chances is dat tha font you (or tha admin/package maintainer of
your system/os) have specified do not cover all tha charactas you want
to display.
.PP
\&\fBrxvt-unicode\fR cook up a funky-ass best-effort try at findin a replacement
font. Often tha result is fine yo, but sometimes tha chosen font looks
bad/ugly/wrong. Right back up in yo muthafuckin ass. Some fonts have straight-up strange charactas dat don't
resemble tha erect glyph at all, n' rxvt-unicode lacks tha artificial
intelligence ta detect dat a specific glyph is wrong: it has ta believe
the font dat tha charactas it fronts ta contain indeed look erect.
.PP
In dat case, select a gangbangin' font of yo' taste n' add it ta tha font list,
e.g.:
.PP
.Vb 1
\&   urxvt \-fn basefont,font2,font3...
.Ve
.PP
When rxvt-unicode sees a cold-ass lil character, it will first peep tha base
font. If tha base font do not contain tha character, it will git all up in the
next font, n' so on. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. Specifyin yo' own fonts will also speed up this
search n' use less resources within rxvt-unicode n' tha X\-server.
.PP
Da only limitation is dat none of tha fonts may be larger than tha base
font, as tha base font defines tha terminal characta cell size, which
must be tha same cuz of tha way terminals work.
.PP
\fIWhy do some chinese charactas look so different than others?\fR
.IX Subsection "Why do some chinese charactas look so different than others?"
.PP
This is cuz there be a gangbangin' finger-lickin' difference between script n' language \*(--
rxvt-unicode do not know which language tha text dat is output is,
as it only knows tha unicode characta codes. If rxvt-unicode first
sees a japanese/chinese character, it might chizzle a japanese font for
display. Right back up in yo muthafuckin ass. Subsequent japanese charactas will use dat font. Now, many
chinese charactas aren't represented up in japanese fonts, so when tha first
non-japanese characta comes up, rxvt-unicode will look fo' a cold-ass lil chinese font
\&\*(-- unfortunately at dis point, it will still use tha japanese font for
chinese charactas dat is also up in tha japanese font.
.PP
Da workaround is easy as fuck : just tag a cold-ass lil chinese font all up in tha end of yo' font
list (see tha previous question). Da key is ta view tha font list as
a preference list: If you expect mo' japanese, list a japanese font
first. If you expect mo' chinese, put a cold-ass lil chinese font first.
.PP
In tha future it might be possible ta switch language preferences at
runtime (the internal data structure has no problem wit rockin different
fonts fo' tha same characta all up in tha same time yo, but no intercourse fo' this
has been designed yet).
.PP
Until then, you might git away wit switchin fonts at runtime (see \*(L"Can
I switch tha fonts at runtime?\*(R" lata up in dis document).
.PP
\fIHow tha fuck can I make mplayer display vizzle erectly?\fR
.IX Subsection "How tha fuck can I make mplayer display vizzle erectly?"
.PP
We is hustlin on it, up in tha meantime, as a workaround, use suttin' like:
.PP
.Vb 1
\&   urxvt \-b 600 \-geometry 20x1 \-e sh \-c \*(Aqmplayer \-wid $WINDOWID file...\*(Aq
.Ve
.SS "Keyboard, Mouse & User Interaction"
.IX Subsection "Keyboard, Mouse & User Interaction"
\fIDa freshly smoked up selection selects pieces dat is too big, how tha fuck can I select single lyrics?\fR
.IX Subsection "Da freshly smoked up selection selects pieces dat is too big, how tha fuck can I select single lyrics?"
.PP
If you wanna select e.g. alphanumeric lyrics, you can use tha following
setting:
.PP
.Vb 1
\&   URxvt.selection.pattern\-0: ([[:word:]]+)
.Ve
.PP
If you click mo' than twice, tha selection is ghon be extended
more n' more.
.PP
To git a selection dat is straight-up similar ta tha oldschool code, try dis pattern:
.PP
.Vb 1
\&   URxvt.selection.pattern\-0: ([^"&\*(Aq()*,;<=>?@[\e\e\e\e]^\`{|})]+)
.Ve
.PP
Please also note dat tha \fILeftClick Shift-LeftClick\fR combination also
selects lyrics like tha oldschool code.
.PP
\fII don't like tha freshly smoked up selection/popups/hotkeys/perl, how tha fuck do I chizzle/disable it?\fR
.IX Subsection "I don't like tha freshly smoked up selection/popups/hotkeys/perl, how tha fuck do I chizzle/disable it?"
.PP
Yo ass can disable tha perl extension straight-up by settin the
\&\fBperl-ext-common\fR resource ta tha empty string, which also keeps
rxvt-unicode from initialisin perl, savin memory.
.PP
If you only wanna disable specific features, you first have to
identify which perl extension is responsible. For this, read tha section
\&\fB\s-1PREPACKAGED EXTENSIONS\s0\fR up in tha urxvt\fIperl\fR\|(3) manpage. For
example, ta disable tha \fBselection-popup\fR n' \fBoption-popup\fR, specify
this \fBperl-ext-common\fR resource:
.PP
.Vb 1
\&   URxvt.perl\-ext\-common: default,\-selection\-popup,\-option\-popup
.Ve
.PP
This will keep tha default extensions yo, but disable tha two popup
extensions. Right back up in yo muthafuckin ass. Some extensions can also be configured, fo' example,
scrollback search mode is triggered by \fBM\-s\fR. Yo ass can move it ta any
other combination either by settin tha \fBsearchable-scrollback\fR resource:
.PP
.Vb 1
\&   URxvt.searchable\-scrollback: CM\-s
.Ve
.PP
\fIDa cursor moves when selectin text up in tha current input line, how tha fuck do I switch dis off?\fR
.IX Subsection "Da cursor moves when selectin text up in tha current input line, how tha fuck do I switch dis off?"
.PP
See next entry.
.PP
\fIDurin rlogin/ssh/telnet/etc. sessions, clickin near tha cursor outputs strange escape sequences, how tha fuck do I fix this?\fR
.IX Subsection "Durin rlogin/ssh/telnet/etc. sessions, clickin near tha cursor outputs strange escape sequences, how tha fuck do I fix this?"
.PP
These is caused by tha \f(CW\*(C`readline\*(C'\fR perl extension. I aint talkin' bout chicken n' gravy biatch. Under normal
circumstances, it will move yo' cursor round when you click tha fuck into the
line dat gotz nuff dat shit. Well shiiiit, it tries hard not ta do dis all up in tha wack moment,
but when hustlin a program dat don't parse cursor movements or up in some
cases durin rlogin sessions, it fails ta detect dis properly.
.PP
Yo ass can permanently switch dis feature off by disablin tha \f(CW\*(C`readline\*(C'\fR
extension:
.PP
.Vb 1
\&   URxvt.perl\-ext\-common: default,\-readline
.Ve
.PP
\fIMy fuckin numerical keypad acts weird n' generates differin output?\fR
.IX Subsection "My fuckin numerical keypad acts weird n' generates differin output?"
.PP
Some Debian GNUL/Linux playas seem ta have dis problem, although no
specific details was reported so far. Shiiit, dis aint no joke. Well shiiiit, it is possible dat dis is caused
by tha wack \f(CW\*(C`TERM\*(C'\fR setting, although tha detailz of whether n' how
this can happen is unknown, as \f(CW\*(C`TERM=rxvt\*(C'\fR should offer a cold-ass lil compatible
keymap. Right back up in yo muthafuckin ass. See tha answer ta tha previous question, n' please report if that
helped.
.PP
\fIMy fuckin Compose (Multi_key) key is no longer working.\fR
.IX Subsection "My fuckin Compose (Multi_key) key is no longer working."
.PP
Da most common causes fo' dis is dat either yo' locale aint set
correctly, or you specified a \fBpreeditType\fR dat aint supported by
your input method. Y'all KNOW dat shit, muthafucka! For example, if you specified \fBOverTheSpot\fR and
your input method (e.g. tha default input method handlin Compose keys)
does not support dis (for instizzle cuz it aint visual), then
rxvt-unicode will continue without a input method.
.PP
In dis case either do not specify a \fBpreeditType\fR or specify mo' than
one pre-edit style, like fuckin \fBOverTheSpot,Root,None\fR.
.PP
If it still don't work, then maybe yo' input method don't support
compose sequences \- ta fall back ta tha built-in one, make shizzle you don't
specify a input method via \f(CW\*(C`\-im\*(C'\fR or \f(CW\*(C`XMODIFIERS\*(C'\fR.
.PP
\fII cannot type \f(CI\*(C`Ctrl\-Shift\-2\*(C'\fI ta git a \s-1ASCII NUL\s0 characta cuz of \s-1ISO 14755\s0\fR
.IX Subsection "I cannot type Ctrl-Shift-2 ta git a ASCII NUL characta cuz of ISO 14755"
.PP
Either try \f(CW\*(C`Ctrl\-2\*(C'\fR ridin' solo (it often is mapped ta \s-1ASCII NUL\s0 even on
internationistic keyboards) or simply use \s-1ISO 14755\s0 support ta your
advantage, typin <Ctrl\-Shift\-0> ta git a \s-1ASCII NUL.\s0 This works fo' other
codes, too, like fuckin \f(CW\*(C`Ctrl\-Shift\-1\-d\*(C'\fR ta type tha default telnet escape
characta n' so on.
.PP
\fIMouse cut/paste suddenly no longer works.\fR
.IX Subsection "Mouse cut/paste suddenly no longer works."
.PP
Make shizzle dat mouse reportin is straight-up turned off since cappin'
some editors prematurely may leave it active. I've
heard dat tcsh may use mouse reportin unless it is otherwise specified. Y'all KNOW dat shit, muthafucka! A
quick check is ta peep if cut/paste works when tha Alt or Shift keys are
pressed.
.PP
\fIWhatz wit tha strange Backspace/Delete key behaviour?\fR
.IX Subsection "Whatz wit tha strange Backspace/Delete key behaviour?"
.PP
Assumin dat tha physical Backspace key correspondz ta the
Backspace keysym (not likely fo' Linux ... peep tha following
question) there be two standard joints dat can be used for
Backspace: \f(CW\*(C`^H\*(C'\fR n' \f(CW\*(C`^?\*(C'\fR.
.PP
Historically, either value is erect yo, but rxvt-unicode adopts tha debian
policy of rockin \f(CW\*(C`^?\*(C'\fR when unsure, cuz itz tha one n' only erect
choice :).
.PP
It be possible ta toggle between \f(CW\*(C`^H\*(C'\fR n' \f(CW\*(C`^?\*(C'\fR wit tha \s-1DECBKM\s0
private mode:
.PP
.Vb 3
\&   # use Backspace = ^H
\&   $ stty erase ^H
\&   $ printf "\ee[?67h"
\&
\&   # use Backspace = ^?
\&   $ stty erase ^?
\&   $ printf "\ee[?67l"
.Ve
.PP
This helps satisfy a shitload of tha Backspace discrepancies dat occur yo, but
if you use Backspace = \f(CW\*(C`^H\*(C'\fR, make shizzle dat tha termcap/terminfo value
properly reflects dis shit.
.PP
Da Delete key be a another casualty of tha ill-defined Backspace problem.
To avoid mad drama between tha Backspace n' Delete keys, tha Delete
key has been assigned a escape sequence ta match tha vt100 fo' Execute
(\f(CW\*(C`ESC [ 3 ~\*(C'\fR) n' is up in tha supplied termcap/terminfo.
.PP
Some other Backspace problems:
.PP
some editors use termcap/terminfo,
some editors (vim I be holla'd at) expect Backspace = ^H,
\&\s-1GNU\s0 Emacs (and Emacs-like editors) use ^H fo' help.
.PP
Perhaps somedizzle dis will all be resolved up in a cold-ass lil consistent manner.
.PP
\fII don't like tha key-bindings.  How tha fuck do I chizzle them?\fR
.IX Subsection "I don't like tha key-bindings yo. How tha fuck do I chizzle them?"
.PP
There is some compile-time selections available via configure. Unless
you have run \*(L"configure\*(R" wit tha \f(CW\*(C`\-\-disable\-resources\*(C'\fR option you can
use tha `keysym' resource ta alta tha keystrings associated wit keysyms.
.PP
Herez a example fo' a URxvt session started rockin \f(CW\*(C`urxvt \-name URxvt\*(C'\fR
.PP
.Vb 8
\&   URxvt.keysym.Prior:         \e033[5~
\&   URxvt.keysym.Next:          \e033[6~
\&   URxvt.keysym.Home:          \e033[7~
\&   URxvt.keysym.End:           \e033[8~
\&   URxvt.keysym.Up:            \e033[A
\&   URxvt.keysym.Down:          \e033[B
\&   URxvt.keysym.Right:         \e033[C
\&   URxvt.keysym.Left:          \e033[D
.Ve
.PP
See some mo' examplez up in tha documentation fo' tha \fBkeysym\fR resource.
.PP
\fII be rockin keyboard model \s-1XXX\s0 dat has extra Prior/Next/Insert keys yo. How tha fuck do I make use of them, biatch? For example, tha Sun Keyboard type 4 has tha followin map\fR
.IX Subsection "I be rockin keyboard model XXX dat has extra Prior/Next/Insert keys yo. How tha fuck do I make use of them, biatch? For example, tha Sun Keyboard type 4 has tha followin map"
.PP
.Vb 6
\&   KP_Insert == Insert
\&   F22 == Print
\&   F27 == Home
\&   F29 == Prior
\&   F33 == End
\&   F35 == Next
.Ve
.PP
Rather than have rxvt-unicode try ta accommodate all tha various possible
keyboard mappings, it is betta ta use `xmodmap' ta remap tha keys as
required fo' yo' particular machine.
.SS "Terminal Configuration"
.IX Subsection "Terminal Configuration"
\fICan I peep a typical configuration?\fR
.IX Subsection "Can I peep a typical configuration?"
.PP
Da default configuration tries ta be xterm-like, which I don't like that
much yo, but itz least surprise ta regular users.
.PP
As a rxvt or rxvt-unicode user, yo ass is practically supposed ta invest
time tha fuck into customisin yo' terminal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. To git you started, here is the
authorz .Xdefaults entries, wit comments on what tha fuck they do. It aint nuthin but certainly
not \fItypical\fR yo, but whatz typical...
.PP
.Vb 2
\&   URxvt.cutchars: "()*,<>[]{}|\*(Aq
\&   URxvt.print\-pipe: pussaaaaay >/tmp/xxx
.Ve
.PP
These is just fo' testin stuff.
.PP
.Vb 2
\&   URxvt.imLocale: ja_JP.UTF\-8
\&   URxvt.preeditType: OnTheSpot,None
.Ve
.PP
This  drops some lyrics ta rxvt-unicode ta bust a special locale when communicatin with
the X Input Method, n' also  drops some lyrics ta it ta only use tha OnTheSpot pre-edit
type, which requires tha \f(CW\*(C`xim\-onthespot\*(C'\fR perl extension but rewardz me
with erect-lookin fonts.
.PP
.Vb 6
\&   URxvt.perl\-lib: /root/lib/urxvt
\&   URxvt.perl\-ext\-common: default,selection\-autotransform,selection\-pastebin,xim\-onthespot,remote\-clipboard
\&   URxvt.selection.pattern\-0: ( at .*, biatch? line \e\ed+)
\&   URxvt.selection.pattern\-1: ^(/[^:]+):\e 
\&   URxvt.selection\-autotransform.0: s/^([^:[:space:]]+):(\e\ed+):?$/:e \e\eQ$1\e\eE\e\ex0d:$2\e\ex0d/
\&   URxvt.selection\-autotransform.1: s/^ at (.*?) line (\e\ed+)$/:e \e\eQ$1\e\eE\e\ex0d:$2\e\ex0d/
.Ve
.PP
This is mah perl configuration. I aint talkin' bout chicken n' gravy biatch. Da first two set tha perl library
directory n' also  drops some lyrics ta urxvt ta bust a big-ass number of extensions. I
develop fo' mah dirty ass mostly, so I straight-up use most of tha extensions I
write.
.PP
Da selection shiznit mainly make tha selection perl-error-message aware
and  drops some lyrics ta it ta convert perl error lyrics tha fuck into vi-commandz ta load the
relevant file n' git all up in tha error line number.
.PP
.Vb 2
\&   URxvt.scrollstyle:      plain
\&   URxvt.secondaryScroll:  true
.Ve
.PP
As tha documentation says: plain is tha preferred scrollbar fo' the
lyricist. Da \f(CW\*(C`secondaryScroll\*(C'\fR configures urxvt ta scroll up in full-screen
apps, like screen, so lines scrolled outta screen end up in urxvt's
scrollback buffer.
.PP
.Vb 7
\&   URxvt.background:       #000000
\&   URxvt.foreground:       gray90
\&   URxvt.color7:           gray90
\&   URxvt.colorBD:          #ffffff
\&   URxvt.cursorColor:      #e0e080
\&   URxvt.throughColor:     #8080f0
\&   URxvt.highlightColor:   #f0f0f0
.Ve
.PP
Some colours. Not shizzle which ones is bein used or even non-defaults yo, but
these is up in mah .Xdefaults, n' you can put dat on yo' toast. Most notably, they set foreground/background
to light gray/black, n' also make shizzle dat tha colour 7 matches the
default foreground colour.
.PP
.Vb 1
\&   URxvt.underlineColor:   yellow
.Ve
.PP
Another colour, make underline lines look different. Right back up in yo muthafuckin ass. Sometimes hurts yo, but
is mostly a sick effect.
.PP
.Vb 4
\&   URxvt.geometry:         154x36
\&   URxvt.loginShell:       false
\&   URxvt.meta:             ignore
\&   URxvt.utmpInhibit:      true
.Ve
.PP
Uh, well, should be mostly self-explanatory. By specifyin some defaults
manually, I can quickly switch dem fo' testing.
.PP
.Vb 1
\&   URxvt.saveLines:        8192
.Ve
.PP
A big-ass scrollback buffer is essential. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Really.
.PP
.Vb 1
\&   URxvt.mapAlert:         true
.Ve
.PP
Da only case I use it is fo' mah \s-1IRC\s0 window, which I gotta keep
iconified till playas msg me (which beeps).
.PP
.Vb 1
\&   URxvt.visualBell:       true
.Ve
.PP
Da audible bell is often buggin, especially when up in a cold-ass lil crowd.
.PP
.Vb 1
\&   URxvt.insecure:         true
.Ve
.PP
Please don't hack mah mutt son! Ooops...
.PP
.Vb 1
\&   URxvt.pastableTabs:     false
.Ve
.PP
I once thought dis be a pimped out idea.
.PP
.Vb 9
\&   urxvt.font:             9x15bold,\e
\&                           \-misc\-fixed\-bold\-r\-normal\-\-15\-140\-75\-75\-c\-90\-iso10646\-1,\e
\&                           \-misc\-fixed\-medium\-r\-normal\-\-15\-140\-75\-75\-c\-90\-iso10646\-1, \e
\&                           [codeset=JISX0208]xft:Kochi Gothic, \e
\&                           xft:Bitstream Vera Sans Mono:autohint=true, \e
\&                           xft:Code2000:antialias=false
\&   urxvt.boldFont:         \-xos4\-terminus\-bold\-r\-normal\-\-14\-140\-72\-72\-c\-80\-iso8859\-15
\&   urxvt.italicFont:       xft:Bitstream Vera Sans Mono:italic:autohint=true
\&   urxvt.boldItalicFont:   xft:Bitstream Vera Sans Mono:bold:italic:autohint=true
.Ve
.PP
I freestyled rxvt-unicode ta be able ta specify fonts exactly. Right back up in yo muthafuckin ass. So don't be
overwhelmed. Y'all KNOW dat shit, muthafucka! A special note: tha \f(CW\*(C`9x15bold\*(C'\fR mentioned above be actually
the version from XFree\-3.3, as XFree\-4 replaced it by a straight-up different
font (different glyphs fo' \f(CW\*(C`;\*(C'\fR n' nuff other harmless characters),
while tha second font is straight-up tha \f(CW\*(C`9x15bold\*(C'\fR from XFree4/XOrg. The
bold version has less chars than tha medium version, so I use it fo' rare
characters, like a muthafucka. When editin sources wit vim, I use italic fo' comments
and other stuff, which looks like phat wit Bitstream Vera anti-aliased.
.PP
Terminus be a like wack font (many straight-up wack glyphs) yo, but fo' most of my
purposes, it works, n' gives a gangbangin' finger-lickin' different look, as mah aiiight (Non-bold)
font be already bold, n' I wanna peep a gangbangin' finger-lickin' difference between bold and
normal fonts.
.PP
Please note dat I used tha \f(CW\*(C`urxvt\*(C'\fR instizzle name n' not tha \f(CW\*(C`URxvt\*(C'\fR
class name. That is cuz I use different configs fo' different purposes,
for example, mah \s-1IRC\s0 window is started wit \f(CW\*(C`\-name IRC\*(C'\fR, n' uses these
defaults:
.PP
.Vb 9
\&   IRC*title:              IRC
\&   IRC*geometry:           87x12+535+542
\&   IRC*saveLines:          0
\&   IRC*mapAlert:           true
\&   IRC*font:               suxuseuro
\&   IRC*boldFont:           suxuseuro
\&   IRC*colorBD:            white
\&   IRC*keysym.M\-C\-1:       command:\e033]710;suxuseuro\e007\e033]711;suxuseuro\e007
\&   IRC*keysym.M\-C\-2:       command:\e033]710;9x15bold\e007\e033]711;9x15bold\e007
.Ve
.PP
\&\f(CW\*(C`Alt\-Ctrl\-1\*(C'\fR n' \f(CW\*(C`Alt\-Ctrl\-2\*(C'\fR switch between two different font
sizes. \f(CW\*(C`suxuseuro\*(C'\fR allows me ta keep a eye (and straight-up read)
shiznit while keepin a straight-up lil' small-ass window. If some muthafucka pastes something
fucked up (e.g. japanese), I temporarily switch ta a larger font.
.PP
Da above be all up in mah \f(CW\*(C`.Xdefaults\*(C'\fR (I don't use \f(CW\*(C`.Xresources\*(C'\fR nor
\&\f(CW\*(C`xrdb\*(C'\fR). I also have some resources up in a separate \f(CW\*(C`.Xdefaults\-hostname\*(C'\fR
file fo' different hosts, fo' example, on mah main desktop, I use:
.PP
.Vb 5
\&   URxvt.keysym.C\-M\-q: command:\e033[3;5;5t
\&   URxvt.keysym.C\-M\-y: command:\e033[3;5;606t
\&   URxvt.keysym.C\-M\-e: command:\e033[3;1605;5t
\&   URxvt.keysym.C\-M\-c: command:\e033[3;1605;606t
\&   URxvt.keysym.C\-M\-p: perl:test
.Ve
.PP
Da first fo' keysym definitions allow me ta quickly brang some windows
in tha layout I wanna bust a nut on most. Ion playas might start bustin up but will stop
immediately when I tell dem dat I use mah own Fvwm2 module fo' much the
same effect as Ion provides, n' I only straight-up rarely use tha above key
combinations :\->
.PP
\fIWhy don't rxvt-unicode read mah resources?\fR
.IX Subsection "Why don't rxvt-unicode read mah resources?"
.PP
Well, why, indeed, biatch? It do, up in a way straight-up similar ta other X
applications. Most blinginly, dis means dat if you or yo' \s-1OS\s0 loads
resources tha fuck into tha X display (the right way ta do it), rxvt-unicode will
ignore any resource filez up in yo' home directory. Well shiiiit, it will only read
\&\fI\f(CI$HOME\fI/.Xdefaults\fR when no resources is attached ta tha display.
.PP
If you have or use a \fI\f(CI$HOME\fI/.Xresources\fR file, chances is that
resources is loaded tha fuck into yo' X\-server n' shit. In dis case, you have to
re-login afta every last muthafuckin chizzle (or run \fIxrdb \-merge \f(CI$HOME\fI/.Xresources\fR).
.PP
Also consider tha form resources gotta use:
.PP
.Vb 1
\&  URxvt.resource: value
.Ve
.PP
If you wanna use another form (there is fuckin shitloadz of different ways of
specifyin resources), make shizzle you KNOW whether n' why it
works. If unsure, use tha form above.
.PP
\fIWhen I log-in ta another system it  drops some lyrics ta me bout missin terminfo data?\fR
.IX Subsection "When I log-in ta another system it  drops some lyrics ta me bout missin terminfo data?"
.PP
Da terminal description used by rxvt-unicode aint as widely available
as dat fo' xterm, or even rxvt (for which tha same problem often arises).
.PP
Da erect solution fo' dis problem is ta install tha terminfo, dis can
be done by simply installin rxvt-unicode on tha remote system as well
(in case you gotz a sick package manager ready), or you can install the
terminfo database manually like dis (with ncurses infocmp. works as
user n' root):
.PP
.Vb 2
\&   REMOTE=remotesystem.domain
\&   infocmp rxvt\-unicode | ssh $REMOTE "mkdir \-p .terminfo && pussaaaaay >/tmp/ti && tic /tmp/ti"
.Ve
.PP
One some systems you might need ta set \f(CW$TERMINFO\fR ta tha full path of
\&\fI\f(CI$HOME\fI/.terminfo\fR fo' dis ta work. Debian systems gotz a gangbangin' fucked up tic
which aint gonna be able ta overwrite tha existin rxvt-unicode terminfo
entry \- you might gotta manually delete all tracez of \fIrxvt\-unicode*\fR
from \fI/etc/terminfo\fR.
.PP
If you cannot or do not wanna do this, then you can simply set
\&\f(CW\*(C`TERM=rxvt\*(C'\fR or even \f(CW\*(C`TERM=xterm\*(C'\fR, n' live wit tha lil' small-ass number of
problems arising, which includes wack keymapping, less n' different
colours n' some refresh errors up in fullscreen applications. It aint nuthin but a sick
quick-and-dirty workaround fo' rare cases, though.
.PP
If you always wanna do dis (and is fine wit tha consequences) you
can either recompile rxvt-unicode wit tha desired \s-1TERM\s0 value or use a
resource ta set it:
.PP
.Vb 1
\&   URxvt.termName: rxvt
.Ve
.PP
If you don't plan ta use \fBrxvt\fR (quite common...) you could also replace
the rxvt terminfo file wit tha rxvt-unicode one n' use \f(CW\*(C`TERM=rxvt\*(C'\fR.
.PP
\fInano fails wit \*(L"Error openin terminal: rxvt-unicode\*(R"\fR
.IX Subsection "nano fails wit Error openin terminal: rxvt-unicode"
.PP
This exceptionally confusin n' useless error message is printed by nano
when it can't find tha terminfo database. Nothang is poppin' off wit your
terminal, read tha previous answer fo' a solution.
.PP
\fI\f(CI\*(C`tic\*(C'\fI outputs some error when compilin tha terminfo entry.\fR
.IX Subsection "tic outputs some error when compilin tha terminfo entry."
.PP
Most likely itz tha empty definizzle fo' \f(CW\*(C`enacs=\*(C'\fR. Just replace it by
\&\f(CW\*(C`enacs=\eE[0@\*(C'\fR n' try again.
.PP
\fI\f(CI\*(C`bash\*(C'\fIz readline do not work erectly under urxvt.\fR
.IX Subsection "bashz readline do not work erectly under urxvt."
.PP
See next entry.
.PP
\fII need a termcap file entry.\fR
.IX Subsection "I need a termcap file entry."
.PP
One reason you might want dis is dat some distributions or operating
systems still compile some programs rockin tha long-obsoleted termcap
library (Fedora Corez bash is one example) n' rely on a termcap entry
for \f(CW\*(C`rxvt\-unicode\*(C'\fR.
.PP
Yo ass could use rxvtz termcap entry wit reasonable thangs up in dis biatch up in nuff cases.
Yo ass can also create a termcap entry by rockin terminfoz infocmp program
like this:
.PP
.Vb 1
\&   infocmp \-C rxvt\-unicode
.Ve
.PP
Or you could use tha termcap entry up in doc/etc/rxvt\-unicode.termcap,
generated by tha command above.
.PP
\fIWhy do \f(CI\*(C`ls\*(C'\fI no longer have coloured output?\fR
.IX Subsection "Why do ls no longer have coloured output?"
.PP
Da \f(CW\*(C`ls\*(C'\fR up in tha \s-1GNU\s0 coreutils unfortunately don't use terminfo to
decizzle whether a terminal has colour yo, but uses its own configuration
file. Needless ta say, \f(CW\*(C`rxvt\-unicode\*(C'\fR aint up in its default file (among
with most other terminals supportin colour). Either add:
.PP
.Vb 1
\&   TERM rxvt\-unicode
.Ve
.PP
to \f(CW\*(C`/etc/DIR_COLORS\*(C'\fR or simply add:
.PP
.Vb 1
\&   alias ls=\*(Aqls \-\-color=auto\*(Aq
.Ve
.PP
to yo' \f(CW\*(C`.profile\*(C'\fR or \f(CW\*(C`.bashrc\*(C'\fR.
.PP
\fIWhy don't vim/emacs etc. use tha 88 colour mode?\fR
.IX Subsection "Why don't vim/emacs etc. use tha 88 colour mode?"
.PP
See next entry.
.PP
\fIWhy don't vim/emacs etc. make use of italic?\fR
.IX Subsection "Why don't vim/emacs etc. make use of italic?"
.PP
See next entry.
.PP
\fIWhy is tha secondary screen-related options not hustlin properly?\fR
.IX Subsection "Why is tha secondary screen-related options not hustlin properly?"
.PP
Make shizzle yo ass is rockin \f(CW\*(C`TERM=rxvt\-unicode\*(C'\fR. Right back up in yo muthafuckin ass. Some pre-packaged
distributions (most notably Debian GNU/Linux) break rxvt-unicode
by settin \f(CW\*(C`TERM\*(C'\fR ta \f(CW\*(C`rxvt\*(C'\fR, which aint gots these extra
features. Unfortunately, a shitload of these (most notably, again, Debian
GNU/Linux) furthermore fail ta even install tha \f(CW\*(C`rxvt\-unicode\*(C'\fR terminfo
file, so yo big-ass booty is ghon need ta install it on yo' own (See tha question \fBWhen
I log-in ta another system it  drops some lyrics ta me bout missin terminfo data?\fR on
how ta do this).
.SS "Encodin / Locale / Input Method Issues"
.IX Subsection "Encodin / Locale / Input Method Issues"
\fIRxvt-unicode do not seem ta KNOW tha selected encoding?\fR
.IX Subsection "Rxvt-unicode do not seem ta KNOW tha selected encoding?"
.PP
See next entry.
.PP
\fIUnicode do not seem ta work?\fR
.IX Subsection "Unicode do not seem ta work?"
.PP
If you encounta strange problems like typin a accented characta but
gettin two unrelated other charactas or similar, or if program output is
subtly garbled, then you should check yo' locale settings.
.PP
Rxvt-unicode must be started wit tha same \f(CW\*(C`LC_CTYPE\*(C'\fR settin as the
programs hustlin up in dat shit. Often rxvt-unicode is started up in tha \f(CW\*(C`C\*(C'\fR locale,
while tha login script hustlin within tha rxvt-unicode window chizzlez the
locale ta suttin' else, e.g. \f(CW\*(C`en_GB.UTF\-8\*(C'\fR. Needless ta say, dis is
not goin ta work, n' is da most thugged-out common cause fo' problems.
.PP
Da dopest thang is ta fix yo' startup environment, as yo big-ass booty is ghon likely run
into other problems. If not a god damn thang works you can try dis up in yo' .profile.
.PP
.Vb 1
\&  printf \*(Aq\e33]701;%s\e007\*(Aq "$LC_CTYPE"   # $LANG or $LC_ALL is worth a try, too
.Ve
.PP
If dis don't work, then maybe you bust a \f(CW\*(C`LC_CTYPE\*(C'\fR justification not
supported on yo' systems. Right back up in yo muthafuckin ass. Some systems gotz a \f(CW\*(C`locale\*(C'\fR command which
displays dis (also, \f(CW\*(C`perl \-e0\*(C'\fR can be used ta check locale settings, as
it will diss loudly if it cannot set tha locale). If it displays something
like:
.PP
.Vb 1
\&  locale: Cannot set LC_CTYPE ta default locale: ...
.Ve
.PP
Then tha locale you specified aint supported on yo' system.
.PP
If not a god damn thang works n' yo ass is shizzle dat every last muthafuckin thang is set erectly then
you will need ta remember a lil known fact: Some programs just don't
support localez :(
.PP
\fIHow tha fuck do rxvt-unicode determine tha encodin ta use?\fR
.IX Subsection "How tha fuck do rxvt-unicode determine tha encodin ta use?"
.PP
See next entry.
.PP
\fIIs there a option ta switch encodings?\fR
.IX Subsection "Is there a option ta switch encodings?"
.PP
Unlike some other terminals, rxvt-unicode has no encodin switch, n' no
specific \*(L"utf\-8\*(R" mode, like fuckin xterm. In fact, it don't even know about
\&\s-1UTF\-8\s0 or any other encodings wit respect ta terminal I/O.
.PP
Da reasons is dat there exists a perfectly fine mechanizzle fo' selecting
the encoding, bustin I/O n' (most blingin) communicatin dis ta all
applications so dem hoes agrees on characta propertizzles like fuckin width
and code number n' shit. This mechanizzle is tha \fIlocale\fR fo' realz. Applications not using
that info gonna git problems (for example, \f(CW\*(C`xterm\*(C'\fR gets tha width of
charactas wack as it uses its own, locale-independent table under all
locales).
.PP
Rxvt-unicode uses tha \f(CW\*(C`LC_CTYPE\*(C'\fR locale category ta select encodin fo' realz. All
programs bustin tha same (that is, most) will automatically smoke up in the
interpretation of characters.
.PP
Unfortunately, there is no system-independent way ta select locales, nor
is there a standard on how tha fuck locale specifiers will look like.
.PP
On most systems, tha content of tha \f(CW\*(C`LC_CTYPE\*(C'\fR environment variable
gotz nuff a arbitrary strang which correspondz ta a already-installed
locale. Common names fo' localez is \f(CW\*(C`en_US.UTF\-8\*(C'\fR, \f(CW\*(C`de_DE.ISO\-8859\-15\*(C'\fR,
\&\f(CW\*(C`ja_JP.EUC\-JP\*(C'\fR, i.e. \f(CW\*(C`language_country.encoding\*(C'\fR yo, but other forms
(i.e. \f(CW\*(C`de\*(C'\fR or \f(CW\*(C`german\*(C'\fR) is also common.
.PP
Rxvt-unicode ignores all other locale categories, n' except for
the encoding, ignores ghetto or language-specific settings,
i.e. \f(CW\*(C`de_DE.UTF\-8\*(C'\fR n' \f(CW\*(C`ja_JP.UTF\-8\*(C'\fR is tha normally same to
rxvt-unicode.
.PP
If you wanna bust a specific encodin you gotta make shizzle you start
rxvt-unicode wit tha erect \f(CW\*(C`LC_CTYPE\*(C'\fR category.
.PP
\fICan I switch localez at runtime?\fR
.IX Subsection "Can I switch localez at runtime?"
.PP
Yes, rockin a escape sequence. Try suttin' like this, which sets
rxvt-unicodez scam of \f(CW\*(C`LC_CTYPE\*(C'\fR.
.PP
.Vb 1
\&  printf \*(Aq\e33]701;%s\e007\*(Aq ja_JP.SJIS
.Ve
.PP
See also tha previous answer.
.PP
Sometimes dis capabilitizzle is rather handy when you wanna work in
one locale (e.g. \f(CW\*(C`de_DE.UTF\-8\*(C'\fR) but some programs don't support it
(e.g. \s-1UTF\-8\s0). For example, I use dis script ta start \f(CW\*(C`xjdic\*(C'\fR, which
first switches ta a locale supported by xjdic n' back later:
.PP
.Vb 3
\&   printf \*(Aq\e33]701;%s\e007\*(Aq ja_JP.SJIS
\&   xjdic \-js
\&   printf \*(Aq\e33]701;%s\e007\*(Aq de_DE.UTF\-8
.Ve
.PP
Yo ass can also use xtermz \f(CW\*(C`luit\*(C'\fR program, which probably works fine, except
for some localez where characta width differs between program\- and
rxvt-unicode-locales.
.PP
\fII have problems gettin mah input method working.\fR
.IX Subsection "I have problems gettin mah input method working."
.PP
Try a search engine, as dis is slightly different fo' every last muthafuckin input method server.
.PP
Here be a cold-ass lil checklist:
.IP "\- Make shizzle yo' locale \fIand\fR tha imLocale is supported on yo' \s-1OS.\s0" 4
.IX Item "- Make shizzle yo' locale n' tha imLocale is supported on yo' OS."
Try \f(CW\*(C`locale \-a\*(C'\fR or check tha documentation fo' yo' \s-1OS.\s0
.IP "\- Make shizzle yo' locale or imLocale matches a locale supported by yo' \s-1XIM.\s0" 4
.IX Item "- Make shizzle yo' locale or imLocale matches a locale supported by yo' XIM."
For example, \fBkinput2\fR do not support \s-1UTF\-8\s0 locales, you should use
\&\f(CW\*(C`ja_JP.EUC\-JP\*(C'\fR or equivalent.
.IP "\- Make shizzle yo' \s-1XIM\s0 server is straight-up hustlin." 4
.IX Item "- Make shizzle yo' XIM server is straight-up hustlin."
.PD 0
.ie n .IP "\- Make shizzle tha ""XMODIFIERS"" environment variable is set erectly when \fIstarting\fR rxvt-unicode." 4
.el .IP "\- Make shizzle tha \f(CWXMODIFIERS\fR environment variable is set erectly when \fIstarting\fR rxvt-unicode." 4
.IX Item "- Make shizzle tha XMODIFIERS environment variable is set erectly when startin rxvt-unicode."
.PD
When you wanna use e.g. \fBkinput2\fR, it must be set to
\&\f(CW\*(C`@im=kinput2\*(C'\fR. For \fBscim\fR, use \f(CW\*(C`@im=SCIM\*(C'\fR. Yo ass can peep what tha fuck input
method servers is hustlin wit dis command:
.Sp
.Vb 1
\&   xprop \-root XIM_SERVERS
.Ve
.PP
\fIMy fuckin input method wants <some encoding> but I want \s-1UTF\-8,\s0 what tha fuck can I do?\fR
.IX Subsection "My fuckin input method wants <some encoding> but I want UTF-8, what tha fuck can I do?"
.PP
Yo ass can specify separate localez fo' tha input method n' tha rest of the
terminal, rockin tha resource \f(CW\*(C`imlocale\*(C'\fR:
.PP
.Vb 1
\&   URxvt.imlocale: ja_JP.EUC\-JP
.Ve
.PP
Now you can start yo' terminal wit \f(CW\*(C`LC_CTYPE=ja_JP.UTF\-8\*(C'\fR n' still
use yo' input method. Y'all KNOW dat shit, muthafucka! Please note, however, that, dependin on yo' Xlib
version, you may not be able ta input charactas outside \f(CW\*(C`EUC\-JP\*(C'\fR up in a
normal way then, as yo' input method limits yo thugged-out ass.
.PP
\fIRxvt-unicode crashes when tha X Input Method chizzlez or exits.\fR
.IX Subsection "Rxvt-unicode crashes when tha X Input Method chizzlez or exits."
.PP
Unfortunately, dis is unavoidable, as tha \s-1XIM\s0 protocol is racy by
design. I aint talkin' bout chicken n' gravy biatch fo' realz. Applications can avoid some crashes all up in tha expense of memory
leaks, n' Input Methodz can avoid some crashes by careful orderin at
exit time. \fBkinput2\fR (and derived input methods) generally succeeds,
while \fB\s-1SCIM\s0\fR (or similar input methods) fails. In tha end, however,
crashes cannot be straight-up avoided even if both sides cooperate.
.PP
So tha only workaround aint ta bust a cap up in yo' Input Method Servers.
.SS "Operatin Systems / Package Maintaining"
.IX Subsection "Operatin Systems / Package Maintaining"
\fII be rockin Debian GNU/Linux n' gotz a problem...\fR
.IX Subsection "I be rockin Debian GNU/Linux n' gotz a problem..."
.PP
Da Debian GNU/Linux package of rxvt-unicode up in sarge gotz nuff large
patches dat considerably chizzle tha behaviour of rxvt-unicode (but
unfortunately dis notice has been removed). Before reportin a funky-ass bug to
the original gangsta rxvt-unicode lyricist please downlizzle n' install tha genuine
version (<http://software.schmorp.de/pkg/rxvt\-unicode.html>) n' try to
reproduce tha problem. If you cannot, chances is dat tha problems are
specific ta Debian GNU/Linux, up in which case it should be reported via the
Debian Bug Trackin System (use \f(CW\*(C`reportbug\*(C'\fR ta report tha bug).
.PP
For other problems dat also affect tha Debian package, you can and
probably should use tha Debian \s-1BTS,\s0 too, cuz, afta all, itz also a
bug up in tha Debian version n' it serves as a reminder fo' other playas that
might encounta tha same issue.
.PP
\fII be maintainin rxvt-unicode fo' distribution/OS \s-1XXX,\s0 any recommendation?\fR
.IX Subsection "I be maintainin rxvt-unicode fo' distribution/OS XXX, any recommendation?"
.PP
Yo ass should build one binary wit tha default options. \fIconfigure\fR
now enablez most useful options, n' tha trend goes ta makin them
runtime-switchable, too, so there is probably no drawback ta enablin them,
except higher disk n' possibly memory usage. Da perl interpreta should
be enabled, as blingin functionalitizzle (menus, selection, likely mo' in
the future) dependz on dat shit.
.PP
Yo ass should not overwrite tha \f(CW\*(C`perl\-ext\-common\*(C'\fR n' \f(CW\*(C`perl\-ext\*(C'\fR resources
system-wide (except maybe wit \f(CW\*(C`defaults\*(C'\fR). This will result up in useful
behaviour. Shiiit, dis aint no joke. If yo' distribution aims at low memory, add a empty
\&\f(CW\*(C`perl\-ext\-common\*(C'\fR resource ta tha app-defaults file. This will keep the
perl interpreta disabled until tha user enablez dat shit.
.PP
If you can/want build mo' binaries, I recommend buildin a minimal
one wit \f(CW\*(C`\-\-disable\-everything\*(C'\fR (very useful) n' a maximal one with
\&\f(CW\*(C`\-\-enable\-everything\*(C'\fR (less useful, it is ghon be straight-up big-ass cuz of a shitload of
encodings built-in dat increase downlizzle times n' is rarely used).
.PP
\fII need ta make it setuid/setgid ta support utmp/ptys on mah \s-1OS,\s0 is dis safe?\fR
.IX Subsection "I need ta make it setuid/setgid ta support utmp/ptys on mah OS, is dis safe?"
.PP
It should be, startin wit release 7.1. Yo ass is encouraged ta properly
install urxvt wit privileges necessary fo' yo' \s-1OS\s0 now, nahmeean?
.PP
When rxvt-unicode detects dat it runs setuid or setgid, it will fork
into a helper process fo' privileged operations (pty handlin on some
systems, utmp/wtmp/lastlog handlin on others) n' drop privileges
immediately. This is much less thuggy than most other terminals dat keep
privileges while hustlin (but is mo' relevant ta urxvt, as it gotz nuff
things as perl interpreters, which might be \*(L"helpful\*(R" ta attackers).
.PP
This forkin is done as tha straight-up first within \fImain()\fR, which is straight-up early
and reduces possible bugs ta initialisation code run before \fImain()\fR, or
things like tha dynamic loader of yo' system, which should result up in hella
lil risk.
.PP
\fII be on FreeBSD n' rxvt-unicode do not seem ta work at all.\fR
.IX Subsection "I be on FreeBSD n' rxvt-unicode do not seem ta work at all."
.PP
Rxvt-unicode requires tha symbol \f(CW\*(C`_\|_STDC_ISO_10646_\|_\*(C'\fR ta be defined
in yo' compile environment, or a implementation dat implements it,
whether it defines tha symbol or not. \f(CW\*(C`_\|_STDC_ISO_10646_\|_\*(C'\fR requires that
\&\fBwchar_t\fR is represented as unicode.
.PP
As you might have guessed, FreeBSD do neither define dis symbol nor
does it support dat shit. Instead, it uses its own internal representation of
\&\fBwchar_t\fR. This is, of course, straight-up fine wit respect ta standards.
.PP
But fuck dat shiznit yo, tha word on tha street is dat that means rxvt-unicode only works up in \f(CW\*(C`POSIX\*(C'\fR, \f(CW\*(C`ISO\-8859\-1\*(C'\fR and
\&\f(CW\*(C`UTF\-8\*(C'\fR localez under FreeBSD (which all use Unicode as \fBwchar_t\fR).
.PP
\&\f(CW\*(C`_\|_STDC_ISO_10646_\|_\*(C'\fR is tha only sane way ta support multi-language
apps up in a \s-1OS,\s0 as rockin a locale-dependent (and non-standardized)
representation of \fBwchar_t\fR make it impossible ta convert between
\&\fBwchar_t\fR (as used by X11 n' yo' applications) n' any other encoding
without implementin OS-specific-wrappers fo' each n' every last muthafuckin locale. There
simply is no APIs ta convert \fBwchar_t\fR tha fuck into anythang except tha current
locale encoding.
.PP
Some applications (like fuckin tha formidable \fBmlterm\fR) work round this
by carryin they own replacement functions fo' characta set handling
with them, n' either implementin OS-dependent hacks or bustin multiple
conversions (which is slow n' unreliable up in case tha \s-1OS\s0 implements
encodings slightly different than tha terminal emulator).
.PP
Da rxvt-unicode lyricist insists dat tha right way ta fix dis is up in the
system libraries once n' fo' all, instead of forcin every last muthafuckin app ta carry
complete replacements fo' dem :)
.PP
\fIHow tha fuck can I use rxvt-unicode under cygwin?\fR
.IX Subsection "How tha fuck can I use rxvt-unicode under cygwin?"
.PP
rxvt-unicode should compile n' run outta tha box on cygwin, using
the X11 libraries dat come wit cygwin. I aint talkin' bout chicken n' gravy biatch. libW11 emulation is no
longer supported (and make no sense, either, as it only supported a
single font). I recommend startin tha X\-server up in \f(CW\*(C`\-multiwindow\*(C'\fR or
\&\f(CW\*(C`\-rootless\*(C'\fR mode instead, which will result up in similar look&feel as the
old libW11 emulation.
.PP
At tha time of dis writing, cygwin didn't seem ta support any multi-byte
encodings (you might try \f(CW\*(C`LC_CTYPE=C\-UTF\-8\*(C'\fR), so yo ass is likely limited
to 8\-bit encodings.
.PP
\fICharacta widths is not erect.\fR
.IX Subsection "Characta widths is not erect."
.PP
urxvt uses tha system wcwidth function ta know tha shiznit about
the width of characters, so on systems wit incorrect locale data you
will likely git wack thangs up in dis biatch. Two notorious examplez is Solaris 9,
where single-width charactas like U+2514 is reported as double-width,
and Darwin 8, where combinin chars is reported havin width 1.
.PP
Da solution is ta upgrade yo' system or switch ta a funky-ass betta one fo' realz. A
possibly hustlin workaround is ta bust a wcwidth implementation like
.PP
http://www.cl.cam.ac.uk/~mgk25/ucs/wcwidth.c
.SH "RXVT-UNICODE TECHNICAL REFERENCE"
.IX Header "RXVT-UNICODE TECHNICAL REFERENCE"
Da rest of dis document raps bout various technical aspects of
\&\fBrxvt-unicode\fR. First tha description of supported command sequences,
followed by pixmap support n' last by a thugged-out description of all features
selectable at \f(CW\*(C`configure\*(C'\fR time.
.SS "Definitions"
.IX Subsection "Definitions"
.ie n .IP "\fB\fB""c""\fB\fR" 4
.el .IP "\fB\f(CBc\fB\fR" 4
.IX Item "c"
Da literal characta c (potentially a multi-byte character).
.ie n .IP "\fB\fB""C""\fB\fR" 4
.el .IP "\fB\f(CBC\fB\fR" 4
.IX Item "C"
A single (required) character.
.ie n .IP "\fB\fB""Ps""\fB\fR" 4
.el .IP "\fB\f(CBPs\fB\fR" 4
.IX Item "Ps"
A single (usually optional) numeric parameter, composed of one or more
digits.
.ie n .IP "\fB\fB""Pm""\fB\fR" 4
.el .IP "\fB\f(CBPm\fB\fR" 4
.IX Item "Pm"
A multiple numeric parameta composed of any number of single numeric
parameters, separated by \f(CW\*(C`;\*(C'\fR character(s).
.ie n .IP "\fB\fB""Pt""\fB\fR" 4
.el .IP "\fB\f(CBPt\fB\fR" 4
.IX Item "Pt"
A text parameta composed of printable characters.
.SS "Values"
.IX Subsection "Values"
.ie n .IP "\fB\fB""ENQ""\fB\fR" 4
.el .IP "\fB\f(CBENQ\fB\fR" 4
.IX Item "ENQ"
Enquiry (Ctrl-E) = Send Device Attributes (\s-1DA\s0)
request attributes from terminal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Right back up in yo muthafuckin ass. See \fB\f(CB\*(C`ESC [ Ps c\*(C'\fB\fR.
.ie n .IP "\fB\fB""BEL""\fB\fR" 4
.el .IP "\fB\f(CBBEL\fB\fR" 4
.IX Item "BEL"
Bell (Ctrl-G)
.ie n .IP "\fB\fB""BS""\fB\fR" 4
.el .IP "\fB\f(CBBS\fB\fR" 4
.IX Item "BS"
Backspace (Ctrl-H)
.ie n .IP "\fB\fB""TAB""\fB\fR" 4
.el .IP "\fB\f(CBTAB\fB\fR" 4
.IX Item "TAB"
Horizontal Tab (\s-1HT\s0) (Ctrl-I)
.ie n .IP "\fB\fB""LF""\fB\fR" 4
.el .IP "\fB\f(CBLF\fB\fR" 4
.IX Item "LF"
Line Feed or New Line (\s-1NL\s0) (Ctrl-J)
.ie n .IP "\fB\fB""VT""\fB\fR" 4
.el .IP "\fB\f(CBVT\fB\fR" 4
.IX Item "VT"
Vertical Tab (Ctrl-K) same as \fB\f(CB\*(C`LF\*(C'\fB\fR
.ie n .IP "\fB\fB""FF""\fB\fR" 4
.el .IP "\fB\f(CBFF\fB\fR" 4
.IX Item "FF"
Form Feed or New Page (\s-1NP\s0) (Ctrl-L) same as \fB\f(CB\*(C`LF\*(C'\fB\fR
.ie n .IP "\fB\fB""CR""\fB\fR" 4
.el .IP "\fB\f(CBCR\fB\fR" 4
.IX Item "CR"
Carriage Return (Ctrl-M)
.ie n .IP "\fB\fB""SO""\fB\fR" 4
.el .IP "\fB\f(CBSO\fB\fR" 4
.IX Item "SO"
Shift Out (Ctrl-N), invokes tha G1 characta set.
Switch ta Alternate Characta Set
.ie n .IP "\fB\fB""SI""\fB\fR" 4
.el .IP "\fB\f(CBSI\fB\fR" 4
.IX Item "SI"
Shift In (Ctrl-O), invokes tha G0 characta set (the default).
Switch ta Standard Characta Set
.ie n .IP "\fB\fB""SP""\fB\fR" 4
.el .IP "\fB\f(CBSP\fB\fR" 4
.IX Item "SP"
Space Character
.SS "Escape Sequences"
.IX Subsection "Escape Sequences"
.ie n .IP "\fB\fB""ESC # 8""\fB\fR" 4
.el .IP "\fB\f(CBESC # 8\fB\fR" 4
.IX Item "ESC # 8"
\&\s-1DEC\s0 Screen Alignment Test (\s-1DECALN\s0)
.ie n .IP "\fB\fB""ESC 7""\fB\fR" 4
.el .IP "\fB\f(CBESC 7\fB\fR" 4
.IX Item "ESC 7"
Save Cursor (\s-1SC\s0)
.ie n .IP "\fB\fB""ESC 8""\fB\fR" 4
.el .IP "\fB\f(CBESC 8\fB\fR" 4
.IX Item "ESC 8"
Restore Cursor
.ie n .IP "\fB\fB""ESC =""\fB\fR" 4
.el .IP "\fB\f(CBESC =\fB\fR" 4
.IX Item "ESC ="
Application Keypad (\s-1SMKX\s0). Right back up in yo muthafuckin ass. See also next sequence.
.ie n .IP "\fB\fB""ESC >""\fB\fR" 4
.el .IP "\fB\f(CBESC >\fB\fR" 4
.IX Item "ESC >"
Normal Keypad (\s-1RMKX\s0)
.Sp
\&\fBNote:\fR If tha numeric keypad be activated, eg, \fBNum_Lock\fR has been
pressed, numbers or control functions is generated by tha numeric keypad
(see Key Codes).
.ie n .IP "\fB\fB""ESC D""\fB\fR" 4
.el .IP "\fB\f(CBESC D\fB\fR" 4
.IX Item "ESC D"
Index (\s-1IND\s0)
.ie n .IP "\fB\fB""ESC E""\fB\fR" 4
.el .IP "\fB\f(CBESC E\fB\fR" 4
.IX Item "ESC E"
Next Line (\s-1NEL\s0)
.ie n .IP "\fB\fB""ESC H""\fB\fR" 4
.el .IP "\fB\f(CBESC H\fB\fR" 4
.IX Item "ESC H"
Tab Set (\s-1HTS\s0)
.ie n .IP "\fB\fB""ESC M""\fB\fR" 4
.el .IP "\fB\f(CBESC M\fB\fR" 4
.IX Item "ESC M"
Reverse Index (\s-1RI\s0)
.ie n .IP "\fB\fB""ESC N""\fB\fR" 4
.el .IP "\fB\f(CBESC N\fB\fR" 4
.IX Item "ESC N"
Single Shift Select of G2 Characta Set (\s-1SS2\s0): affects next character
only \fIunimplemented\fR
.ie n .IP "\fB\fB""ESC O""\fB\fR" 4
.el .IP "\fB\f(CBESC O\fB\fR" 4
.IX Item "ESC O"
Single Shift Select of G3 Characta Set (\s-1SS3\s0): affects next character
only \fIunimplemented\fR
.ie n .IP "\fB\fB""ESC Z""\fB\fR" 4
.el .IP "\fB\f(CBESC Z\fB\fR" 4
.IX Item "ESC Z"
Obsolete form of returns: \fB\f(CB\*(C`ESC [ , biatch? 1 ; 2 C\*(C'\fB\fR \fIrxvt-unicode compile-time option\fR
.ie n .IP "\fB\fB""ESC c""\fB\fR" 4
.el .IP "\fB\f(CBESC c\fB\fR" 4
.IX Item "ESC c"
Full reset (\s-1RIS\s0)
.ie n .IP "\fB\fB""ESC n""\fB\fR" 4
.el .IP "\fB\f(CBESC n\fB\fR" 4
.IX Item "ESC n"
Invoke tha G2 Characta Set (\s-1LS2\s0)
.ie n .IP "\fB\fB""ESC o""\fB\fR" 4
.el .IP "\fB\f(CBESC o\fB\fR" 4
.IX Item "ESC o"
Invoke tha G3 Characta Set (\s-1LS3\s0)
.ie n .IP "\fB\fB""ESC ( C""\fB\fR" 4
.el .IP "\fB\f(CBESC ( C\fB\fR" 4
.IX Item "ESC ( C"
Designate G0 Characta Set (\s-1ISO 2022\s0), peep below fo' jointz of \f(CW\*(C`C\*(C'\fR.
.ie n .IP "\fB\fB""ESC ) C""\fB\fR" 4
.el .IP "\fB\f(CBESC ) C\fB\fR" 4
.IX Item "ESC ) C"
Designate G1 Characta Set (\s-1ISO 2022\s0), peep below fo' jointz of \f(CW\*(C`C\*(C'\fR.
.ie n .IP "\fB\fB""ESC * C""\fB\fR" 4
.el .IP "\fB\f(CBESC * C\fB\fR" 4
.IX Item "ESC * C"
Designate G2 Characta Set (\s-1ISO 2022\s0), peep below fo' jointz of \f(CW\*(C`C\*(C'\fR.
.ie n .IP "\fB\fB""ESC + C""\fB\fR" 4
.el .IP "\fB\f(CBESC + C\fB\fR" 4
.IX Item "ESC + C"
Designate G3 Characta Set (\s-1ISO 2022\s0), peep below fo' jointz of \f(CW\*(C`C\*(C'\fR.
.ie n .IP "\fB\fB""ESC $ C""\fB\fR" 4
.el .IP "\fB\f(CBESC $ C\fB\fR" 4
.IX Item "ESC $ C"
Designate Kanji Characta Set
.Sp
Where \fB\f(CB\*(C`C\*(C'\fB\fR is one of:
.TS
l l .
C = 0 	DEC Special Characta n' Line Drawin Set
C = A 	United Mackdaddydom (UK)
C = B 	United Hoodz (USASCII)
C = <	Multinationistic characta set unimplemented
C = 5 	Finnish characta set unimplemented
C = C 	Finnish characta set unimplemented
C = K 	German characta set unimplemented
.TE
.PP

.IX Xref "CSI"
.SS "\s-1CSI \s0(Command Sequence Introducer) Sequences"
.IX Subsection "CSI (Command Sequence Introducer) Sequences"
.ie n .IP "\fB\fB""ESC [ Ps @""\fB\fR" 4
.el .IP "\fB\f(CBESC [ Ps @\fB\fR" 4
.IX Item "ESC [ Ps @"
Insert \fB\f(CB\*(C`Ps\*(C'\fB\fR (Blank) Character(s) [default: 1] (\s-1ICH\s0)
.IX Xref "ESCOBPsA"
.ie n .IP "\fB\fB""ESC [ Ps A""\fB\fR" 4
.el .IP "\fB\f(CBESC [ Ps A\fB\fR" 4
.IX Item "ESC [ Ps A"
Cursor Up \fB\f(CB\*(C`Ps\*(C'\fB\fR Times [default: 1] (\s-1CUU\s0)
.ie n .IP "\fB\fB""ESC [ Ps B""\fB\fR" 4
.el .IP "\fB\f(CBESC [ Ps B\fB\fR" 4
.IX Item "ESC [ Ps B"
Cursor Down \fB\f(CB\*(C`Ps\*(C'\fB\fR Times [default: 1] (\s-1CUD\s0)
.IX Xref "ESCOBPsC"
.ie n .IP "\fB\fB""ESC [ Ps C""\fB\fR" 4
.el .IP "\fB\f(CBESC [ Ps C\fB\fR" 4
.IX Item "ESC [ Ps C"
Cursor Forward \fB\f(CB\*(C`Ps\*(C'\fB\fR Times [default: 1] (\s-1CUF\s0)
.ie n .IP "\fB\fB""ESC [ Ps D""\fB\fR" 4
.el .IP "\fB\f(CBESC [ Ps D\fB\fR" 4
.IX Item "ESC [ Ps D"
Cursor Backward \fB\f(CB\*(C`Ps\*(C'\fB\fR Times [default: 1] (\s-1CUB\s0)
.ie n .IP "\fB\fB""ESC [ Ps E""\fB\fR" 4
.el .IP "\fB\f(CBESC [ Ps E\fB\fR" 4
.IX Item "ESC [ Ps E"
Cursor Down \fB\f(CB\*(C`Ps\*(C'\fB\fR Times [default: 1] n' ta first column
.ie n .IP "\fB\fB""ESC [ Ps F""\fB\fR" 4
.el .IP "\fB\f(CBESC [ Ps F\fB\fR" 4
.IX Item "ESC [ Ps F"
Cursor Up \fB\f(CB\*(C`Ps\*(C'\fB\fR Times [default: 1] n' ta first column
.IX Xref "ESCOBPsG"
.ie n .IP "\fB\fB""ESC [ Ps G""\fB\fR" 4
.el .IP "\fB\f(CBESC [ Ps G\fB\fR" 4
.IX Item "ESC [ Ps G"
Cursor ta Column \fB\f(CB\*(C`Ps\*(C'\fB\fR (\s-1HPA\s0)
.ie n .IP "\fB\fB""ESC [ Ps;Ps H""\fB\fR" 4
.el .IP "\fB\f(CBESC [ Ps;Ps H\fB\fR" 4
.IX Item "ESC [ Ps;Ps H"
Cursor Posizzle [row;column] [default: 1;1] (\s-1CUP\s0)
.ie n .IP "\fB\fB""ESC [ Ps I""\fB\fR" 4
.el .IP "\fB\f(CBESC [ Ps I\fB\fR" 4
.IX Item "ESC [ Ps I"
Move forward \fB\f(CB\*(C`Ps\*(C'\fB\fR tab stops [default: 1]
.ie n .IP "\fB\fB""ESC [ Ps J""\fB\fR" 4
.el .IP "\fB\f(CBESC [ Ps J\fB\fR" 4
.IX Item "ESC [ Ps J"
Erase up in Display (\s-1ED\s0)
.TS
l l .
Ps = 0	Clear Right n' Below (default)
Ps = 1	Clear Left n' Above
Ps = 2	Clear All
.TE
.ie n .IP "\fB\fB""ESC [ Ps K""\fB\fR" 4
.el .IP "\fB\f(CBESC [ Ps K\fB\fR" 4
.IX Item "ESC [ Ps K"
Erase up in Line (\s-1EL\s0)
.TS
l l .
Ps = 0	Clear ta Right (default)
Ps = 1	Clear ta Left
Ps = 2	Clear All
Ps = 3	Like Ps = 0 yo, but is ignored when wrapped
                	(urxvt256c extension)
.TE
.ie n .IP "\fB\fB""ESC [ Ps L""\fB\fR" 4
.el .IP "\fB\f(CBESC [ Ps L\fB\fR" 4
.IX Item "ESC [ Ps L"
Insert \fB\f(CB\*(C`Ps\*(C'\fB\fR Line(s) [default: 1] (\s-1IL\s0)
.ie n .IP "\fB\fB""ESC [ Ps M""\fB\fR" 4
.el .IP "\fB\f(CBESC [ Ps M\fB\fR" 4
.IX Item "ESC [ Ps M"
Delete \fB\f(CB\*(C`Ps\*(C'\fB\fR Line(s) [default: 1] (\s-1DL\s0)
.ie n .IP "\fB\fB""ESC [ Ps P""\fB\fR" 4
.el .IP "\fB\f(CBESC [ Ps P\fB\fR" 4
.IX Item "ESC [ Ps P"
Delete \fB\f(CB\*(C`Ps\*(C'\fB\fR Character(s) [default: 1] (\s-1DCH\s0)
.ie n .IP "\fB\fB""ESC [ Ps;Ps;Ps;Ps;Ps T""\fB\fR" 4
.el .IP "\fB\f(CBESC [ Ps;Ps;Ps;Ps;Ps T\fB\fR" 4
.IX Item "ESC [ Ps;Ps;Ps;Ps;Ps T"
Initiate . \fIunimplemented\fR Parametas are
[func;startx;starty;firstrow;lastrow].
.ie n .IP "\fB\fB""ESC [ Ps W""\fB\fR" 4
.el .IP "\fB\f(CBESC [ Ps W\fB\fR" 4
.IX Item "ESC [ Ps W"
Tabulator functions
.TS
l l .
Ps = 0	Tab Set (HTS)
Ps = 2	Tab Clear (TBC), Clear Current Column (default)
Ps = 5	Tab Clear (TBC), Clear All
.TE
.ie n .IP "\fB\fB""ESC [ Ps X""\fB\fR" 4
.el .IP "\fB\f(CBESC [ Ps X\fB\fR" 4
.IX Item "ESC [ Ps X"
Erase \fB\f(CB\*(C`Ps\*(C'\fB\fR Character(s) [default: 1] (\s-1ECH\s0)
.ie n .IP "\fB\fB""ESC [ Ps Z""\fB\fR" 4
.el .IP "\fB\f(CBESC [ Ps Z\fB\fR" 4
.IX Item "ESC [ Ps Z"
Move backward \fB\f(CB\*(C`Ps\*(C'\fB\fR [default: 1] tab stops
.ie n .IP "\fB\fB""ESC [ Ps \*(Aq""\fB\fR" 4
.el .IP "\fB\f(CBESC [ Ps \*(Aq\fB\fR" 4
.IX Item "ESC [ Ps "
See \fB\f(CB\*(C`ESC [ Ps G\*(C'\fB\fR
.ie n .IP "\fB\fB""ESC [ Ps a""\fB\fR" 4
.el .IP "\fB\f(CBESC [ Ps a\fB\fR" 4
.IX Item "ESC [ Ps a"
See \fB\f(CB\*(C`ESC [ Ps C\*(C'\fB\fR
.ie n .IP "\fB\fB""ESC [ Ps c""\fB\fR" 4
.el .IP "\fB\f(CBESC [ Ps c\fB\fR" 4
.IX Item "ESC [ Ps c"
Send Device Attributes (\s-1DA\s0)
\&\fB\f(CB\*(C`Ps = 0\*(C'\fB\fR (or omitted): request attributes from terminal
returns: \fB\f(CB\*(C`ESC [ , biatch? 1 ; 2 c\*(C'\fB\fR (``I be a \s-1VT100\s0 wit Advanced Video
Option'')
.ie n .IP "\fB\fB""ESC [ Ps d""\fB\fR" 4
.el .IP "\fB\f(CBESC [ Ps d\fB\fR" 4
.IX Item "ESC [ Ps d"
Cursor ta Line \fB\f(CB\*(C`Ps\*(C'\fB\fR (\s-1VPA\s0)
.ie n .IP "\fB\fB""ESC [ Ps e""\fB\fR" 4
.el .IP "\fB\f(CBESC [ Ps e\fB\fR" 4
.IX Item "ESC [ Ps e"
See \fB\f(CB\*(C`ESC [ Ps A\*(C'\fB\fR
.ie n .IP "\fB\fB""ESC [ Ps;Ps f""\fB\fR" 4
.el .IP "\fB\f(CBESC [ Ps;Ps f\fB\fR" 4
.IX Item "ESC [ Ps;Ps f"
Horizontal n' Vertical Posizzle [row;column] (\s-1HVP\s0) [default: 1;1]
.ie n .IP "\fB\fB""ESC [ Ps g""\fB\fR" 4
.el .IP "\fB\f(CBESC [ Ps g\fB\fR" 4
.IX Item "ESC [ Ps g"
Tab Clear (\s-1TBC\s0)
.TS
l l .
Ps = 0	Clear Current Column (default)
Ps = 3	Clear All (TBC)
.TE
.ie n .IP "\fB\fB""ESC [ Pm h""\fB\fR" 4
.el .IP "\fB\f(CBESC [ Pm h\fB\fR" 4
.IX Item "ESC [ Pm h"
Set Mode (\s-1SM\s0). Right back up in yo muthafuckin ass. See \fB\f(CB\*(C`ESC [ Pm l\*(C'\fB\fR sequence fo' description of \f(CW\*(C`Pm\*(C'\fR.
.ie n .IP "\fB\fB""ESC [ Ps i""\fB\fR" 4
.el .IP "\fB\f(CBESC [ Ps i\fB\fR" 4
.IX Item "ESC [ Ps i"
Printing. Right back up in yo muthafuckin ass. See also tha \f(CW\*(C`print\-pipe\*(C'\fR resource.
.TS
l l .
Ps = 0	print screen (MC0)
Ps = 4	disable transparent print mode (MC4)
Ps = 5	enable transparent print mode (MC5)
.TE
.ie n .IP "\fB\fB""ESC [ Pm l""\fB\fR" 4
.el .IP "\fB\f(CBESC [ Pm l\fB\fR" 4
.IX Item "ESC [ Pm l"
Reset Mode (\s-1RM\s0)
.RS 4
.ie n .IP "\fB\fB""Ps = 4""\fB\fR" 4
.el .IP "\fB\f(CBPs = 4\fB\fR" 4
.IX Item "Ps = 4"
.TS
l l .
h	Insert Mode (SMIR)
l	Replace Mode (RMIR)
.TE
.PD 0
.ie n .IP "\fB\fB""Ps = 20""\fB\fR (partially implemented)" 4
.el .IP "\fB\f(CBPs = 20\fB\fR (partially implemented)" 4
.IX Item "Ps = 20 (partially implemented)"
.TS
l l .
h	Automatic Newline (LNM)
l	Normal Linefeed (LNM)
.TE
.RE
.RS 4
.RE
.ie n .IP "\fB\fB""ESC [ Pm m""\fB\fR" 4
.el .IP "\fB\f(CBESC [ Pm m\fB\fR" 4
.IX Item "ESC [ Pm m"
.PD
Characta Attributes (\s-1SGR\s0)
.TS
l l .
Pm = 0	Normal (default)
Pm = 1 / 21	On / Off Bold (bright fg)
Pm = 3 / 23	On / Off Italic
Pm = 4 / 24	On / Off Underline
Pm = 5 / 25	On / Off Slow Blink (bright bg)
Pm = 6 / 26	On / Off Rapid Blink (bright bg)
Pm = 7 / 27	On / Off Inverse
Pm = 8 / 27	On / Off Invisible (NYI)
Pm = 30 / 40	fg/bg Black
Pm = 31 / 41	fg/bg Red
Pm = 32 / 42	fg/bg Green
Pm = 33 / 43	fg/bg Yellow
Pm = 34 / 44	fg/bg Blue
Pm = 35 / 45	fg/bg Magenta
Pm = 36 / 46	fg/bg Cyan
Pm = 37 / 47	fg/bg White
Pm = 38;5 / 48;5	set fg/bg ta colour #m (ISO 8613-6)
Pm = 39 / 49	fg/bg Default
Pm = 90 / 100	fg/bg Bright Black
Pm = 91 / 101	fg/bg Bright Red
Pm = 92 / 102	fg/bg Bright Green
Pm = 93 / 103	fg/bg Bright Yellow
Pm = 94 / 104	fg/bg Bright Blue
Pm = 95 / 105	fg/bg Bright Magenta
Pm = 96 / 106	fg/bg Bright Cyan
Pm = 97 / 107	fg/bg Bright White
Pm = 99 / 109	fg/bg Bright Default
.TE
.ie n .IP "\fB\fB""ESC [ Ps n""\fB\fR" 4
.el .IP "\fB\f(CBESC [ Ps n\fB\fR" 4
.IX Item "ESC [ Ps n"
Device Status Report (\s-1DSR\s0)
.TS
l l .
Ps = 5	Status Report ESC [ 0 n (``OK'')
Ps = 6	Report Cursor Posizzle (CPR) [row;column] as ESC [ r ; c R
Ps = 7	Request Display Name
Ps = 8	Request Version Number (place up in window title)
.TE
.ie n .IP "\fB\fB""ESC [ Ps SP q""\fB\fR" 4
.el .IP "\fB\f(CBESC [ Ps SP q\fB\fR" 4
.IX Item "ESC [ Ps SP q"
Set Cursor Style (\s-1DESCUSR\s0)
.TS
l l .
Ps = 0	Blink Block
Ps = 1	Blink Block
Ps = 2	Steady Block
Ps = 3	Blink Underline
Ps = 4	Steady Underline
.TE
.ie n .IP "\fB\fB""ESC [ Ps;Ps r""\fB\fR" 4
.el .IP "\fB\f(CBESC [ Ps;Ps r\fB\fR" 4
.IX Item "ESC [ Ps;Ps r"
Set Scrollin Region [top;bottom]
[default: full size of window] (\s-1CSR\s0)
.ie n .IP "\fB\fB""ESC [ s""\fB\fR" 4
.el .IP "\fB\f(CBESC [ s\fB\fR" 4
.IX Item "ESC [ s"
Save Cursor (\s-1SC\s0)
.ie n .IP "\fB\fB""ESC [ Ps;Pt t""\fB\fR" 4
.el .IP "\fB\f(CBESC [ Ps;Pt t\fB\fR" 4
.IX Item "ESC [ Ps;Pt t"
Window Operations
.TS
l l .
Ps = 1	Deiconify (map) window
Ps = 2	Iconify window
Ps = 3	ESC [ 3 ; X ; Y t Move window ta (X|Y)
Ps = 4	ESC [ 4 ; H ; W t Resize ta WxH pixels
Ps = 5	Raise window
Ps = 6	Lower window
Ps = 7	Refresh screen once
Ps = 8	ESC [ 8 ; R ; C t Resize ta R rows n' C columns
Ps = 11	Report window state (respondz wit Ps = 1 or Ps = 2)
Ps = 13	Report window posizzle (respondz wit Ps = 3)
Ps = 14	Report window pixel size (respondz wit Ps = 4)
Ps = 18	Report window text size (respondz wit Ps = 7)
Ps = 19	Currently tha same as Ps = 18 yo, but respondz wit Ps = 9
Ps = 20	Reports icon label (ESC ] L NAME \234)
Ps = 21	Reports window title (ESC ] l NAME \234)
Ps = 24..	Set window height ta Ps rows
.TE
.ie n .IP "\fB\fB""ESC [ u""\fB\fR" 4
.el .IP "\fB\f(CBESC [ u\fB\fR" 4
.IX Item "ESC [ u"
Restore Cursor
.ie n .IP "\fB\fB""ESC [ Ps x""\fB\fR" 4
.el .IP "\fB\f(CBESC [ Ps x\fB\fR" 4
.IX Item "ESC [ Ps x"
Request Terminal Parametas (\s-1DECREQTPARM\s0)
.PP

.IX Xref "PrivateModes"
.SS "\s-1DEC\s0 Private Modes"
.IX Subsection "DEC Private Modes"
.ie n .IP "\fB\fB""ESC [ , biatch? Pm h""\fB\fR" 4
.el .IP "\fB\f(CBESC [ , biatch? Pm h\fB\fR" 4
.IX Item "ESC [ , biatch? Pm h"
\&\s-1DEC\s0 Private Mode Set (\s-1DECSET\s0)
.ie n .IP "\fB\fB""ESC [ , biatch? Pm l""\fB\fR" 4
.el .IP "\fB\f(CBESC [ , biatch? Pm l\fB\fR" 4
.IX Item "ESC [ , biatch? Pm l"
\&\s-1DEC\s0 Private Mode Reset (\s-1DECRST\s0)
.ie n .IP "\fB\fB""ESC [ , biatch? Pm r""\fB\fR" 4
.el .IP "\fB\f(CBESC [ , biatch? Pm r\fB\fR" 4
.IX Item "ESC [ , biatch? Pm r"
Restore previously saved \s-1DEC\s0 Private Mode Values.
.ie n .IP "\fB\fB""ESC [ , biatch? Pm s""\fB\fR" 4
.el .IP "\fB\f(CBESC [ , biatch? Pm s\fB\fR" 4
.IX Item "ESC [ , biatch? Pm s"
Save \s-1DEC\s0 Private Mode Values.
.ie n .IP "\fB\fB""ESC [ , biatch? Pm t""\fB\fR" 4
.el .IP "\fB\f(CBESC [ , biatch? Pm t\fB\fR" 4
.IX Item "ESC [ , biatch? Pm t"
Toggle \s-1DEC\s0 Private Mode Values (rxvt extension). \fIwhere\fR
.RS 4
.ie n .IP "\fB\fB""Pm = 1""\fB\fR (\s-1DECCKM\s0)" 4
.el .IP "\fB\f(CBPm = 1\fB\fR (\s-1DECCKM\s0)" 4
.IX Item "Pm = 1 (DECCKM)"
.TS
l l .
h	Application Cursor Keys
l	Normal Cursor Keys
.TE
.PD 0
.ie n .IP "\fB\fB""Pm = 2""\fB\fR (\s-1DECANM\s0)" 4
.el .IP "\fB\f(CBPm = 2\fB\fR (\s-1DECANM\s0)" 4
.IX Item "Pm = 2 (DECANM)"
.TS
l l .
h	Enta VT52 mode
l	Enta VT52 mode
.TE
.ie n .IP "\fB\fB""Pm = 3""\fB\fR (\s-1DECCOLM\s0)" 4
.el .IP "\fB\f(CBPm = 3\fB\fR (\s-1DECCOLM\s0)" 4
.IX Item "Pm = 3 (DECCOLM)"
.TS
l l .
h	132 Column Mode
l	80 Column Mode
.TE
.ie n .IP "\fB\fB""Pm = 4""\fB\fR (\s-1DECSCLM\s0)" 4
.el .IP "\fB\f(CBPm = 4\fB\fR (\s-1DECSCLM\s0)" 4
.IX Item "Pm = 4 (DECSCLM)"
.TS
l l .
h	Smooth (Slow) Scroll
l	Jump (Fast) Scroll
.TE
.ie n .IP "\fB\fB""Pm = 5""\fB\fR (\s-1DECSCNM\s0)" 4
.el .IP "\fB\f(CBPm = 5\fB\fR (\s-1DECSCNM\s0)" 4
.IX Item "Pm = 5 (DECSCNM)"
.TS
l l .
h	Reverse Video
l	Normal Video
.TE
.ie n .IP "\fB\fB""Pm = 6""\fB\fR (\s-1DECOM\s0)" 4
.el .IP "\fB\f(CBPm = 6\fB\fR (\s-1DECOM\s0)" 4
.IX Item "Pm = 6 (DECOM)"
.TS
l l .
h	Origin Mode
l	Normal Cursor Mode
.TE
.ie n .IP "\fB\fB""Pm = 7""\fB\fR (\s-1DECAWM\s0)" 4
.el .IP "\fB\f(CBPm = 7\fB\fR (\s-1DECAWM\s0)" 4
.IX Item "Pm = 7 (DECAWM)"
.TS
l l .
h	Wraparound Mode
l	No Wraparound Mode
.TE
.ie n .IP "\fB\fB""Pm = 8""\fB\fR (\s-1DECARM\s0) \fIunimplemented\fR" 4
.el .IP "\fB\f(CBPm = 8\fB\fR (\s-1DECARM\s0) \fIunimplemented\fR" 4
.IX Item "Pm = 8 (DECARM) unimplemented"
.TS
l l .
h	Auto-repeat Keys
l	No Auto-repeat Keys
.TE
.ie n .IP "\fB\fB""Pm = 9""\fB\fR X10 XTerm" 4
.el .IP "\fB\f(CBPm = 9\fB\fR X10 XTerm" 4
.IX Item "Pm = 9 X10 XTerm"
.TS
l l .
h	Send Mouse X & Y on button press.
l	No mouse reporting.
.TE
.ie n .IP "\fB\fB""Pm = 25""\fB\fR (\s-1DECTCEM\s0)" 4
.el .IP "\fB\f(CBPm = 25\fB\fR (\s-1DECTCEM\s0)" 4
.IX Item "Pm = 25 (DECTCEM)"
.TS
l l .
h	Visible cursor {cnorm/cvvis}
l	Invisible cursor {civis}
.TE
.ie n .IP "\fB\fB""Pm = 30""\fB\fR" 4
.el .IP "\fB\f(CBPm = 30\fB\fR" 4
.IX Item "Pm = 30"
.TS
l l .
h	scrollBar visible
l	scrollBar invisible
.TE
.ie n .IP "\fB\fB""Pm = 35""\fB\fR (\fBrxvt\fR)" 4
.el .IP "\fB\f(CBPm = 35\fB\fR (\fBrxvt\fR)" 4
.IX Item "Pm = 35 (rxvt)"
.TS
l l .
h	Allow XTerm Shift+key sequences
l	Disallow XTerm Shift+key sequences
.TE
.ie n .IP "\fB\fB""Pm = 38""\fB\fR \fIunimplemented\fR" 4
.el .IP "\fB\f(CBPm = 38\fB\fR \fIunimplemented\fR" 4
.IX Item "Pm = 38 unimplemented"
.PD
Enta Tektronix Mode (\s-1DECTEK\s0)
.ie n .IP "\fB\fB""Pm = 40""\fB\fR" 4
.el .IP "\fB\f(CBPm = 40\fB\fR" 4
.IX Item "Pm = 40"
.TS
l l .
h	Allow 80/132 Mode
l	Disallow 80/132 Mode
.TE
.PD 0
.ie n .IP "\fB\fB""Pm = 44""\fB\fR \fIunimplemented\fR" 4
.el .IP "\fB\f(CBPm = 44\fB\fR \fIunimplemented\fR" 4
.IX Item "Pm = 44 unimplemented"
.TS
l l .
h	Turn On Margin Bell
l	Turn Off Margin Bell
.TE
.ie n .IP "\fB\fB""Pm = 45""\fB\fR \fIunimplemented\fR" 4
.el .IP "\fB\f(CBPm = 45\fB\fR \fIunimplemented\fR" 4
.IX Item "Pm = 45 unimplemented"
.TS
l l .
h	Reverse-wraparound Mode
l	No Reverse-wraparound Mode
.TE
.ie n .IP "\fB\fB""Pm = 46""\fB\fR \fIunimplemented\fR" 4
.el .IP "\fB\f(CBPm = 46\fB\fR \fIunimplemented\fR" 4
.IX Item "Pm = 46 unimplemented"
.ie n .IP "\fB\fB""Pm = 47""\fB\fR" 4
.el .IP "\fB\f(CBPm = 47\fB\fR" 4
.IX Item "Pm = 47"
.TS
l l .
h	Use Alternate Screen Buffer
l	Use Normal Screen Buffer
.TE
.PD

.IX Xref "Priv66"
.ie n .IP "\fB\fB""Pm = 66""\fB\fR (\s-1DECNKM\s0)" 4
.el .IP "\fB\f(CBPm = 66\fB\fR (\s-1DECNKM\s0)" 4
.IX Item "Pm = 66 (DECNKM)"
.TS
l l .
h	Application Keypad (DECKPAM/DECPAM) == ESC =
l	Normal Keypad (DECKPNM/DECPNM) == ESC >
.TE
.PD 0
.ie n .IP "\fB\fB""Pm = 67""\fB\fR (\s-1DECBKM\s0)" 4
.el .IP "\fB\f(CBPm = 67\fB\fR (\s-1DECBKM\s0)" 4
.IX Item "Pm = 67 (DECBKM)"
.TS
l l .
h	Backspace key sendz BS
l	Backspace key sendz DEL
.TE
.ie n .IP "\fB\fB""Pm = 1000""\fB\fR (X11 XTerm)" 4
.el .IP "\fB\f(CBPm = 1000\fB\fR (X11 XTerm)" 4
.IX Item "Pm = 1000 (X11 XTerm)"
.TS
l l .
h	Send Mouse X & Y on button press n' release.
l	No mouse reporting.
.TE
.ie n .IP "\fB\fB""Pm = 1001""\fB\fR (X11 XTerm) \fIunimplemented\fR" 4
.el .IP "\fB\f(CBPm = 1001\fB\fR (X11 XTerm) \fIunimplemented\fR" 4
.IX Item "Pm = 1001 (X11 XTerm) unimplemented"
.TS
l l .
h	Use Hilite Mouse Tracking.
l	No mouse reporting.
.TE
.ie n .IP "\fB\fB""Pm = 1002""\fB\fR (X11 XTerm)" 4
.el .IP "\fB\f(CBPm = 1002\fB\fR (X11 XTerm)" 4
.IX Item "Pm = 1002 (X11 XTerm)"
.TS
l l .
h	Send Mouse X & Y on button press n' release, n' motion wit a funky-ass button pressed.
l	No mouse reporting.
.TE
.ie n .IP "\fB\fB""Pm = 1003""\fB\fR (X11 XTerm)" 4
.el .IP "\fB\f(CBPm = 1003\fB\fR (X11 XTerm)" 4
.IX Item "Pm = 1003 (X11 XTerm)"
.TS
l l .
h	Send Mouse X & Y on button press n' release, n' motion.
l	No mouse reporting.
.TE
.ie n .IP "\fB\fB""Pm = 1005""\fB\fR (X11 XTerm) (Compile frills)" 4
.el .IP "\fB\f(CBPm = 1005\fB\fR (X11 XTerm) (Compile frills)" 4
.IX Item "Pm = 1005 (X11 XTerm) (Compile frills)"
.PD
Try ta avoid dis mode, it don't work sensibly up in non\-UTF\-8 locales. Use
mode \f(CW1015\fR instead.
.Sp
Unlike XTerm, coordinates larger than 2015) will work fine.
.TS
l l .
h	Enable mouse coordinates up in locale-specific encoding.
l	Enable mouse coordinates as binary octets.
.TE
.ie n .IP "\fB\fB""Pm = 1010""\fB\fR (\fBrxvt\fR)" 4
.el .IP "\fB\f(CBPm = 1010\fB\fR (\fBrxvt\fR)" 4
.IX Item "Pm = 1010 (rxvt)"
.TS
l l .
h	Don't scroll ta bottom on TTY output
l	Scroll ta bottom on TTY output
.TE
.PD 0
.ie n .IP "\fB\fB""Pm = 1011""\fB\fR (\fBrxvt\fR)" 4
.el .IP "\fB\f(CBPm = 1011\fB\fR (\fBrxvt\fR)" 4
.IX Item "Pm = 1011 (rxvt)"
.TS
l l .
h	Scroll ta bottom when a key is pressed
l	Don't scroll ta bottom when a key is pressed
.TE
.ie n .IP "\fB\fB""Pm = 1015""\fB\fR (\fBrxvt-unicode\fR) (Compile frills)" 4
.el .IP "\fB\f(CBPm = 1015\fB\fR (\fBrxvt-unicode\fR) (Compile frills)" 4
.IX Item "Pm = 1015 (rxvt-unicode) (Compile frills)"
.PD
Changes all mouse reportin codes ta use decimal parametas instead of
octets or characters.
.Sp
This mode should be enabled \fIbefore\fR straight-up enablin mouse reporting,
for semi-obvious reasons.
.Sp
Da sequences received fo' various modes is as bigs up:
.Sp
.Vb 3
\&   ESC [ M o o o    !1005, !1015 (three octets)
\&   ESC [ M c c c    1005, !1015 (three characters)
\&   ESC [ Pm M       1015 (three or mo' numeric parameters)
.Ve
.Sp
Da first three parametas is \f(CW\*(C`code\*(C'\fR, \f(CW\*(C`x\*(C'\fR n' \f(CW\*(C`y\*(C'\fR. Code is tha numeric
code as fo' tha other modes (but encoded as a thugged-out decimal number, including
the additionizzle offset of 32, so you gotta subtract 32 first), \f(CW\*(C`x\*(C'\fR and
\&\f(CW\*(C`y\*(C'\fR is tha coordinates (1|1 is tha upper left corner, just as with
cursor positioning).
.Sp
Example: Shift\-Button\-1 press at top row, column 80.
.Sp
.Vb 1
\&   ESC [ 37 ; 80 ; 1 M
.Ve
.Sp
One can use dis feature by simply enablin it n' then lookin for
parametas ta tha \f(CW\*(C`ESC [ M\*(C'\fR reply \- if there be any, dis mode is
active, otherwise one of tha oldschool reportin stylez is used.
.Sp
Other (to be implemented) reply sequences will bust a similar encoding.
.Sp
In tha future, mo' parametas might git added (pixel coordinates for
example \- anybody up there whoz ass needz this?).
.TS
l l .
h	Enable freshly smoked up mouse coordinizzle reporting.
l	Use old-style CSI M C C C encoding.
.TE
.ie n .IP "\fB\fB""Pm = 1021""\fB\fR (\fBrxvt\fR)" 4
.el .IP "\fB\f(CBPm = 1021\fB\fR (\fBrxvt\fR)" 4
.IX Item "Pm = 1021 (rxvt)"
.TS
l l .
h	Bold/italic implies high intensitizzle (see option -is)
l	Font stylez have no effect on intensitizzle (Compile styles)
.TE
.PD 0
.ie n .IP "\fB\fB""Pm = 1047""\fB\fR" 4
.el .IP "\fB\f(CBPm = 1047\fB\fR" 4
.IX Item "Pm = 1047"
.TS
l l .
h	Use Alternate Screen Buffer
l	Use Normal Screen Buffer - clear Alternate Screen Buffer if returnin from it
.TE
.ie n .IP "\fB\fB""Pm = 1048""\fB\fR" 4
.el .IP "\fB\f(CBPm = 1048\fB\fR" 4
.IX Item "Pm = 1048"
.TS
l l .
h	Save cursor position
l	Restore cursor position
.TE
.ie n .IP "\fB\fB""Pm = 1049""\fB\fR" 4
.el .IP "\fB\f(CBPm = 1049\fB\fR" 4
.IX Item "Pm = 1049"
.TS
l l .
h	Use Alternate Screen Buffer - clear Alternate Screen Buffer if switchin ta it
l	Use Normal Screen Buffer
.TE
.ie n .IP "\fB\fB""Pm = 2004""\fB\fR" 4
.el .IP "\fB\f(CBPm = 2004\fB\fR" 4
.IX Item "Pm = 2004"
.TS
l l .
h	Enable bracketed paste mode - prepend / append ta tha pasted text tha control sequences ESC [ 200 ~ / ESC [ 201 ~
l	Disable bracketed paste mode
.TE
.RE
.RS 4
.RE
.PD
.PP

.IX Xref "XTerm"
.SS "XTerm Operatin System Commands"
.IX Subsection "XTerm Operatin System Commands"
.ie n .IP "\fB\fB""ESC ] Ps;Pt ST""\fB\fR" 4
.el .IP "\fB\f(CBESC ] Ps;Pt ST\fB\fR" 4
.IX Item "ESC ] Ps;Pt ST"
Set XTerm Parameters. 8\-bit \s-1ST:\s0 0x9c, 7\-bit \s-1ST\s0 sequence: \s-1ESC\s0 \e (0x1b,
0x5c), backwardz compatible terminator \s-1BEL \s0(0x07) be also accepted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. any
\&\fBoctet\fR can be escaped by prefixin it wit \s-1SYN \s0(0x16, ^V).
.TS
l l .
Ps = 0	Change Icon Name n' Window Title ta Pt
Ps = 1	Change Icon Name ta Pt
Ps = 2	Change Window Title ta Pt
Ps = 3	If Pt starts wit a ?, query tha (STRING) property of tha window n' return dat shit. If Pt gotz nuff a =, set tha named property ta tha given value, else delete tha specified property.
Ps = 4	Pt be a semi-colon separated sequence of one or mo' semi-colon separated number/name pairs, where number be a index ta a cold-ass lil colour n' name is tha name of a cold-ass lil colour. Shiiit, dis aint no joke. Each pair causes tha numbered colour ta be chizzled ta name. Numbers 0-7 correspondz ta low-intensitizzle (normal) colours n' 8-15 correspondz ta high-intensitizzle colours. 0=black, 1=red, 2=green, 3=yellow, 4=blue, 5=magenta, 6=cyan, 7=white
Ps = 10	Change colour of text foreground ta Pt
Ps = 11	Change colour of text background ta Pt
Ps = 12	Change colour of text cursor foreground ta Pt
Ps = 13	Change colour of mouse foreground ta Pt
Ps = 17	Change background colour of highlight charactas ta Pt
Ps = 19	Change foreground colour of highlight charactas ta Pt
Ps = 20	Change background pixmap parametas (see section BACKGROUND IMAGE) (Compile pixbuf).
Ps = 39	Change default foreground colour ta Pt. [deprecated, use 10]
Ps = 46	Change Log File ta Pt unimplemented
Ps = 49	Change default background colour ta Pt. [deprecated, use 11]
Ps = 50	Set fontset ta Pt, wit tha followin special jointz of Pt (rxvt) #+n chizzle up n #-n chizzle down n if n is missin of 0, a value of 1 is used empty chizzle ta font0 n chizzle ta font n
Ps = 55	Log all scrollback buffer n' all of screen ta Pt [disabled]
Ps = 701	Change current locale ta Pt, or, if Pt is ?, return tha current locale (Compile frills).
Ps = 702	Request version if Pt is ?, returnin rxvt-unicode, tha resource name, tha major n' minor version numbers, e.g. ESC ] 702 ; rxvt-unicode ; urxvt ; 7 ; 4 ST.
Ps = 704	Change colour of italic charactas ta Pt
Ps = 705	Change background pixmap tint colour ta Pt (Compile transparency).
Ps = 706	Change colour of bold charactas ta Pt
Ps = 707	Change colour of underlined charactas ta Pt
Ps = 708	Change colour of tha border ta Pt
Ps = 710	Set aiiight fontset ta Pt. Right back up in yo muthafuckin ass. Same as Ps = 50.
Ps = 711	Set bold fontset ta Pt. Right back up in yo muthafuckin ass. Similar ta Ps = 50 (Compile styles).
Ps = 712	Set italic fontset ta Pt. Right back up in yo muthafuckin ass. Similar ta Ps = 50 (Compile styles).
Ps = 713	Set bold-italic fontset ta Pt. Right back up in yo muthafuckin ass. Similar ta Ps = 50 (Compile styles).
Ps = 720	Move viewin window up by Pt lines, or clear scrollback buffer if Pt = 0 (Compile frills).
Ps = 721	Move viewin window down by Pt lines, or clear scrollback buffer if Pt = 0 (Compile frills).
Ps = 777	Call tha perl extension wit tha given string, which should be of tha form extension:parametas (Compile perl).
.TE
.SH "BACKGROUND IMAGE"
.IX Header "BACKGROUND IMAGE"
For tha \s-1BACKGROUND IMAGE\s0 XTerm escape sequence \fB\f(CB\*(C`ESC ] 20 ; Pt ST\*(C'\fB\fR tha value
of \fB\f(CB\*(C`Pt\*(C'\fB\fR can be one of tha followin commands:
.ie n .IP "\fB\fB""?""\fB\fR" 4
.el .IP "\fB\f(CB?\fB\fR" 4
.IX Item "?"
display scale n' posizzle up in tha title
.ie n .IP "\fB\fB"";WxH+X+Y""\fB\fR" 4
.el .IP "\fB\f(CB;WxH+X+Y\fB\fR" 4
.IX Item ";WxH+X+Y"
change scale and/or position
.ie n .IP "\fB\fB""FILE;WxH+X+Y""\fB\fR" 4
.el .IP "\fB\f(CBFILE;WxH+X+Y\fB\fR" 4
.IX Item "FILE;WxH+X+Y"
change background image
.PP

.IX Xref "Mouse"
.SH "Mouse Reporting"
.IX Header "Mouse Reporting"
.ie n .IP "\fB\fB""ESC [ M <b> <x> <y>""\fB\fR" 4
.el .IP "\fB\f(CBESC [ M <b> <x> <y>\fB\fR" 4
.IX Item "ESC [ M <b> <x> <y>"
report mouse position
.PP
Da lower 2 bitz of \fB\f(CB\*(C`<b>\*(C'\fB\fR indicate tha button:
.ie n .IP "Button = \fB\fB""(<b> \- SPACE) & 3""\fB\fR" 4
.el .IP "Button = \fB\f(CB(<b> \- SPACE) & 3\fB\fR" 4
.IX Item "Button = (<b> - SPACE) & 3"
.TS
l l .
0	Button1 pressed
1	Button2 pressed
2	Button3 pressed
3	button busted out (X11 mouse report)
.TE
.PP
Da upper bitz of \fB\f(CB\*(C`<b>\*(C'\fB\fR indicate tha modifiers when the
button was pressed n' is added together (X11 mouse report only):
.ie n .IP "State = \fB\fB""(<b> \- SPACE) & ~3""\fB\fR" 4
.el .IP "State = \fB\f(CB(<b> \- SPACE) & ~3\fB\fR" 4
.IX Item "State = (<b> - SPACE) & ~3"
.TS
l l .
4	Shift
8	Meta
16	Control
32	Motion Notify
32	Double Click (rxvt extension), disabled by default
64	Button1 is straight-up Button4, Button2 is straight-up Button5 etc.
.TE
Col = \fB\f(CB\*(C`<x> \- SPACE\*(C'\fB\fR
.Sp
Row = \fB\f(CB\*(C`<y> \- SPACE\*(C'\fB\fR
.SH "Key Codes"
.IX Header "Key Codes"

.IX Xref "KeyCodes"
.PP
Note: \fBShift\fR + \fBF1\fR\-\fBF10\fR generates \fBF11\fR\-\fBF20\fR
.PP
For tha keypad, use \fBShift\fR ta temporarily override Application-Keypad
settin use \fBNum_Lock\fR ta toggle Application-Keypad settin if
\&\fBNum_Lock\fR is off, toggle Application-Keypad settin fo' realz. Also note that
valuez of \fBBackSpace\fR, \fBDelete\fR may done been compiled differently on
your system.
.TS
l l l l l .
	Normal	Shift	Control	Ctrl+Shift
Tab	^I	ESC [ Z	^I	ESC [ Z
BackSpace	^H	^?	^?	^?
Find	ESC [ 1 ~	ESC [ 1 $	ESC [ 1 ^	ESC [ 1 @
Insert	ESC [ 2 ~	paste	ESC [ 2 ^	ESC [ 2 @
Execute	ESC [ 3 ~	ESC [ 3 $	ESC [ 3 ^	ESC [ 3 @
Select	ESC [ 4 ~	ESC [ 4 $	ESC [ 4 ^	ESC [ 4 @
Prior	ESC [ 5 ~	scroll-up	ESC [ 5 ^	ESC [ 5 @
Next	ESC [ 6 ~	scroll-down	ESC [ 6 ^	ESC [ 6 @
Home	ESC [ 7 ~	ESC [ 7 $	ESC [ 7 ^	ESC [ 7 @
End	ESC [ 8 ~	ESC [ 8 $	ESC [ 8 ^	ESC [ 8 @
Delete	ESC [ 3 ~	ESC [ 3 $	ESC [ 3 ^	ESC [ 3 @
F1	ESC [ 11 ~	ESC [ 23 ~	ESC [ 11 ^	ESC [ 23 ^
F2	ESC [ 12 ~	ESC [ 24 ~	ESC [ 12 ^	ESC [ 24 ^
F3	ESC [ 13 ~	ESC [ 25 ~	ESC [ 13 ^	ESC [ 25 ^
F4	ESC [ 14 ~	ESC [ 26 ~	ESC [ 14 ^	ESC [ 26 ^
F5	ESC [ 15 ~	ESC [ 28 ~	ESC [ 15 ^	ESC [ 28 ^
F6	ESC [ 17 ~	ESC [ 29 ~	ESC [ 17 ^	ESC [ 29 ^
F7	ESC [ 18 ~	ESC [ 31 ~	ESC [ 18 ^	ESC [ 31 ^
F8	ESC [ 19 ~	ESC [ 32 ~	ESC [ 19 ^	ESC [ 32 ^
F9	ESC [ 20 ~	ESC [ 33 ~	ESC [ 20 ^	ESC [ 33 ^
F10	ESC [ 21 ~	ESC [ 34 ~	ESC [ 21 ^	ESC [ 34 ^
F11	ESC [ 23 ~	ESC [ 23 $	ESC [ 23 ^	ESC [ 23 @
F12	ESC [ 24 ~	ESC [ 24 $	ESC [ 24 ^	ESC [ 24 @
F13	ESC [ 25 ~	ESC [ 25 $	ESC [ 25 ^	ESC [ 25 @
F14	ESC [ 26 ~	ESC [ 26 $	ESC [ 26 ^	ESC [ 26 @
F15 (Help)	ESC [ 28 ~	ESC [ 28 $	ESC [ 28 ^	ESC [ 28 @
F16 (Menu)	ESC [ 29 ~	ESC [ 29 $	ESC [ 29 ^	ESC [ 29 @
F17	ESC [ 31 ~	ESC [ 31 $	ESC [ 31 ^	ESC [ 31 @
F18	ESC [ 32 ~	ESC [ 32 $	ESC [ 32 ^	ESC [ 32 @
F19	ESC [ 33 ~	ESC [ 33 $	ESC [ 33 ^	ESC [ 33 @
F20	ESC [ 34 ~	ESC [ 34 $	ESC [ 34 ^	ESC [ 34 @
				Application
Up	ESC [ A	ESC [ a	ESC O a	ESC O A
Down	ESC [ B	ESC [ b	ESC O b	ESC O B
Right	ESC [ C	ESC [ c	ESC O c	ESC O C
Left	ESC [ D	ESC [ d	ESC O d	ESC O D
KP_Enter	^M			ESC O M
KP_F1	ESC O P			ESC O P
KP_F2	ESC O Q			ESC O Q
KP_F3	ESC O R			ESC O R
KP_F4	ESC O S			ESC O S
XK_KP_Multiply	*			ESC O j
XK_KP_Add	+			ESC O k
XK_KP_Separator	,			ESC O l
XK_KP_Subtract	-			ESC O m
XK_KP_Decimal	.			ESC O n
XK_KP_Divide	/			ESC O o
XK_KP_0	0			ESC O p
XK_KP_1	1			ESC O q
XK_KP_2	2			ESC O r
XK_KP_3	3			ESC O s
XK_KP_4	4			ESC O t
XK_KP_5	5			ESC O u
XK_KP_6	6			ESC O v
XK_KP_7	7			ESC O w
XK_KP_8	8			ESC O x
XK_KP_9	9			ESC O y
.TE
.SH "CONFIGURE OPTIONS"
.IX Header "CONFIGURE OPTIONS"
General hint: if you git compile errors, then likely yo' configuration
hasn't been tested well. Either try wit \f(CW\*(C`\-\-enable\-everything\*(C'\fR or use
the default configuration (i.e. no \f(CW\*(C`\-\-enable\-xxx\*(C'\fR or \f(CW\*(C`\-\-disable\-xxx\*(C'\fR
switches). Of course, you should always report when a cold-ass lil combination don't
work, so it can be fixed. Y'all KNOW dat shit, muthafucka! Marc Lehmann <rxvt@schmorp.de>.
.PP
All
.IP "\-\-enable\-everything" 4
.IX Item "--enable-everything"
Add (or remove) support fo' all non-multichoice options listed
in \f(CW\*(C`./configure \-\-help\*(C'\fR, except fo' \f(CW\*(C`\-\-enable\-assert\*(C'\fR and
\&\f(CW\*(C`\-\-enable\-256\-color\*(C'\fR.
.Sp
Yo ass can specify dis n' then disable options you do not like by
\&\fIfollowing\fR dis wit tha appropriate \f(CW\*(C`\-\-disable\-...\*(C'\fR arguments,
or you can start wit a minimal configuration by specifying
\&\f(CW\*(C`\-\-disable\-everything\*(C'\fR n' than addin just tha \f(CW\*(C`\-\-enable\-...\*(C'\fR arguments
you want.
.IP "\-\-enable\-xft (default: on)" 4
.IX Item "--enable-xft (default: on)"
Add support fo' Xft (anti-aliased, among others) fonts, n' you can put dat on yo' toast. Xft fonts are
slower n' require fuckin shitloadz of memory yo, but as long as you don't use them, you
don't pay fo' em.
.IP "\-\-enable\-font\-stylez (default: on)" 4
.IX Item "--enable-font-stylez (default: on)"
Add support fo' \fBbold\fR, \fIitalic\fR n' \fB\f(BIbold italic\fB\fR font
styles. Da fonts can be set manually or automatically.
.IP "\-\-with\-codesets=CS,... (default: all)" 4
.IX Item "--with-codesets=CS,... (default: all)"
Compile up in support fo' additionizzle codeset (encoding) crews (\f(CW\*(C`eu\*(C'\fR, \f(CW\*(C`vn\*(C'\fR
are always compiled in, which includes most 8\-bit characta sets). These
codeset tablez is used fo' rollin X11 core fonts, they is not required
for Xft fonts, although havin dem compiled up in lets rxvt-unicode chizzle
replacement fonts mo' intelligently. Compilin dem up in will make your
binary bigger (all of together cost bout 700kB) yo, but it don't increase
memory usage unless you bust a gangbangin' font requirin one of these encodings.
.TS
l l .
all	all available codeset groups
zh	common chinese encodings
zh_ext	rarely used but straight-up big-ass chinese encodings
jp	common japanese encodings
jp_ext	rarely used but big-ass japanese encodings
kr	korean encodings
.TE
.IP "\-\-enable\-xim (default: on)" 4
.IX Item "--enable-xim (default: on)"
Add support fo' \s-1XIM \s0(X Input Method) protocol. This allows using
alternatizzle input methodz (e.g. kinput2) n' will also erectly
set up tha input fo' playas rockin dead keys or compose keys.
.IP "\-\-enable\-unicode3 (default: off)" 4
.IX Item "--enable-unicode3 (default: off)"
Recommended ta stay off unless you straight-up need non-BMP characters.
.Sp
Enable direct support fo' displayin unicode codepoints above
65535 (the basic multilingual page). This increases storage
requirements per characta from 2 ta 4 bytes. X11 fonts do not yet
support these extra charactas yo, but Xft do.
.Sp
Please note dat rxvt-unicode can store unicode code points >65535
even without dis flag yo, but tha number of such charactas is
limited ta all dem thousand (shared wit combinin characters,
see next switch), n' right now rxvt-unicode cannot display them
(input/output n' cut&paste still work, though).
.IP "\-\-enable\-combinin (default: on)" 4
.IX Item "--enable-combinin (default: on)"
Enable automatic composizzle of combinin charactas into
composite characters. This is required fo' proper viewin of text
where accents is encoded as separate unicode characters. This is
done by rockin precomposed charactas when available or bustin
new pseudo-charactas when no precomposed form exists.
.Sp
Without \-\-enable\-unicode3, tha number of additionizzle precomposed
charactas is somewhat limited (the 6400 private use charactas will be
(ab\-)used). With \-\-enable\-unicode3, no practical limit exists.
.Sp
This option will also enable storage (but not display) of characters
beyond plane 0 (>65535) when \-\-enable\-unicode3 was not specified.
.Sp
Da combinin table also gotz nuff entries fo' arabic presentation forms,
but these is not currently used. Y'all KNOW dat shit, muthafucka! Bug me if you want these ta be used (and
tell me how tha fuck these is ta be used...).
.IP "\-\-enable\-fallback[=CLASS] (default: Rxvt)" 4
.IX Item "--enable-fallback[=CLASS] (default: Rxvt)"
When readin resource settings, also read settings fo' class \s-1CLASS.\s0 To
disable resource fallback use \-\-disable\-fallback.
.IP "\-\-with\-res\-name=NAME (default: urxvt)" 4
.IX Item "--with-res-name=NAME (default: urxvt)"
Use tha given name as default application name when
readin resources. Right back up in yo muthafuckin ass. Specify \-\-with\-res\-name=rxvt ta replace rxvt.
.IP "\-\-with\-res\-class=CLASS (default: URxvt)" 4
.IX Item "--with-res-class=CLASS (default: URxvt)"
Use tha given class as default application class
when readin resources. Right back up in yo muthafuckin ass. Specify \-\-with\-res\-class=Rxvt ta replace
rxvt.
.IP "\-\-enable\-utmp (default: on)" 4
.IX Item "--enable-utmp (default: on)"
Write user n' tty ta utmp file (used by programs like \fIw\fR) at
start of rxvt execution n' delete shiznit when rxvt exits.
.IP "\-\-enable\-wtmp (default: on)" 4
.IX Item "--enable-wtmp (default: on)"
Write user n' tty ta wtmp file (used by programs like \fIlast\fR) at
start of rxvt execution n' write logout when rxvt exits, n' you can put dat on yo' toast.  This
option requires \-\-enable\-utmp ta also be specified.
.IP "\-\-enable\-lastlog (default: on)" 4
.IX Item "--enable-lastlog (default: on)"
Write user n' tty ta lastlog file (used by programs like
\&\fIlastlogin\fR) at start of rxvt execution. I aint talkin' bout chicken n' gravy biatch.  This option requires
\&\-\-enable\-utmp ta also be specified.
.IP "\-\-enable\-pixbuf (default: on)" 4
.IX Item "--enable-pixbuf (default: on)"
Add support fo' GDK-PixBuf ta be used fo' background images.
It addz support fo' nuff file formats includin \s-1JPG, PNG,
TIFF, GIF, XPM, BMP, ICO\s0 n' \s-1TGA.\s0
.IP "\-\-enable\-startup\-notification (default: on)" 4
.IX Item "--enable-startup-notification (default: on)"
Add support fo' freedesktop startup notifications. This allows window managers
to display some kind of progress indicator durin startup.
.IP "\-\-enable\-transparency (default: on)" 4
.IX Item "--enable-transparency (default: on)"
Add support fo' rockin tha root pixmap as background ta simulate transparency.
Note dat dis feature dependz on libXrender n' on tha availability
of tha \s-1RENDER\s0 extension up in tha X server.
.IP "\-\-enable\-fadin (default: on)" 4
.IX Item "--enable-fadin (default: on)"
Add support fo' fadin tha text when focus is lost.
.IP "\-\-enable\-rxvt\-scroll (default: on)" 4
.IX Item "--enable-rxvt-scroll (default: on)"
Add support fo' tha original gangsta rxvt scrollbar.
.IP "\-\-enable\-next\-scroll (default: on)" 4
.IX Item "--enable-next-scroll (default: on)"
Add support fo' a NeXT-like scrollbar.
.IP "\-\-enable\-xterm\-scroll (default: on)" 4
.IX Item "--enable-xterm-scroll (default: on)"
Add support fo' a Xterm-like scrollbar.
.IP "\-\-disable\-backspace\-key" 4
.IX Item "--disable-backspace-key"
Removes any handlin of tha backspace key by our asses \- let tha X server do dat shit.
.IP "\-\-disable\-delete\-key" 4
.IX Item "--disable-delete-key"
Removes any handlin of tha delete key by our asses \- let tha X server
do dat shit.
.IP "\-\-disable\-resources" 4
.IX Item "--disable-resources"
Removes any support fo' resource checking.
.IP "\-\-disable\-swapscreen" 4
.IX Item "--disable-swapscreen"
Remove support fo' secondary/swap screen.
.IP "\-\-enable\-frills (default: on)" 4
.IX Item "--enable-frills (default: on)"
Add support fo' nuff lil' small-ass features dat is not essential but sick to
have. Normally you want dis yo, but fo' straight-up lil' small-ass binaries you may want to
disable all dis bullshit.
.Sp
A non-exhaustizzle list of features enabled by \f(CW\*(C`\-\-enable\-frills\*(C'\fR (possibly
in combination wit other switches) is:
.Sp
.Vb 10
\&  MWM\-hints
\&  EWMH\-hints (pid, utf8 names) n' protocols (ping)
\&  urgency hint
\&  separate underline colour (\-underlineColor)
\&  settable border widths n' borderless switch (\-w, \-b, \-bl)
\&  visual depth selection (\-depth)
\&  settable extra linespacin (\-lsp)
\&  iso\-14755 5.1 (basic) support
\&  tripleclickwordz (\-tcw)
\&  settable insecure mode (\-insecure)
\&  keysym remappin support
\&  cursor blinkin n' underline cursor (\-bc, \-uc)
\&  XEmbed support (\-embed)
\&  user\-pty (\-pty\-fd)
\&  hold on exit (\-hold)
\&  compile up in built\-in block graphics
\&  skip builtin block graphics (\-sbg)
\&  separate highlight colour (\-highlightColor, \-highlightTextColor)
\&  extended mouse reportin modes (1005 n' 1015).
\&  visual selection via \-visual n' \-depth.
.Ve
.Sp
It also enablez some non-essential features otherwise disabled, such as:
.Sp
.Vb 11
\&  some round\-trip time optimisations
\&  nearest colour allocation on pseudocolor screens
\&  UTF8_STRING support fo' selection
\&  sgr modes 90..97 n' 100..107
\&  backindex n' forwardindex escape sequences
\&  view chizzle/zero scrollback escape sequences
\&  locale switchin escape sequence
\&  window op n' some xterm/OSC escape sequences
\&  rectangular selections
\&  trailin space removal fo' selections
\&  verbose X error handling
.Ve
.IP "\-\-enable\-iso14755 (default: on)" 4
.IX Item "--enable-iso14755 (default: on)"
Enable extended \s-1ISO 14755\s0 support (see urxvt256c(1)).
Basic support (section 5.1) is enabled by \f(CW\*(C`\-\-enable\-frills\*(C'\fR, while
support fo' 5.2, 5.3 n' 5.4 is enabled wit dis switch.
.IP "\-\-enable\-keepscrollin (default: on)" 4
.IX Item "--enable-keepscrollin (default: on)"
Add support fo' continual scrollin of tha display when you hold
the mouse button down on a scrollbar arrow.
.IP "\-\-enable\-selectionscrollin (default: on)" 4
.IX Item "--enable-selectionscrollin (default: on)"
Add support fo' scrollin when tha selection moves ta tha top or
bottom of tha screen.
.IP "\-\-enable\-mousewheel (default: on)" 4
.IX Item "--enable-mousewheel (default: on)"
Add support fo' scrollin via mouse wheel or buttons 4 & 5.
.IP "\-\-enable\-slipwheelin (default: on)" 4
.IX Item "--enable-slipwheelin (default: on)"
Add support fo' continual scrollin (usin tha mouse wheel as an
accelerator) while tha control key is held down. I aint talkin' bout chicken n' gravy biatch.  This option
requires \-\-enable\-mousewheel ta also be specified.
.IP "\-\-enable\-smart\-resize (default: off)" 4
.IX Item "--enable-smart-resize (default: off)"
Add smart-ass growth/shrink behaviour when resizing.
This should keep tha window corner which is closest ta a cold-ass lil corner of
the screen up in a gangbangin' fixed position.
.IP "\-\-enable\-text\-blink (default: on)" 4
.IX Item "--enable-text-blink (default: on)"
Add support fo' blinkin text.
.IP "\-\-enable\-pointer\-blank (default: on)" 4
.IX Item "--enable-pointer-blank (default: on)"
Add support ta have tha pointa disappear when typin or inactive.
.IP "\-\-enable\-perl (default: on)" 4
.IX Item "--enable-perl (default: on)"
Enable a embedded perl interpreter n' shit. Right back up in yo muthafuckin ass. See tha \fBurxvt256c\f(BIperl\fB\|(3)\fR
manpage fo' mo' info on dis feature, or tha filez up in \fIsrc/perl/\fR
for tha extensions dat is installed by default.
Da perl interpreta dat is used can be specified via tha \f(CW\*(C`PERL\*(C'\fR
environment variable when hustlin configure. Even when compiled in,
perl will \fInot\fR be initialised when all extensions done been disabled
\&\f(CW\*(C`\-pe "" \-\-perl\-ext\-common ""\*(C'\fR, so it should be safe ta enable from a
resource standpoint.
.IP "\-\-enable\-assert (default: off)" 4
.IX Item "--enable-assert (default: off)"
Enablez tha assertions up in tha code, normally disabled. Y'all KNOW dat shit, muthafucka! This switch is only
useful when pimpin rxvt-unicode.
.IP "\-\-enable\-256\-color (default: off)" 4
.IX Item "--enable-256-color (default: off)"
Force use of so-called 256 colour mode, ta work round buggy applications
that do not support termcap/terminfo, or simply improve support for
applications hardcodin tha xterm 256 colour table.
.Sp
This switch breaks termcap/terminfo compatibilitizzle ta \f(CW\*(C`TERM=rxvt\-unicode\*(C'\fR,
and consequently sets \f(CW\*(C`TERM\*(C'\fR ta \f(CW\*(C`rxvt\-unicode\-256color\*(C'\fR by default
(\fIdoc/etc/\fR gotz nuff termcap/terminfo definitions fo' both).
.Sp
It also thangs up in dis biatch up in higher memory usage n' can slow down urxvt256c
dramatically when mo' than six fonts is up in use by a terminal instance.
.IP "\-\-with\-name=NAME (default: urxvt)" 4
.IX Item "--with-name=NAME (default: urxvt)"
Set tha basename fo' tha installed binaries, resulting
in \f(CW\*(C`urxvt\*(C'\fR, \f(CW\*(C`urxvtd\*(C'\fR etc.). Right back up in yo muthafuckin ass. Specify \f(CW\*(C`\-\-with\-name=rxvt\*(C'\fR ta replace with
\&\f(CW\*(C`rxvt\*(C'\fR.
.IP "\-\-with\-term=NAME (default: rxvt-unicode)" 4
.IX Item "--with-term=NAME (default: rxvt-unicode)"
Change tha environmenstrual variable fo' tha terminal ta \s-1NAME.\s0
.IP "\-\-with\-terminfo=PATH" 4
.IX Item "--with-terminfo=PATH"
Change tha environmenstrual variable fo' tha path ta tha terminfo tree to
\&\s-1PATH.\s0
.IP "\-\-with\-x" 4
.IX Item "--with-x"
Use tha X Window System (pretty much default, eh?).
.SH "AUTHORS"
.IX Header "AUTHORS"
Marc Lehmann <rxvt@schmorp.de> converted dis document ta pod and
reworked it from tha original gangsta Rxvt documentation, which was done by Geoff
Win <gcw@pobox.com>, whoz ass up in turn used tha XTerm documentation n' other
sources.
