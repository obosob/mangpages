'\" t
.\"     Title: gittutorial-2
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 10/25/2014
.\"    Manual: Git Manual
.\"    Source: Git 1.9.3
.\"  Language: Gangsta
.\"
.TH "GITTUTORIAL\-2" "7" "10/25/2014" "Git 1\&.9\&.3" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
gittutorial-2 \- A tutorial introduction ta Git: part two
.SH "SYNOPSIS"
.sp
.nf
git *
.fi
.sp
.SH "DESCRIPTION"
.sp
Yo ass should work all up in \fBgittutorial\fR(7) before readin dis tutorial\&.
.sp
Da goal of dis tutorial is ta introduce two fundamenstrual piecez of Git\(cqs architecture\(emthe object database n' tha index file\(emand ta provide tha reader wit every last muthafuckin thang necessary ta KNOW tha rest of tha Git documentation\&.
.SH "THE GIT OBJECT DATABASE"
.sp
Let\(cqs start a freshly smoked up project n' create a lil' small-ass amount of history:
.sp
.if n \{\
.RS 4
.\}
.nf
$ mkdir test\-project
$ cd test\-project
$ git init
Initialized empty Git repository up in \&.git/
$ echo \(aqwassup ghetto\(aq > file\&.txt
$ git add \&.
$ git commit \-a \-m "initial commit"
[masta (root\-commit) 54196cc] initial commit
 1 file chizzled, 1 insertion(+)
 create mode 100644 file\&.txt
$ echo \(aqwassup ghetto!\(aq >file\&.txt
$ git commit \-a \-m "add emphasis"
[masta c4d59f3] add emphasis
 1 file chizzled, 1 insertion(+), 1 deletion(\-)
.fi
.if n \{\
.RE
.\}
.sp
.sp
What is tha 7 digitz of hex dat Git responded ta tha commit with?
.sp
We saw up in part one of tha tutorial dat commits have names like this\&. Well shiiiit, it turns up dat every last muthafuckin object up in tha Git history is stored under a 40\-digit hex name\&. That name is tha SHA\-1 hash of tha object\(cqs contents; among other thangs, dis ensures dat Git aint NEVER gonna store tha same data twice (since identical data is given a identical SHA\-1 name), n' dat tha contentz of a Git object aint NEVER gonna chizzle (since dat would chizzle tha object\(cqs name as well)\&. Da 7 char hex strings here is simply tha abbreviation of such 40 characta long strings\& fo' realz. Abbreviations can be used everywhere where tha 40 characta strings can be used, so long as they is unambiguous\&.
.sp
It be expected dat tha content of tha commit object you pimped while followin tha example above generates a gangbangin' finger-lickin' different SHA\-1 hash than tha one shown above cuz tha commit object recordz tha time when dat shiznit was pimped n' tha name of tha thug struttin tha commit\&.
.sp
We can ask Git bout dis particular object wit tha cat\-file command\&. Don\(cqt copy tha 40 hex digits from dis example but use dem from yo' own version\&. Note dat you can shorten it ta only all dem charactas ta save yo ass typin all 40 hex digits:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git cat\-file \-t 54196cc2
commit
$ git cat\-file commit 54196cc2
tree 92b8b694ffb1675e5975148e1121810081dbdffe
lyricist J\&. Bruce Fieldz <bfields@puzzle\&.fieldses\&.org> 1143414668 \-0500
committa J\&. Bruce Fieldz <bfields@puzzle\&.fieldses\&.org> 1143414668 \-0500

initial commit
.fi
.if n \{\
.RE
.\}
.sp
.sp
A tree can refer ta one or mo' "blob" objects, each correspondin ta a gangbangin' file\&. In addition, a tree can also refer ta other tree objects, thus bustin a gangbangin' finger-lickin' directory hierarchy\&. Yo ass can examine tha contentz of any tree rockin ls\-tree (remember dat a long-ass enough initial portion of tha SHA\-1 will also work):
.sp
.if n \{\
.RS 4
.\}
.nf
$ git ls\-tree 92b8b694
100644 blob 3b18e512dba79e4c8300dd08aeb37f8e728b8dad    file\&.txt
.fi
.if n \{\
.RE
.\}
.sp
.sp
Thus we peep dat dis tree has one file up in it\&. Da SHA\-1 hash be a reference ta dat file\(cqs data:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git cat\-file \-t 3b18e512
blob
.fi
.if n \{\
.RE
.\}
.sp
.sp
A "blob" is just file data, which we can also examine wit cat\-file:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git cat\-file blob 3b18e512
wassup ghetto
.fi
.if n \{\
.RE
.\}
.sp
.sp
Note dat dis is tha oldschool file data; so tha object dat Git named up in its response ta tha initial tree was a tree wit a snapshot of tha directory state dat was recorded by tha straight-up original gangsta commit\&.
.sp
All of these objects is stored under they SHA\-1 names inside tha Git directory:
.sp
.if n \{\
.RS 4
.\}
.nf
$ find \&.git/objects/
\&.git/objects/
\&.git/objects/pack
\&.git/objects/info
\&.git/objects/3b
\&.git/objects/3b/18e512dba79e4c8300dd08aeb37f8e728b8dad
\&.git/objects/92
\&.git/objects/92/b8b694ffb1675e5975148e1121810081dbdffe
\&.git/objects/54
\&.git/objects/54/196cc2703dc165cbd373a65a4dcf22d50ae7f7
\&.git/objects/a0
\&.git/objects/a0/423896973644771497bdc03eb99d5281615b51
\&.git/objects/d0
\&.git/objects/d0/492b368b66bdabf2ac1fd8c92b39d3db916e59
\&.git/objects/c4
\&.git/objects/c4/d59f390b9cfd4318117afde11d601c1085f241
.fi
.if n \{\
.RE
.\}
.sp
.sp
and tha contentz of these filez is just tha compressed data plus a header identifyin they length n' they type\&. Da type is either a funky-ass blob, a tree, a cold-ass lil commit, or a tag\&.
.sp
Da simplest commit ta find is tha HEAD commit, which we can find from \&.git/HEAD:
.sp
.if n \{\
.RS 4
.\}
.nf
$ pussaaaaay \&.git/HEAD
ref: refs/heads/master
.fi
.if n \{\
.RE
.\}
.sp
.sp
As you can see, dis  drops some lyrics ta our asses which branch we\(cqre currently on, n' it  drops some lyrics ta our asses dis by namin a gangbangin' file under tha \&.git directory, which itself gotz nuff a SHA\-1 name referrin ta a cold-ass lil commit object, which we can examine wit cat\-file:
.sp
.if n \{\
.RS 4
.\}
.nf
$ pussaaaaay \&.git/refs/heads/master
c4d59f390b9cfd4318117afde11d601c1085f241
$ git cat\-file \-t c4d59f39
commit
$ git cat\-file commit c4d59f39
tree d0492b368b66bdabf2ac1fd8c92b39d3db916e59
parent 54196cc2703dc165cbd373a65a4dcf22d50ae7f7
lyricist J\&. Bruce Fieldz <bfields@puzzle\&.fieldses\&.org> 1143418702 \-0500
committa J\&. Bruce Fieldz <bfields@puzzle\&.fieldses\&.org> 1143418702 \-0500

add emphasis
.fi
.if n \{\
.RE
.\}
.sp
.sp
Da "tree" object here refers ta tha freshly smoked up state of tha tree:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git ls\-tree d0492b36
100644 blob a0423896973644771497bdc03eb99d5281615b51    file\&.txt
$ git cat\-file blob a0423896
wassup ghetto!
.fi
.if n \{\
.RE
.\}
.sp
.sp
and tha "parent" object refers ta tha previous commit:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git cat\-file commit 54196cc2
tree 92b8b694ffb1675e5975148e1121810081dbdffe
lyricist J\&. Bruce Fieldz <bfields@puzzle\&.fieldses\&.org> 1143414668 \-0500
committa J\&. Bruce Fieldz <bfields@puzzle\&.fieldses\&.org> 1143414668 \-0500

initial commit
.fi
.if n \{\
.RE
.\}
.sp
.sp
Da tree object is tha tree we examined first, n' dis commit is unusual up in dat it lacks any parent\&.
.sp
Most commits have only one parent yo, but it be also common fo' a cold-ass lil commit ta have multiple muthafathas\&. In dat case tha commit represents a merge, wit tha parent references pointin ta tha headz of tha merged branches\&.
.sp
Besides blobs, trees, n' commits, tha only remainin type of object be a "tag", which we won\(cqt say shit bout here; refer ta \fBgit-tag\fR(1) fo' details\&.
.sp
So now we know how tha fuck Git uses tha object database ta represent a project\(cqs history:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
"commit" objects refer ta "tree" objects representin tha snapshot of a gangbangin' finger-lickin' directory tree at a particular point up in tha history, n' refer ta "parent" commits ta show how tha fuck they\(cqre connected tha fuck into tha project history\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
"tree" objects represent tha state of a single directory, associatin directory names ta "blob" objects containin file data n' "tree" objects containin subdirectory shiznit\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
"blob" objects contain file data without any other structure\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
References ta commit objects all up in tha head of each branch is stored up in filez under \&.git/refs/heads/\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Da name of tha current branch is stored up in \&.git/HEAD\&.
.RE
.sp
Note, by tha way, dat fuckin shitloadz of commandz take a tree as a argument\&. But as we can peep above, a tree can be referred ta up in nuff different ways\(emby tha SHA\-1 name fo' dat tree, by tha name of a cold-ass lil commit dat refers ta tha tree, by tha name of a funky-ass branch whose head refers ta dat tree, etc\&.\-\-and most such commandz can accept any of these names\&.
.sp
In command synopses, tha word "tree\-ish" is sometimes used ta designate such a argument\&.
.SH "THE INDEX FILE"
.sp
Da primary tool we\(cqve been rockin ta create commits is git\-commit \-a, which creates a cold-ass lil commit includin every last muthafuckin chizzle you\(cqve made ta yo' hustlin tree\&. But what tha fuck if you wanna commit chizzlez only ta certain files? Or only certain chizzlez ta certain files?
.sp
If our slick asses peep tha way commits is pimped under tha cover, we\(cqll peep dat there be mo' flexible ways bustin commits\&.
.sp
Continuin wit our test\-project, let\(cqs modify file\&.txt again:
.sp
.if n \{\
.RS 4
.\}
.nf
$ echo "wassup ghetto, again" >>file\&.txt
.fi
.if n \{\
.RE
.\}
.sp
.sp
but dis time instead of immediately makin tha commit, let\(cqs take a intermediate step, n' ask fo' diffs along tha way ta keep track of what\(cqs happening:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git diff
\-\-\- a/file\&.txt
+++ b/file\&.txt
@@ \-1 +1,2 @@
 wassup ghetto!
+wassup ghetto, again
$ git add file\&.txt
$ git diff
.fi
.if n \{\
.RE
.\}
.sp
.sp
Da last diff is empty yo, but no freshly smoked up commits done been made, n' tha head still don\(cqt contain tha freshly smoked up line:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git diff HEAD
diff \-\-git a/file\&.txt b/file\&.txt
index a042389\&.\&.513feba 100644
\-\-\- a/file\&.txt
+++ b/file\&.txt
@@ \-1 +1,2 @@
 wassup ghetto!
+wassup ghetto, again
.fi
.if n \{\
.RE
.\}
.sp
.sp
So \fIgit diff\fR is comparin against suttin' other than tha head\&. Da thang dat it\(cqs comparin against is straight-up tha index file, which is stored up in \&.git/index up in a funky-ass binary format yo, but whose contents we can examine wit ls\-files:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git ls\-filez \-\-stage
100644 513feba2e53ebbd2532419ded848ba19de88ba00 0       file\&.txt
$ git cat\-file \-t 513feba2
blob
$ git cat\-file blob 513feba2
wassup ghetto!
wassup ghetto, again
.fi
.if n \{\
.RE
.\}
.sp
.sp
So what tha fuck our \fIgit add\fR did was store a freshly smoked up blob n' then put a reference ta it up in tha index file\&. If we modify tha file again, we\(cqll peep dat tha freshly smoked up modifications is reflected up in tha \fIgit diff\fR output:
.sp
.if n \{\
.RS 4
.\}
.nf
$ echo \(aqagain?\(aq >>file\&.txt
$ git diff
index 513feba\&.\&.ba3da7b 100644
\-\-\- a/file\&.txt
+++ b/file\&.txt
@@ \-1,2 +1,3 @@
 wassup ghetto!
 wassup ghetto, again
+again?
.fi
.if n \{\
.RE
.\}
.sp
.sp
With tha right arguments, \fIgit diff\fR can also show our asses tha difference between tha hustlin directory n' tha last commit, or between tha index n' tha last commit:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git diff HEAD
diff \-\-git a/file\&.txt b/file\&.txt
index a042389\&.\&.ba3da7b 100644
\-\-\- a/file\&.txt
+++ b/file\&.txt
@@ \-1 +1,3 @@
 wassup ghetto!
+wassup ghetto, again
+again?
$ git diff \-\-cached
diff \-\-git a/file\&.txt b/file\&.txt
index a042389\&.\&.513feba 100644
\-\-\- a/file\&.txt
+++ b/file\&.txt
@@ \-1 +1,2 @@
 wassup ghetto!
+wassup ghetto, again
.fi
.if n \{\
.RE
.\}
.sp
.sp
At any time, we can create a freshly smoked up commit rockin \fIgit commit\fR (without tha "\-a" option), n' verify dat tha state committed only includes tha chizzlez stored up in tha index file, not tha additionizzle chizzle dat is still only up in our hustlin tree:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git commit \-m "repeat"
$ git diff HEAD
diff \-\-git a/file\&.txt b/file\&.txt
index 513feba\&.\&.ba3da7b 100644
\-\-\- a/file\&.txt
+++ b/file\&.txt
@@ \-1,2 +1,3 @@
 wassup ghetto!
 wassup ghetto, again
+again?
.fi
.if n \{\
.RE
.\}
.sp
.sp
So by default \fIgit commit\fR uses tha index ta create tha commit, not tha hustlin tree; tha "\-a" option ta commit  drops some lyrics ta it ta first update tha index wit all chizzlez up in tha hustlin tree\&.
.sp
Finally, it\(cqs worth lookin all up in tha effect of \fIgit add\fR on tha index file:
.sp
.if n \{\
.RS 4
.\}
.nf
$ echo "goodbye, ghetto" >closing\&.txt
$ git add closing\&.txt
.fi
.if n \{\
.RE
.\}
.sp
.sp
Da effect of tha \fIgit add\fR was ta add one entry ta tha index file:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git ls\-filez \-\-stage
100644 8b9743b20d4b15be3955fc8d5cd2b09cd2336138 0       closing\&.txt
100644 513feba2e53ebbd2532419ded848ba19de88ba00 0       file\&.txt
.fi
.if n \{\
.RE
.\}
.sp
.sp
And, as you can peep wit cat\-file, dis freshly smoked up entry refers ta tha current contentz of tha file:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git cat\-file blob 8b9743b2
goodbye, ghetto
.fi
.if n \{\
.RE
.\}
.sp
.sp
Da "status" command be a useful way ta git a quick summary of tha thang:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git status
# On branch master
# Chizzlez ta be committed:
#   (use "git reset HEAD <file>\&.\&.\&." ta unstage)
#
#       freshly smoked up file: closing\&.txt
#
# Chizzlez not staged fo' commit:
#   (use "git add <file>\&.\&.\&." ta update what tha fuck is ghon be committed)
#
#       modified: file\&.txt
#
.fi
.if n \{\
.RE
.\}
.sp
.sp
Since tha current state of closing\&.txt is cached up in tha index file, it is listed as "Changes ta be committed"\&. Right back up in yo muthafuckin ass. Since file\&.txt has chizzlez up in tha hustlin directory dat aren\(cqt reflected up in tha index, it is marked "changed but not updated"\& fo' realz. At dis point, hustlin "git commit" would create a cold-ass lil commit dat added closing\&.txt (with its freshly smoked up contents) yo, but dat didn\(cqt modify file\&.txt\&.
.sp
Also, note dat a funky-ass bare git diff shows tha chizzlez ta file\&.txt yo, but not tha addizzle of closing\&.txt, cuz tha version of closing\&.txt up in tha index file is identical ta tha one up in tha hustlin directory\&.
.sp
In addizzle ta bein tha stagin area fo' freshly smoked up commits, tha index file be also populated from tha object database when checkin up a funky-ass branch, n' is used ta hold tha trees involved up in a merge operation\&. Right back up in yo muthafuckin ass. See \fBgitcore-tutorial\fR(7) n' tha relevant playa pages fo' details\&.
.SH "WHAT NEXT?"
.sp
At dis point you should know every last muthafuckin thang necessary ta read tha playa pages fo' any of tha git commands; one phat place ta start would be wit tha commandz mentioned up in \m[blue]\fBEverydizzle Git\fR\m[]\&\s-2\u[1]\d\s+2\&. Yo ass should be able ta find any unknown jargon up in \fBgitglossary\fR(7)\&.
.sp
Da \m[blue]\fBGit User\(cqs Manual\fR\m[]\&\s-2\u[2]\d\s+2 serves up a mo' comprehensive introduction ta Git\&.
.sp
\fBgitcvs-migration\fR(7) explains how tha fuck ta import a CVS repository tha fuck into Git, n' shows how tha fuck ta use Git up in a CVS\-like way\&.
.sp
For some bangin-ass examplez of Git use, peep tha \m[blue]\fBhowtos\fR\m[]\&\s-2\u[3]\d\s+2\&.
.sp
For Git pimpers, \fBgitcore-tutorial\fR(7) goes tha fuck into detail on tha lower\-level Git mechanizzlez involved in, fo' example, bustin a freshly smoked up commit\&.
.SH "SEE ALSO"
.sp
\fBgittutorial\fR(7), \fBgitcvs-migration\fR(7), \fBgitcore-tutorial\fR(7), \fBgitglossary\fR(7), \fBgit-help\fR(1), \m[blue]\fBEverydizzle Git\fR\m[]\&\s-2\u[1]\d\s+2, \m[blue]\fBDa Git User\(cqs Manual\fR\m[]\&\s-2\u[2]\d\s+2
.SH "GIT"
.sp
Part of tha \fBgit\fR(1) suite\&.
.SH "NOTES"
.IP " 1." 4
Everydizzle Git
.RS 4
\%file:///usr/share/doc/git/everyday.html
.RE
.IP " 2." 4
Git User\(cqs Manual
.RS 4
\%file:///usr/share/doc/git/user-manual.html
.RE
.IP " 3." 4
howtos
.RS 4
\%file:///usr/share/doc/git/howto-index.html
.RE
