'\" t
.\"     Title: gitrevisions
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 10/25/2014
.\"    Manual: Git Manual
.\"    Source: Git 1.9.3
.\"  Language: Gangsta
.\"
.TH "GITREVISIONS" "7" "10/25/2014" "Git 1\&.9\&.3" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
gitrevisions \- specifyin revisions n' ranges fo' Git
.SH "SYNOPSIS"
.sp
gitrevisions
.SH "DESCRIPTION"
.sp
Many Git commandz take revision parametas as arguments\&. Dependin on tha command, they denote a specific commit or, fo' commandz which strutt tha revision graph (like fuckin \fBgit-log\fR(1)), all commits which can be reached from dat commit\&. In tha latta case one can also specify a range of revisions explicitly\&.
.sp
In addition, some Git commandz (like fuckin \fBgit-show\fR(1)) also take revision parametas which denote other objects than commits, e\&.g\&. blobs ("files") or trees ("directoriez of files")\&.
.SH "SPECIFYING REVISIONS"
.sp
A revision parameta \fI<rev>\fR typically yo, but not necessarily, names a cold-ass lil commit object\&. Well shiiiit, it uses what tha fuck is called a \fIextended SHA\-1\fR syntax\& yo. Here is various ways ta spell object names\&. Da ones listed near tha end of dis list name trees n' blobs contained up in a cold-ass lil commit\&.
.PP
\fI<sha1>\fR, e\&.g\&. \fIdae86e1950b1277e545cee180551750029cfe735\fR, \fIdae86e\fR
.RS 4
Da full SHA\-1 object name (40\-byte hexadecimal string), or a leadin substrin dat is unique within tha repository\&. E\&.g\&. dae86e1950b1277e545cee180551750029cfe735 n' dae86e both name tha same commit object if there is no other object up in yo' repository whose object name starts wit dae86e\&.
.RE
.PP
\fI<describeOutput>\fR, e\&.g\&. \fIv1\&.7\&.4\&.2\-679\-g3bee7fb\fR
.RS 4
Output from
git describe; i\&.e\&. a cold-ass lil closest tag, optionally followed by a thugged-out dash n' a fuckin shitload of commits, followed by a thugged-out dash, a
\fIg\fR, n' a abbreviated object name\&.
.RE
.PP
\fI<refname>\fR, e\&.g\&. \fImaster\fR, \fIheads/master\fR, \fIrefs/heads/master\fR
.RS 4
A symbolic ref name\&. E\&.g\&.
\fImaster\fR
typically means tha commit object referenced by
\fIrefs/heads/master\fR\&. If you happen ta have both
\fIheads/master\fR
and
\fItags/master\fR, you can explicitly say
\fIheads/master\fR
to tell Git which one you mean\&. When ambiguous, a
\fI<refname>\fR
is disambiguated by takin tha straight-up original gangsta match up in tha followin rules:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
If
\fI$GIT_DIR/<refname>\fR
exists, dat is what tha fuck you mean (this is probably useful only for
\fIHEAD\fR,
\fIFETCH_HEAD\fR,
\fIORIG_HEAD\fR,
\fIMERGE_HEAD\fR
and
\fICHERRY_PICK_HEAD\fR);
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
otherwise,
\fIrefs/<refname>\fR
if it exists;
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
otherwise,
\fIrefs/tags/<refname>\fR
if it exists;
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
otherwise,
\fIrefs/heads/<refname>\fR
if it exists;
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}
otherwise,
\fIrefs/remotes/<refname>\fR
if it exists;
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}
otherwise,
\fIrefs/remotes/<refname>/HEAD\fR
if it exists\&.
.sp
\fIHEAD\fR
names tha commit on which you based tha chizzlez up in tha hustlin tree\&.
\fIFETCH_HEAD\fR
recordz tha branch which you fetched from a remote repository wit yo' last
git fetch
invocation\&.
\fIORIG_HEAD\fR
is pimped by commandz dat move your
\fIHEAD\fR
in a thugged-out drastic way, ta record tha posizzle of the
\fIHEAD\fR
before they operation, so dat you can easily chizzle tha tip of tha branch back ta tha state before you ran them\&.
\fIMERGE_HEAD\fR
recordz tha commit(s) which yo ass is mergin tha fuck into yo' branch when you run
git merge\&.
\fICHERRY_PICK_HEAD\fR
recordz tha commit which yo ass is cherry\-pickin when you run
git cherry\-pick\&.
.sp
Note dat any of the
\fIrefs/*\fR
cases above may come either from the
\fI$GIT_DIR/refs\fR
directory or from the
\fI$GIT_DIR/packed\-refs\fR
file\&. While tha ref name encodin is unspecified, UTF\-8 is preferred as some output processin may assume ref names up in UTF\-8\&.
.RE
.RE
.PP
\fI@\fR
.RS 4
\fI@\fR
alone be a gangbangin' finger-lickin' dirty-ass shortcut for
\fIHEAD\fR\&.
.RE
.PP
\fI<refname>@{<date>}\fR, e\&.g\&. \fImaster@{yesterday}\fR, \fIHEAD@{5 minutes ago}\fR
.RS 4
A ref followed by tha suffix
\fI@\fR
with a thugged-out date justification enclosed up in a funky-ass brace pair (e\&.g\&.
\fI{yesterday}\fR,
\fI{1 month 2 weeks 3 minutes 1 minute 1 second ago}\fR
or
\fI{1979\-02\-26 18:30:00}\fR) specifies tha value of tha ref at a prior point up in time\&. This suffix may only be used immediately followin a ref name n' tha ref must have a existin log (\fI$GIT_DIR/logs/<ref>\fR)\&. Note dat dis looks up tha state of your
\fBlocal\fR
ref at a given time; e\&.g\&., what tha fuck was up in yo' local
\fImaster\fR
branch last week\&. If you wanna peep commits made durin certain times, see
\fI\-\-since\fR
and
\fI\-\-until\fR\&.
.RE
.PP
\fI<refname>@{<n>}\fR, e\&.g\&. \fImaster@{1}\fR
.RS 4
A ref followed by tha suffix
\fI@\fR
with a ordinal justification enclosed up in a funky-ass brace pair (e\&.g\&.
\fI{1}\fR,
\fI{15}\fR) specifies tha n\-th prior value of dat ref\&. For example
\fImaster@{1}\fR
is tha immediate prior value of
\fImaster\fR
while
\fImaster@{5}\fR
is tha 5th prior value of
\fImaster\fR\&. This suffix may only be used immediately followin a ref name n' tha ref must have a existin log (\fI$GIT_DIR/logs/<refname>\fR)\&.
.RE
.PP
\fI@{<n>}\fR, e\&.g\&. \fI@{1}\fR
.RS 4
Yo ass can use the
\fI@\fR
construct wit a empty ref part ta git at a reflog entry of tha current branch\&. For example, if yo ass is on branch
\fIblabla\fR
then
\fI@{1}\fR
means tha same ol' dirty as
\fIblabla@{1}\fR\&.
.RE
.PP
\fI@{\-<n>}\fR, e\&.g\&. \fI@{\-1}\fR
.RS 4
Da construct
\fI@{\-<n>}\fR
means tha <n>th branch/commit checked up before tha current one\&.
.RE
.PP
\fI<branchname>@{upstream}\fR, e\&.g\&. \fImaster@{upstream}\fR, \fI@{u}\fR
.RS 4
Da suffix
\fI@{upstream}\fR
to a funky-ass branchname (short form
\fI<branchname>@{u}\fR) refers ta tha branch dat tha branch specified by branchname is set ta build on top of\& fo' realz. A missin branchname defaults ta tha current one\&.
.RE
.PP
\fI<rev>^\fR, e\&.g\&. \fIHEAD^, v1\&.5\&.1^0\fR
.RS 4
A suffix
\fI^\fR
to a revision parameta means tha straight-up original gangsta parent of dat commit object\&.
\fI^<n>\fR
means tha <n>th parent (i\&.e\&.
\fI<rev>^\fR
is equivalent to
\fI<rev>^1\fR)\& fo' realz. As a special rule,
\fI<rev>^0\fR
means tha commit itself n' is used when
\fI<rev>\fR
is tha object name of a tag object dat refers ta a cold-ass lil commit object\&.
.RE
.PP
\fI<rev>~<n>\fR, e\&.g\&. \fImaster~3\fR
.RS 4
A suffix
\fI~<n>\fR
to a revision parameta means tha commit object dat is tha <n>th generation ancestor of tha named commit object, followin only tha straight-up original gangsta muthafathas\&. I\&.e\&.
\fI<rev>~3\fR
is equivalent to
\fI<rev>^^^\fR
which is equivalent to
\fI<rev>^1^1^1\fR\&. Right back up in yo muthafuckin ass. See below fo' a illustration of tha usage of dis form\&.
.RE
.PP
\fI<rev>^{<type>}\fR, e\&.g\&. \fIv0\&.99\&.8^{commit}\fR
.RS 4
A suffix
\fI^\fR
followed by a object type name enclosed up in brace pair means dereference tha object at
\fI<rev>\fR
recursively until a object of type
\fI<type>\fR
is found or tha object cannot be dereferenced no mo' (in which case, barf)\&. For example, if
\fI<rev>\fR
is a cold-ass lil commit\-ish,
\fI<rev>^{commit}\fR
raps bout tha correspondin commit object\&. Right back up in yo muthafuckin ass. Similarly, if
\fI<rev>\fR
is a tree\-ish,
\fI<rev>^{tree}\fR
raps bout tha correspondin tree object\&.
\fI<rev>^0\fR
is a gangbangin' finger-lickin' dirty-ass short\-hand for
\fI<rev>^{commit}\fR\&.
.sp
\fIrev^{object}\fR
can be used ta make sure
\fIrev\fR
names a object dat exists, without requiring
\fIrev\fR
to be a tag, n' without dereferencing
\fIrev\fR; cuz a tag be already a object, it do not gotta be dereferenced even once ta git ta a object\&.
.sp
\fIrev^{tag}\fR
can be used ta ensure that
\fIrev\fR
identifies a existin tag object\&.
.RE
.PP
\fI<rev>^{}\fR, e\&.g\&. \fIv0\&.99\&.8^{}\fR
.RS 4
A suffix
\fI^\fR
followed by a empty brace pair means tha object could be a tag, n' dereference tha tag recursively until a non\-tag object is found\&.
.RE
.PP
\fI<rev>^{/<text>}\fR, e\&.g\&. \fIHEAD^{/fix nasty bug}\fR
.RS 4
A suffix
\fI^\fR
to a revision parameter, followed by a funky-ass brace pair dat gotz nuff a text hustled by a slash, is tha same ol' dirty as the
\fI:/fix nasty bug\fR
syntax below except dat it returns tha youngest matchin commit which is reachable from the
\fI<rev>\fR
before
\fI^\fR\&.
.RE
.PP
\fI:/<text>\fR, e\&.g\&. \fI:/fix nasty bug\fR
.RS 4
A colon, followed by a slash, followed by a text, names a cold-ass lil commit whose commit message matches tha specified regular expression\&. This name returns tha youngest matchin commit which is reachable from any ref\&. If tha commit message starts wit a
\fI!\fR
you gotta repeat that; tha special sequence
\fI:/!\fR, followed by suttin' else than
\fI!\fR, is reserved fo' now\&. Da regular expression can match any part of tha commit message\&. To match lyrics startin wit a string, one can use e\&.g\&.
\fI:/^foo\fR\&.
.RE
.PP
\fI<rev>:<path>\fR, e\&.g\&. \fIHEAD:README\fR, \fI:README\fR, \fImaster:\&./README\fR
.RS 4
A suffix
\fI:\fR
followed by a path names tha blob or tree all up in tha given path up in tha tree\-ish object named by tha part before tha colon\&.
\fI:path\fR
(with a empty part before tha colon) be a special case of tha syntax busted lyrics bout next: content recorded up in tha index all up in tha given path\& fo' realz. A path startin with
\fI\&./\fR
or
\fI\&.\&./\fR
is relatizzle ta tha current hustlin directory\&. Da given path is ghon be converted ta be relatizzle ta tha hustlin tree\(cqs root directory\&. This is most useful ta address a funky-ass blob or tree from a cold-ass lil commit or tree dat has tha same ol' dirty tree structure as tha hustlin tree\&.
.RE
.PP
\fI:<n>:<path>\fR, e\&.g\&. \fI:0:README\fR, \fI:README\fR
.RS 4
A colon, optionally followed by a stage number (0 ta 3) n' a cold-ass lil colon, followed by a path, names a funky-ass blob object up in tha index all up in tha given path\& fo' realz. A missin stage number (and tha colon dat bigs up it) names a stage 0 entry\&. Durin a merge, stage 1 is tha common ancestor, stage 2 is tha target branch\(cqs version (typically tha current branch), n' stage 3 is tha version from tha branch which is bein merged\&.
.RE
.sp
Here be a illustration, by Jizzle Loeliger\&. Both commit nodes B n' C is muthafathaz of commit node A\&. Parent commits is ordered left\-to\-right\&.
.sp
.if n \{\
.RS 4
.\}
.nf
G   H   I   J
 \e /     \e /
  D   E   F
   \e  |  / \e
    \e | /   |
     \e|/    |
      B     C
       \e   /
        \e /
         A
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
A =      = A^0
B = A^   = A^1     = A~1
C = A^2  = A^2
D = A^^  = A^1^1   = A~2
E = B^2  = A^^2
F = B^3  = A^^3
G = A^^^ = A^1^1^1 = A~3
H = D^2  = B^^2    = A^^^2  = A~2^2
I = F^   = B^3^    = A^^3^
J = F^2  = B^3^2   = A^^3^2
.fi
.if n \{\
.RE
.\}
.SH "SPECIFYING RANGES"
.sp
History traversin commandz like fuckin git log operate on a set of commits, not just a single commit\&. To these commands, specifyin a single revision wit tha notation busted lyrics bout up in tha previous section means tha set of commits reachable from dat commit, followin tha commit ancestry chain\&.
.sp
To exclude commits reachable from a cold-ass lil commit, a prefix \fI^\fR notation is used\&. E\&.g\&. \fI^r1 r2\fR means commits reachable from \fIr2\fR but exclude tha ones reachable from \fIr1\fR\&.
.sp
This set operation appears so often dat there be a gangbangin' finger-lickin' dirty-ass shorthand fo' it\&. When you have two commits \fIr1\fR n' \fIr2\fR (named accordin ta tha syntax explained up in SPECIFYING REVISIONS above), you can ask fo' commits dat is reachable from r2 excludin dem dat is reachable from r1 by \fI^r1 r2\fR n' it can be freestyled as \fIr1\&.\&.r2\fR\&.
.sp
A similar notation \fIr1\&.\&.\&.r2\fR is called symmetric difference of \fIr1\fR n' \fIr2\fR n' is defined as \fIr1 r2 \-\-not $(git merge\-base \-\-all r1 r2)\fR\&. Well shiiiit, it is tha set of commits dat is reachable from either one of \fIr1\fR or \fIr2\fR but not from both\&.
.sp
In these two shorthands, you can omit one end n' let it default ta HEAD\&. For example, \fIorigin\&.\&.\fR be a gangbangin' finger-lickin' dirty-ass shorthand fo' \fIorigin\&.\&.HEAD\fR n' asks "What did I do since I forked from tha origin branch?" Similarly, \fI\&.\&.origin\fR be a gangbangin' finger-lickin' dirty-ass shorthand fo' \fIHEAD\&.\&.origin\fR n' asks "What did tha origin do since I forked from them?" Note dat \fI\&.\&.\fR would mean \fIHEAD\&.\&.HEAD\fR which be a empty range dat is both reachable n' unreachable from HEAD\&.
.sp
Two other shorthandz fo' namin a set dat is formed by a cold-ass lil commit n' its parent commits exist\&. Da \fIr1^@\fR notation means all muthafathaz of \fIr1\fR\&. \fIr1^!\fR includes commit \fIr1\fR but excludes all of its muthafathas\&.
.sp
To summarize:
.PP
\fI<rev>\fR
.RS 4
Include commits dat is reachable from (i\&.e\&. ancestors of) <rev>\&.
.RE
.PP
\fI^<rev>\fR
.RS 4
Exclude commits dat is reachable from (i\&.e\&. ancestors of) <rev>\&.
.RE
.PP
\fI<rev1>\&.\&.<rev2>\fR
.RS 4
Include commits dat is reachable from <rev2> but exclude dem dat is reachable from <rev1>\&. When either <rev1> or <rev2> is omitted, it defaults to
\fIHEAD\fR\&.
.RE
.PP
\fI<rev1>\&.\&.\&.<rev2>\fR
.RS 4
Include commits dat is reachable from either <rev1> or <rev2> but exclude dem dat is reachable from both\&. When either <rev1> or <rev2> is omitted, it defaults to
\fIHEAD\fR\&.
.RE
.PP
\fI<rev>^@\fR, e\&.g\&. \fIHEAD^@\fR
.RS 4
A suffix
\fI^\fR
followed by a at sign is tha same ol' dirty as listin all muthafathas of
\fI<rev>\fR
(meaning, include anythang reachable from its muthafathas yo, but not tha commit itself)\&.
.RE
.PP
\fI<rev>^!\fR, e\&.g\&. \fIHEAD^!\fR
.RS 4
A suffix
\fI^\fR
followed by a exclamation mark is tha same ol' dirty as givin commit
\fI<rev>\fR
and then all its muthafathas prefixed with
\fI^\fR
to exclude dem (and they ancestors)\&.
.RE
.sp
Here is a handful of examples:
.sp
.if n \{\
.RS 4
.\}
.nf
D                G H D
D F              G H I J D F
^G D             H D
^D B             E I J F B
B\&.\&.C             C
B\&.\&.\&.C            G H D E B C
^D B C           E I J F B C
C                I J F C
C^@              I J F
C^!              C
F^! D            G H D F
.fi
.if n \{\
.RE
.\}
.SH "SEE ALSO"
.sp
\fBgit-rev-parse\fR(1)
.SH "GIT"
.sp
Part of tha \fBgit\fR(1) suite
