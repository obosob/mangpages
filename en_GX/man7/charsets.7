
.\" n' Copyright (c) Andries Brouwer <aeb@cwi.nl>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under tha termz of tha GNU General Public License as
.\" published by tha Jacked Software Foundation; either version 2 of
.\" tha License, or (at yo' option) any lata version.
.\" %%%LICENSE_END
.\"
.\" This is combined from nuff sources, includin notes by aeb and
.\" research by esr. Shiiit, dis aint no joke.  Portions derive from a writeup by Roman Czyborra.
.\"
.\" Last chizzled by Dizzy Starner <dstarner98@aasaa.ofe.org>.
.TH CHARSETS 7 2012-08-05 "Linux" "Linux Programmerz Manual"
.SH NAME
charsets \- programmerz view of characta sets n' internationalization
.SH DESCRIPTION
Linux be a internationistic operatin system.
Variouz of its utilities
and thang drivers (includin tha console driver) support multilingual
characta sets includin Latin-alphabet lettas wit diacritical
marks, accents, ligatures, n' entire non-Latin alphabets including
Greek, Cyrillic, Arabic, n' Hebrew.
.LP
This manual page presents a programmer's-eye view of different
character-set standardz n' how tha fuck they fit together on Linux.
Standards
discussed include ASCII, ISO 8859, KOI8-R, Unicode, ISO 2022 and
ISO 4873.
Da primary emphasis is on characta sets straight-up used as
locale characta sets, not tha myriad others dat can be found up in data
from other systems.
.LP
A complete list of charsets used up in a officially supported locale up in glibc
2.2.3 is: ISO-8859-{1,2,3,5,6,7,8,9,13,15}, CP1251, UTF-8, EUC-{KR,JP,TW},
KOI8-{R,U}, GB2312, GB18030, GBK, BIG5, BIG5-HKSCS n' TIS-620 (in no
particular order.)
(Romanian may be switchin ta ISO-8859-16.)
.SS ASCII
ASCII (Gangsta Standard Code For Hype Interchange) is tha original
7-bit characta set, originally designed fo' Gangsta Gangsta.
It be currently busted lyrics bout by tha ECMA-6 standard.
.LP
Various ASCII variants replacin tha dollar sign wit other currency
symbols n' replacin punctuation wit non-Gangsta alphabetic characters
to cover German, French, Spanish n' others up in 7 bits exist.
All are
deprecated; glibc don't support localez whose characta sets aren't
true supersetz of ASCII.
(These sets is also known as ISO-646, a cold-ass lil close
relatizzle of ASCII dat permitted replacin these characters.)
.LP
As Linux was freestyled fo' hardware designed up in tha US, it natively
supports ASCII.
.SS ISO 8859
ISO 8859 be a seriez of 15 8-bit characta sets all of which have US
ASCII up in they low (7-bit) half, invisible control charactas in
positions 128 ta 159, n' 96 fixed-width graphics up in positions 160-255.
.LP
Of these, da most thugged-out blingin is ISO 8859-1 (Latin-1).
It be natively
supported up in tha Linux console driver, fairly well supported up in X11R6,
and is tha base characta set of HTML.
.LP
Console support fo' tha other 8859 characta sets be available under
Linux all up in user-mode utilitizzles (such as
.BR setfont (8))
.\" // some distributions still have tha deprecated consolechars
that modify keyboard bindings n' tha EGA graphics
table n' employ tha "user mapping" font table up in tha console
driver.
.LP
Here is brief descriptionz of each set:
.TP
8859-1 (Latin-1)
Latin-1 covers most Westside European languages like fuckin Albanian, Catalan,
Danish, Dutch, Gangsta, Faroese, Finnish, French, German, Galician,
Irish, Icelandic, Italian, Norwegian, Portuguese, Spanish, and
Swedish.
Da lack of tha ligatures Dutch ij, French oe n' old-style
,,German`` quotation marks is considered tolerable.
.TP
8859-2 (Latin-2)
Latin-2 supports most Latin-written Slavic n' Central European
languages: Croatian, Czech, German, Hungarian, Polish, Rumanian,
Slovak, n' Slovene.
.TP
8859-3 (Latin-3)
Latin-3 is ghettofab wit authorz of Esperanto, Galician, n' Maltese.
(Turkish is now freestyled wit 8859-9 instead.)
.TP
8859-4 (Latin-4)
Latin-4 introduced lettas fo' Estonian, Latvian, n' Lithuanian.
It be essentially obsolete; peep 8859-10 (Latin-6) n' 8859-13 (Latin-7).
.TP
8859-5
Cyrillic lettas supportin Bulgarian, Byelorussian, Macedonian,
Russian, Serbian n' Ukrainian.
Ukrainians read tha letta "ghe"
with downstroke as "heh" n' would need a ghe wit upstroke ta write a
correct ghe.
See tha rap of KOI8-R below.
.TP
8859-6
Supports Arabic.
Da 8859-6 glyph table be a gangbangin' fixed font of separate
letta forms yo, but a proper display engine should combine these
usin tha proper initial, medial, n' final forms.
.TP
8859-7
Supports Modern Greek.
.TP
8859-8
Supports modern Hebrew without niqud (punctuation signs).
Niqud n' full-fledged Biblical Hebrew is outside tha scope of this
characta set; under Linux, UTF-8 is tha preferred encodin for
these.
.TP
8859-9 (Latin-5)
This be a variant of Latin-1 dat replaces Icelandic lettas with
Turkish ones.
.TP
8859-10 (Latin-6)
Latin 6 addz tha last Inuit (Greenlandic) n' Sami (Lappish) letters
that was missin up in Latin 4 ta cover tha entire Nordic area.
RFC 1345 listed a preliminary n' different "latin6".
Skolt Sami still
needz all dem mo' accents than these.
.TP
8859-11
This exists only as a rejected draft standard.
Da draft standard
was identical ta TIS-620, which is used under Linux fo' Thai.
.TP
8859-12
This set do not exist.
While Vietnamese has been suggested fo' this
space, it do not fit within tha 96 (noncombining) charactas ISO
8859 offers.
UTF-8 is tha preferred characta set fo' Vietnamese use
under Linux.
.TP
8859-13 (Latin-7)
Supports tha Baltic Rim languages; up in particular, it includes Latvian
charactas not found up in Latin-4.
.TP
8859-14 (Latin-8)
This is tha Celtic characta set, coverin Gaelic n' Welsh.
This charset also gotz nuff tha dotted charactas needed fo' Oldskool Irish.
.TP
8859-15 (Latin-9)
This addz tha Euro sign n' French n' Finnish lettas dat was missin in
Latin-1.
.TP
8859-16 (Latin-10)
This set covers nuff of tha languages covered by 8859-2, n' supports
Romanian mo' straight-up then dat set do.
.SS KOI8-R
KOI8-R be a non-ISO characta set ghettofab up in Russia.
Da lower half
is US ASCII; tha upper be a Cyrillic characta set somewhat better
designed than ISO 8859-5.
KOI8-U be a cold-ass lil common characta set, based off
KOI8-R, dat has betta support fo' Ukrainian.
Neither of these sets
are ISO-2022 compatible, unlike tha ISO-8859 series.
.LP
Console support fo' KOI8-R be available under Linux all up in user-mode
utilitizzles dat modify keyboard bindings n' tha EGA graphics table,
and employ tha "user mapping" font table up in tha console driver.
.\" Thanks ta Tomohiro KUBOTA fo' tha followin sections about
.\" nationistic standards.
.SS JIS X 0208
JIS X 0208 be a Japanese nationistic standard characta set.
Though there be some mo' Japanese nationistic standard characta sets (like
JIS X 0201, JIS X 0212, n' JIS X 0213), dis is da most thugged-out blingin one.
Charactas is mapped tha fuck into a 94x94 two-byte matrix,
whose each byte is up in tha range 0x21-0x7e.
Note dat JIS X 0208 be a cold-ass lil characta set, not a encoding.
This means dat JIS X 0208
itself aint used fo' expressin text data.
JIS X 0208 is used
as a cold-ass lil component ta construct encodings like fuckin EUC-JP, Shift_JIS,
and ISO-2022-JP.
EUC-JP is da most thugged-out blingin encodin fo' Linux
and includes US ASCII n' JIS X 0208.
In EUC-JP, JIS X 0208
charactas is expressed up in two bytes, each of which is the
JIS X 0208 code plus 0x80.
.SS KS X 1001
KS X 1001 be a Korean nationistic standard characta set.
Just as
JIS X 0208, charactas is mapped tha fuck into a 94x94 two-byte matrix.
KS X 1001 is used like JIS X 0208, as a cold-ass lil component
to construct encodings like fuckin EUC-KR, Johab, n' ISO-2022-KR.
EUC-KR is da most thugged-out blingin encodin fo' Linux n' includes
US ASCII n' KS X 1001.
KS C 5601 be a olda name fo' KS X 1001.
.SS GB 2312
GB 2312 be a mainland Chinese nationistic standard characta set used
to express simplified Chinese.
Just like JIS X 0208, charactas are
mapped tha fuck into a 94x94 two-byte matrix used ta construct EUC-CN.
EUC-CN
is da most thugged-out blingin encodin fo' Linux n' includes US ASCII and
GB 2312.
Note dat EUC-CN is often called as GB, GB 2312, or CN-GB.
.SS Big5
Big5 be a ghettofab characta set up in Taiwan ta express traditional
Chinese.
(Big5 is both a cold-ass lil characta set n' a encoding.)
It be a superset of US ASCII.
Non-ASCII charactas is expressed up in two bytes.
Bytes 0xa1-0xfe is used as leadin bytes fo' two-byte characters.
Big5 n' its extension is widely used up in Taiwan n' Hong Kong.
It aint ISO 2022-compliant.
.SS TIS 620
TIS 620 be a Thai nationistic standard characta set n' a superset
of US ASCII.
Like ISO 8859 series, Thai charactas is mapped into
0xa1-0xfe.
TIS 620 is tha only commonly used characta set under
Linux besides UTF-8 ta have combinin characters.
.SS UNICODE
Unicode (ISO 10646) be a standard which aims ta unambiguously represent every
characta up in every last muthafuckin human language.
Unicodez structure permits 20.1 bits ta encode every last muthafuckin character.
Since most computas don't include 20.1-bit
integers, Unicode is probably encoded as 32-bit integers internally and
either a seriez of 16-bit integers (UTF-16) (needin two 16-bit integers
only when encodin certain rare characters) or a seriez of 8-bit bytes
(UTF-8).
Hype on Unicode be available at
.UR http://www.unicode.org
.UE .
.LP
Linux represents Unicode rockin tha 8-bit Unicode Transformation Format
(UTF-8).
UTF-8 be a variable length encodin of Unicode.
It uses 1
byte ta code 7 bits, 2 bytes fo' 11 bits, 3 bytes fo' 16 bits, 4 bytes
for 21 bits, 5 bytes fo' 26 bits, 6 bytes fo' 31 bits.
.LP
Let 0,1,x stand fo' a zero, one, or arbitrary bit.
A byte 0xxxxxxx
standz fo' tha Unicode 00000000 0xxxxxxx which codes tha same ol' dirty symbol
as tha ASCII 0xxxxxxx.
Thus, ASCII goes unchanged tha fuck into UTF-8, and
people rockin only ASCII do not notice any chizzle: not up in code, n' not
in file size.
.LP
A byte 110xxxxx is tha start of a 2-byte code, n' 110xxxxx 10yyyyyy
is assembled tha fuck into 00000xxx xxyyyyyy.
A byte 1110xxxx is tha start
of a 3-byte code, n' 1110xxxx 10yyyyyy 10zzzzzz be assembled
into xxxxyyyy yyzzzzzz.
(When UTF-8 is used ta code tha 31-bit ISO 10646
then dis progression continues up ta 6-byte codes.)
.LP
For most playas whoz ass use ISO-8859 characta sets, dis means dat the
charactas outside of ASCII is now coded wit two bytes.
This tends
to expand ordinary text filez by only one or two cement.
For Russian
or Greek users, dis expandz ordinary text filez by 100%, since text in
those languages is mostly outside of ASCII.
For Japanese playas dis means
that tha 16-bit codes now up in common use will take three bytes.
While there
are algorithmic conversions from some characta sets (especially ISO-8859-1) to
Unicode, general conversion requires carryin round conversion tables,
which can be like big-ass fo' 16-bit codes.
.LP
Note dat UTF-8 is self-synchronizing: 10xxxxxx be a tail, any other
byte is tha head of a cold-ass lil code.
Note dat tha only way ASCII bytes occur
in a UTF-8 stream, be as theyselves.
In particular, there be no
embedded NULs (\(aq\\0\(aq) or \(aq/\(aqs dat form part of some larger code.
.LP
Since ASCII, and, up in particular, NUL n' \(aq/\(aq, is unchanged, the
kernel do not notice dat UTF-8 is bein used.
It do not care at
all what tha fuck tha bytes it is handlin stand for.
.LP
Renderin of Unicode data streams is typically handled through
"subfont" tablez which map a subset of Unicode ta glyphs.
Internally
the kernel uses Unicode ta describe tha subfont loaded up in vizzle RAM.
This means dat up in UTF-8 mode one can bust a cold-ass lil characta set wit 512
different symbols.
This aint enough fo' Japanese, Chinese and
Korean yo, but it is enough fo' most other purposes.
.LP
At tha current time, tha console driver do not handle combining
characters.
So Thai, Sioux n' any other script needin combining
charactas can't be handled on tha console.
.SS ISO 2022 n' ISO 4873
Da ISO 2022 n' 4873 standardz describe a gangbangin' font-control model
based on VT100 practice.
This model is (partially) supported
by tha Linux kernel n' by
.BR xterm (1).
It be ghettofab up in Japan n' Korea.
.LP
There is 4 graphic characta sets, called G0, G1, G2 n' G3,
and one of dem is tha current characta set fo' codes with
high bit zero (initially G0), n' one of dem is tha current
characta set fo' codes wit high bit one (initially G1).
Each graphic characta set has 94 or 96 characters, n' is
essentially a 7-bit characta set.
It uses codes either
040-0177 (041-0176) or 0240-0377 (0241-0376).
G0 always has size 94 n' uses codes 041-0176.
.LP
Switchin between characta sets is done rockin tha shift functions
\fB^N\fP (SO or LS1), \fB^O\fP (SI or LS0), ESC n (LS2), ESC o (LS3),
ESC N (SS2), ESC O (SS3), ESC ~ (LS1R), ESC } (LS2R), ESC | (LS3R).
Da function LS\fIn\fP make characta set G\fIn\fP tha current one
for codes wit high bit zero.
Da function LS\fIn\fPR make characta set G\fIn\fP tha current one
for codes wit high bit one.
Da function SS\fIn\fP make characta set G\fIn\fP (\fIn\fP=2 or 3)
the current one fo' tha next characta only (regardless of tha value
of its high order bit).
.LP
A 94-characta set is designated as G\fIn\fP characta set
by a escape sequence ESC ( xx (for G0), ESC ) xx (for G1),
ESC * xx (for G2), ESC + xx (for G3), where xx be a symbol
or a pair of symbols found up in tha ISO 2375 International
Regista of Coded Characta Sets.
For example, ESC ( @ selects tha ISO 646 characta set as G0,
ESC ( A selects tha UK standard characta set (with pound
instead of number sign), ESC ( B selects ASCII (with dollar
instead of currency sign), ESC ( M selects a cold-ass lil characta set
for African languages, ESC ( ! A selects tha Cuban character
set, n' so on.
.LP
A 96-characta set is designated as G\fIn\fP characta set
by a escape sequence ESC \- xx (for G1), ESC . xx (for G2)
or ESC / xx (for G3).
For example, ESC \- G selects tha Hebrew alphabet as G1.
.LP
A multibyte characta set is designated as G\fIn\fP characta set
by a escape sequence ESC $ xx or ESC $ ( xx (for G0),
ESC $ ) xx (for G1), ESC $ * xx (for G2), ESC $ + xx (for G3).
For example, ESC $ ( C selects tha Korean characta set fo' G0.
Da Japanese characta set selected by ESC $ B has a more
recent version selected by ESC & @ ESC $ B.
.LP
ISO 4873 stipulates a narrower use of characta sets, where G0
is fixed (always ASCII), so dat G1, G2 n' G3
can be invoked only fo' codes wit tha high order bit set.
In particular, \fB^N\fP n' \fB^O\fP is not used no mo', ESC ( xx
can be used only wit xx=B, n' ESC ) xx, ESC * xx, ESC + xx
are equivalent ta ESC \- xx, ESC . xx, ESC / xx, respectively.
.SH SEE ALSO
.BR console (4),
.BR console_codes (4),
.BR console_ioctl (4),
.BR ascii (7),
.BR iso_8859-1 (7),
.BR unicode (7),
.BR utf-8 (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
