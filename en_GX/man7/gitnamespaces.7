'\" t
.\"     Title: gitnamespaces
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 10/25/2014
.\"    Manual: Git Manual
.\"    Source: Git 1.9.3
.\"  Language: Gangsta
.\"
.TH "GITNAMESPACES" "7" "10/25/2014" "Git 1\&.9\&.3" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
gitnamespaces \- Git namespaces
.SH "SYNOPSIS"
.sp
.nf
GIT_NAMESPACE=<namespace> \fIgit upload\-pack\fR
GIT_NAMESPACE=<namespace> \fIgit receive\-pack\fR
.fi
.sp
.SH "DESCRIPTION"
.sp
Git supports dividin tha refz of a single repository tha fuck into multiple namespaces, each of which has its own branches, tags, n' HEAD\&. Git can expose each namespace as a independent repository ta pull from n' push to, while pluggin tha object store, n' exposin all tha refs ta operations like fuckin \fBgit-gc\fR(1)\&.
.sp
Storin multiple repositories as namespacez of a single repository avoidz storin duplicate copiez of tha same objects, like fuckin when storin multiple branchez of tha same source\&. Da alternates mechanizzle serves up similar support fo' avoidin duplicates yo, but alternates do not prevent duplication between freshly smoked up objects added ta tha repositories without ongoin maintenance, while namespaces do\&.
.sp
To specify a namespace, set tha GIT_NAMESPACE environment variable ta tha namespace\&. For each ref namespace, Git stores tha correspondin refs up in a gangbangin' finger-lickin' directory under refs/namespaces/\&. For example, GIT_NAMESPACE=foo will store refs under refs/namespaces/foo/\&. Yo ass can also specify namespaces via tha \-\-namespace option ta \fBgit\fR(1)\&.
.sp
Note dat namespaces which include a / will expand ta a hierarchy of namespaces; fo' example, GIT_NAMESPACE=foo/bar will store refs under refs/namespaces/foo/refs/namespaces/bar/\&. This make paths up in GIT_NAMESPACE behave hierarchically, so dat clonin wit GIT_NAMESPACE=foo/bar produces tha same ol' dirty result as clonin wit GIT_NAMESPACE=foo n' clonin from dat repo wit GIT_NAMESPACE=bar\&. Well shiiiit, it also avoidz ambiguitizzle wit strange namespace paths like fuckin foo/refs/heads/, which could otherwise generate directory/file conflicts within tha refs directory\&.
.sp
\fBgit-upload-pack\fR(1) n' \fBgit-receive-pack\fR(1) rewrite tha namez of refs as specified by GIT_NAMESPACE\&. git\-upload\-pack n' git\-receive\-pack will ignore all references outside tha specified namespace\&.
.sp
Da smart-ass HTTP server, \fBgit-http-backend\fR(1), will pass GIT_NAMESPACE all up in ta tha backend programs; peep \fBgit-http-backend\fR(1) fo' sample configuration ta expose repository namespaces as repositories\&.
.sp
For a simple local test, you can use \fBgit-remote-ext\fR(1):
.sp
.if n \{\
.RS 4
.\}
.nf
git clone ext::\(aqgit \-\-namespace=foo %s /tmp/prefixed\&.git\(aq
.fi
.if n \{\
.RE
.\}
.sp
.SH "SECURITY"
.sp
Every Muthafucka wit access ta any namespace within a repository can potentially access objects from any other namespace stored up in tha same repository\&. Yo ass can\(cqt directly say "give me object ABCD" if you don\(cqt gotz a ref ta it yo, but you can do some other sneaky thangs like:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
Claimin ta push ABCD, at which point tha server will optimize up tha need fo' you ta straight-up bust it\&. Now you gotz a ref ta ABCD n' can fetch it (claimin not ta have it, of course)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
Requestin other refs, frontin dat you have ABCD, at which point tha server may generate deltas against ABCD\&.
.RE
.sp
None of dis causes a problem if you only host hood repositories, or if all dem fools dat may read one namespace may also read every last muthafuckin thang up in every last muthafuckin other namespace (for instance, if mah playas up in a organization has read permission ta every last muthafuckin repository)\&.
