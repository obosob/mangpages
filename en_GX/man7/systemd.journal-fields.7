'\" t
.TH "SYSTEMD\&.JOURNAL\-FIELDS" "7" "" "systemd 208" "systemd.journal-fields"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
systemd.journal-fieldz \- Special journal fields
.SH "DESCRIPTION"
.PP
Entries up in tha journal resemble a environment block up in they syntax but wit fieldz dat can include binary data\&. Primarily, fieldz is formatted UTF\-8 text strings, n' binary formattin is used only where formattin as UTF\-8 text strings make lil sense\&. New fieldz may freely be defined by applications yo, but all dem fieldz have special meaning\& fo' realz. All fieldz wit special meanings is optional\&. In some cases, fieldz may step tha fuck up mo' than once per entry\&.
.SH "USER JOURNAL FIELDS"
.PP
User fieldz is fieldz dat is directly passed from clients n' stored up in tha journal\&.
.PP
\fIMESSAGE=\fR
.RS 4
Da human\-readable message strang fo' dis entry\&. This is supposed ta be tha primary text shown ta tha user\&. Well shiiiit, it is probably not translated (but might be up in some cases), n' aint supposed ta be parsed fo' meta data\&.
.RE
.PP
\fIMESSAGE_ID=\fR
.RS 4
A 128\-bit message identifier ID fo' recognizin certain message types, if dis is desirable\&. This should contain a 128\-bit ID formatted as a lower\-case hexadecimal string, without any separatin dashes or suchlike\&. This is recommended ta be a UUID\-compatible ID yo, but dis aint enforced, n' formatted differently\&. Developers can generate a freshly smoked up ID fo' dis purpose with
\fBjournalctl \fR\fB\fB\-\-new\-id\fR\fR\&.
.RE
.PP
\fIPRIORITY=\fR
.RS 4
A prioritizzle value between 0 ("emerg") n' 7 ("debug") formatted as a thugged-out decimal string\&. This field is compatible wit syslog\*(Aqs prioritizzle concept\&.
.RE
.PP
\fICODE_FILE=\fR, \fICODE_LINE=\fR, \fICODE_FUNC=\fR
.RS 4
Da code location generatin dis message, if known\&. Gotz Nuff tha source filename, tha line number n' tha function name\&.
.RE
.PP
\fIERRNO=\fR
.RS 4
Da low\-level Unix error number causin dis entry, if any\&. Gotz Nuff tha numeric value of
\fBerrno\fR(3)
formatted as a thugged-out decimal string\&.
.RE
.PP
\fISYSLOG_FACILITY=\fR, \fISYSLOG_IDENTIFIER=\fR, \fISYSLOG_PID=\fR
.RS 4
Syslog compatibilitizzle fieldz containin tha facilitizzle (formatted as decimal string), tha identifier strang (i\&.e\&. "tag"), n' tha client PID\&. (Note dat tha tag is probably derived from glibc\*(Aqs
\fIprogram_invocation_short_name\fR
variable, see
\fBprogram_invocation_short_name\fR(3)\&.)
.RE
.SH "TRUSTED JOURNAL FIELDS"
.PP
Fieldz prefixed wit a underscore is trusted fields, i\&.e\&. fieldz dat is implicitly added by tha journal n' cannot be altered by client code\&.
.PP
\fI_PID=\fR, \fI_UID=\fR, \fI_GID=\fR
.RS 4
Da process, user, n' crew ID of tha process tha journal entry originates from formatted as a thugged-out decimal string\&.
.RE
.PP
\fI_COMM=\fR, \fI_EXE=\fR, \fI_CMDLINE=\fR
.RS 4
Da name, tha executable path, n' tha command line of tha process tha journal entry originates from\&.
.RE
.PP
\fI_CAP_EFFECTIVE=\fR
.RS 4
Da effective
\fBcapabilities\fR(7)
of tha process tha journal entry originates from\&.
.RE
.PP
\fI_AUDIT_SESSION=\fR, \fI_AUDIT_LOGINUID=\fR
.RS 4
Da session n' login UID of tha process tha journal entry originates from, as maintained by tha kernel audit subsystem\&.
.RE
.PP
\fI_SYSTEMD_CGROUP=\fR, \fI_SYSTEMD_SESSION=\fR, \fI_SYSTEMD_UNIT=\fR, \fI_SYSTEMD_USER_UNIT=\fR, \fI_SYSTEMD_OWNER_UID=\fR, \fI_SYSTEMD_SLICE=\fR
.RS 4
Da control crew path up in tha systemd hierarchy, tha systemd session ID (if any), tha systemd unit name (if any), tha systemd user session unit name (if any), tha balla UID of tha systemd session (if any) n' tha systemd slice unit of tha process tha journal entry originates from\&.
.RE
.PP
\fI_SELINUX_CONTEXT=\fR
.RS 4
Da SELinux securitizzle context of tha process tha journal entry originates from\&.
.RE
.PP
\fI_SOURCE_REALTIME_TIMESTAMP=\fR
.RS 4
Da earliest trusted timestamp of tha message, if any is known dat is different from tha reception time of tha journal\&. This is tha time up in microsecondz since tha epoch UTC, formatted as a thugged-out decimal string\&.
.RE
.PP
\fI_BOOT_ID=\fR
.RS 4
Da kernel boot ID fo' tha boot tha message was generated in, formatted as a 128\-bit hexadecimal string\&.
.RE
.PP
\fI_MACHINE_ID=\fR
.RS 4
Da machine ID of tha originatin host, as available in
\fBmachine-id\fR(5)\&.
.RE
.PP
\fI_HOSTNAME=\fR
.RS 4
Da name of tha originatin host\&.
.RE
.PP
\fI_TRANSPORT=\fR
.RS 4
How tha fuck tha entry was received by tha journal service\&. Valid transports are:
.PP
\fBdriver\fR
.RS 4
for internally generated lyrics
.RE
.PP
\fBsyslog\fR
.RS 4
for dem received via tha local syslog socket wit tha syslog protocol
.RE
.PP
\fBjournal\fR
.RS 4
for dem received via tha natizzle journal protocol
.RE
.PP
\fBstdout\fR
.RS 4
for dem read from a service\*(Aqs standard output or error output
.RE
.PP
\fBkernel\fR
.RS 4
for dem read from tha kernel
.RE
.RE
.SH "KERNEL JOURNAL FIELDS"
.PP
Kernel fieldz is fieldz dat is used by lyrics originatin up in tha kernel n' stored up in tha journal\&.
.PP
\fI_KERNEL_DEVICE=\fR
.RS 4
Da kernel thang name\&. If tha entry be associated ta a funky-ass block device, tha major n' minor of tha thang node, separated by
":"
and prefixed by
"b"\&. Right back up in yo muthafuckin ass. Similar fo' characta devices but prefixed by
"c"\&. For network devices, dis is tha intercourse index prefixed by
"n"\&. For all other devices, dis is tha subsystem name prefixed by
"+", followed by
":", followed by tha kernel thang name\&.
.RE
.PP
\fI_KERNEL_SUBSYSTEM=\fR
.RS 4
Da kernel subsystem name\&.
.RE
.PP
\fI_UDEV_SYSNAME=\fR
.RS 4
Da kernel thang name as it shows up in tha thang tree below
/sys\&.
.RE
.PP
\fI_UDEV_DEVNODE=\fR
.RS 4
Da thang node path of dis thang in
/dev\&.
.RE
.PP
\fI_UDEV_DEVLINK=\fR
.RS 4
Additionizzle symlink names pointin ta tha thang node in
/dev\&. This field is frequently set mo' than once per entry\&.
.RE
.SH "FIELDS TO LOG ON BEHALF OF A DIFFERENT PROGRAM"
.PP
Fieldz up in dis section is used by programs ta specify dat they is loggin on behalf of another program or unit\&.
.PP
Fieldz used by the
\fBsystemd\-coredump\fR
coredump kernel helper:
.PP
\fICOREDUMP_UNIT=\fR, \fICOREDUMP_USER_UNIT=\fR
.RS 4
Used ta annotate lyrics containin coredumps from system n' session units\&. Right back up in yo muthafuckin ass. See
\fBsystemd-coredumpctl\fR(1)\&.
.RE
.PP
Priviledged programs (currently UID 0) may attach
\fIOBJECT_PID=\fR
to a message\&. This will instruct
\fBsystemd\-journald\fR
to attach additionizzle fieldz on behalf of tha caller:
.PP
\fIOBJECT_PID=\fR\fI\fIPID\fR\fR
.RS 4
PID of tha program dat dis message pertains to\&.
.RE
.PP
\fIOBJECT_UID=\fR, \fIOBJECT_GID=\fR, \fIOBJECT_COMM=\fR, \fIOBJECT_EXE=\fR, \fIOBJECT_CMDLINE=\fR, \fIOBJECT_AUDIT_SESSION=\fR, \fIOBJECT_AUDIT_LOGINUID=\fR, \fIOBJECT_SYSTEMD_CGROUP=\fR, \fIOBJECT_SYSTEMD_SESSION=\fR, \fIOBJECT_SYSTEMD_OWNER_UID=\fR, \fIOBJECT_SYSTEMD_UNIT=\fR, \fIOBJECT_SYSTEMD_USER_UNIT=\fR
.RS 4
These is additionizzle fieldz added automatically by
\fBsystemd\-journald\fR\&. Their meanin is tha same ol' dirty as
\fI_UID=\fR,
\fI_GID=\fR,
\fI_COMM=\fR,
\fI_EXE=\fR,
\fI_CMDLINE=\fR,
\fI_AUDIT_SESSION=\fR,
\fI_AUDIT_LOGINUID=\fR,
\fI_SYSTEMD_CGROUP=\fR,
\fI_SYSTEMD_SESSION=\fR,
\fI_SYSTEMD_UNIT=\fR,
\fI_SYSTEMD_USER_UNIT=\fR, and
\fI_SYSTEMD_OWNER_UID=\fR
as busted lyrics bout above, except dat tha process identified by
\fIPID\fR
is busted lyrics about, instead of tha process which logged tha message\&.
.RE
.SH "ADDRESS FIELDS"
.PP
Durin serialization tha fuck into external formats, like fuckin the
\m[blue]\fBJournal Export Format\fR\m[]\&\s-2\u[1]\d\s+2
or the
\m[blue]\fBJournal JSON Format\fR\m[]\&\s-2\u[2]\d\s+2, tha addressez of journal entries is serialized tha fuck into fieldz prefixed wit double underscores\&. Note dat these is not proper fieldz when stored up in tha journal but fo' addressin metadata of entries\&. They cannot be freestyled as part of structured log entries via calls such as
\fBsd_journal_send\fR(3)\&. They may also not be used as matches for
\fBsd_journal_add_match\fR(3)
.PP
\fI__CURSOR=\fR
.RS 4
Da cursor fo' tha entry\& fo' realz. A cursor be a opaque text strang dat uniquely raps bout tha posizzle of a entry up in tha journal n' is portable across machines, platforms n' journal files\&.
.RE
.PP
\fI__REALTIME_TIMESTAMP=\fR
.RS 4
Da wallclock time (\fBCLOCK_REALTIME\fR) all up in tha point up in time tha entry was received by tha journal, up in microsecondz since tha epoch UTC, formatted as a thugged-out decimal string\&. This has different propertizzles from
"_SOURCE_REALTIME_TIMESTAMP=", as it is probably a lil' bit lata but mo' likely ta be monotonic\&.
.RE
.PP
\fI__MONOTONIC_TIMESTAMP=\fR
.RS 4
Da monotonic time (\fBCLOCK_MONOTONIC\fR) all up in tha point up in time tha entry was received by tha journal up in microseconds, formatted as a thugged-out decimal string\&. To be useful as a address fo' tha entry, dis should be combined wit with tha boot ID in
"_BOOT_ID="\&.
.RE
.SH "SEE ALSO"
.PP
\fBsystemd\fR(1),
\fBjournalctl\fR(1),
\fBjournald.conf\fR(5),
\fBsd-journal\fR(3),
\fBsystemd-coredumpctl\fR(1),
\fBsystemd.directives\fR(7)
.SH "NOTES"
.IP " 1." 4
Journal Export Format
.RS 4
\%http://www.freedesktop.org/wiki/Software/systemd/export
.RE
.IP " 2." 4
Journal JSON Format
.RS 4
\%http://www.freedesktop.org/wiki/Software/systemd/json
.RE
