.\" Copyright (c) 1990, 1993
.\"	Da Regentz of tha Universitizzle of California.  All muthafuckin rights reserved.
.\"
.\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)
.\" Redistribution n' use up in source n' binary forms, wit or without
.\" modification, is permitted provided dat tha followin conditions
.\" is met:
.\" 1. Redistributionz of source code must retain tha above copyright
.\"    notice, dis list of conditions n' tha followin disclaimer.
.\" 2. Redistributions up in binary form must reproduce tha above copyright
.\"    notice, dis list of conditions n' tha followin disclaimer up in the
.\"    documentation and/or other shiznit provided wit tha distribution.
.\" 3 fo' realz. All advertisin shiznit mentionin features or use of dis software
.\"    must display tha followin acknowledgement:
.\"	This thang includes software pimped by tha Universitizzle of
.\"	California, Berkeley n' its contributors.
.\" 4. Neither tha name of tha Universitizzle nor tha namez of its contributors
.\"    may be used ta endorse or promote shizzle derived from dis software
.\"    without specific prior freestyled permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\" %%%LICENSE_END
.\"
.\"     @(#)mdoc.samples.7	8.2 (Berkeley) 12/30/93
.\"	$Id: mdoc.samples.7,v 1.17 1998/12/03 03:38:45 jkoshy Exp $
.\"
.\" This tutorial sampla invokes every last muthafuckin macro up in tha package several
.\" times n' is guaranteed ta give a most shitty case performance
.\" fo' a already mad slow package.
.\"
.\" Strin \*(Pu was not defined, probably means punctuation
.ds Pu "[ .,:;()[]?! ]
.Dd December 30, 1993
.Os
.Dt MDOC.SAMPLES 7
.Sh NAME
.Nm mdoc.samples
.Nd tutorial sampla fo' writing
.Bx
manuals with
.Nm \-mdoc
.Sh SYNOPSIS
.Nm playa mdoc.samples
.Sh DESCRIPTION
A tutorial sampla fo' writing
.Bx
manual pages wit the
.Nm \-mdoc
macro package, a
.Em content Ns \-based
and
.Em domain Ns \-based
formatting
package for
.Xr troff 1 .
Its predecessor, the
.Xr \-man 7
package,
addressed page layout leavin the
manipulation of fonts n' other
typesettin details ta tha individual lyricist.
In
.Nm \-mdoc ,
page layout macros
make up the
.Em "page structure domain"
which consistz of macros fo' titles, section headers, displays
and lists.
Essentially shit which affect tha physical position
of text on a gangbangin' formatted page.
In addizzle ta tha page structure domain, there be two mo' domains,
the manual domain n' tha general text domain.
Da general text domain is defined as macros which
perform tasks like fuckin quotin or emphasizin piecez of text.
Da manual domain is defined as macros dat is a subset of the
dizzle ta dizzle informal language used ta describe commands, routines
and related
.Bx
files.
Macros up in tha manual domain handle
command names, command-line arguments n' options, function names,
function parameters, pathnames, variables, cross
references ta other manual pages, n' so on.
These domain
items have value
for both tha lyricist n' tha future user of tha manual page.
It be hoped tha consistency gained
across tha manual set will provide easier
translation ta future documentation tools.
.Pp
Throughout the
.Ux
manual pages, a manual entry
is simply referred
to as a playa page, regardless of actual length n' without
sexist intention.
.Sh GETTING STARTED
Since a tutorial document is normally read when a person
desires ta use tha material immediately, tha assumption has
been made dat tha user of dis document may be impatient.
Da material presented up in tha remained of dis document is
outlined as bigs up:
.Bl -enum -offset indent
.It
.Tn "TROFF IDIOSYNCRASIES"
.Bl -tag -width flag -compact -offset indent
.It "Macro Usage" .
.It "Passin Space Charactas up in a Argument" .
.It "Trailin Blank Space Charactas (a warning)" .
.It "Escapin Special Characters" .
.El
.It
.Tn "THE ANATOMY OF A MAN PAGE"
.Bl -tag -width flag -compact -offset indent
.It "A manual page template" .
.El
.It
.Tn "TITLE MACROS" .
.It
.Tn "INTRODUCTION OF MANUAL AND GENERAL TEXT DOMAINS" .
.Bl -tag -width flag -compact -offset indent
.It "Whatz up in a name..." .
.It "General Syntax" .
.El
.It
.Tn "MANUAL DOMAIN"
.Bl -tag -width flag -compact -offset indent
.It "Addresses" .
.It "Lyricist name" .
.It "Arguments" .
.It "Configuration Declarations (section four only)" .
.It "Command Modifier" .
.It "Defined Variables" .
.It "Errnoz (Section two only)" .
.It "Environment Variables" .
.It "Function Argument" .
.It "Function Declaration" .
.It "Flags" .
.It "Functions (library routines)" .
.It "Function Types" .
.\" .It "Header File (includin source code)" .
.It "Interactizzle Commands" .
.It "Names" .
.It "Options" .
.It "Pathnames" .
.It "Variables" .
.It "Cross References" .
.El
.It
.Tn "GENERAL TEXT DOMAIN"
.Bl -tag -width flag -compact -offset indent
.It "AT&T Macro" .
.It "BSD Macro" .
.It "FreeBSD Macro" .
.It "UNIX Macro" .
.It "Enclosure/Quotin Macros"
.Bl -tag -width flag -compact -offset indent
.It "Angle Bracket Quote/Enclosure" .
.It "Bracket Quotes/Enclosure" .
.It "Double Quote macro/Enclosure" .
.It "Parenthesis Quote/Enclosure" .
.It "Single Quotes/Enclosure" .
.It "Prefix Macro" .
.El
.It "No\-Op or Normal Text Macro" .
.It "No Space Macro" .
.It "Section Cross References" .
.It "References n' Citations" .
.It "Return Values (sections two n' three only)"
.It "Trade Names (Acronyms n' Type Names)" .
.It "Extended  Arguments" .
.El
.It
.Tn "PAGE STRUCTURE DOMAIN"
.Bl -tag -width flag -compact -offset indent
.It "Section Headers" .
.It "Paragraphs n' Line Spacing" .
.It "Keeps" .
.It "Displays" .
.It "Font Modes (Emphasis, Literal, n' Symbolic)" .
.It "Lists n' Columns" .
.El
.It
.Tn "PREDEFINED STRINGS"
.It
.Tn "DIAGNOSTICS"
.It
.Tn "FORMATTING WITH GROFF, TROFF AND NROFF"
.It
.Tn "BUGS"
.El
.ne 7
.Sh TROFF IDIOSYNCRASIES
The
.Nm \-mdoc
package attempts ta simplify tha process of freestylin a playa page.
Theoretically, one should not gotta learn tha dirty details of
.Xr troff 1
to use
.Nm \-mdoc ;
however, there be a gangbangin' few
limitations which is unavoidable n' dopest gotten out
of tha way.
And, too, be forewarned, dis package is
.Em not
fast.
.Ss Macro Usage
As in
.Xr troff 1 ,
a macro is called by placin a
.Ql \&\.
(dot character)
at tha beginnin of
a line followed by tha two characta name fo' tha macro.
Arguments may follow tha macro separated by spaces.
It be tha dot characta all up in tha beginnin of tha line which causes
.Xr troff 1
to interpret tha next two charactas as a macro name.
To place a
.Ql \&\.
(dot character)
at tha beginnin of a line up in some context other than
a macro invocation, precede the
.Ql \&\.
(dot) wit the
.Ql \e&
escape sequence.
The
.Ql \e&
translates literally ta a zero width space, n' is never displayed up in the
output.
.Pp
In general,
.Xr troff 1
macros accept up ta nine arguments, any
extra arguments is ignored.
Most macros in
.Nm \-mdoc
accept nine arguments and,
in limited cases, arguments may be continued or extended
on the
next line (See
.Sx Extensions ) .
A few macros handle quoted arguments (see
.Sx Passin Space Charactas up in a Argument
below).
.Pp
Most of the
.Nm \-mdoc
general text domain n' manual domain macros is special
in dat they argument lists are
.Em parsed
for callable macro names.
This means a argument on tha argument list which matches
a general text or manual domain macro name n' is determined
to be callable is ghon be executed
or called when it is processed.
In dis case
the argument, although tha name of a macro,
is not preceded by a
.Ql \&\.
(dot).
It be up in dis manner dat nuff macros is nested; for
example
the option macro,
.Ql \&.Op ,
may
.Em call
the flag n' argument macros,
.Ql \&Fl
and
.Ql \&Ar ,
to specify a optionizzle flag wit a argument:
.Bl -tag -width "\&.Op \&Fl s \&Ar bytes" -offset indent
.It Op Fl s Ar bytes
is produced by
.Li \&.Op \&Fl s \&Ar bytes
.El
.Pp
To prevent a two character
strin from bein interpreted as a macro name, precede
the strang wit the
escape sequence
.Ql \e& :
.Bl -tag -width "\&.Op \&Fl s \&Ar bytes" -offset indent
.It Op \&Fl s \&Ar bytes
is produced by
.Li \&.Op \e&Fl s \e&Ar bytes
.El
.Pp
Here tha strings
.Ql \&Fl
and
.Ql \&Ar
are not interpreted as macros.
Macros whose argument lists is parsed fo' callable arguments
are referred to
as parsed n' macros which may be called from a argument
list is referred ta as callable
all up in dis document n' up in tha companion quick reference
manual
.Xr mdoc 7 .
This be a technical
.Em faux pas
as almost all of tha macros in
.Nm \-mdoc
are parsed yo, but as dat shiznit was cumbersome ta constantly refer ta macros
as bein callable n' bein able ta booty-call other macros,
the term parsed has been used.
.Ss Passin Space Charactas up in a Argument
Sometimes it is desirable ta give as one argument a string
containin one or mo' blank space characters.
This may be necessary
to defeat tha nine argument limit or ta specify arguments ta macros
which expect particular arrangement of shit up in tha argument list.
For example,
the function macro
.Ql \&.Fn
expects tha straight-up original gangsta argument ta be tha name of a gangbangin' function n' any
remainin arguments ta be function parameters.
As
.Tn "ANSI C"
stipulates tha declaration of function parametas up in the
parenthesized parameta list, each parameta is guaranteed
to be at minimum a two word string.
For example,
.Fa int foo .
.Pp
There is two possible ways ta pass a argument which gotz nuff
an embedded space.
.Em Implementation note :
Unfortunately, da most thugged-out convenient way
of passin spaces up in between quotes by reassignin individual
arguments before parsin was fairly high-rollin' speed wise
and space wise ta implement up in all tha macros for
.Tn AT&T
.Xr troff .
It aint high-rollin' for
.Xr groff
but fo' tha sake of portability, has been limited
to tha followin macros which need
it da most thugged-out:
.Pp
.Bl -tag -width 4n -offset indent -compact
.It Li \&Cd
Configuration declaration (section 4
.Sx SYNOPSIS )
.It Li \&Bl
Begin list (for tha width specifier).
.It Li \&Em
Emphasized text.
.It Li \&Fn
Functions (sections two n' four).
.It Li \&It
List items.
.It Li \&Li
Literal text.
.It Li \&Sy
Symbolic text.
.It Li \&%B
Book titles.
.It Li \&%J
Journal names.
.It Li \&%O
Optionizzle notes fo' a reference.
.It Li \&%R
Report title (in a reference).
.It Li \&%T
Title of article up in a funky-ass book or journal.
.El
.Pp
One way of passin a string
containin blank spaces is ta use tha hard or unpaddable space character
.Ql \e\  ,
that is, a funky-ass blank space preceded by tha escape character
.Ql \e .
This method may be used wit any macro but has tha side effect
of interferin wit tha adjustment of text
over tha length of a line.
.Xr Troff
sees tha hard space as if it was any other printable characta and
cannot split tha strang tha fuck into blank or newline separated pieces as one
would expect.
Da method is useful fo' strings which is not expected
to overlap a line boundary.
For example:
.Bl -tag -width "fetch(char *str)" -offset indent
.It Fn fetch char\ *str
is pimped by
.Ql \&.Fn fetch char\e *str
.It Fn fetch "char *str"
can also be pimped by
.Ql \&.Fn fetch "\\*qchar *str\\*q"
.El
.Pp
If the
.Ql \e
or quotes
were omitted,
.Ql \&.Fn
would peep three arguments and
the result would be:
.Pp
.Dl Fn fetch char *str
.Pp
For a example of what tha fuck happens when tha parameta list overlaps
a newline boundary, peep the
.Sx BUGS
section.
.Ss Trailin Blank Space Characters
.Xr Troff
can be trippin by blank space charactas all up in tha end of a line.
It
is a wise preventizzle measure ta globally remove all blank spaces
from <blank-space><end-of-line> characta sequences.
Should tha need
arise ta force a funky-ass blank characta all up in tha end of a line,
it may be forced wit a unpaddable space n' the
.Ql \e&
escape character.
For example,
.Ql string\e\ \e& .
.Ss Escapin Special Characters
Special characters
like tha newline character
.Ql \en ,
are handled by replacin the
.Ql \e
with
.Ql \ee
(e.g.,
.Ql \een )
to preserve
the backslash.
.Sh THE ANATOMY OF A MAN PAGE
Da body of a playa page is easily constructed from a funky-ass basic
template found up in tha file
.Pa /usr/share/misc/mdoc.template .
Several example playa pages can also be found
in
.Pa /usr/share/examples/mdoc .
.Pp
.Ss A manual page template
.Bd -literal -offset indent
\&.\e" Da followin requests is required fo' all playa pages.
\&.Dd Month day, year
\&.Os OPERATING_SYSTEM [version/release]
\&.Dt DOCUMENT_TITLE [section number] [volume]
\&.Sh NAME
\&.Nm name
\&.Nd one line description of name
\&.Sh SYNOPSIS
\&.Sh DESCRIPTION
\&.\e" Da followin requests should be uncommented and
\&.\e" used where appropriate.  This next request is
\&.\e" fo' sections 2 n' 3 function return joints only.
\&.\e" .Sh RETURN VALUE
\&.\e" This next request is fo' sections 1, 6, 7 & 8 only
\&.\e" .Sh ENVIRONMENT
\&.\e" .Sh FILES
\&.\e" .Sh EXAMPLES
\&.\e" This next request is fo' sections 1, 6, 7 & 8 only
\&.\e"     (command return joints (to shell) and
\&.\e"	  fprintf/stderr type diagnostics)
\&.\e" .Sh DIAGNOSTICS
\&.\e" Da next request is fo' sections 2 n' 3 error
\&.\e" n' signal handlin only.
\&.\e" .Sh ERRORS
\&.\e" .Sh SEE ALSO
\&.\e" .Sh CONFORMING TO
\&.\e" .Sh HISTORY
\&.\e" .Sh AUTHORS
\&.\e" .Sh BUGS
.Ed
.Pp
Da first shit up in tha template is tha macros
.Pq Li \&.Dd , \&.Os , \&.Dt ;
the document date,
the operatin system tha playa page or subject source is pimped
or modified for,
and tha playa page title
.Pq Em up in upper case
along wit tha section of tha manual tha page
belongs in.
These macros identify tha page,
and is discussed below in
.Sx TITLE MACROS .
.Pp
Da remainin shit up in tha template is section headers
.Pq Li \&.Sh ;
of which
.Sx NAME ,
.Sx SYNOPSIS
and
.Sx DESCRIPTION
are mandatory.
The
headaz are
discussed in
.Sx PAGE STRUCTURE DOMAIN ,
after
presentation of
.Sx MANUAL DOMAIN .
Several content macros is used ta demonstrate page layout macros;
readin bout content macros before page layout macros is
recommended.
.Sh TITLE MACROS
Da title macros is tha straight-up original gangsta portion of tha page structure
domain yo, but is presented first n' separate fo' one of mah thugs who
wishes ta start freestylin a playa page yesterday.
Three header macros designate tha document title or manual page title,
the operatin system,
and tha date of authorship.
These macros is one called once all up in tha straight-up beginnin of tha document
and is used ta construct tha headaz n' footas only.
.Bl -tag -width 6n
.It Li \&.Dt DOCUMENT_TITLE section# [volume]
Da document title is the
subject of tha playa page n' must be in
.Tn CAPITALS
due ta troff
limitations.
Da section number may be 1,\ ...,\ 8,
and if it is specified,
the volume title may be omitted.
A volume title may be arbitrary or one of tha following:
.\" .Cl
.\" USD	UNIX Userz Supplementary Documents
.\" .Cl
.\" PS1	UNIX Programmerz Supplementary Documents
.Pp
.Bl -column SMM -offset indent -compact
.It Li "AMD	UNIX Ancestral Manual Documents"
.It Li "SMM	UNIX System Managerz Manual"
.It Li "URM	UNIX Reference Manual"
.It Li "PRM	UNIX Programmerz Manual"
.El
.Pp
Da default volume labelin is
.Li URM
for sections 1, 6, n' 7;
.Li SMM
for section 8;
.Li PRM
for sections 2, 3, 4, n' 5.
.\" .Cl
.\" MMI	UNIX Manual Masta Index
.\" .Cl
.\" CON	UNIX Contributed Software Manual
.\" .Cl
.\" LOC	UNIX Local Manual
.It Li \&.Os operating_system release#
Da name of tha operatin system
should be tha common acronym, fo' example,
.Tn BSD
or
.Tn FreeBSD
or
.Tn ATT .
Da release should be tha standard release
nomenclature fo' tha system specified, fo' example, 4.3, 4.3+Tahoe, V.3,
V.4.
Unrecognized arguments is displayed as given up in tha page footer.
For instance, a typical foota might be:
.Pp
.Dl \&.Os 4.3BSD
.Pp
or
.Dl \&.Os FreeBSD 2.2
.Pp
or fo' a locally produced set
.Pp
.Dl \&.Os CS Department
.Pp
Da Berkeley default,
.Ql \&.Os
without a argument, has been defined as
.Tn BSD
in the
site-specific file
.Pa /usr/share/tmac/mdoc/doc-common .
It straight-up should default to
.Tn LOCAL .
Note, if the
.Ql \&.Os
macro aint present, tha bottom left corner of tha page
will be skanky.
.It Li \&.Dd month day, year
Da date should be freestyled formally:
.Pp
.ne 5
.Dl January 25, 1989
.El
.Sh INTRODUCTION OF MANUAL AND GENERAL TEXT DOMAINS
.Ss Whatz up in a name...
Da manual domain macro names is derived from tha dizzle ta day
informal language used ta describe commands, subroutines n' related
files.
Slightly different variationz of dis language is used ta describe
the three different aspectz of freestylin a playa page.
First, there is tha description of
.Nm \-mdoc
macro request usage.
Second is tha description of a
.Ux
command
.Em with
.Nm \-mdoc
macros n' third,
the description of a cold-ass lil command ta a user up in tha verbal sense;
that is, rap of a cold-ass lil command up in tha text of a playa page.
.Pp
In tha straight-up original gangsta case,
.Xr troff 1
macros is theyselves a type of command;
the general syntax fo' a troff command is:
.Bd -filled -offset indent
\&.Va argument1 argument2 ... argument9
.Ed
.Pp
The
.Ql \&.Va
is a macro command or request, n' anythang followin it be a argument to
be processed.
In tha second case,
the description of a
.Ux
command rockin tha content macros be a
bit mo' involved;
a typical
.Sx SYNOPSIS
command line might be displayed as:
.Bd -filled -offset indent
.Nm filter
.Op Fl flag
.Ar infile outfile
.Ed
.Pp
Here,
.Nm filter
is tha command name n' the
bracketed string
.Fl flag
is a
.Em flag
argument designated as optionizzle by tha option brackets.
In
.Nm \-mdoc
terms,
.Ar infile
and
.Ar outfile
are
called
.Em arguments .
Da macros which formatted tha above example:
.Bd -literal -offset indent
\&.Nm filter
\&.Op \&Fl flag
\&.Ar infile outfile
.Ed
.Pp
In tha third case, rap of commandz n' command syntax
includes both examplez above yo, but may add mo' detail.
The
arguments
.Ar infile
and
.Ar outfile
from tha example above might be referred ta as
.Em operands
or
.Em file arguments .
Some command-line argument lists is like long:
.Bl -tag -width make -offset indent
.It Nm make
.Op Fl eiknqrstv
.Op Fl D Ar variable
.Op Fl d Ar flags
.Op Fl f Ar makefile
.Bk -words
.Op Fl I Ar directory
.Ek
.Op Fl j Ar max_jobs
.Op Ar variable=value
.Bk -words
.Op Ar target ...
.Ek
.El
.Pp
Here one might rap bout tha command
.Nm make
and qualify tha argument
.Ar makefile ,
as a argument ta tha flag,
.Fl f ,
or say shit bout tha optional
file
operand
.Ar target .
In tha verbal context, such detail can prevent mad drama,
however the
.Nm \-mdoc
package
does not gotz a macro fo' a argument
.Em to
a flag.
Instead the
.Ql \&Ar
argument macro is used fo' a operand or file argument like
.Ar target
as well as a argument ta a gangbangin' flag like
.Ar variable .
Da make command line was produced from:
.Bd -literal -offset indent
\&.Nm make
\&.Op Fl eiknqrstv
\&.Op Fl D Ar variable
\&.Op Fl d Ar flags
\&.Op Fl f Ar makefile
\&.Op Fl I Ar directory
\&.Op Fl j Ar max_jobs
\&.Op Ar variable=value
\&.Bk -words
\&.Op Ar target ...
\&.Ek
.Ed
.Pp
The
.Ql \&.Bk
and
.Ql \&.Ek
macros is explained in
.Sx Keeps .
.Ss General Syntax
Da manual domain n' general text domain macros share a similar
syntax wit all dem minor deviations:
.Ql \&.Ar ,
.Ql \&.Fl ,
.Ql \&.Nm ,
and
.Ql \&.Pa
differ only when called without arguments;
.Ql \&.Fn
and
.Ql \&.Xr
impose a order on they argument lists
and the
.Ql \&.Op
and
.Ql \&.Fn
macros
have nestin limitations.
All content macros
are capable of recognizin n' properly handlin punctuation,
provided each punctuation characta is separated by a leadin space.
If a request is given:
.Pp
.Dl \&.Li sptr, ptr),
.Pp
Da result is:
.Pp
.Dl Li sptr, ptr),
.Pp
Da punctuation aint recognized n' all is output up in the
literal font. If tha punctuation is separated by a leading
white space:
.Pp
.Dl \&.Li "sptr , ptr ) ,"
.Pp
Da result is:
.Pp
.Dl Li sptr , ptr ) ,
.Pp
Da punctuation is now recognized n' is output up in the
default font distinguishin it from tha strings up in literal font.
.Pp
To remove tha special meanin from a punctuation character
escape it with
.Ql \e& .
.Xr Troff
is limited as a macro language, n' has difficulty
when presented wit a strang containing
a gangmember of tha mathematical, logical or
quotation set:
.Bd -literal -offset indent-two
\&{+,\-,/,*,\&%,<,>,<=,>=,=,==,&,`,',"}
.Ed
.Pp
Da problem is that
.Xr troff
may assume it is supposed ta straight-up big-ass up tha operation
or evaluation suggested by tha characters.  To prevent
the accidental evaluation of these characters,
escape dem with
.Ql \e& .
Typical syntax is shown up in tha straight-up original gangsta content macro displayed
below,
.Ql \&.Ad .
.Sh MANUAL DOMAIN
.Ss Address Macro
Da address macro identifies a address construct
of tha form addr1[,addr2[,addr3]].
.Pp
.Dl Usage: .Ad address ... \*(Pu
.Bl -tag -width "\&.Ad f1 , f2 , f3 :" -compact -offset 14n
.It Li \&.Ad addr1
.Ad addr1
.It Li \&.Ad addr1\ .
.Ad addr1 .
.It Li \&.Ad addr1\ , file2
.Ad addr1 , file2
.It Li \&.Ad f1\ , f2\ , f3\ :
.Ad f1 , f2 , f3 :
.It Li \&.Ad addr\ )\ )\ ,
.Ad addr ) ) ,
.El
.Pp
It be a error ta call
.Ql \&.Ad
without arguments.
.Ql \&.Ad
is callable by other macros n' is parsed.
.Ss Lyricist Name
The
.Ql \&.An
macro is used ta specify tha name of tha lyricist of tha item being
documented, or tha name of tha lyricist of tha actual manual page.
Any remainin arguments afta tha name shiznit is assumed
to be punctuation.
.Pp
.Dl Usage: .An author_name \*(Pu
.Bl -tag -width "\&.An Joe Lyricist ) ) ," -compact -offset 14n
.It Li \&.An Joe\ Author
.An Joe Author
.It Li \&.An Joe\ Author\ ,
.An Joe\ Lyricist ,
.It Li \&.An Joe\ Author\ \&Aq\ no muthafucka@FreeBSD.ORG
.An Joe Lyricist Aq no muthafucka@FreeBSD.ORG
.It Li \&.An Joe\ Author\ )\ )\ ,
.An Joe Lyricist ) ) ,
.El
.Pp
The
.Ql \&.An
macro is parsed n' is callable.
It be a error ta call
.Ql \&.An
without
any arguments.
.Ss Argument Macro
The
.Ql \&.Ar
argument macro may be used whenever
a command-line argument is referenced.
.Pp
.Dl Usage: .Ar argument ... \*(Pu
.Bl -tag -width "\&.Ar file1 file2" -compact -offset 15n
.It Li \&.Ar
.Ar
.It Li \&.Ar file1
.Ar file1
.It Li \&.Ar file1\ .
.Ar file1 .
.It Li \&.Ar file1 file2
.Ar file1 file2
.It Li \&.Ar f1 f2 f3\ :
.Ar f1 f2 f3 :
.It Li \&.Ar file\ )\ )\ ,
.Ar file ) ) ,
.El
.Pp
If
.Ql \&.Ar
is called without arguments
.Ql \&Ar
is assumed.
The
.Ql \&.Ar
macro is parsed n' is callable.
.Ss Configuration Declaration (section four only)
The
.Ql \&.Cd
macro is used ta demonstrate a
.Xr config 8
declaration fo' a thang intercourse up in a section four manual.
This macro accepts quoted arguments (double quotes only).
.Pp
.Bl -tag -width "device le0 at scode?" -offset indent
.It Cd "device le0 at scode?"
produced by:
.Ql ".Cd thang le0 at scode?" .
.El
.Ss Command Modifier
Da command modifier is identical ta the
.Ql \&.Fl
(flag) command wit tha exception
the
.Ql \&.Cm
macro do not assert a thugged-out dash
in front of every last muthafuckin argument.
Traditionally flags is marked by the
precedin dash, some commandz or subsetz of commandz do not use em.
Command modifiers may also be specified up in conjunction wit interactive
commandz like fuckin editor commands.
See
.Sx Flags .
.Ss Defined Variables
A variable which is defined up in a include file is specified
by tha macro
.Ql \&.Dv .
.Pp
.Dl Usage: .Dv defined_variable ... \*(Pu
.Bl -tag -width "\&.Dv MAXHOSTNAMELEN" -compact -offset 14n
.It Li ".Dv MAXHOSTNAMELEN"
.Dv MAXHOSTNAMELEN
.It Li ".Dv TIOCGPGRP )"
.Dv TIOCGPGRP )
.El
.Pp
It be a error ta call
.Ql \&.Dv
without arguments.
.Ql \&.Dv
is parsed n' is callable.
.Ss Errnoz (Section two only)
The
.Ql \&.Er
errno macro specifies tha error return value
for section two library routines.
Da second example
below shows
.Ql \&.Er
used wit the
.Ql \&.Bq
general text domain macro, as it would be used in
a section two manual page.
.Pp
.Dl Usage: .Er ERRNOTYPE ... \*(Pu
.Bl -tag -width "\&.Bq Er ENOTDIR" -compact -offset 14n
.It Li \&.Er ENOENT
.Er ENOENT
.It Li \&.Er ENOENT\ )\ ;
.Er ENOENT ) ;
.It Li \&.Bq \&Er ENOTDIR
.Bq Er ENOTDIR
.El
.Pp
It be a error ta call
.Ql \&.Er
without arguments.
The
.Ql \&.Er
macro is parsed n' is callable.
.Ss Environment Variables
The
.Ql \&.Ev
macro specifies a environment variable.
.Pp
.Dl Usage: .Ev argument ... \*(Pu
.Bl -tag -width "\&.Ev PRINTER ) ) ," -compact -offset 14n
.It Li \&.Ev DISPLAY
.Ev  DISPLAY
.It Li \&.Ev PATH\ .
.Ev PATH .
.It Li \&.Ev PRINTER\ )\ )\ ,
.Ev PRINTER ) ) ,
.El
.Pp
It be a error ta call
.Ql \&.Ev
without arguments.
The
.Ql \&.Ev
macro is parsed n' is callable.
.Ss Function Argument
The
.Ql \&.Fa
macro is used ta refer ta function arguments (parameters)
outside of the
.Sx SYNOPSIS
section of tha manual or inside
the
.Sx SYNOPSIS
section should a parameta list be too
long fo' the
.Ql \&.Fn
macro n' tha enclosure macros
.Ql \&.Fo
and
.Ql \&.Fc
must be used.
.Ql \&.Fa
may also be used ta refer ta structure members.
.Pp
.Dl Usage: .Fa function_argument ... \*(Pu
.Bl -tag -width "\&.Fa d_namlen\ )\ )\ ," -compact -offset 14n
.It Li \&.Fa d_namlen\ )\ )\ ,
.Fa d_namlen ) ) ,
.It Li \&.Fa iov_len
.Fa iov_len
.El
.Pp
It be a error ta call
.Ql \&.Fa
without arguments.
.Ql \&.Fa
is parsed n' is callable.
.Ss Function Declaration
The
.Ql \&.Fd
macro is used up in the
.Sx SYNOPSIS
section wit section two or three
functions.
The
.Ql \&.Fd
macro do not call other macros n' aint callable by other
macros.
.Pp
.Dl Usage: .Fd include_file (or defined variable)
.Pp
In the
.Sx SYNOPSIS
section a
.Ql \&.Fd
request causes a line break if a gangbangin' function has already been presented
and a funky-ass break has not occurred.
This leaves a sick vertical space
in between tha previous function call n' tha declaration fo' the
next function.
.Ss Flags
The
.Ql \&.Fl
macro handlez command-line flags.
It prepends
a dash,
.Ql \- ,
to tha flag.
For interactizzle command flags, which
are not prepended wit a thugged-out dash, the
.Ql \&.Cm
(command modifier)
macro is identical yo, but without tha dash.
.Pp
.Dl Usage: .Fl argument ... \*(Pu
.Bl -tag -width "\&.Fl \-s \-t \-v" -compact -offset 14n
.It Li \&.Fl
.Fl
.It Li \&.Fl cfv
.Fl cfv
.It Li \&.Fl cfv\ .
.Fl cfv .
.It Li \&.Fl s v t
.Fl s v t
.It Li \&.Fl -\ ,
.Fl - ,
.It Li \&.Fl xyz\ )\ ,
.Fl xyz ) ,
.El
.Pp
The
.Ql \&.Fl
macro without any arguments thangs up in dis biatch
in a thugged-out dash representin \fIstdin\fP/\fIstdout\fP.
Note dat giving
.Ql \&.Fl
a single dash, will result up in two dashes.
The
.Ql \&.Fl
macro is parsed n' is callable.
.Ss Functions (library routines)
Da .Fn macro is modeled on ANSI C conventions.
.Bd -literal
Usage: .Fn [type] function [[type] parametas ... \*(Pu]
.Ed
.Bl -tag -width "\&.Fn _int align_ _const * char *sptrsxx" -compact
.It Li "\&.Fn getchar"
.Fn getchar
.It Li "\&.Fn strlen ) ,"
.Fn strlen ) ,
.It Li \&.Fn "\\*qint align\\*q" "\\*qconst * char *sptrs\\*q" ,
.Fn "int align" "const * char *sptrs" ,
.El
.Pp
It be a error ta call
.Ql \&.Fn
without any arguments.
The
.Ql \&.Fn
macro
is parsed n' is callable,
note dat any call ta another macro signals tha end of
the
.Ql \&.Fn
call (it will close-parenthesis at dat point).
.Pp
For functions dat have mo' than eight parametas (and this
is rare), the
macros
.Ql \&.Fo
(function open)
and
.Ql \&.Fc
(function close)
may be used with
.Ql \&.Fa
(function argument)
to git round tha limitation.
For example:
.Bd -literal -offset indent
\&.Fo "int res_mkquery"
\&.Fa "int op"
\&.Fa "char *dname"
\&.Fa "int class"
\&.Fa "int type"
\&.Fa "char *data"
\&.Fa "int datalen"
\&.Fa "struct rrec *newrr"
\&.Fa "char *buf"
\&.Fa "int buflen"
\&.Fc
.Ed
.Pp
Produces:
.Bd -filled -offset indent
.Fo "int res_mkquery"
.Fa "int op"
.Fa "char *dname"
.Fa "int class"
.Fa "int type"
.Fa "char *data"
.Fa "int datalen"
.Fa "struct rrec *newrr"
.Fa "char *buf"
.Fa "int buflen"
.Fc
.Ed
.Pp
The
.Ql \&.Fo
and
.Ql \&.Fc
macros is parsed n' is callable.
In the
.Sx SYNOPSIS
section, tha function will always begin at
the beginnin of line.
If there is mo' than one function
presented up in the
.Sx SYNOPSIS
section n' a gangbangin' function type has not been
given, a line break will occur, leavin a sick vertical space
between tha current function name n' tha one prior.
At tha moment,
.Ql \&.Fn
does not check its word boundaries
against troff line lengths n' may split across a newline
ungracefully.
This is ghon be fixed up in tha near future.
.Ss Function Type
This macro is intended fo' the
.Sx SYNOPSIS
section.
It may be used
anywhere else up in tha playa page without problems yo, but its main purpose
is ta present tha function type up in kernel aiiight form fo' the
.Sx SYNOPSIS
of sections two n' three
(it causes a line break allowin tha function name ta appear
on tha next line).
.Pp
.Dl Usage: .Ft type ... \*(Pu
.Bl -tag -width "\&.Ft struct stat" -offset 14n -compact
.It Li \&.Ft struct stat
.Ft struct stat
.El
.Pp
The
.Ql \&.Ft
request aint callable by other macros.
.Ss Interactizzle Commands
The
.Ql \&.Ic
macro designates a interactizzle or internal command.
.Pp
.Dl Usage: .Ic argument ... \*(Pu
.Bl -tag -width "\&.Ic setenv , unsetenvxx" -compact -offset 14n
.It Li \&.Ic :wq
.Ic :wq
.It Li \&.Ic do while {...}
.Ic do while {...}
.It Li \&.Ic setenv\ , unsetenv
.Ic setenv , unsetenv
.El
.Pp
It be a error ta call
.Ql \&.Ic
without arguments.
The
.Ql \&.Ic
macro is parsed n' is callable.
.Ss Name Macro
The
.Ql \&.Nm
macro is used fo' tha document title or subject name.
It has tha peculiaritizzle of rememberin tha first
argument dat shiznit was called with, which should
always be tha subject name of tha page.
When called without
arguments,
.Ql \&.Nm
regurgitates dis initial name fo' tha sole purpose
of makin less work fo' tha lyricist.
Note:
a section two
or three document function name be addressed wit the
.Ql \&.Nm
in the
.Sx NAME
section, n' with
.Ql \&.Fn
in the
.Sx SYNOPSIS
and remainin sections.
For interactizzle commands, like fuckin the
.Ql while
command keyword in
.Xr csh 1 ,
the
.Ql \&.Ic
macro should be used.
While the
.Ql \&.Ic
is nearly identical
to
.Ql \&.Nm ,
it can not recall tha straight-up original gangsta argument dat shiznit was invoked with.
.Pp
.Dl Usage: .Nm argument ... \*(Pu
.Bl -tag -width "\&.Nm mdoc.sample" -compact -offset 14n
.It Li \&.Nm mdoc.sample
.Nm mdoc.sample
.It Li \&.Nm \e-mdoc
.Nm \-mdoc .
.It Li \&.Nm foo\ )\ )\ ,
.Nm foo ) ) ,
.It Li \&.Nm
.Nm
.El
.Pp
The
.Ql \&.Nm
macro is parsed n' is callable.
.Ss Options
The
.Ql \&.Op
macro
places option brackets round tha any remainin arguments on tha command
line, n' places any
trailin punctuation outside tha brackets.
Da macros
.Ql \&.Oc
and
.Ql \&.Oo
may be used across one or mo' lines.
.Pp
.Dl Usage: .Op options ... \*(Pu
.Bl -tag -width "\&.Op Fl c Ar objfil Op Ar corfil ," -compact -offset indent
.It Li \&.Op
.Op
.It Li ".Op Fl k"
.Op Fl k
.It Li ".Op Fl k ) ."
.Op Fl k ) .
.It Li ".Op Fl k Ar kookfile"
.Op Fl k Ar kookfile
.It Li ".Op Fl k Ar kookfile ,"
.Op Fl k Ar kookfile ,
.It Li ".Op Ar objfil Op Ar corfil"
.Op Ar objfil Op Ar corfil
.It Li ".Op Fl c Ar objfil Op Ar corfil ,"
.Op Fl c Ar objfil Op Ar corfil ,
.It Li \&.Op word1 word2
.Op word1 word2
.El
.Pp
The
.Ql \&.Oc
and
.Ql \&.Oo
macros:
.Bd -literal -offset indent
\&.Oo
\&.Op \&Fl k \&Ar kilobytes
\&.Op \&Fl i \&Ar interval
\&.Op \&Fl c \&Ar count
\&.Oc
.Ed
.Pp
Produce:
.Oo
.Op Fl k Ar kilobytes
.Op Fl i Ar interval
.Op Fl c Ar count
.Oc
.Pp
Da macros
.Ql \&.Op ,
.Ql \&.Oc
and
.Ql \&.Oo
are parsed n' is callable.
.Ss Pathnames
The
.Ql \&.Pa
macro formats pathnames or filenames.
.Pp
.Dl Usage: .Pa pathname \*(Pu
.Bl -tag -width "\&.Pa /tmp/fooXXXXX ) ." -compact -offset 14n
.It Li \&.Pa /usr/share
.Pa /usr/share
.It Li \&.Pa /tmp/fooXXXXX\ )\ .
.Pa /tmp/fooXXXXX ) .
.El
.Pp
The
.Ql \&.Pa
macro is parsed n' is callable.
.Ss Variables
Generic variable reference:
.Pp
.Dl Usage: .Va variable ... \*(Pu
.Bl -tag -width "\&.Va char s ] ) ) ," -compact -offset 14n
.It Li \&.Va count
.Va count
.It Li \&.Va settimer ,
.Va settimer ,
.It Li \&.Va int\ *prt\ )\ :
.Va int\ *prt ) :
.It Li \&.Va char\ s\ ]\ )\ )\ ,
.Va char\ s ] ) ) ,
.El
.Pp
It be a error ta call
.Ql \&.Va
without any arguments.
The
.Ql \&.Va
macro is parsed n' is callable.
.Ss Manual Page Cross References
The
.Ql \&.Xr
macro expects tha straight-up original gangsta argument ta be
a manual page name, n' tha second argument, if it exists,
to be either a section page number or punctuation.
Any
remainin arguments is assumed ta be punctuation.
.Pp
.Dl Usage: .Xr man_page [1,...,8] \*(Pu
.Bl -tag -width "\&.Xr mdoc 7 ) ) ," -compact -offset 14n
.It Li \&.Xr mdoc
.Xr mdoc
.It Li \&.Xr mdoc\ ,
.Xr mdoc ,
.It Li \&.Xr mdoc 7
.Xr mdoc 7
.It Li \&.Xr mdoc 7\ )\ )\ ,
.Xr mdoc 7 ) ) ,
.El
.Pp
The
.Ql \&.Xr
macro is parsed n' is callable.
It be a error ta call
.Ql \&.Xr
without
any arguments.
.Sh GENERAL TEXT DOMAIN
.Ss AT&T Macro
.Bd -literal -offset indent -compact
Usage: .At [v6 | v7 | 32v | V.1 | V.4] ... \*(Pu
.Ed
.Bl -tag -width "\&.At v6 ) ," -compact -offset 14n
.It Li ".At"
.At
.It Li ".At v6 ."
.At v6 .
.El
.Pp
The
.Ql \&.At
macro is
.Em not
parsed and
.Em not
callable
It accepts at most two arguments.
.Ss BSD Macro
.Dl Usage: .Bx [Version/release] ... \*(Pu
.Bl -tag -width "\&.Bx 4.3 ) ," -compact -offset 14n
.It Li ".Bx"
.Bx
.It Li ".Bx 4.3 ."
.Bx 4.3 .
.El
.Pp
The
.Ql \&.Bx
macro is parsed n' is callable.
.Ss FreeBSD Macro
.Bd -literal -offset indent -compact
Usage: .Fx Version.release ... \*(Pu
.Ed
.Bl -tag -width "\&.Fx 2.2 ) ," -compact -offset 14n
.It Li ".Fx 2.2 ."
.Fx 2.2 .
.El
.Pp
The
.Ql \&.Fx
macro is
.Em not
parsed and
.Em not
callable
It accepts at most two arguments.
.Ss UNIX Macro
.Dl Usage: .Ux ... \*(Pu
.Bl -tag -width "\&.Ux 4.3 ) ," -compact -offset 14n
.It Li ".Ux"
.Ux
.El
.Pp
The
.Ql \&.Ux
macro is parsed n' is callable.
.Ss Enclosure n' Quotin Macros
Da concept of enclosure is similar ta quoting.
Da object bein ta enclose one or mo' strings between
a pair of charactas like quotes or parentheses.
Da terms quotin n' enclosure is used
interchangeably all up in dis document.
Most of the
one line enclosure macros end
in lil' small-ass letter
.Ql q
to give a hint of quotin yo, but there be all dem irregularities.
For each enclosure macro
there be also a pair of open n' close macros which end
in lil' small-ass letters
.Ql o
and
.Ql c
respectively.
These can be used across one or mo' linez of text
and while they have nestin limitations, tha one line quote macros
can be used inside
of em.
.Pp
.ne 5
.Bd -filled -offset indent
.Bl -column "quote " "close " "open " "Enclose Stringx(in XX) " XXstringXX
.Em " Quote	 Close	 Open	Function	Result"
\&.Aq	.Ac	.Ao	Angle Bracket Enclosure	<string>
\&.Bq	.Bc	.Bo	Bracket Enclosure	[string]
\&.Dq	.Dc	.Do	Double Quote	``string''
	.Ec	.Eo	Enclose Strin (in XX)	XXstringXX
\&.Pq	.Pc	.Po	Parenthesis Enclosure	(string)
\&.Ql			Quoted Literal	`st' or string
\&.Qq	.Qc	.Qo	Straight Double Quote	"string"
\&.Sq	.Sc	.So	Single Quote	`string'
.El
.Ed
.Pp
Except fo' tha irregular macros noted below, all
of tha quotin macros is parsed n' callable.
All handle punctuation properly, as long as it
is presented one characta at a time n' separated by spaces.
Da quotin macros examine openin n' closin punctuation
to determine whether it comes before or afta the
enclosin string
This cook up some fuckin nestin possible.
.Bl -tag -width xxx,xxxx
.It Li \&.Ec , \&.Eo
These macros expect tha straight-up original gangsta argument ta be the
openin n' closin strings respectively.
.It Li \&.Ql
Da quoted literal macro behaves differently for
.Xr troff
than
.Xr nroff .
If formatted with
.Xr nroff ,
a quoted literal be always quoted.
If formatted with
troff, a item is quoted only if tha width
of tha item is less than three constant width characters.
This is ta make short strings mo' visible where tha font chizzle
to literal (constant width) is less noticeable.
.It Li \&.Pf
Da prefix macro aint callable yo, but it is parsed:
.Bl -tag -width "(namexx" -offset indent
.It Li ".Pf ( Fa name2"
becomes
.Pf ( Fa name2 .
.El
.Pp
The
.Ql \&.Ns
(no space) macro performs tha analogous suffix function.
.El
.Pp
.ne 4
Examplez of quoting:
.Bl -tag -width "\&.Aq Pa ctype.h ) ,xxxxxxxx" -compact -offset indent
.It Li \&.Aq
.Aq
.It Li \&.Aq \&Ar ctype.h\ )\ ,
.Aq Ar ctype.h ) ,
.It Li \&.Bq
.Bq
.It Li \&.Bq \&Em Greek \&, French \&.
.Bq Em Greek , French .
.It Li \&.Dq
.Dq
.It Li ".Dq strang abc ."
.Dq strang abc .
.It Li ".Dq \'^[A-Z]\'"
.Dq \'^[A-Z]\'
.It Li "\&.Ql playa mdoc"
.Ql playa mdoc
.It Li \&.Qq
.Qq
.It Li "\&.Qq strang ) ,"
.Qq strang ) ,
.It Li "\&.Qq strang Ns ),"
.Qq strang Ns ),
.It Li \&.Sq
.Sq
.It Li "\&.Sq string
.Sq string
.El
.Pp
For a phat example of nested enclosure macros, peep the
.Ql \&.Op
option macro.
Dat shiznit was pimped from tha same
underlyin enclosure macros as dem presented up in tha list
above.
The
.Ql \&.Xo
and
.Ql \&.Xc
extended argument list macros
were also built from tha same underlyin routines n' is a good
example of
.Nm \-mdoc
macro usage at its worst.
.Ss No\-Op or Normal Text Macro
Da macro
.Ql \&.No
is
a hack fo' lyrics up in a macro command line which should
.Em not
be formatted n' bigs up tha conventionizzle syntax
for content macros.
.Ss No Space Macro
The
.Ql \&.Ns
macro eliminates unwanted spaces up in between macro requests.
It be useful fo' oldschool steez argument lists where there is no space
between tha flag n' argument:
.Bl -tag -width "\&.Op Fl I Ns Ar directoryxx" -offset indent
.It Li ".Op Fl I Ns Ar directory"
produces
.Op Fl I Ns Ar directory
.El
.Pp
Note: the
.Ql \&.Ns
macro always invokes the
.Ql \&.No
macro afta eliminatin tha space unless another macro name
bigs up dat shit.
Da macro
.Ql \&.Ns
is parsed n' is callable.
.Ss Section Cross References
The
.Ql \&.Sx
macro designates a reference ta a section header
within tha same document.
It be parsed n' is callable.
.Pp
.Bl -tag -width "Li \&.Sx FILES" -offset 14n
.It Li \&.Sx FILES
.Sx FILES
.El
.Ss References n' Citations
Da followin macros cook up a modest attempt ta handle references.
At best, tha macros make it convenient ta manually drop up in a subset of
refer steez references.
.Pp
.Bl -tag -width 6n -offset indent -compact
.It Li ".Rs"
Reference Start.
Causes a line break n' begins collection
of reference shiznit until the
reference end macro is read.
.It Li ".Re"
Reference End.
Da reference is printed.
.It Li ".%A"
Reference lyricist name, one name per invocation.
.It Li ".%B"
Book title.
.It Li ".\&%C"
City/place.
.It Li ".\&%D"
Date.
.It Li ".%J"
Journal name.
.It Li ".%N"
Issue number.
.It Li ".%O"
Optionizzle shiznit.
.It Li ".%P"
Page number.
.It Li ".%R"
Report name.
.It Li ".%T"
Title of article.
.It Li ".%V"
Volume(s).
.El
.Pp
Da macros beginnin with
.Ql %
are not callable, n' is parsed only fo' tha trade name macro which
returns ta its caller.
(And not straight-up predictably all up in tha moment either.)
Da purpose is ta allow trade names
to be pretty printed in
.Xr troff Ns / Ns Xr ditroff
output.
.Ss Return Values
The
.Ql \&.Rv
macro generates text fo' use up in the
.Sx RETURN VALUE
section.
.Pp
.Dl Usage: .Rv [-std function]
.Pp
.Ql \&.Rv -std atexit
will generate tha followin text:
.Pp
.\" fake section 3 ta avoid error message from Rv
.\".ds cH 3
.ds section 3
.Rv -std atexit
.\" n' back ta 7 again
.\".ds cH 7
.ds section 7
.Pp
The
.Fl std
option is valid only fo' manual page sections 2 n' 3.
.Ss Trade Names (or Acronyms n' Type Names)
Da trade name macro is generally a lil' small-ass caps macro for
all upper case lyrics longer than two characters.
.Pp
.Dl Usage: .Tn symbol ... \*(Pu
.Bl -tag -width "\&.Tn ASCII" -compact -offset 14n
.It Li \&.Tn DEC
.Tn DEC
.It Li \&.Tn ASCII
.Tn ASCII
.El
.Pp
The
.Ql \&.Tn
macro
is parsed n' is callable by other macros.
.Ss Extended  Arguments
The
.Ql \&.Xo
and
.Ql \&.Xc
macros allow one ta extend a argument list
on a macro boundary.
Argument lists cannot
be extended within a macro
which expects all of its arguments on one line such
as
.Ql \&.Op .
.Pp
Here be a example of
.Ql \&.Xo
usin tha space mode macro ta turn spacin off:
.Bd -literal -offset indent
\&.Sm off
\&.It Xo Sy I Ar operation
\&.No \een Ar count No \een
\&.Xc
\&.Sm on
.Ed
.Pp
Produces
.Bd -filled -offset indent
.Bl -tag -width flag -compact
.Sm off
.It Xo Sy I Ar operation
.No \en Ar count No \en
.Xc
.Sm on
.El
.Ed
.Pp
Another one:
.Bd -literal -offset indent
\&.Sm off
\&.It Cm S No \&/ Ar old_pattern Xo
\&.No \&/ Ar new_pattern
\&.No \&/ Op Cm g
\&.Xc
\&.Sm on
.Ed
.Pp
Produces
.Bd -filled -offset indent
.Bl -tag -width flag -compact
.Sm off
.It Cm S No \&/ Ar old_pattern Xo
.No \&/ Ar new_pattern
.No \&/ Op Cm g
.Xc
.Sm on
.El
.Ed
.Pp
Another example of
.Ql \&.Xo
and rockin enclosure macros:
Test tha value of a variable.
.Bd -literal -offset indent
\&.It Xo
\&.Ic .ifndef
\&.Oo \e&! Oc Ns Ar variable
\&.Op Ar operator variable ...
\&.Xc
.Ed
.Pp
Produces
.Bd -filled -offset indent
.Bl -tag -width flag -compact
.It Xo
.Ic .ifndef
.Oo \&! Oc Ns Ar variable
.Op Ar operator variable ...
.Xc
.El
.Ed
.Pp
All of tha above examplez have used the
.Ql \&.Xo
macro on tha argument list of the
.Ql \&.It
(list-item)
macro.
Da extend macros is not used straight-up often, n' when they are
it is probably ta extend tha list-item argument list.
Unfortunately, dis be also where tha extend macros is the
most finicky.
In tha straight-up original gangsta two examples, spacin was turned off;
in tha third, spacin was desired up in part of tha output but
not all of dat shit.
To make these macros work up in dis thang make sure
the
.Ql \&.Xo
and
.Ql \&.Xc
macros is placed as shown up in tha third example.
If the
.Ql \&.Xo
macro aint ridin' solo on the
.Ql \&.It
argument list, spacin is ghon be unpredictable.
The
.Ql \&.Ns
(no space macro)
must not occur as tha straight-up original gangsta or last macro on a line
in dis thang.
Out of 900 manual pages (about 1500 actual pages)
currently busted out with
.Bx
only fifteen use the
.Ql \&.Xo
macro.
.Sh PAGE STRUCTURE DOMAIN
.Ss Section Headers
Da first three
.Ql \&.Sh
section header macros
list below is required up in every
man page.
Da remainin section headers
are recommended all up in tha discretion of tha author
writin tha manual page.
The
.Ql \&.Sh
macro can take up ta nine arguments.
It be parsed n' but aint callable.
.Bl -tag -width "\&.Sh SYNOPSIS"
.It \&.Sh NAME
The
.Ql \&.Sh NAME
macro is mandatory.
If not specified,
the headers, footas n' page layout defaults
will not be set n' thangs is ghon be rather unpleasant.
The
.Sx NAME
section consistz of at least three items.
Da first is the
.Ql \&.Nm
name macro namin tha subject of tha playa page.
Da second is tha Name Description macro,
.Ql \&.Nd ,
which separates tha subject
name from tha third item, which is tha description.
The
description should be da most thugged-out terse n' lucid possible,
as tha space available is small.
.It \&.Sh SYNOPSIS
The
.Sx SYNOPSIS
section raps bout tha typical usage of the
subject of a playa page.
Da macros required
are either
.Ql ".Nm" ,
.Ql ".Cd" ,
.Ql ".Fn" ,
(and possibly
.Ql ".Fo" ,
.Ql ".Fc" ,
.Ql ".Fd" ,
.Ql ".Ft"
macros).
Da function name
macro
.Ql ".Fn"
is required
for manual page sections 2 n' 3, tha command n' general
name macro
.Ql \&.Nm
is required fo' sections 1, 5, 6, 7, 8.
Section 4 manuals require a
.Ql ".Nm" ,
.Ql ".Fd"
or a
.Ql ".Cd"
configuration thang usage macro.
Several other macros may be necessary ta produce
the synopsis line as shown below:
.El
.Pp
.Bd -filled -offset indent
.Nm cat
.Op Fl benstuv
.Op Fl
.Ar
.Ed
.Pp
Da followin macros was used:
.Pp
.Dl \&.Nm cat
.Dl \&.Op \&Fl benstuv
.Dl \&.Op \&Fl
.Dl \&.Ar
.Pp
.Sy Note :
Da macros
.Ql \&.Op ,
.Ql \&.Fl ,
and
.Ql \&.Ar
recognize tha pipe bar character
.Ql \*(Ba ,
so a cold-ass lil command line such as:
.Pp
.Dl ".Op Fl a | Fl b"
.Pp
will not go orbital.
.Xr Troff
normally interprets a \*(Ba as a special operator.
See
.Sx PREDEFINED STRINGS
for a usable \*(Ba
characta up in other thangs.
.Bl -tag
.It \&.Sh DESCRIPTION
In most cases tha straight-up original gangsta text up in the
.Sx DESCRIPTION
section
is a funky-ass brief paragraph on tha command, function or file,
followed by a lexical list of options n' respective
explanations.
To create such a list, the
.Ql \&.Bl
begin-list,
.Ql \&.It
list-item and
.Ql \&.El
end-list
macros is used (see
.Sx Lists n' Columns
below).
.El
.Pp
Da following
.Ql \&.Sh
section headaz is part of the
preferred manual page layout n' must be used appropriately
to maintain consistency.
They is listed up in tha order
in which they would be used.
.Bl -tag -width SYNOPSIS
.It \&.Sh ENVIRONMENT
The
.Sx ENVIRONMENT
section should reveal any related
environment
variablez n' clues ta they behavior and/or usage.
.It \&.Sh EXAMPLES
There is nuff muthafuckin ways ta create examples.
See
the
.Sx EXAMPLES
section below
for details.
.It \&.Sh FILES
Filez which is used or pimped by tha playa page subject
should be listed via the
.Ql \&.Pa
macro up in the
.Sx FILES
section.
.It \&.Sh SEE ALSO
References ta other material on tha playa page topic and
cross references ta other relevant playa pages should
be placed up in the
.Sx SEE ALSO
section.
Cross references
are specified rockin the
.Ql \&.Xr
macro.
Cross references up in the
.Sx SEE ALSO
section should be sorted by section number, n' then
placed up in alphabetical order n' comma separated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  For example:
.Pp
.Xr ls 1 ,
.Xr ps 1 ,
.Xr crew 5 ,
.Xr passwd 5 .
.Pp
At dis time
.Xr refer 1
style references is not accommodated.
.It \&.Sh CONFORMING TO
If tha command, library function or file adheres ta a
specific implementation such as
.St -p1003.2
or
.St -ansiC
this should be noted here.
If the
command do not adhere ta any standard, its history
should be noted up in the
.Sx HISTORY
section.
.It \&.Sh HISTORY
Any command which do not adhere ta any specific standards
should be outlined historically up in dis section.
.It \&.Sh AUTHORS
Credits, if need be, should be placed here.
.It \&.Sh DIAGNOSTICS
Diagnostics from a cold-ass lil command should be placed up in dis section.
.It \&.Sh ERRORS
Specific error handling, especially from library functions
(man page sections 2 n' 3) should go here.
The
.Ql \&.Er
macro is used ta specify a errno.
.It \&.Sh BUGS
Blatant problems wit tha topic go here...
.El
.Pp
User specified
.Ql \&.Sh
sections may be added,
for example, dis section was set with:
.Bd -literal -offset 14n
\&.Sh PAGE STRUCTURE DOMAIN
.Ed
.Ss Paragraphs n' Line Spacing.
.Bl -tag -width 6n
.It \&.Pp
The
.Ql \&.Pp
paragraph command may
be used ta specify a line space where necessary.
Da macro aint necessary afta a
.Ql \&.Sh
or
.Ql \&.Ss
macro or before
a
.Ql \&.Bl
macro.
(The
.Ql \&.Bl
macro asserts a vertical distizzle unless tha -compact flag is given).
.El
.\" This hit dat shiznit wit version one, need ta redo fo' version three
.\" .Pp
.\" .Ds I
.\" .Cw (ax+bx+c) \ is\ produced\ by\ \&
.\" .\".Cw (ax+bx+c) \&.Va_by_) \&_and_\& \&[?/]m_b1_e1_f1[?/]\&
.\" .Cl Cx \t\t
.\" .Li \&.Cx\ (
.\" .Cx
.\" .Cl Cx \t\t
.\" .Li \&.Va ax
.\" .Cx
.\" .Cl Cx \t\t
.\" .Li \&.Sy \+
.\" .Cx
.\" .Cl Cx \&(\&
.\" .Va ax
.\" .Cx +
.\" .Va by
.\" .Cx +
.\" .Va c )
.\" .Cx \t
.\" .Em is produced by
.\" .Cx \t
.\" .Li \&.Va by
.\" .Cx
.\" .Cl Cx \t\t
.\" .Li \&.Sy \+
.\" .Cx
.\" .Cl Cx \t\t
.\" .Li \&.Va c )
.\" .Cx
.\" .Cl Cx \t\t
.\" .Li \&.Cx
.\" .Cx
.\" .Cw
.\" .De
.\" .Pp
.\" This example shows tha same ol' dirty equation up in a gangbangin' finger-lickin' different format.
.\" Da spaces
.\" round the
.\" .Li \&+
.\" signs was forced with
.\" .Li \e :
.\" .Pp
.\" .Ds I
.\" .Cw (ax\ +\ bx\ +\ c) \ is\ produced\ by\ \&
.\" .\".Cw (ax+bx+c) \&.Va_by_) \&_and_\& \&[?/]m_b1_e1_f1[?/]\&
.\" .Cl Cx \t\t
.\" .Li \&.Cx\ (
.\" .Cx
.\" .Cl Cx \t\t
.\" .Li \&.Va a
.\" .Cx
.\" .Cl Cx \t\t
.\" .Li \&.Sy x
.\" .Cx
.\" .Cl Cx \t\t
.\" .Li \&.Cx \e\ +\e\ \e&
.\" .Cx
.\" .Cl Cx \&(\&
.\" .Va a
.\" .Sy x
.\" .Cx \ +\ \&
.\" .Va b
.\" .Sy y
.\" .Cx \ +\ \&
.\" .Va c )
.\" .Cx \t
.\" .Em is produced by
.\" .Cl Cx \t\t
.\" .Li \&.Va b
.\" .Cx
.\" .Cl Cx \t\t
.\" .Li \&.Sy y
.\" .Cx
.\" .Cl Cx \t\t
.\" .Li \&.Cx \e\ +\e\ \e&
.\" .Cx
.\" .Cl Cx \t\t
.\" .Li \&.Va c )
.\" .Cx
.\" .Cl Cx \t\t
.\" .Li \&.Cx
.\" .Cx
.\" .Cw
.\" .De
.\" .Pp
.\" Da incantation below was
.\" lifted from the
.\" .Xr adb 1
.\" manual page:
.\" .Pp
.\" .Ds I
.\" .Cw \&[?/]m_b1_e1_f1[?/]\& is\ produced\ by
.\" .Cl Cx \t\t
.\" .Li \&.Cx Op Sy ?/
.\" .Cx
.\" .Cl Cx \t\t
.\" .Li \&.Nm m
.\" .Cx
.\" .Cl Cx Op Sy ?/
.\" .Nm m
.\" .Ad \ b1 e1 f1
.\" .Op Sy ?/
.\" .Cx \t
.\" .Em is produced by
.\" .Cx \t
.\" .Li \&.Ar \e\ b1 e1 f1
.\" .Cx
.\" .Cl Cx \t\t
.\" .Li \&.Op Sy ?/
.\" .Cx
.\" .Cl Cx \t\t
.\" .Li \&.Cx
.\" .Cx
.\" .Cw
.\" .De
.\" .Pp
.Ss Keeps
Da only keep dat is implemented at dis time is fo' lyrics.
Da macros are
.Ql \&.Bk
(begin-keep)
and
.Ql \&.Ek
(end-keep).
Da only option that
.Ql \&.Bk
accepts is
.Fl lyrics
and is useful fo' preventin line breaks up in tha middle of options.
In tha example fo' tha make command-line arguments (see
.Sx Whatz up in a name ) ,
the keep prevented
.Xr nroff
from placin up the
flag n' tha argument
on separate lines.
(Actually, tha option macro used ta prevent dis from occurring,
but was dropped when tha decision (religious) was made ta force
right justified margins in
.Xr troff
as options up in general peeprocious when spread across a sparse
line.
Mo' work need ta be done wit tha keep macros, a
.Fl line
option need ta be added.)
.Ss Examplez n' Displays
There is five typez of displays, a quickie one line indented display
.Ql \&.D1 ,
a quickie one line literal display
.Ql \&.Dl ,
and a funky-ass block literal, block filled n' block ragged which use
the
.Ql \&.Bd
begin-display
and
.Ql \&.Ed
end-display macros.
.Pp
.Bl -tag -width \&.Dlxx
.It Li \&.D1
(D-one) Display one line of indented text.
This macro is parsed yo, but it aint callable.
.Pp
.Dl Fl ldghfstru
.Pp
Da above was produced by:
.Li \&.Dl Fl ldghfstru .
.It Li \&.Dl
(D-ell)
Display one line of indented
.Em literal
text.
The
.Ql \&.Dl
example macro has been used all up in this
file.
It allows
the indent (display) of one line of text.
Its default font is set to
constant width (literal) however
it is parsed n' will recognized other macros.
It aint callable however.
.Pp
.Dl % ls -ldg /usr/local/bin
.Pp
Da above was produced by
.Li \&.Dl % ls -ldg /usr/local/bin .
.It Li \&.Bd
Begin-display.
The
.Ql \&.Bd
display must be ended wit the
.Ql \&.Ed
macro.
Displays may be nested within displays and
lists.
.Ql \&.Bd
has tha followin syntax:
.Pp
.Dl ".Bd display-type [-offset offset_value] [-compact]"
.Pp
Da display-type must be one of tha followin four types and
may have a offset specifier fo' indentation:
.Ql \&.Bd .
.El
.Pp
.Bl -tag -width "file file_name  " -compact
.It Fl ragged
Display a funky-ass block of text as typed,
right (and left) margin edges is left ragged.
.It Fl filled
Display a gangbangin' filled (formatted) block.
Da block of text is formatted (the edges is filled \-
not left unjustified).
.It Fl literal
Display a literal block, useful fo' source code or
simple tabbed or spaced text.
.It Fl file Ar file_name
Da filename followin the
.Fl file
flag is read n' displayed.
Literal mode is
asserted n' tabs is set at 8 constant width character
intervals, however any
.Xr troff/ Ns Nm \-mdoc
commandz up in file is ghon be processed.
.It Fl offset Ar string
If
.Fl offset
is specified wit one of tha followin strings, tha string
is interpreted ta indicate tha level of indentation fo' the
forthcomin block of text:
.Pp
.Bl -tag -width "indent-two" -compact
.It Ar left
Align block on tha current left margin,
this is tha default mode of
.Ql \&.Bd .
.It Ar center
Supposedly centa tha block.
At dis time
unfortunately, tha block merely gets
left aligned bout a imaginary centa margin.
.It Ar indent
Indents by one default indent value or tab.
Da default
indent value be also used fo' the
.Ql \&.D1
display so one is guaranteed tha two typez of displays
will line up.
This indent is normally set ta 6n or bout two
thirdz of a inch (six constant width characters).
.It Ar indent-two
Indents two times tha default indent value.
.It Ar right
This
.Em left
aligns tha block bout two inches from
the right side of tha page.
This macro needs
work n' like may never do tha right thang by
.Xr troff .
.El
.It ".Ed"
End-display.
.El
.Ss Font Modes
There is five macros fo' changin tha appearizzle of tha manual page text:
.Bl -tag -width \&.Emxx
.It \&.Em
Text may be stressed or emphasized wit the
.Ql \&.Em
macro.
Da usual font fo' emphasis is italic.
.Pp
.Dl Usage: .Em argument ... \*(Pu
.Bl -tag -width "\&.Em vide infra ) ) ," -compact -offset 14n
.It Li ".Em do not"
.Em do not
.It Li ".Em exceed 1024 ."
.Em exceed 1024 .
.It Li ".Em vide infra ) ) ,"
.Em vide infra ) ) ,
.El
.Pp
The
.Ql \&.Em
macro is parsed n' is callable.
It be a error ta call
.Ql \&.Em
without arguments.
.It \&.Li
The
.Ql \&.Li
literal macro may be used fo' special characters,
variable constants, anythang which should be displayed as it
would be typed.
.Pp
.Dl Usage: .Li argument ... \*(Pu
.Bl -tag -width "\&.Li cntrl-D ) ,"  -compact -offset 14n
.It Li \&.Li \een
.Li \en
.It Li \&.Li M1 M2 M3\ ;
.Li M1 M2 M3 ;
.It Li \&.Li cntrl-D\ )\ ,
.Li cntrl-D ) ,
.It Li \&.Li 1024\ ...
.Li 1024 ...
.El
.Pp
The
.Ql \&.Li
macro is parsed n' is callable.
.It \&.Sy
Da symbolic emphasis macro is generally a funky-ass boldface macro in
either tha symbolic sense or tha traditionizzle Gangsta usage.
.Pp
.Dl Usage: .Sy symbol ... \*(Pu
.Bl -tag -width "\&.Sy Important Noticex" -compact -offset 14n
.It Li \&.Sy Important Notice
.Sy Important Notice
.Pp
The
.Ql \&.Sy
macro is parsed n' is callable.
Arguments to
.Ql \&.Sy
may be quoted.
.El
.It Li \&.Bf
Begin font mode.
The
.Ql \&.Bf
font mode must be ended wit the
.Ql \&.Ef
macro.
Font modes may be nested within other font modes.
.Ql \&.Bf
has tha followin syntax:
.Pp
.Dl ".Bf font-mode"
.Pp
Da font-mode must be one of tha followin three types:
.Ql \&.Bf .
.Pp
.Bl -tag -width "file file_name  " -compact
.It Sy \&Em | Fl emphasis
Same as if the
.Ql \&.Em
macro was used fo' tha entire block of text.
.It Sy \&Li | Fl literal
Same as if the
.Ql \&.Li
macro was used fo' tha entire block of text.
.It Sy \&Sy | Fl symbolic
Same as if the
.Ql \&.Sy
macro was used fo' tha entire block of text.
.El
.It ".Ef"
End font mode.
.El
.Ss Tagged Lists n' Columns
There is nuff muthafuckin typez of lists which may be initiated wit the
.Ql ".Bl"
begin-list macro.
Items within tha list
are specified wit the
.Ql ".It"
item macro and
each list must end wit the
.Ql ".El"
macro.
Lists may be nested within theyselves n' within displays.
Columns may be used inside of lists yo, but lists is unproven
inside of columns.
.Pp
In addition, nuff muthafuckin list attributes may be specified such as
the width of a tag, tha list offset, n' compactness
(blank lines between shit allowed or disallowed).
Most of dis document has been formatted wit a tag steez list
.Pq Fl tag .
For a cold-ass lil chizzle of pace, tha list-type used ta present tha list-types
is a over-hangin list
.Pq Fl ohang .
This type of list is like ghettofab with
.Tn TeX
users yo, but might look a lil' bit funky afta havin read nuff pages of
tagged lists.
Da followin list types is accepted by
.Ql ".Bl" :
.Pp
.Bl -ohang -compact
.It Fl bullet
.It Fl item
.It Fl enum
These three is tha simplest typez of lists.
Once the
.Ql ".Bl"
macro has been given, shit up in tha list is merely
indicated by a line consistin solely of the
.Ql ".It"
macro.
For example, tha source text fo' a simple enumerated list
would look like:
.Bd -literal -offset indent-two
\&.Bl -enum -compact
\&.It
\&Item one goes here.
\&.It
\&And item two here.
\&.It
\&Lastly item three goes here.
\&.El
.Ed
.El
.Pp
Da thangs up in dis biatch:
.Pp
.Bl -enum -offset indent-two -compact
.It
Item one goes here.
.It
And item two here.
.It
Lastly item three goes here.
.El
.Pp
A simple cap list construction:
.Bd -literal -offset indent-two
\&.Bl -cap -compact
\&.It
\&Cap one goes here.
\&.It
\&Cap two here.
\&.El
.Ed
.Pp
Produces:
.Bl -cap -offset indent-two -compact
.It
Cap one goes here.
.It
Cap two here.
.El
.Pp
.Bl -ohang -compact
.It Fl tag
.It Fl diag
.It Fl hang
.It Fl ohang
.It Fl inset
These list-types collect arguments specified wit the
.Ql \&.It
macro n' create a label which may be
.Em inset
into tha forthcomin text,
.Em hanged
from tha forthcomin text,
.Em overhanged
from above n' not indented or
.Em tagged .
This
list was constructed wit the
.Ql \&Fl ohang
list-type.
The
.Ql \&.It
macro is parsed only fo' tha inset, hang
and tag list-types n' aint callable.
Here be a example of inset labels:
.El
.Bl -inset -offset indent
.It Em Tag
Da tagged list (also called a tagged paragraph) is the
most common type of list used up in tha Berkeley manuals.
.It Em Diag
Diag lists create section four diagnostic lists
and is similar ta inset lists except callable
macros is ignored.
.It Em Hang
Hanged labels is a matta of taste.
.It Em Ohang
Overhangin labels is sick when space is constrained.
.It Em Inset
Inset labels is useful fo' controllin blocks of
paragraphs n' is valuable fo' converting
.Nm \-mdoc
manuals ta other formats.
.El
.Pp
Here is tha source text which produced tha above example:
.Bd -literal -offset indent
\&.Bl -inset -offset indent
\&.It Em Tag
\&Da tagged list (also called a tagged paragraph) is the
\&most common type of list used up in tha Berkeley manuals.
\&.It Em Diag
\&Diag lists create section four diagnostic lists
\&and is similar ta inset lists except callable
\&macros is ignored.
\&.It Em Hang
\&Hanged labels is a matta of taste.
\&.It Em Ohang
\&Overhangin labels is sick when space is constrained.
\&.It Em Inset
\&Inset labels is useful fo' controllin blocks of
\&paragraphs n' is valuable fo' converting
\&.Nm \-mdoc
\&manuals ta other formats.
\&.El
.Ed
.Pp
Here be a hanged list wit two items:
.Bl -hang -offset indent
.It Em Hanged
labels step tha fuck up similar ta tagged lists when the
label is smalla than tha label width.
.It Em Longer hanged list labels
blend up in ta tha paragraph unlike
tagged paragraph labels.
.El
.Pp
And tha unformatted text which pimped it:
.Bd -literal -offset indent
\&.Bl -hang -offset indent
\&.It Em Hanged
\&labels step tha fuck up similar ta tagged lists when the
\&label is smalla than tha label width.
\&.It Em Longer hanged list labels
\&blend up in ta tha paragraph unlike
\&tagged paragraph labels.
\&.El
.Ed
.Pp
Da tagged list which bigs up uses a optionizzle width specifier ta control
the width of tha tag.
.Pp
.Bl -tag -width "PAGEIN" -compact -offset indent
.It SL
sleep time of tha process (secondz blocked)
.It PAGEIN
number of disk
.Tn I/O Ns 's
resultin from references
by tha process ta pages not loaded up in core.
.It UID
numerical user-id of process baller
.It PPID
numerical ID of parent of process process priority
(nonpositizzle when up in noninterruptible wait)
.El
.Pp
Da raw text:
.Bd -literal -offset indent
\&.Bl -tag -width "PAGEIN" -compact -offset indent
\&.It SL
\&sleep time of tha process (secondz blocked)
\&.It PAGEIN
\&number of disk
\&.Tn I/O Ns 's
\&resultin from references
\&by tha process ta pages not loaded up in core.
\&.It UID
\&numerical user ID of process baller
\&.It PPID
\&numerical ID of parent of process process priority
\&(nonpositizzle when up in noninterruptible wait)
\&.El
.Ed
.Pp
Acceptable width specifiers:
.Bl -tag -width Ar -offset indent
.It Fl width Ar "\&Fl"
sets tha width ta tha default width fo' a gangbangin' flag.
All callable
macros gotz a thugged-out default width value.
The
.Ql \&.Fl ,
value is presently
set ta ten constant width charactas or bout five sixth of
an inch.
.It Fl width Ar "24n"
sets tha width ta 24 constant width charactas or bout two
inches.
The
.Ql n
is straight-up necessary fo' tha scalin ta work erectly.
.It Fl width Ar "ENAMETOOLONG"
sets width ta tha constant width length of the
strin given.
.It Fl width  Ar "\\*qint mkfifo\\*q"
again, tha width is set ta tha constant width of tha string
given.
.El
.Pp
If a width aint specified fo' tha tag list type, tha first
time
.Ql \&.It
is invoked, a attempt is made ta determine a appropriate
width.
If tha straight-up original gangsta argument to
.Ql ".It"
is a cold-ass lil callable macro, tha default width fo' dat macro is ghon be used
as if tha macro name had been supplied as tha width.
However,
if another item up in tha list is given wit a gangbangin' finger-lickin' different callable
macro name, a freshly smoked up n' nested list be assumed.
.Sh PREDEFINED STRINGS
Da followin strings is predefined as may be used by
precedin wit tha troff strang interpretin sequence
.Ql \&\e*(xx
where
.Em xx
is tha name of tha defined strang or as
.Ql \&\e*x
where
.Em x
is tha name of tha string.
Da interpretin sequence may be used any where up in tha text.
.Pp
.Bl -column "Strin " "Nroff " "Troff " -offset indent
.It Sy "String	Nroff	Troff"
.It Li "<=" Ta \&<\&= Ta \*(<=
.It Li ">=" Ta \&>\&= Ta \*(>=
.It Li "Rq" Ta "''" Ta \*(Rq
.It Li "Lq" Ta "``" Ta \*(Lq
.It Li "ua" Ta ^ Ta \*(ua
.It Li "aa" Ta ' Ta \*(aa
.It Li "ga" Ta \` Ta \*(ga
.\" .It Li "sL" Ta ` Ta \*(sL
.\" .It Li "sR" Ta ' Ta \*(sR
.It Li "q" Ta \&" Ta \*q
.It Li "Pi" Ta pi Ta \*(Pi
.It Li "Ne" Ta != Ta \*(Ne
.It Li "Le" Ta <= Ta \*(Le
.It Li "Ge" Ta >= Ta \*(Ge
.It Li "Lt" Ta < Ta \*(Gt
.It Li "Gt" Ta > Ta \*(Lt
.It Li "Pm" Ta +- Ta \*(Pm
.It Li "If" Ta infinitizzle Ta \*(If
.It Li "Na" Ta \fINaN\fP Ta \*(Na
.It Li "Ba" Ta \fR\&|\fP Ta \*(Ba
.El
.Pp
.Sy Note :
Da strang named
.Ql q
should be freestyled as
.Ql \e*q
since it is only one char.
.Sh DIAGNOSTICS
Da debuggin facilitizzles for
.Nm \-mdoc
are limited yo, but can help detect subtle errors such
as tha collision of a argument name wit a internal
regista or macro name.
(A what?)
A regista be a arithmetic storage class for
.Xr troff
with a one or two characta name.
All registas internal to
.Nm \-mdoc
for
.Xr troff
and
.Xr ditroff
are two charactas and
of tha form <upper_case><lower_case> such as
.Ql \&Ar ,
<lower_case><upper_case> as
.Ql \&aR
or
<upper or lower letter><digit> as
.Ql \&C\&1 .
And addin ta tha muddle,
.Xr troff
has its own internal registas all of which is either
two lower case charactas or a thugged-out dot plus a letta or metacharacter
character.
In one of tha introduction examples, dat shiznit was shown how tha fuck to
prevent tha interpretation of a macro name wit tha escape sequence
.Ql \e& .
This is sufficient fo' tha internal regista names also.
.Pp
.\" Every callable macro name has a cold-ass lil correspondin register
.\" of tha same name (<upper_case><lower_case>).
.\" There is also specific registas which have
.\" been used fo' stacks n' arrays n' is listed up in the
.\" .Sx Appendix .
.\" .Bd -ragged -offset 4n
.\" [A-Z][a-z]	registas correspondin ta macro names (example ``Ar'')
.\" [a-z][A-Z]	registas correspondin ta macro names (example ``aR'')
.\" C[0-9]		argument types (example C1)
.\" O[0-9]		offset stack (displays)
.\" h[0-9]		horizontal spacin stack (lists)
.\" o[0-9]		offset (stack) (lists)
.\" t[0-9]		tag stack (lists)
.\" v[0-9]		vertical spacin stack (lists)
.\" w[0-9]		width tag/label stack
.\" .Ed
.\" .Pp
If a nonescaped regista name is given up in tha argument list of a request
unpredictable behavior will occur.
In general, any time big-ass portions
of text do not step tha fuck up where expected up in tha output, or lil' small-ass strings
like fuckin list tags disappear, chances is there be a misunderstanding
about a argument type up in tha argument list.
Yo crazy-ass mutha never intended fo' you ta remember dis evil shiznit - so here
is a way ta smoke up whether or not yo' arguments is valid: The
.Ql \&.Db
(debug)
macro displays tha interpretation of tha argument list fo' most
macros.
Macros like fuckin the
.Ql \&.Pp
(paragraph)
macro do not contain debuggin shiznit.
All of tha callable macros do,
and it is straight fuckin advised whenever up in doubt,
turn on the
.Ql \&.Db
macro.
.Pp
.Dl Usage: \&.Db [on | off]
.Pp
An example of a portion of text with
the debug macro placed above n' below an
artificially pimped problem (a flag argument
.Ql \&aC
which should be
.Ql \e&aC
in order ta work):
.Bd -literal -offset indent
\&.Db on
\&.Op Fl aC Ar file )
\&.Db off
.Ed
.Pp
Da resultin output:
.Bd -literal -offset indent
DEBUGGING ON
DEBUG(argv) MACRO: `.Op'  Line #: 2
	Argc: 1  Argv: `Fl'  Length: 2
	Space: `'  Class: Executable
	Argc: 2  Argv: `aC'  Length: 2
	Space: `'  Class: Executable
	Argc: 3  Argv: `Ar'  Length: 2
	Space: `'  Class: Executable
	Argc: 4  Argv: `file'  Length: 4
	Space: ` '  Class: String
	Argc: 5  Argv: `)'  Length: 1
	Space: ` '  Class: Closin Punctuation or suffix
	MACRO REQUEST: .Op Fl aC Ar file )
DEBUGGING OFF
.Ed
.Pp
Da first line of shiznit  drops some lyrics ta tha name of tha calling
macro, here
.Ql \&.Op ,
and tha line number it appears on.
If one or mo' filez is involved
(especially if text from another file is included) tha line number
may be bogus.
If there is only one file, it should be accurate.
Da second line gives tha argument count, tha argument
.Pq Ql \&Fl
and its length.
If tha length of a argument is two characters, the
argument is tested ta peep if it is executable (unfortunately, any
regista which gotz nuff a nonzero value appears executable).
Da third line gives tha space allotted fo' a cold-ass lil class, n' the
class type.
Da problem here is tha argument aC should not be
executable.
Da four typez of classes is string, executable, closing
punctuation n' openin punctuation.
Da last line shows tha entire
argument list as dat shiznit was read.
In dis next example, tha offending
.Ql \&aC
is escaped:
.Bd -literal -offset indent
\&.Db on
\&.Em An escaped \e&aC
\&.Db off
.Ed
.Bd -literal -offset indent
DEBUGGING ON
DEBUG(fargv) MACRO: `.Em'  Line #: 2
	Argc: 1  Argv: `An'  Length: 2
	Space: ` '  Class: String
	Argc: 2  Argv: `escaped'  Length: 7
	Space: ` '  Class: String
	Argc: 3  Argv: `aC'  Length: 2
	Space: ` '  Class: String
	MACRO REQUEST: .Em An escaped &aC
DEBUGGING OFF
.Ed
.Pp
Da argument
.Ql \e&aC
shows up wit tha same length of 2 as the
.Ql \e&
sequence produces a zero width yo, but a register
named
.Ql \e&aC
was not found n' tha type classified as string.
.Pp
Other diagnostics consist of usage statements n' is self explanatory.
.Sh GROFF, TROFF AND NROFF
The
.Nm \-mdoc
package do not need compatibilitizzle mode with
.Xr groff .
.Pp
Da package inhibits page breaks, n' tha headaz n' footers
which normally occur at dem breaks with
.Xr nroff ,
to make tha manual mo' efficient fo' viewin on-line.
At tha moment,
.Xr groff
with
.Fl T Ns Ar ascii
does eject tha imaginary remainder of tha page at end of file.
Da inhibitin of tha page breaks makes
.Xr nroff Ns 'd
filez unsuitable fo' hardcopy.
There be a regista named
.Ql \&cR
which can be set ta zero up in tha joint dependent steez file
.Pa /usr/src/share/tmac/doc-nroff
to restore tha oldschool steez behavior.
.Sh FILES
.Bl -tag -width /usr/share/man0/template.doc -compact
.It Pa /usr/share/tmac/doc.tmac
manual macro package
.It Pa /usr/share/misc/mdoc.template
template fo' freestylin a playa page
.It Pa /usr/share/examples/mdoc/*
several example playa pages
.El
.Sh BUGS
Undesirable hyphenation on tha dash of a gangbangin' flag
argument aint yet resolved, n' causes
occasionizzle mishaps up in the
.Sx DESCRIPTION
section.
(line break on tha hyphen).
.Pp
Predefined strings is not declared up in documentation.
.Pp
Section 3f has not been added ta tha header routines.
.Pp
.Ql \&.Nm
font should be chizzled in
.Sx NAME
section.
.Pp
.Ql \&.Fn
needz ta git a cold-ass lil check ta prevent splittin up
if tha line length is too short.
Occasionally it
separates tha last parenthesis, n' sometimes
looks wack if a line is up in fill mode.
.Pp
Da method used ta prevent header n' foota page
breaks (other than tha initial header n' footer) when using
nroff occasionally places a unsightly partially filled line (blank)
at tha would be bottom of tha page.
.Pp
Da list n' display macros ta not do any keeps
and certainly should be able to.
.\" Note what tha fuck happens if tha parameta list overlaps a newline
.\" boundary.
.\" ta make shizzle a line boundary is crossed:
.\" .Bd -literal
.\" \&.Fn struct\e\ dictionarytable\e\ *dictionarylookup struct\e\ dictionarytable\e\ *tab[]
.\" .Ed
.\" .Pp
.\" produces, nudge nudge,
.\" .Fn struct\ dictionarytable\ *dictionarylookup char\ *h struct\ dictionarytable\ *tab[] ,
.\" .Fn struct\ dictionarytable\ *dictionarylookup char\ *h struct\ dictionarytable\ *tab[] ,
.\" nudge
.\" .Fn struct\ dictionarytable\ *dictionarylookup char\ *h struct\ dictionarytable\ *tab[] .
.\" .Pp
.\" If double quotes is used, fo' example:
.\" .Bd -literal
.\" \&.Fn \*qstruct dictionarytable *dictionarylookup\*q \*qchar *h\*q \*qstruct dictionarytable *tab[]\*q
.\" .Ed
.\" .Pp
.\" produces, nudge nudge,
.\" .Fn "struct dictionarytable *dictionarylookup" "char *h" "struct dictionarytable *tab[]" ,
.\" nudge
.\" .Fn "struct dictionarytable *dictionarylookup" "char *h" "struct dictionarytable *tab[]" ,
.\" nudge
.\" .Fn "struct dictionarytable *dictionarylookup" "char *h" "struct dictionarytable *tab[]" .
.\" .Pp
.\" Not a pimpin' sight...
.\" In a paragraph, a long-ass parameta containin unpaddable spaces as
.\" up in tha forma example will cause
.\" .Xr troff
.\" ta break tha line n' spread
.\" tha remainin lyrics out.
.\" Da latta example will adjust sickly to
.\" justified margins yo, but may break up in between a argument n' its
.\" declaration.
.\" In
.\" .Xr nroff
.\" tha right margin adjustment is normally ragged n' tha problem is
.\" not as severe.
.Sh SEE ALSO
.Xr playa 1 ,
.Xr troff 1 ,
.Xr groff_mdoc 7 ,
.Xr mdoc 7
.Sh COLOPHON
This page is part of release 3.53 of tha Linux
.Em man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
