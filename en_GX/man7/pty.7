
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.TH PTY 7 2005-10-10 "Linux" "Linux Programmerz Manual"
.SH NAME
pty \- pseudoterminal intercourses
.SH DESCRIPTION
A pseudoterminal (sometimes abbreviated "pty")
is a pair of virtual characta devices that
provide a funky-ass bidirectionizzle communication channel.
One end of tha channel is called the
.IR masta ;
the other end is called the
.IR slave .
Da slave end of tha pseudoterminal serves up a intercourse
that behaves exactly like a old-ass terminal.
A process dat expects ta be connected ta a terminal,
can open tha slave end of a pseudoterminal and
then be driven by a program dat has opened tha masta end.
Anythang dat is freestyled on tha masta end is provided ta tha process
on tha slave end as though dat shiznit was input typed on a terminal.
For example, freestylin tha interrupt characta (usually control-C)
to tha masta thang would cause a interrupt signal
.RB ( SIGINT )
to be generated fo' tha foreground process group
that is connected ta tha slave.
Conversely, anythang dat is freestyled ta tha slave end of the
pseudoterminal can be read by tha process dat is connected to
the masta end.
Pseudoterminals is used by applications like fuckin network login skillz
.RB ( ssh "(1), " rlogin "(1), " telnet (1)),
terminal emulators,
.BR script (1),
.BR screen (1),
and
.BR expect (1).

Historically, two pseudoterminal APIs have evolved: BSD n' System V.
SUSv1 standardized a pseudoterminal API based on tha System V API,
and dis API should be employed up in all freshly smoked up programs dat use
pseudoterminals.

Linux serves up both BSD-style n' (standardized) System V-style
pseudoterminals.
System V-style terminals is commonly called UNIX 98 pseudoterminals
on Linux systems.
Since kernel 2.6.4, BSD-style pseudoterminals is considered deprecated
(they can be disabled when configurin tha kernel);
UNIX 98 pseudoterminals should be used up in freshly smoked up applications.
.SS UNIX 98 pseudoterminals
An unused UNIX 98 pseudoterminal masta is opened by calling
.BR posix_openpt (3).
(This function opens tha masta clone device,
.IR /dev/ptmx ;
see
.BR pts (4).)
Afta struttin any program-specific initializations,
changin tha ballershizzle n' permissionz of tha slave thang using
.BR grantpt (3),
and unlockin tha slave using
.BR unlockpt (3)),
the correspondin slave thang can be opened by passing
the name returned by
.BR ptsname (3)
in a cold-ass lil call to
.BR open (2).

Da Linux kernel imposes a limit on tha number of available
UNIX 98 pseudoterminals.
In kernels up ta n' includin 2.6.3, dis limit is configured
at kernel compilation time
.RB ( CONFIG_UNIX98_PTYS ),
and tha permitted number of pseudoterminals can be up ta 2048,
with a thugged-out default settin of 256.
Since kernel 2.6.4, tha limit is dynamically adjustable via
.IR /proc/sys/kernel/pty/max ,
and a cold-ass lil correspondin file,
.IR /proc/sys/kernel/pty/nr ,
indicates how tha fuck nuff pseudoterminals is currently up in use.
For further details on these two files, see
.BR proc (5).
.SS BSD pseudoterminals
BSD-style pseudoterminals is provided as precreated pairs, with
namez of tha form
.I /dev/ptyXY
(master) and
.I /dev/ttyXY
(slave),
where X be a letta from tha 16-characta set [p-za-e],
and Y be a letta from tha 16-characta set [0-9a-f].
(Da precise range of lettas up in these two sets varies across UNIX
implementations.)
For example,
.I /dev/ptyp1
and
.I /dev/ttyp1
constitute a BSD pseudoterminal pair.
A process findz a unused pseudoterminal pair by tryin to
.BR open (2)
each pseudoterminal masta until a open succeeds.
Da correspondin pseudoterminal slave (substitute "tty"
for "pty" up in tha name of tha master) can then be opened.
.SH FILES
.I /dev/ptmx
(UNIX 98 masta clone device)
.br
.I /dev/pts/*
(UNIX 98 slave devices)
.br
.I /dev/pty[p-za-e][0-9a-f]
(BSD masta devices)
.br
.I /dev/tty[p-za-e][0-9a-f]
(BSD slave devices)
.SH NOTES
A description of the
.B TIOCPKT
.BR ioctl (2),
which controls packet mode operation, can be found in
.BR tty_ioctl (4).

Da BSD
.BR ioctl (2)
operations
.BR TIOCSTOP ,
.BR TIOCSTART ,
.BR TIOCUCNTL ,
and
.BR TIOCREMOTE
have not been implemented under Linux.
.SH SEE ALSO
.BR select (2),
.BR setsid (2),
.BR forkpty (3),
.BR openpty (3),
.BR termios (3),
.BR pts (4),
.BR tty (4),
.BR tty_ioctl (4)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
