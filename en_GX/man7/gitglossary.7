'\" t
.\"     Title: gitglossary
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 10/25/2014
.\"    Manual: Git Manual
.\"    Source: Git 1.9.3
.\"  Language: Gangsta
.\"
.TH "GITGLOSSARY" "7" "10/25/2014" "Git 1\&.9\&.3" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
gitglossary \- A Git Glossary
.SH "SYNOPSIS"
.sp
*
.SH "DESCRIPTION"
.PP
alternate object database
.RS 4
Via tha alternates mechanism, a
repository
can inherit part of its
object database
from another object database, which is called "alternate"\&.
.RE
.PP
bare repository
.RS 4
A bare repository is normally a appropriately named
directory
with a
\&.git
suffix dat aint gots a locally checked\-out copy of any of tha filez under revision control\&. That is, all of tha Git administratizzle n' control filez dat would normally be present up in tha hidden
\&.git
sub\-directory is directly present up in the
repository\&.git
directory instead, n' no other filez is present n' checked out\&. Usually publisherz of hood repositories make bare repositories available\&.
.RE
.PP
blob object
.RS 4
Untyped
object, e\&.g\&. tha contentz of a gangbangin' file\&.
.RE
.PP
branch
.RS 4
A "branch" be a actizzle line of pimpment\&. Da most recent
commit
on a funky-ass branch is referred ta as tha tip of dat branch\&. Da tip of tha branch is referenced by a funky-ass branch
head, which moves forward as additionizzle pimpment is done on tha branch\& fo' realz. A single Git
repository
can track a arbitrary number of branches yo, but your
workin tree
is associated wit just one of dem (the "current" or "checked out" branch), and
HEAD
points ta dat branch\&.
.RE
.PP
cache
.RS 4
Obsolete for:
index\&.
.RE
.PP
chain
.RS 4
A list of objects, where each
object
in tha list gotz nuff a reference ta its successor (for example, tha successor of a
commit
could be one of its
parents)\&.
.RE
.PP
changeset
.RS 4
BitKeeper/cvsps drop a rhyme fo' "commit"\&. Right back up in yo muthafuckin ass. Since Git do not store chizzlez yo, but states, it straight-up do not make sense ta use tha term "changesets" wit Git\&.
.RE
.PP
checkout
.RS 4
Da action of uppimpin all or part of the
workin tree
with a
tree object
or
blob
from the
object database, n' uppimpin the
index
and
HEAD
if tha whole hustlin tree has been pointed at a new
branch\&.
.RE
.PP
cherry\-picking
.RS 4
In
SCM
jargon, "cherry pick" means ta chizzle a subset of chizzlez outta a seriez of chizzlez (typically commits) n' record dem as a freshly smoked up seriez of chizzlez on top of a gangbangin' finger-lickin' different codebase\&. In Git, dis is performed by tha "git cherry\-pick" command ta extract tha chizzle introduced by a existing
commit
and ta record it based on tha tip of tha current
branch
as a freshly smoked up commit\&.
.RE
.PP
clean
.RS 4
A
workin tree
is clean, if it correspondz ta the
revision
referenced by tha current
head\& fo' realz. Also peep "dirty"\&.
.RE
.PP
commit
.RS 4
As a noun: A single point up in tha Git history; tha entire history of a project is represented as a set of interrelated commits\&. Da word "commit" is often used by Git up in tha same places other revision control systems use tha lyrics "revision" or "version"\& fo' realz. Also used as a gangbangin' finger-lickin' dirty-ass short hand for
commit object\&.
.sp
As a verb: Da action of storin a freshly smoked up snapshot of tha project\(cqs state up in tha Git history, by bustin a freshly smoked up commit representin tha current state of the
index
and advancing
HEAD
to point all up in tha freshly smoked up commit\&.
.RE
.PP
commit object
.RS 4
An
object
which gotz nuff tha shiznit on some particular
revision, such as
parents, committer, lyricist, date n' the
tree object
which correspondz ta tha top
directory
of tha stored revision\&.
.RE
.PP
commit\-ish (also committish)
.RS 4
A
commit object
or an
object
that can be recursively dereferenced ta a cold-ass lil commit object\&. Da followin is all commit\-ishes: a cold-ass lil commit object, a
tag object
that points ta a cold-ass lil commit object, a tag object dat points ta a tag object dat points ta a cold-ass lil commit object, etc\&.
.RE
.PP
core Git
.RS 4
Fundamenstrual data structures n' utilitizzlez of Git\&. Exposes only limited source code pimpment tools\&.
.RE
.PP
DAG
.RS 4
Directed acyclic graph\&. The
commit objects
form a gangbangin' finger-lickin' pimped up acyclic graph, cuz they have muthafathas (directed), n' tha graph of commit objects be acyclic (there is no
chain
which begins n' endz wit tha same
object)\&.
.RE
.PP
danglin object
.RS 4
An
unreachable object
which is not
reachable
even from other unreachable objects; a thugged-out danglin object has no references ta it from any reference or
object
in the
repository\&.
.RE
.PP
detached HEAD
.RS 4
Normally the
HEAD
stores tha name of a
branch, n' commandz dat operate on tha history HEAD represents operate on tha history leadin ta tha tip of tha branch tha HEAD points at\&. But fuck dat shiznit yo, tha word on tha street is dat Git also allows you to
check out
an arbitrary
commit
that isn\(cqt necessarily tha tip of any particular branch\&. Da HEAD up in such a state is called "detached"\&.
.sp
Note dat commandz dat operate on tha history of tha current branch (e\&.g\&.
git commit
to build a freshly smoked up history on top of it) still work while tha HEAD is detached\&. They update tha HEAD ta point all up in tha tip of tha updated history without affectin any branch\&. Commandz dat update or inquire shiznit
\fIabout\fR
the current branch (e\&.g\&.
git branch \-\-set\-upstream\-to
that sets what tha fuck remote\-trackin branch tha current branch integrates with) obviously do not work, as there is no (real) current branch ta ask bout up in dis state\&.
.RE
.PP
directory
.RS 4
Da list you git wit "ls" :\-)
.RE
.PP
dirty
.RS 4
A
workin tree
is holla'd ta be "dirty" if it gotz nuff modifications which aint been
committed
to tha current
branch\&.
.RE
.PP
evil merge
.RS 4
An evil merge be a
merge
that introduces chizzlez dat do not step tha fuck up in any
parent\&.
.RE
.PP
fast\-forward
.RS 4
A fast\-forward be a special type of
merge
where you have a
revision
and yo ass is "merging" another
branch\(aqs chizzlez dat happen ta be a thugged-out descendant of what tha fuck you have\&. In such these cases, you do not cook up a new
mergecommit
but instead just update ta his bangin revision\&. This will happen frequently on a
remote-trackin branch
of a remote
repository\&.
.RE
.PP
fetch
.RS 4
Fetchin a
branch
means ta git tha branch\(cqs
head ref
from a remote
repository, ta smoke up which objects is missin from tha local
object database, n' ta git them, too\&. Right back up in yo muthafuckin ass. See also
\fBgit-fetch\fR(1)\&.
.RE
.PP
file system
.RS 4
Linus Torvaldz originally designed Git ta be a user space file system, i\&.e\&. tha infrastructure ta hold filez n' directories\&. That ensured tha efficiency n' speed of Git\&.
.RE
.PP
Git archive
.RS 4
Synonym for
repository
(for arch people)\&.
.RE
.PP
gitfile
.RS 4
A plain file
\&.git
at tha root of a hustlin tree dat points all up in tha directory dat is tha real repository\&.
.RE
.PP
grafts
.RS 4
Grafts enablez two otherwise different linez of pimpment ta be joined together by recordin fake ancestry shiznit fo' commits\&. This way you can make Git pretend tha set of
parents
a
commit
has is different from what tha fuck was recorded when tha commit was pimped\&. Configured via the
\&.git/info/grafts
file\&.
.RE
.PP
hash
.RS 4
In Git\(cqs context, synonym for
object name\&.
.RE
.PP
head
.RS 4
A
named reference
to the
commit
at tha tip of a
branch\& yo. Headz is stored up in a gangbangin' file in
$GIT_DIR/refs/heads/
directory, except when rockin packed refs\&. (See
\fBgit-pack-refs\fR(1)\&.)
.RE
.PP
HEAD
.RS 4
Da current
branch\&. In mo' detail: Your
workin tree
is normally derived from tha state of tha tree referred ta by HEAD\& yo. HEAD be a reference ta one of the
heads
in yo' repository, except when rockin a
detached HEAD, up in which case it directly references a arbitrary commit\&.
.RE
.PP
head ref
.RS 4
A synonym for
head\&.
.RE
.PP
hook
.RS 4
Durin tha aiiight execution of nuff muthafuckin Git commands, call\-outs is made ta optionizzle scripts dat allow a thugged-out pimper ta add functionalitizzle or checking\&. Typically, tha hooks allow fo' a cold-ass lil command ta be pre\-verified n' potentially aborted, n' allow fo' a post\-notification afta tha operation is done\&. Da hook scripts is found up in the
$GIT_DIR/hooks/
directory, n' is enabled by simply removin the
\&.sample
suffix from tha filename\&. In earlier versionz of Git you had ta make dem executable\&.
.RE
.PP
index
.RS 4
A collection of filez wit stat shiznit, whose contents is stored as objects\&. Da index be a stored version of your
workin tree\&. Truth be holla'd at, it can also contain a second, n' even a third version of a hustlin tree, which is used when
merging\&.
.RE
.PP
index entry
.RS 4
Da shiznit regardin a particular file, stored up in the
index\& fo' realz. An index entry can be unmerged, if a
merge
was started yo, but not yet finished (i\&.e\&. if tha index gotz nuff multiple versionz of dat file)\&.
.RE
.PP
master
.RS 4
Da default pimpment
branch\&. Whenever you create a Git
repository, a funky-ass branch named "master" is pimped, n' becomes tha actizzle branch\&. In most cases, dis gotz nuff tha local pimpment, though dat is purely by convention n' aint required\&.
.RE
.PP
merge
.RS 4
As a verb: To brang tha contentz of another
branch
(possibly from a external
repository) tha fuck into tha current branch\&. In tha case where tha merged\-in branch is from a gangbangin' finger-lickin' different repository, dis is done by first
fetching
the remote branch n' then mergin tha result tha fuck into tha current branch\&. This combination of fetch n' merge operations is called a
pull\&. Mergin is performed by a automatic process dat identifies chizzlez made since tha branches diverged, n' then applies all dem chizzlez together\&. In cases where chizzlez conflict, manual intervention may be required ta complete tha merge\&.
.sp
As a noun: unless it be a
fast-forward, a successful merge thangs up in dis biatch up in tha creation of a new
commit
representin tha result of tha merge, n' havin as
parents
the tipz of tha merged
branches\&. This commit is referred ta as a "merge commit", or sometimes just a "merge"\&.
.RE
.PP
object
.RS 4
Da unit of storage up in Git\&. Well shiiiit, it is uniquely identified by the
SHA-1
of its contents\&. Consequently, a object can not be chizzled\&.
.RE
.PP
object database
.RS 4
Stores a set of "objects", n' a individual
object
is identified by its
object name\&. Da objects probably live in
$GIT_DIR/objects/\&.
.RE
.PP
object identifier
.RS 4
Synonym for
object name\&.
.RE
.PP
object name
.RS 4
Da unique identifier of an
object\&. Da object name is probably represented by a 40 characta hexadecimal string\& fo' realz. Also colloquially called
SHA-1\&.
.RE
.PP
object type
.RS 4
One of tha identifiers "commit", "tree", "tag" or "blob" describin tha type of an
object\&.
.RE
.PP
octopus
.RS 4
To
merge
more than two
branches\&.
.RE
.PP
origin
.RS 4
Da default upstream
repository\&. Most projects have at least one upstream project which they track\&. By default
\fIorigin\fR
is used fo' dat purpose\&. New upstream thugged-out shiznit is ghon be fetched into
remote-trackin branches
named origin/name\-of\-upstream\-branch, which you can peep using
git branch \-r\&.
.RE
.PP
pack
.RS 4
A set of objects which done been compressed tha fuck into one file (to save space or ta transmit dem efficiently)\&.
.RE
.PP
pack index
.RS 4
Da list of identifiers, n' other shiznit, of tha objects up in a
pack, ta assist up in efficiently accessin tha contentz of a pack\&.
.RE
.PP
pathspec
.RS 4
Pattern used ta limit paths up in Git commands\&.
.sp
Pathspecs is used on tha command line of "git ls\-files", "git ls\-tree", "git add", "git grep", "git diff", "git checkout", n' nuff other commandz ta limit tha scope of operations ta some subset of tha tree or worktree\&. Right back up in yo muthafuckin ass. See tha documentation of each command fo' whether paths is relatizzle ta tha current directory or toplevel\&. Da pathspec syntax be as bigs up:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
any path matches itself
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
the pathspec up ta tha last slash represents a gangbangin' finger-lickin' directory prefix\&. Da scope of dat pathspec is limited ta dat subtree\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
the rest of tha pathspec be a pattern fo' tha remainder of tha pathname\&. Paths relatizzle ta tha directory prefix is ghon be matched against dat pattern rockin fnmatch(3); up in particular,
\fI*\fR
and
\fI?\fR\fIcan\fR
match directory separators\&.
.RE
.sp
For example, Documentation/*\&.jpg will match all \&.jpg filez up in tha Documentation subtree, includin Documentation/chapter_1/figure_1\&.jpg\&.
.sp
A pathspec dat begins wit a cold-ass lil colon
:
has special meaning\&. In tha short form, tha leadin colon
:
is followed by zero or mo' "magic signature" lettas (which optionally is terminated by another colon
:), n' tha remainder is tha pattern ta match against tha path\&. Da "magic signature" consistz of ASCII symbols dat is neither alphanumeric, glob, regex special charatas nor colon\&. Da optionizzle colon dat terminates tha "magic signature" can be omitted if tha pattern begins wit a cold-ass lil characta dat do not belong ta "magic signature" symbol set n' aint a cold-ass lil colon\&.
.sp
In tha long form, tha leadin colon
:
is followed by a open parenthesis
(, a cold-ass lil comma\-separated list of zero or mo' "magic lyrics", n' a cold-ass lil close parentheses
), n' tha remainder is tha pattern ta match against tha path\&.
.sp
A pathspec wit only a cold-ass lil colon means "there is no pathspec"\&. This form should not be combined wit other pathspec\&.
.PP
top
.RS 4
Da magic word
top
(magic signature:
/) make tha pattern match from tha root of tha hustlin tree, even when yo ass is hustlin tha command from inside a subdirectory\&.
.RE
.PP
literal
.RS 4
Wildcardz up in tha pattern such as
*
or
?
are treated as literal characters\&.
.RE
.PP
icase
.RS 4
Case insensitizzle match\&.
.RE
.PP
glob
.RS 4
Git treats tha pattern as a gangbangin' finger-lickin' dirty-ass shell glob suitable fo' consumption by fnmatch(3) wit tha FNM_PATHNAME flag: wildcardz up in tha pattern aint gonna match a / up in tha pathname\&. For example, "Documentation/*\&.html" matches "Documentation/git\&.html" but not "Documentation/ppc/ppc\&.html" or "tools/perf/Documentation/perf\&.html"\&.
.sp
Two consecutizzle asterisks ("**") up in patterns matched against full pathname may have special meaning:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
A leadin "**" followed by a slash means match up in all directories\&. For example, "**/foo" matches file or directory "foo" anywhere, tha same as pattern "foo"\&. "**/foo/bar" matches file or directory "bar" anywhere dat is directly under directory "foo"\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
A trailin "/**" matches every last muthafuckin thang inside\&. For example, "abc/**" matches all filez inside directory "abc", relatizzle ta tha location of the
\&.gitignore
file, wit infinite depth\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
A slash followed by two consecutizzle asterisks then a slash matches zero or mo' directories\&. For example, "a/**/b" matches "a/b", "a/x/b", "a/x/y/b" n' so on\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Other consecutizzle asterisks is considered invalid\&.
.sp
Glob magic is incompatible wit literal magic\&.
.RE
.RE
.PP
exclude
.RS 4
Afta a path matches any non\-exclude pathspec, it is ghon be run all up in all exclude pathspec (magic signature:
!)\&. If it matches, tha path is ignored\&.
.RE
.RE
.PP
parent
.RS 4
A
commit object
gotz nuff a (possibly empty) list of tha logical predecessor(s) up in tha line of pimpment, i\&.e\&. its muthafathas\&.
.RE
.PP
pickaxe
.RS 4
Da term
pickaxe
refers ta a option ta tha diffcore routines dat help select chizzlez dat add or delete a given text string\&. With the
\-\-pickaxe\-all
option, it can be used ta view tha full
changeset
that introduced or removed, say, a particular line of text\&. Right back up in yo muthafuckin ass. See
\fBgit-diff\fR(1)\&.
.RE
.PP
plumbing
.RS 4
Cute name for
core Git\&.
.RE
.PP
porcelain
.RS 4
Cute name fo' programs n' program suites dependin on
core Git, presentin a high level access ta core Git\&. Porcelains expose mo' of a
SCM
interface than the
plumbing\&.
.RE
.PP
pull
.RS 4
Pullin a
branch
means to
fetch
it and
merge
it\&. Right back up in yo muthafuckin ass. See also
\fBgit-pull\fR(1)\&.
.RE
.PP
push
.RS 4
Pushin a
branch
means ta git tha branch\(cqs
head ref
from a remote
repository, smoke up if it aint nuthin but a gangbangin' finger-lickin' direct ancestor ta tha branch\(cqs local head ref, n' up in dat case, puttin all objects, which are
reachable
from tha local head ref, n' which is missin from tha remote repository, tha fuck into tha remote
object database, n' uppimpin tha remote head ref\&. If tha remote
head
is not a ancestor ta tha local head, tha push fails\&.
.RE
.PP
reachable
.RS 4
All of tha ancestorz of a given
commit
are holla'd ta be "reachable" from dat commit\&. Mo' generally, one
object
is reachable from another if we can reach tha one from tha other by a
chain
that bigs up
tags
to whatever they tag,
commits
to they muthafathas or trees, and
trees
to tha trees or
blobs
that they contain\&.
.RE
.PP
rebase
.RS 4
To reapply a seriez of chizzlez from a
branch
to a gangbangin' finger-lickin' different base, n' reset the
head
of dat branch ta tha result\&.
.RE
.PP
ref
.RS 4
A name dat begins with
refs/
(e\&.g\&.
refs/heads/master) dat points ta an
object name
or another ref (the latta is called a
symbolic ref)\&. For convenience, a ref can sometimes be abbreviated when used as a argument ta a Git command; see
\fBgitrevisions\fR(7)
for details\&. Refs is stored up in the
repository\&.
.sp
Da ref namespace is hierarchical\&. Different subhierarchies is used fo' different purposes (e\&.g\&. the
refs/heads/
hierarchy is used ta represent local branches)\&.
.sp
There is all dem special\-purpose refs dat do not begin with
refs/\&. Da most notable example is
HEAD\&.
.RE
.PP
reflog
.RS 4
A reflog shows tha local "history" of a ref\&. In other lyrics, it can rap  what tha fuck tha 3rd last revision in
\fIthis\fR
repository was, n' what tha fuck was tha current state in
\fIthis\fR
repository, yesterdizzle 9:14pm\&. Right back up in yo muthafuckin ass. See
\fBgit-reflog\fR(1)
for details\&.
.RE
.PP
refspec
.RS 4
A "refspec" is used by
fetch
and
push
to describe tha mappin between remote
ref
and local ref\&.
.RE
.PP
remote\-trackin branch
.RS 4
A
ref
that is used ta follow chizzlez from another
repository\&. Well shiiiit, it typically looks like
\fIrefs/remotes/foo/bar\fR
(indicatin dat it tracks a funky-ass branch named
\fIbar\fR
in a remote named
\fIfoo\fR), n' matches tha right\-hand\-side of a cold-ass lil configured fetch
refspec\& fo' realz. A remote\-trackin branch should not contain direct modifications or have local commits made ta it\&.
.RE
.PP
repository
.RS 4
A collection of
refs
together wit an
object database
containin all objects which are
reachable
from tha refs, possibly accompanied by meta data from one or more
porcelains\& fo' realz. A repository can share a object database wit other repositories via
alternates mechanism\&.
.RE
.PP
resolve
.RS 4
Da action of fixin up manually what tha fuck a gangbangin' failed automatic
merge
left behind\&.
.RE
.PP
revision
.RS 4
Synonym for
commit
(the noun)\&.
.RE
.PP
rewind
.RS 4
To throw away part of tha pimpment, i\&.e\&. ta assign the
head
to a earlier
revision\&.
.RE
.PP
SCM
.RS 4
Source code pimpment (tool)\&.
.RE
.PP
SHA\-1
.RS 4
"Secure Hash Algorithm 1"; a cold-ass lil cryptographic hash function\&. In tha context of Git used as a synonym for
object name\&.
.RE
.PP
shallow repository
.RS 4
A shallow
repository
has a incomplete history a shitload of whose
commits
have
parents
cauterized away (in other lyrics, Git is holla'd at ta pretend dat these commits aint gots tha muthafathas, even though they is recorded up in the
commit object)\&. This is sometimes useful when yo ass is interested only up in tha recent history of a project even though tha real history recorded up in tha upstream is much larger\& fo' realz. A shallow repository is pimped by givin the
\-\-depth
option to
\fBgit-clone\fR(1), n' its history can be lata deepened with
\fBgit-fetch\fR(1)\&.
.RE
.PP
symref
.RS 4
Symbolic reference: instead of containin the
SHA-1
id itself, it iz of tha format
\fIref: refs/some/thing\fR
and when referenced, it recursively dereferences ta dis reference\&.
\fIHEAD\fR
is a prime example of a symref\&. Right back up in yo muthafuckin ass. Symbolic references is manipulated wit the
\fBgit-symbolic-ref\fR(1)
command\&.
.RE
.PP
tag
.RS 4
A
ref
under
refs/tags/
namespace dat points ta a object of a arbitrary type (typically a tag points ta either a
tag
or a
commit object)\&. In contrast ta a
head, a tag aint updated by the
commit
command\& fo' realz. A Git tag has not a god damn thang ta do wit a Lisp tag (which would be called an
object type
in Git\(cqs context)\& fo' realz. A tag is most typically used ta mark a particular point up in tha commit ancestry
chain\&.
.RE
.PP
tag object
.RS 4
An
object
containin a
ref
pointin ta another object, which can contain a message just like a
commit object\&. Well shiiiit, it can also contain a (PGP) signature, up in which case it is called a "signed tag object"\&.
.RE
.PP
topic branch
.RS 4
A regular Git
branch
that is used by a thugged-out pimper ta identify a cold-ass lil conceptual line of pimpment\&. Right back up in yo muthafuckin ass. Since branches is straight-up easy as fuck  n' inexpensive, it is often desirable ta have nuff muthafuckin lil' small-ass branches dat each contain straight-up well defined concepts or lil' small-ass incremenstrual yet related chizzles\&.
.RE
.PP
tree
.RS 4
Either a
workin tree, or a
tree object
together wit tha dependent
blob
and tree objects (i\&.e\&. a stored representation of a hustlin tree)\&.
.RE
.PP
tree object
.RS 4
An
object
containin a list of file names n' modes along wit refs ta tha associated blob and/or tree objects\& fo' realz. A
tree
is equivalent ta a
directory\&.
.RE
.PP
tree\-ish (also treeish)
.RS 4
A
tree object
or an
object
that can be recursively dereferenced ta a tree object\&. Dereferencin a
commit object
yieldz tha tree object correspondin ta the
revision\(aqs top
directory\&. Da followin is all tree\-ishes: a
commit-ish, a tree object, a
tag object
that points ta a tree object, a tag object dat points ta a tag object dat points ta a tree object, etc\&.
.RE
.PP
unmerged index
.RS 4
An
index
which gotz nuff unmerged
index entries\&.
.RE
.PP
unreachable object
.RS 4
An
object
which is not
reachable
from a
branch,
tag, or any other reference\&.
.RE
.PP
upstream branch
.RS 4
Da default
branch
that is merged tha fuck into tha branch up in question (or tha branch up in question is rebased onto)\&. Well shiiiit, it is configured via branch\&.<name>\&.remote n' branch\&.<name>\&.merge\&. If tha upstream branch of
\fIA\fR
is
\fIorigin/B\fR
sometimes we say "\fIA\fR
is tracking
\fIorigin/B\fR"\&.
.RE
.PP
workin tree
.RS 4
Da tree of actual checked up files\&. Da hustlin tree normally gotz nuff tha contentz of the
HEAD
commit\(cqs tree, plus any local chizzlez dat you have made but not yet committed\&.
.RE
.SH "SEE ALSO"
.sp
\fBgittutorial\fR(7), \fBgittutorial-2\fR(7), \fBgitcvs-migration\fR(7), \m[blue]\fBEverydizzle Git\fR\m[]\&\s-2\u[1]\d\s+2, \m[blue]\fBDa Git User\(cqs Manual\fR\m[]\&\s-2\u[2]\d\s+2
.SH "GIT"
.sp
Part of tha \fBgit\fR(1) suite\&.
.SH "NOTES"
.IP " 1." 4
Everydizzle Git
.RS 4
\%file:///usr/share/doc/git/everyday.html
.RE
.IP " 2." 4
Da Git User\(cqs Manual
.RS 4
\%file:///usr/share/doc/git/user-manual.html
.RE
