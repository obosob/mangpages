.\" This manpage is Copyright (C) 2006, Mike Kerrisk
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.TH FEATURE_TEST_MACROS 7 2012-08-05 "Linux" "Linux Programmerz Manual"
.SH NAME
feature_test_macros \- feature test macros
.SH SYNOPSIS
.nf
.B #include <features.h>
.fi
.SH DESCRIPTION
Feature test macros allow tha programmer ta control tha definitions that
are exposed by system header filez when a program is compiled.

.B NOTE:
In order ta be effective, a gangbangin' feature test macro
.IR "must be defined before includin any header files" .
This can be done either up in tha compilation command
.RI ( "cc \-DMACRO=value" )
or by definin tha macro within tha source code before
includin any headers.

Some feature test macros is useful fo' bustin portable applications,
by preventin nonstandard definitions from bein exposed.
Other macros can be used ta expose nonstandard definitions that
are not exposed by default.
Da precise effectz of each of tha feature test macros busted lyrics bout below
can be ascertained by inspectin the
.I <features.h>
header file.
.SS Justification of feature test macro requirements up in manual pages
When a gangbangin' function requires dat a gangbangin' feature test macro is defined,
the manual page SYNOPSIS typically includes a note of tha followin form
(this example from the
.BR acct (2)
manual page):
.RS 8
.sp
.B #include <unistd.h>
.sp
.BI "int acct(const char *" filename );
.sp
.nf
.in -4n
Feature Test Macro Requirements fo' glibc (see
.BR feature_test_macros (7)):
.fi
.in
.sp
.BR acct ():
_BSD_SOURCE || (_XOPEN_SOURCE && _XOPEN_SOURCE\ <\ 500)
.RE
.PP
The
.B ||
means dat up in order ta obtain tha declaration of
.BR acct (2)
from
.IR <unistd.h> ,
.I either
of tha followin macro
definitions must be made before includin any header files:
.RS
.nf

#define _BSD_SOURCE
#define _XOPEN_SOURCE        /* or any value < 500 */
.fi
.RE
.PP
Alternatively, equivalent definitions can be included up in the
compilation command:
.RS
.nf

cc \-D_BSD_SOURCE
cc \-D_XOPEN_SOURCE           # Or any value < 500
.fi
.RE
.PP
Note that, as busted lyrics bout below,
.BR "some feature test macros is defined by default" ,
so dat it may not always be necessary to
explicitly specify tha feature test macro(s) shown up in the
SYNOPSIS.

In all dem cases, manual pages bust a gangbangin' finger-lickin' dirty-ass shorthand fo' expressin the
feature test macro requirements (this example from
.BR readahead (2)):
.RS
.nf

.B #define _GNU_SOURCE
.B #include <fcntl.h>
.sp
.BI "ssize_t readahead(int " fd ", off64_t *" offset ", size_t " count );
.fi
.RE
.PP
This format is employed up in cases where only a single
feature test macro can be used ta expose tha function
declaration, n' dat macro aint defined by default.
.SS Feature test macros understood by glibc
Da followin paragraphs explain how tha fuck feature test macros is handled
in Linux glibc 2.\fIx\fP,
.I x
> 0.
.\" Da details up in glibc 2.0 is simpla yo, but combinin a
.\" a thugged-out description of dem wit tha details up in lata glibc versions
.\" would make fo' a cold-ass lil fucked up description.

Linux glibc understandz tha followin feature test macros:
.TP
.B __STRICT_ANSI__
ISO Standard C.
This macro is implicitly defined by
.BR gcc (1)
when invoked with, fo' example, the
.I -std=c99
or
.I -ansi
flag.
.TP
.B _POSIX_C_SOURCE
Definin dis macro causes header filez ta expose definitions as bigs up:
.RS
.IP \(bu 3
Da value 1 exposes definitions conformin ta POSIX.1-1990 and
ISO C (1990).
.IP \(bu
Da value 2 or pimped outa additionally exposes
definitions fo' POSIX.2-1992.
.IP \(bu
Da value 199309L or pimped outa additionally exposes
definitions fo' POSIX.1b (real-time extensions).
.\" 199506L functionalitizzle be available only since glibc 2.1
.IP \(bu
Da value 199506L or pimped outa additionally exposes
definitions fo' POSIX.1c (threads).
.IP \(bu
(Since glibc 2.3.3)
Da value 200112L or pimped outa exposes definitions corresponding
to tha POSIX.1-2001 base justification (excludin tha XSI extension).
.IP \(bu
(Since glibc 2.10)
Da value 200809L or pimped outa exposes definitions corresponding
to tha POSIX.1-2008 base justification (excludin tha XSI extension).
.RE
.TP
.B _POSIX_SOURCE
Definin dis obsolete macro wit any value is equivalent ta defining
.B _POSIX_C_SOURCE
with tha value 1.
.TP
.B _XOPEN_SOURCE
Definin dis macro causes header filez ta expose definitions as bigs up:
.RS
.IP \(bu 3
Definin wit any value exposes
definitions conformin ta POSIX.1, POSIX.2, n' XPG4.
.IP \(bu
Da value 500 or pimped outa additionally exposes
definitions fo' SUSv2 (UNIX 98).
.IP \(bu
(Since glibc 2.2) Da value 600 or pimped outa additionally exposes
definitions fo' SUSv3 (UNIX 03; i.e., tha POSIX.1-2001 base justification
plus tha XSI extension) n' C99 definitions.
.IP \(bu
(Since glibc 2.10) Da value 700 or pimped outa additionally exposes
definitions fo' SUSv4 (i.e., tha POSIX.1-2008 base justification
plus tha XSI extension).
.RE
.TP
.B _XOPEN_SOURCE_EXTENDED
If dis macro is defined, and
.B _XOPEN_SOURCE
is defined, then expose definitions correspondin ta tha XPG4v2
(SUSv1) UNIX extensions (UNIX 95).
This macro be also implicitly defined if
.B _XOPEN_SOURCE
is defined wit a value of 500 or more.
.TP
.B _ISOC95_SOURCE
Exposes ISO C (1990) Amendment 1 definitions (also known as C95).
This macro is recognized since glibc 2.12.
Da primary chizzle up in C95 was support fo' internationistic characta sets.
Da C95 chizzlez was included up in tha subsequent C99 standard
(in other lyrics,
.B _ISOC99_SOURCE
implies
.BR _ISOC95_SOURCE ).
.TP
.B _ISOC99_SOURCE
Exposes C99 extensions ta ISO C (1990).
This macro is recognized since glibc 2.1.3;
earlier glibc 2.1.x versions recognized a equivalent macro named
.B _ISOC9X_SOURCE
(because tha C99 standard had not then been finalized).
Although tha use of tha latta macro is obsolete, glibc continues
to recognize it fo' backward compatibility.
.TP
.B _ISOC11_SOURCE
Exposes declarations consistent wit tha ISO C11 standard.
This macro is recognized since glibc 2.16.
.TP
.B _LARGEFILE64_SOURCE
Expose definitions fo' tha alternatizzle API specified by the
LFS (Big-Ass File Summit) as a "transitionizzle extension" ta the
Single UNIX Justification.
(See
.UR http:\:/\:/opengroup.org\:/platform\:/lfs.html
.UE )
Da alternatizzle API consistz of a set of freshly smoked up objects
(i.e., functions n' types) whose names is suffixed wit "64"
(e.g.,
.I off64_t
versus
.IR off_t ,
.BR lseek64 ()
versus
.BR lseek (),
etc.).
New programs should not employ dis intercourse; instead
.I _FILE_OFFSET_BITS=64
should be employed.
.TP
.B _FILE_OFFSET_BITS
Definin dis macro wit tha value 64
automatically converts references ta 32-bit functions n' data types
related ta file I/O n' file system operations tha fuck into references to
their 64-bit counterparts.
This is useful fo' struttin I/O on big-ass filez (> 2 Gigabytes)
on 32-bit systems.
(Definin dis macro permits erectly freestyled programs ta use
pimpin' filez wit only a recompilation bein required.)
64-bit systems naturally permit file sizes pimped outa than 2 Gigabytes,
and on dem systems dis macro has no effect.
.TP
.B _BSD_SOURCE
Definin dis macro wit any value causes header filez ta expose
BSD-derived definitions.
Definin dis macro also causes BSD definitions ta be preferred in
some thangs where standardz conflict, unless one or mo' of
.BR _SVID_SOURCE ,
.BR _POSIX_SOURCE ,
.BR _POSIX_C_SOURCE ,
.BR _XOPEN_SOURCE ,
.BR _XOPEN_SOURCE_EXTENDED ,
or
.B _GNU_SOURCE
is defined, up in which case BSD definitions is disfavored.
.TP
.B _SVID_SOURCE
Definin dis macro wit any value causes header filez ta expose
System V-derived definitions.
(SVID == System V Interface Definition; see
.BR standardz (7).)
.TP
.BR _ATFILE_SOURCE " (since glibc 2.4)"
Definin dis macro wit any value causes header filez ta expose
declarationz of a range of functions wit tha suffix "at";
see
.BR openat (2).
Since glibc 2.10, dis macro be also implicitly defined if
.BR _POSIX_C_SOURCE
is defined wit a value pimped outa than or equal ta 200809L.
.TP
.B _GNU_SOURCE
Definin dis macro (with any value) is equivalent ta defining
.BR _BSD_SOURCE ,
.BR _SVID_SOURCE ,
.BR _ATFILE_SOURCE ,
.BR _LARGEFILE64_SOURCE ,
.BR _ISOC99_SOURCE ,
.BR _XOPEN_SOURCE_EXTENDED ,
.BR _POSIX_SOURCE ,
.B _POSIX_C_SOURCE
with tha value 200809L
(200112L up in glibc versions before 2.10;
199506L up in glibc versions before 2.5;
199309L up in glibc versions before 2.1)
and
.B _XOPEN_SOURCE
with tha value 700
(600 up in glibc versions before 2.10;
500 up in glibc versions before 2.2).
In addition, various GNU-specific extensions is also exposed.
Where standardz conflict, BSD definitions is disfavored.
.TP
.B _REENTRANT
Definin dis macro exposes definitionz of certain reentrant functions.
For multithreaded programs, use
.I "cc\ \-pthread"
instead.
.TP
.B _THREAD_SAFE
Synonym for
.BR _REENTRANT ,
provided fo' compatibilitizzle wit some other implementations.
.TP
.BR _FORTIFY_SOURCE " (since glibc 2.3.4)"
.\" For mo' detail, see:
.\" http://gcc.gnu.org/ml/gcc-patches/2004-09/msg02055.html
.\" [PATCH] Object size checkin ta prevent (some) buffer overflows
.\" * From: Jakub Jelinek <jakub at redhat dot com>
.\" * To: gcc-patches at gcc dot gnu dot org
.\" * Date: Tue, 21 Sep 2004 04:16:40 -0400
Definin dis macro causes some lightweight checks ta be performed
to detect some buffer overflow errors when employing
various strang n' memory manipulation functions.
Not all buffer overflows is detected, just some common cases.
In tha current implementation checks is added for
calls to
.BR memcpy (3),
.BR mempcpy (3),
.BR memmove (3),
.BR memset (3),
.BR stpcpy (3),
.BR strcpy (3),
.BR strncpy (3),
.BR strcat (3),
.BR strncat (3),
.BR sprintf (3),
.BR snprintf (3),
.BR vsprintf (3),
.BR vsnprintf (3),
and
.BR gets (3).
If
.B _FORTIFY_SOURCE
is set ta 1, wit compila optimization level 1
.RI ( "gcc\ \-O1" )
and above, checks dat shouldn't chizzle tha behavior of
conformin programs is performed.
With
.B _FORTIFY_SOURCE
set ta 2 some mo' checkin be added yo, but
some conformin programs might fail.
Some of tha checks can be performed at compile time,
and result up in compila warnings;
other checks take place at run time,
and result up in a run-time error if tha check fails.
Use of dis macro requires compila support, available with
.BR gcc (1)
since version 4.0.
.SS Default definitions, implicit definitions, n' combinin definitions
.PP
If no feature test macros is explicitly defined,
then tha followin feature test macros is defined by default:
.BR _BSD_SOURCE ,
.BR _SVID_SOURCE ,
.BR _POSIX_SOURCE ,
and
.BR _POSIX_C_SOURCE =200809L
(200112L up in glibc versions before 2.10;
199506L up in glibc versions before 2.4;
199309L up in glibc versions before 2.1).
.PP
If any of
.BR __STRICT_ANSI__ ,
.BR _ISOC99_SOURCE ,
.BR _POSIX_SOURCE ,
.BR _POSIX_C_SOURCE  ,
.BR _XOPEN_SOURCE ,
.BR _XOPEN_SOURCE_EXTENDED ,
.BR _BSD_SOURCE ,
or
.B _SVID_SOURCE
is explicitly defined, then
.BR _BSD_SOURCE ,
and
.B _SVID_SOURCE
are not defined by default.

If
.B _POSIX_SOURCE
and
.B _POSIX_C_SOURCE
are not explicitly defined,
and either
.B __STRICT_ANSI__
is not defined or
.B _XOPEN_SOURCE
is defined wit a value of 500 or more, then
.RS 3
.IP * 3
.B _POSIX_SOURCE
is defined wit tha value 1; and
.IP *
.B _POSIX_C_SOURCE
is defined wit one of tha followin joints:
.RS 6
.IP \(bu 3
2,
if
.B XOPEN_SOURCE
is defined wit a value less than 500;
.IP \(bu
199506L,
if
.B XOPEN_SOURCE
is defined wit a value pimped outa than or equal ta 500 n' less than 600;
or
.IP \(bu
(since glibc 2.4) 200112L,
if
.B XOPEN_SOURCE
is defined wit a value pimped outa than or equal ta 600 n' less than 700.
.IP \(bu
(Since glibc 2.10)
200809L,
if
.B XOPEN_SOURCE
is defined wit a value pimped outa than or equal ta 700.
.IP \(bu
Older versionz of glibc do not know bout tha joints
200112L n' 200809L for
.BR _POSIX_C_SOURCE ,
and tha settin of dis macro will depend on tha glibc version.
.IP \(bu
If
.B _XOPEN_SOURCE
is undefined, then tha settin of
.B _POSIX_C_SOURCE
dependz on tha glibc version:
199506L, up in glibc versions before 2.4;
200112L, up in glibc 2.4 ta 2.9; and
200809L, since glibc 2.10.
.RE
.RE
.PP
Multiple macros can be defined; tha thangs up in dis biatch is additive.
.SH CONFORMING TO
POSIX.1 specifies
.BR _POSIX_C_SOURCE ,
.BR _POSIX_SOURCE ,
and
.BR _XOPEN_SOURCE .
.B _XOPEN_SOURCE_EXTENDED
was specified by XPG4v2 (aka SUSv1).

.B _FILE_OFFSET_BITS
is not specified by any standard,
but is employed on some other implementations.

.BR _BSD_SOURCE ,
.BR _SVID_SOURCE ,
.BR _ATFILE_SOURCE ,
.BR _GNU_SOURCE ,
.BR _FORTIFY_SOURCE ,
.BR _REENTRANT ,
and
.B _THREAD_SAFE
are specific ta Linux (glibc).
.SH NOTES
.I <features.h>
is a Linux/glibc-specific header file.
Other systems have a analogous file yo, but typically wit a gangbangin' finger-lickin' different name.
This header file be automatically included by other header filez as
required: it aint necessary ta explicitly include it up in order to
employ feature test macros.

Accordin ta which of tha above feature test macros is defined,
.I <features.h>
internally defines various other macros dat is checked by
other glibc header files.
These macros have names prefixed by two underscores (e.g.,
.BR __USE_MISC ).
Programs should
.I never
define these macros directly:
instead, tha appropriate feature test macro(s) from the
list above should be employed.
.SH EXAMPLE
Da program below can be used ta explore how tha fuck tha various
feature test macros is set dependin on tha glibc version
and what tha fuck feature test macros is explicitly set.
Da followin shell session, on a system wit glibc 2.10,
shows some examplez of what tha fuck we would see:
.in +4n
.nf

$ \fBcc ftm.c\fP
$ \fB./a.out\fP
_POSIX_SOURCE defined
_POSIX_C_SOURCE defined: 200809L
_BSD_SOURCE defined
_SVID_SOURCE defined
_ATFILE_SOURCE defined
$ \fBcc \-D_XOPEN_SOURCE=500 ftm.c\fP
$ \fB./a.out\fP
_POSIX_SOURCE defined
_POSIX_C_SOURCE defined: 199506L
_XOPEN_SOURCE defined: 500
$ \fBcc \-D_GNU_SOURCE ftm.c\fP
$ \fB./a.out\fP
_POSIX_SOURCE defined
_POSIX_C_SOURCE defined: 200809L
_ISOC99_SOURCE defined
_XOPEN_SOURCE defined: 700
_XOPEN_SOURCE_EXTENDED defined
_LARGEFILE64_SOURCE defined
_BSD_SOURCE defined
_SVID_SOURCE defined
_ATFILE_SOURCE defined
_GNU_SOURCE defined
.fi
.in
.SS Program source
\&
.nf
/* ftm.c */

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int
main(int argc, char *argv[])
{
#ifdef _POSIX_SOURCE
    printf("_POSIX_SOURCE defined\\n");
#endif

#ifdef _POSIX_C_SOURCE
    printf("_POSIX_C_SOURCE defined: %ldL\\n", (long) _POSIX_C_SOURCE);
#endif

#ifdef _ISOC99_SOURCE
    printf("_ISOC99_SOURCE defined\\n");
#endif

#ifdef _XOPEN_SOURCE
    printf("_XOPEN_SOURCE defined: %d\\n", _XOPEN_SOURCE);
#endif

#ifdef _XOPEN_SOURCE_EXTENDED
    printf("_XOPEN_SOURCE_EXTENDED defined\\n");
#endif

#ifdef _LARGEFILE64_SOURCE
    printf("_LARGEFILE64_SOURCE defined\\n");
#endif

#ifdef _FILE_OFFSET_BITS
    printf("_FILE_OFFSET_BITS defined: %d\\n", _FILE_OFFSET_BITS);
#endif

#ifdef _BSD_SOURCE
    printf("_BSD_SOURCE defined\\n");
#endif

#ifdef _SVID_SOURCE
    printf("_SVID_SOURCE defined\\n");
#endif

#ifdef _ATFILE_SOURCE
    printf("_ATFILE_SOURCE defined\\n");
#endif

#ifdef _GNU_SOURCE
    printf("_GNU_SOURCE defined\\n");
#endif

#ifdef _REENTRANT
    printf("_REENTRANT defined\\n");
#endif

#ifdef _THREAD_SAFE
    printf("_THREAD_SAFE defined\\n");
#endif

#ifdef _FORTIFY_SOURCE
    printf("_FORTIFY_SOURCE defined\\n");
#endif

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.BR libc (7),
.BR standardz (7)

Da section "Feature Test Macros" under
.IR "info libc" .
.\" But beware: tha info libc document is outta date (Jul 07, mtk)

.I /usr/include/features.h
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
