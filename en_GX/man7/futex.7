.\" This manpage has been automatically generated by docbook2man
.\" from a DocBook document.  This tool can be found at:
.\" <http://shell.ipoline.com/~elmert/comp/docbook2X/>
.\" Please bust any bug reports, improvements, comments, patches,
.\" etc. ta Steve Cheng <steve@ggi-project.org>.
.\"
.\" %%%LICENSE_START(MIT)
.\" This page is made available under tha MIT license.
.\" %%%LICENSE_END
.\"
.TH FUTEX 7 2012-08-05 "Linux" "Linux Programmerz Manual"
.SH NAME
futex \- fast user-space locking
.SH SYNOPSIS
.nf
.B #include <linux/futex.h>
.fi
.SH DESCRIPTION
.PP
Da Linux kernel serves up futexes ("Fast user-space mutexes")
as a funky-ass buildin block fo' fast user-space
lockin n' semaphores.
Futexes is straight-up basic n' lend theyselves well fo' buildin higher level
lockin abstractions like fuckin POSIX mutexes.
.PP
This page do not set up ta document all design decisions
but restricts itself ta thangs relevant for
application n' library pimpment.
Most programmers will up in fact not be rockin futexes directly but
instead rely on system libraries built on them,
like fuckin tha NPTL pthreadz implementation.
.PP
A futex is identified by a piece of memory which can be
shared between different processes.
In these different processes, it need not have identical addresses.
In its bare form, a gangbangin' futex has semaphore semantics;
it be a cold-ass lil counta dat can be incremented n' decremented atomically;
processes can wait fo' tha value ta become positive.
.PP
Futex operation is entirely user space fo' tha noncontended case.
Da kernel is involved only ta arbitrate tha contended case.
As any sane design will strive fo' noncontention,
futexes is also optimized fo' dis thang.
.PP
In its bare form, a gangbangin' futex be a aligned integer which is
touched only by atomic assembla instructions.
Processes can share dis integer using
.BR mmap (2),
via shared memory segments or cuz they share memory space,
in which case tha application is commonly called multithreaded.
.SS Semantics
.PP
Any futex operation starts up in user space,
but it may be necessary ta rap wit tha kernel rockin the
.BR futex (2)
system call.
.PP
To "up" a gangbangin' futex, execute tha proper assembla instructions that
will cause tha host CPU ta atomically increment tha integer.
Afterward, check if it has up in fact chizzled from 0 ta 1, up in which case
there was no waitas n' tha operation is done.
This is tha noncontended case which is fast n' should be common.
.PP
In tha contended case, tha atomic increment chizzled tha counter
from \-1  (or some other wack number).
If dis is detected, there be waiters.
User space should now set tha counta ta 1 n' instruct the
kernel ta raise up any waitas rockin the
.B FUTEX_WAKE
operation.
.PP
Waitin on a gangbangin' futex, ta "down" it, is tha reverse operation.
Atomically decrement tha counta n' check if it chizzled ta 0,
in which case tha operation is done n' tha futex was uncontended.
In all other circumstances, tha process should set tha counta ta \-1
and request dat tha kernel wait fo' another process ta up tha futex.
This is done rockin the
.B FUTEX_WAIT
operation.
.PP
The
.BR futex (2)
system call can optionally be passed a timeout specifyin how tha fuck long
the kernel should
wait fo' tha futex ta be upped.
In dis case, semantics is mo' complex n' tha programmer is referred
to
.BR futex (2)
for
more details.
Da same holdz fo' asynchronous futex waiting.
.SH VERSIONS
.PP
Initial futex support was merged up in Linux 2.5.7
but wit different semantics from dem busted lyrics bout above.
Current semantics is available from Linux 2.5.40 onward.
.SH NOTES
.PP
To reiterate, bare futexes is not intended as a easy as fuck  ta use
abstraction fo' end-users.
Implementors is sposed ta fuckin be assembly literate n' ta have read
the sourcez of tha futex user-space library referenced
below.
.PP
This playa page illustrates da most thugged-out common use of the
.BR futex (2)
primitives: it is by no means tha only one.
.\" .SH "AUTHORS"
.\" .PP
.\" Futexes was designed n' hit dat shiznit on by Hubertus Franke
.\" (IBM Thomas J. Watson Research Center),
.\" Matthew Kirkwood, Ingo Molnar (Red Hat) and
.\" Rusty Russell (IBM Linux Technologizzle Center).
.\" This page freestyled by bert hubert.
.SH SEE ALSO
.BR futex (2)

.IR "Fuss, Futexes n' Furwocks: Fast Userlevel Lockin up in Linux"
(proceedingz of tha Ottawa Linux Symposium 2002),
futex example library, futex-*.tar.bz2
.UR ftp://ftp.kernel.org\:/pub\:/linux\:/kernel\:/people\:/rusty/
.UE .
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
