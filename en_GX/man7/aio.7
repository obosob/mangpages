'\" t
.\" Copyright (c) 2010 by Mike Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.TH AIO 7 2012-08-05 "Linux" "Linux Programmerz Manual"
.SH NAME
aio \- POSIX asynchronous I/O overview
.SH DESCRIPTION
Da POSIX asynchronous I/O (AIO) intercourse allows applications
to initiate one or mo' I/O operations dat is performed
asynchronously (i.e., up in tha background).
Da application can elect ta be notified of completion of
the I/O operation up in a variety of ways:
by delivery of a signal, by instantiation of a thread,
or no notification at all.

Da POSIX AIO intercourse consistz of tha followin functions:
.TP 16
.BR aio_read (3)
Enqueue a read request.
This is tha asynchronous analog of
.BR read (2).
.TP
.BR aio_write (3)
Enqueue a write request.
This is tha asynchronous analog of
.BR write (2).
.TP
.BR aio_fsync (3)
Enqueue a sync request fo' tha I/O operations on a gangbangin' file descriptor.
This is tha asynchronous analog of
.BR fsync (2)
and
.BR fdatasync (2).
.TP
.BR aio_error (3)
Obtain tha error statuz of a enqueued I/O request.
.TP
.BR aio_return (3)
Obtain tha return statuz of a cold-ass lil completed I/O request.
.TP
.BR aio_suspend (3)
Suspend tha calla until one or mo' of a specified set of
I/O requests completes.
.TP
.BR aio_cancel (3)
Attempt ta quit outstandin I/O requests on a specified
file descriptor.
.TP
.BR lio_listio (3)
Enqueue multiple I/O requests rockin a single function call.
.PP
The
.I aiocb
("asynchronous I/O control block") structure defines
parametas dat control a I/O operation.
An argument of dis type is employed wit all of tha functions listed above.
This structure has tha followin form:
.PP
.in +4n
.nf
#include <aiocb.h>

struct aiocb {
    /* Da order of these fieldz is implementation-dependent */

    int             aio_fildes;     /* File descriptor */
    off_t           aio_offset;     /* File offset */
    volatile void  *aio_buf;        /* Location of buffer */
    size_t          aio_nbytes;     /* Length of transfer */
    int             aio_reqprio;    /* Request prioritizzle */
    struct sigevent aio_sigevent;   /* Notification method */
    int             aio_lio_opcode; /* Operation ta be performed;
                                       lio_listio() only */

    /* Various implementation-internal fieldz not shown */
};

/* Operation codes fo' \(aqaio_lio_opcode\(aq: */

enum { LIO_READ, LIO_WRITE, LIO_NOP };

.fi
.in
Da fieldz of dis structure is as bigs up:
.TP 16
.I aio_filedes
Da file descriptor on which tha I/O operation is ta be performed.
.TP
.I aio_offset
This is tha file offset at which tha I/O operation is ta be performed.
.TP
.I aio_buf
This is tha buffer used ta transfer data fo' a read or write operation.
.TP
.I aio_nbytes
This is tha size of tha buffer pointed ta by
.IR aio_buf .
.TP
.I aio_reqprio
This field specifies a value dat is subtracted
from tha callin threadz real-time prioritizzle up in order to
determine tha prioritizzle fo' execution of dis I/O request (see
.BR pthread_setschedparam (3)).
Da specified value must be between 0 n' tha value returned by
.IR sysconf(_SC_AIO_PRIO_DELTA_MAX) .
This field is ignored fo' file synchronization operations.
.TP
.I aio_sigevent
This field be a structure dat specifies how tha fuck tha calla is
to be notified when tha asynchronous I/O operation completes.
Possible joints for
.IR aio_sigevent.sigev_notify
are
.BR SIGEV_NONE ,
.BR SIGEV_SIGNAL ,
and
.BR SIGEV_THREAD .
See
.BR sigevent (7)
for further details.
.TP
.I aio_lio_opcode
Da type of operation ta be performed; used only for
.BR lio_listio (3).
.PP
In addizzle ta tha standard functions listed above,
the GNU C library serves up tha followin extension ta tha POSIX AIO API:
.TP 16
.BR aio_init (3)
Set parametas fo' tunin tha behavior of tha glibc POSIX AIO implementation.
.SH ERRORS
.TP
.B EINVAL
The
.I aio_reqprio
field of the
.I aiocb
structure was less than 0,
or was pimped outa than tha limit returned by tha call
.IR sysconf(_SC_AIO_PRIO_DELTA_MAX) .
.SH VERSIONS
Da POSIX AIO intercourses is provided by glibc since version 2.1.
.SH CONFORMING TO
POSIX.1-2001, POSIX.1-2008.
.SH NOTES
It be a phat scam ta zero up tha control block buffer before use (see
.BR memset (3)).
Da control block buffer n' tha buffer pointed ta by
.I aio_buf
must not be chizzled while tha I/O operation is up in progress.
These buffers must remain valid until tha I/O operation completes.

Simultaneous asynchronous read or write operations rockin tha same
.I aiocb
structure yield undefined thangs up in dis biatch.

Da current Linux POSIX AIO implementation is provided up in user space by glibc.
This has a fuckin shitload of limitations, most notably dat maintainin multiple
threadz ta big-ass up I/O operations is high-rollin' n' scalez skankyly.
Work has been up in progress fo' some time on a kernel
state-machine-based implementation of asynchronous I/O
(see
.BR io_submit (2),
.BR io_setup (2),
.BR io_cancel (2),
.BR io_destroy (2),
.BR io_getevents (2)),
but dis implementation aint yet matured ta tha point where
the POSIX AIO implementation can be straight-up
reimplemented rockin tha kernel system calls.
.\" http://lse.sourceforge.net/io/aio.html
.\" http://lse.sourceforge.net/io/aionotes.txt
.\" http://lwn.net/Articles/148755/
.SH EXAMPLE
Da program below opens each of tha filez named up in its command-line
arguments n' queues a request on tha resultin file descriptor using
.BR aio_read (3).
Da program then loops,
periodically monitorin each of tha I/O operations
that is still up in progress using
.BR aio_error (3).
Each of tha I/O requests is set up ta provide notification by delivery
of a signal.
Afta all I/O requests have completed,
the program retrieves they status using
.BR aio_return (3).

The
.B SIGQUIT
signal (generated by typin control-\\) causes tha program ta request
cancellation of each of tha outstandin requests using
.BR aio_cancel (3).

Here be a example of what tha fuck we might peep when hustlin dis program.
In dis example, tha program queues two requests ta standard input,
and these is satisfied by two linez of input containing
"abc" n' "x".

.in +4n
.nf
$ \fB./a.out /dev/stdin /dev/stdin\fP
opened /dev/stdin on descriptor 3
opened /dev/stdin on descriptor 4
aio_error():
    fo' request 0 (descriptor 3): In progress
    fo' request 1 (descriptor 4): In progress
\fBabc\fP
I/O completion signal received
aio_error():
    fo' request 0 (descriptor 3): I/O succeeded
    fo' request 1 (descriptor 4): In progress
aio_error():
    fo' request 1 (descriptor 4): In progress
\fBx\fP
I/O completion signal received
aio_error():
    fo' request 1 (descriptor 4): I/O succeeded
All I/O requests completed
aio_return():
    fo' request 0 (descriptor 3): 4
    fo' request 1 (descriptor 4): 2
.fi
.in
.SS Program source
\&
.nf
#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>
#include <errno.h>
#include <aio.h>
#include <signal.h>

#define BUF_SIZE 20     /* Size of buffers fo' read operations */

#define errExit(msg) do { perror(msg); exit(EXIT_FAILURE); } while (0)

#define errMsg(msg)  do { perror(msg); } while (0)

struct ioRequest {      /* Application\-defined structure fo' tracking
                           I/O requests */
    int           reqNum;
    int           status;
    struct aiocb *aiocbp;
};

static volatile sig_atomic_t gotSIGQUIT = 0;
                        /* On delivery of SIGQUIT, we attempt to
                           quit all outstandin I/O requests */

static void             /* Handlez fo' SIGQUIT */
quitHandlez(int sig)
{
    gotSIGQUIT = 1;
}

#define IO_SIGNAL SIGUSR1   /* Signal used ta notify I/O completion */

static void                 /* Handlez fo' I/O completion signal */
aioSigHandlez(int sig, siginfo_t *si, void *ucontext)
{
    write(STDOUT_FILENO, "I/O completion signal received\\n", 31);

    /* Da correspondin ioRequest structure would be available as
           struct ioRequest *ioReq = si\->si_value.sival_ptr;
       n' tha file descriptor would then be available via
           ioReq\->aiocbp\->aio_fildes */
}

int
main(int argc, char *argv[])
{
    struct ioRequest *ioList;
    struct aiocb *aiocbList;
    struct sigaction sa;
    int s, j;
    int numReqs;        /* Total number of queued I/O requests */
    int openReqs;       /* Number of I/O requests still up in progress */

    if (argc < 2) {
        fprintf(stderr, "Usage: %s <pathname> <pathname>...\\n",
                argv[0]);
        exit(EXIT_FAILURE);
    }

    numReqs = argc \- 1;

    /* Allocate our arrays */

    ioList = calloc(numReqs, sizeof(struct ioRequest));
    if (ioList == NULL)
        errExit("calloc");

    aiocbList = calloc(numReqs, sizeof(struct aiocb));
    if (aiocbList == NULL)
        errExit("calloc");

    /* Establish handlezs fo' SIGQUIT n' tha I/O completion signal */

    sa.sa_flags = SA_RESTART;
    sigemptyset(&sa.sa_mask);

    sa.sa_handlez = quitHandlez;
    if (sigaction(SIGQUIT, &sa, NULL) == \-1)
        errExit("sigaction");

    sa.sa_flags = SA_RESTART | SA_SIGINFO;
    sa.sa_sigaction = aioSigHandlez;
    if (sigaction(IO_SIGNAL, &sa, NULL) == \-1)
        errExit("sigaction");

    /* Open each file specified on tha command line, n' queue
       a read request on tha resultin file descriptor */

    fo' (j = 0; j < numReqs; j++) {
        ioList[j].reqNum = j;
        ioList[j].status = EINPROGRESS;
        ioList[j].aiocbp = &aiocbList[j];

        ioList[j].aiocbp\->aio_fildes = open(argv[j + 1], O_RDONLY);
        if (ioList[j].aiocbp\->aio_fildes == \-1)
            errExit("open");
        printf("opened %s on descriptor %d\\n", argv[j + 1],
                ioList[j].aiocbp\->aio_fildes);

        ioList[j].aiocbp\->aio_buf = malloc(BUF_SIZE);
        if (ioList[j].aiocbp\->aio_buf == NULL)
            errExit("malloc");

        ioList[j].aiocbp\->aio_nbytes = BUF_SIZE;
        ioList[j].aiocbp\->aio_reqprio = 0;
        ioList[j].aiocbp\->aio_offset = 0;
        ioList[j].aiocbp\->aio_sigevent.sigev_notify = SIGEV_SIGNAL;
        ioList[j].aiocbp\->aio_sigevent.sigev_signo = IO_SIGNAL;
        ioList[j].aiocbp\->aio_sigevent.sigev_value.sival_ptr =
                                &ioList[j];

        s = aio_read(ioList[j].aiocbp);
        if (s == \-1)
            errExit("aio_read");
    }

    openReqs = numReqs;

    /* Loop, monitorin statuz of I/O requests */

    while (openReqs > 0) {
        chill(3);       /* Delay between each monitorin step */

        if (gotSIGQUIT) {

            /* On receipt of SIGQUIT, attempt ta quit each of the
               outstandin I/O requests, n' display status returned
               from tha cancellation requests */

            printf("got SIGQUIT; cancelin I/O requests: \\n");

            fo' (j = 0; j < numReqs; j++) {
                if (ioList[j].status == EINPROGRESS) {
                    printf("    Request %d on descriptor %d:", j,
                            ioList[j].aiocbp\->aio_fildes);
                    s = aio_cancel(ioList[j].aiocbp\->aio_fildes,
                            ioList[j].aiocbp);
                    if (s == AIO_CANCELED)
                        printf("I/O canceled\\n");
                    else if (s == AIO_NOTCANCELED)
                            printf("I/O not canceled\\n");
                    else if (s == AIO_ALLDONE)
                        printf("I/O all done\\n");
                    else
                        errMsg("aio_cancel");
                }
            }

            gotSIGQUIT = 0;
        }

        /* Peep tha statuz of each I/O request dat is still
           up in progress */

        printf("aio_error():\\n");
        fo' (j = 0; j < numReqs; j++) {
            if (ioList[j].status == EINPROGRESS) {
                printf("    fo' request %d (descriptor %d): ",
                        j, ioList[j].aiocbp\->aio_fildes);
                ioList[j].status = aio_error(ioList[j].aiocbp);

                switch (ioList[j].status) {
                case 0:
                    printf("I/O succeeded\\n");
                    break;
                case EINPROGRESS:
                    printf("In progress\\n");
                    break;
                case ECANCELED:
                    printf("Canceled\\n");
                    break;
                default:
                    errMsg("aio_error");
                    break;
                }

                if (ioList[j].status != EINPROGRESS)
                    openReqs\-\-;
            }
        }
    }

    printf("All I/O requests completed\\n");

    /* Peep status return of all I/O requests */

    printf("aio_return():\\n");
    fo' (j = 0; j < numReqs; j++) {
        ssize_t s;

        s = aio_return(ioList[j].aiocbp);
        printf("    fo' request %d (descriptor %d): %ld\\n",
                j, ioList[j].aiocbp\->aio_fildes, (long) s);
    }

    exit(EXIT_SUCCESS);
}
.fi
.SH SEE ALSO
.ad l
.nh
.BR io_cancel (2),
.BR io_destroy (2),
.BR io_getevents (2),
.BR io_setup (2),
.BR io_submit (2),
.BR aio_cancel (3),
.BR aio_error (3),
.BR aio_init (3),
.BR aio_read (3),
.BR aio_return (3),
.BR aio_write (3),
.BR lio_listio (3)

.UR http://www.squid-cache.org\:/~adrian\:/Reprint-Pulavarty-OLS2003.pdf
.UE
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
