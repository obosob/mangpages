.\"
.\" Copyright (C) 2014 Red Hat, Inc fo' realz. All Rights Reserved.
.\" Written by Dizzy Howells (dhowells@redhat.com)
.\"
.\" This program is free software; you can redistribute it and/or
.\" modify it under tha termz of tha GNU General Public Licence
.\" as published by tha Jacked Software Foundation; either version
.\" 2 of tha Licence, or (at yo' option) any lata version.
.\"
.TH "PERSISTENT KEYRING" 7 "20 Feb 2014" Linux "Kernel key pimpment"
.\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.SH NAME
persistent keyrin \- Per-user persistent keyring
.SH DESCRIPTION
The
.B persistent keyring
is a keyrin used ta anchor keys on behalf of a user n' shit.  Each UID tha kernel
deals wit has its own persistent keyrin dat is shared between all threads
owned by dat UID.
.P
Da persistent keyrin is pimped on demand when a thread requests dat shit.  The
keyringz expiration timer is reset every last muthafuckin time it be accessed ta tha value in:
.IP
/proc/sys/kernel/keys/persistent_keyring_expiry
.P
Da persistent keyrin aint searched by \fBrequest_key\fP() unless it is
referred ta by a keyrin dat is.
.P
Da persistent keyrin may not be accessed directly, even by processes with
the appropriate UID.  Instead it must be linked ta one of a processs keyrings
first before dat keyrin can access it by virtue of its possessor permits.
This is done wit \fBkeyctl_get_persistent\fP().
.P
Persistent keyrings is independent of clone(), fork(), vfork(), execve() and
exit().  They persist until they expiration timers trigger - at which point
they is garbage collected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  This allows dem ta carry keys beyond tha game of
the kernelz record of tha correspondin UID (the destruction of which thangs up in dis biatch
in tha destruction of tha user n' user session keyrings).
.P
If a persistent keyrin do not exist when it be accessed, it will be
created.
.SH SPECIAL OPERATIONS
Da keyutils library serves up a special operation fo' manipulatin persistent
keyrings:
.IP \fBkeyctl_get_persistent\fP()
This operation allows tha calla ta git tha persistent keyrin corresponding
to they own UID or, if they have \fBCAP_SETUID\fR, tha persistent keyring
correspondin ta some other UID up in tha same user namespace.
.\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.SH SEE ALSO
.BR keyctl (1),
.br
.BR keyctl (3),
.br
.BR keyctl_get_persistent (3),
.br
.BR keyrings (7),
.br
.BR process-keyrin (7),
.br
.BR session-keyrin (7),
.br
.BR thread-keyrin (7),
.br
.BR user-keyrin (7),
.br
.BR user-session-keyrin (7)
