'\" t
.\"     Title: gitworkflows
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 10/25/2014
.\"    Manual: Git Manual
.\"    Source: Git 1.9.3
.\"  Language: Gangsta
.\"
.TH "GITWORKFLOWS" "7" "10/25/2014" "Git 1\&.9\&.3" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
gitworkflows \- An overview of recommended workflows wit Git
.SH "SYNOPSIS"
.sp
.nf
git *
.fi
.sp
.SH "DESCRIPTION"
.sp
This document attempts ta write down n' motivate a shitload of tha workflow elements used fo' git\&.git itself\&. Many scams apply up in general, though tha full workflow is rarely required fo' smalla projects wit fewer playas involved\&.
.sp
We formulate a set of \fIrules\fR fo' quick reference, while tha prose tries ta motivate each of them\&. Do not always take dem literally; you should value phat reasons fo' yo' actions higher than manpages like fuckin dis one\&.
.SH "SEPARATE CHANGES"
.sp
As a general rule, you should try ta split yo' chizzlez tha fuck into lil' small-ass logical steps, n' commit each of them\&. They should be consistent, hustlin independently of any lata commits, pass tha test suite, etc\&. This make tha review process much easier, n' tha history much mo' useful fo' lata inspection n' analysis, fo' example wit \fBgit-blame\fR(1) n' \fBgit-bisect\fR(1)\&.
.sp
To bust dis, try ta split yo' work tha fuck into lil' small-ass steps from tha straight-up beginning\&. Well shiiiit, it be always easier ta squash all dem commits together than ta split one big-ass commit tha fuck into several\&. Don\(cqt be afraid of makin too lil' small-ass or imslick steps along tha way\&. Yo ass can always go back lata n' edit tha commits wit git rebase \-\-interactizzle before you publish them\&. Yo ass can use git stash save \-\-keep\-index ta run tha test suite independent of other uncommitted chizzles; peep tha EXAMPLES section of \fBgit-stash\fR(1)\&.
.SH "MANAGING BRANCHES"
.sp
There is two main tools dat can be used ta include chizzlez from one branch on another: \fBgit-merge\fR(1) n' \fBgit-cherry-pick\fR(1)\&.
.sp
Merges have nuff advantages, so we try ta solve as nuff problems as possible wit merges alone\&. Cherry\-pickin is still occasionally useful; peep "Mergin upwards" below fo' a example\&.
.sp
Most blinginly, mergin works all up in tha branch level, while cherry\-pickin works all up in tha commit level\&. This means dat a merge can carry over tha chizzlez from 1, 10, or 1000 commits wit equal ease, which up in turn means tha workflow scalez much betta ta a big-ass number of contributors (and contributions)\&. Merges is also easier ta KNOW cuz a merge commit be a "promise" dat all chizzlez from all its muthafathas is now included\&.
.sp
There be a tradeoff of course: merges require a mo' careful branch pimpment\&. Da followin subsections say shit bout tha blingin points\&.
.SS "Graduation"
.sp
As a given feature goes from experimenstrual ta stable, it also "graduates" between tha correspondin branchez of tha software\&. git\&.git uses tha followin \fIintegration branches\fR:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fImaint\fR
tracks tha commits dat should go tha fuck into tha next "maintenizzle release", i\&.e\&., update of tha last busted out stable version;
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fImaster\fR
tracks tha commits dat should go tha fuck into tha next release;
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fInext\fR
is intended as a testin branch fo' topics bein tested fo' stabilitizzle fo' master\&.
.RE
.sp
There be a gangbangin' fourth straight-up legit branch dat is used slightly differently:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fIpu\fR
(proposed thugged-out shit) be a integration branch fo' thangs dat is not like locked n loaded fo' inclusion yet (see "Integration Branches" below)\&.
.RE
.sp
Each of tha four branches is probably a gangbangin' finger-lickin' direct descendant of tha one above it\&.
.sp
Conceptually, tha feature entas at a unstable branch (usually \fInext\fR or \fIpu\fR), n' "graduates" ta \fImaster\fR fo' tha next release once it is considered stable enough\&.
.SS "Mergin upwards"
.sp
Da "downwardz graduation" discussed above cannot be done by straight-up mergin downwards, however, since dat would merge \fIall\fR chizzlez on tha unstable branch tha fuck into tha stable one\& yo. Hence tha following:
.PP
\fBExample\ \&1.\ \&Merge upwards\fR
.sp
Always commit yo' fixes ta tha crazy oldschool supported branch dat require them\&. Then (periodically) merge tha integration branches upwardz tha fuck into each other\&.
.sp
This gives a straight-up controlled flow of fixes\&. If you notice dat you have applied a gangbangin' fix ta e\&.g\&. \fImaster\fR dat be also required up in \fImaint\fR, yo big-ass booty is ghon need ta cherry\-pick it (usin \fBgit-cherry-pick\fR(1)) downwards\&. This will happen all dem times n' is not a god damn thang ta worry bout unless you do it straight-up frequently\&.
.SS "Topic branches"
.sp
Any nontrivial feature will require nuff muthafuckin patches ta implement, n' may git extra bugfixes or improvements durin its gametime\&.
.sp
Committin every last muthafuckin thang directly on tha integration branches leadz ta nuff problems: Wack commits cannot be undone, so they must be reverted one by one, which creates confusin histories n' further error potential when you forget ta revert part of a crew of chizzles\&. Workin up in parallel mixes up tha chizzles, bustin further mad drama\&.
.sp
Use of "topic branches" solves these problems\&. Da name is pretty self explanatory, wit a cold-ass lil caveat dat be reppin tha "merge upwards" rule above:
.PP
\fBExample\ \&2.\ \&Topic branches\fR
.sp
Make a side branch fo' every last muthafuckin topic (feature, bugfix, \&...)\&. Fork it off all up in tha crazy oldschool integration branch dat yo big-ass booty is ghon eventually wanna merge it into\&.
.sp
Many thangs can then be done straight-up naturally:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
To git tha feature/bugfix tha fuck into a integration branch, simply merge it\&. If tha topic has evolved further up in tha meantime, merge again\&. (Note dat you do not necessarily gotta merge it ta tha crazy oldschool integration branch first\&. For example, you can first merge a funky-ass bugfix to
\fInext\fR, give it some testin time, n' merge to
\fImaint\fR
when you know it is stable\&.)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If you find you need freshly smoked up features from tha branch
\fIother\fR
to continue hustlin on yo' topic, merge
\fIother\fR
to
\fItopic\fR\&. (But fuck dat shiznit yo, tha word on tha street is dat do not do dis "just habitually", peep below\&.)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If you find you forked off tha wack branch n' wanna move it "back up in time", use
\fBgit-rebase\fR(1)\&.
.RE
.sp
Note dat tha last point clashes wit tha other two: a topic dat has been merged elsewhere should not be rebased\&. Right back up in yo muthafuckin ass. See tha section on RECOVERING FROM UPSTREAM REBASE up in \fBgit-rebase\fR(1)\&.
.sp
We should point up dat "habitually" (regularly fo' no real reason) mergin a integration branch tha fuck into yo' topics \(em n' by extension, mergin anythang upstream tha fuck into anythang downstream on a regular basis \(em is frowned upon:
.PP
\fBExample\ \&3.\ \&Merge ta downstream only at well-defined points\fR
.sp
Do not merge ta downstream except wit a phat reason: upstream API chizzlez affect yo' branch; yo' branch no longer merges ta upstream cleanly; etc\&.
.sp
Otherwise, tha topic dat was merged ta suddenly gotz nuff mo' than a single (well\-separated) chizzle\&. Da nuff resultin lil' small-ass merges will pimped outly clutta up history\& fo' realz. Every Muthafucka whoz ass lata investigates tha history of a gangbangin' file will gotta smoke up whether dat merge affected tha topic up in pimpment\& fo' realz. An upstream might even inadvertently be merged tha fuck into a "more stable" branch\& fo' realz. And so on\&.
.SS "Throw\-away integration"
.sp
If you followed tha last paragraph, yo big-ass booty is ghon now have nuff lil' small-ass topic branches, n' occasionally wonder how tha fuck they interact\&. Perhaps tha result of mergin dem do not even work, biatch? But on tha other hand, we wanna avoid mergin dem anywhere "stable" cuz such merges cannot easily be undone\&.
.sp
Da solution, of course, is ta cook up a merge dat we can undo: merge tha fuck into a throw\-away branch\&.
.PP
\fBExample\ \&4.\ \&Throw-away integration branches\fR
.sp
To test tha interaction of nuff muthafuckin topics, merge dem tha fuck into a throw\-away branch\&. Yo ass must never base any work on such a funky-ass branch!
.sp
If you make it (very) clear dat dis branch is goin ta be deleted right afta tha testing, you can even publish dis branch, fo' example ta give tha testas a cold-ass lil chizzle ta work wit it, or other pimpers a cold-ass lil chizzle ta peep if they in\-progress work is ghon be compatible\&. git\&.git has such a straight-up legit throw\-away integration branch called \fIpu\fR\&.
.SS "Branch pimpment fo' a release"
.sp
Assumin yo ass is rockin tha merge approach discussed above, when yo ass is releasin yo' project yo big-ass booty is ghon need ta do some additionizzle branch pimpment work\&.
.sp
A feature release is pimped from tha \fImaster\fR branch, since \fImaster\fR tracks tha commits dat should go tha fuck into tha next feature release\&.
.sp
Da \fImaster\fR branch is supposed ta be a superset of \fImaint\fR\&. If dis condizzle do not hold, then \fImaint\fR gotz nuff some commits dat is not included on \fImaster\fR\&. Da fixes represented by dem commits will therefore not be included up in yo' feature release\&.
.sp
To verify dat \fImaster\fR is indeed a superset of \fImaint\fR, use git log:
.PP
\fBExample\ \&5.\ \&Verify \fImaster\fR be a superset of \fImaint\fR\fR
.sp
git log master\&.\&.maint
.sp
This command should not list any commits\&. Otherwise, check up \fImaster\fR n' merge \fImaint\fR tha fuck into it\&.
.sp
Now you can proceed wit tha creation of tha feature release\& fo' realz. Apply a tag ta tha tip of \fImaster\fR indicatin tha release version:
.PP
\fBExample\ \&6.\ \&Release tagging\fR
.sp
git tag \-s \-m "Git X\&.Y\&.Z" vX\&.Y\&.Z master
.sp
Yo ass need ta push tha freshly smoked up tag ta a hood Git server (see "DISTRIBUTED WORKFLOWS" below)\&. This make tha tag available ta others trackin yo' project\&. Da push could also trigger a post\-update hook ta big-ass up release\-related shit like fuckin buildin release tarballs n' preformatted documentation pages\&.
.sp
Similarly, fo' a maintenizzle release, \fImaint\fR is trackin tha commits ta be busted out\&. Therefore, up in tha steps above simply tag n' push \fImaint\fR rather than \fImaster\fR\&.
.SS "Maintenizzle branch pimpment afta a gangbangin' feature release"
.sp
Afta a gangbangin' feature release, you need ta manage yo' maintenizzle branches\&.
.sp
First, if you wish ta continue ta release maintenizzle fixes fo' tha feature release made before tha recent one, then you must create another branch ta track commits fo' dat previous release\&.
.sp
To do this, tha current maintenizzle branch is copied ta another branch named wit tha previous release version number (e\&.g\&. maint\-X\&.Y\&.(Z\-1) where X\&.Y\&.Z is tha current release)\&.
.PP
\fBExample\ \&7.\ \&Copy maint\fR
.sp
git branch maint\-X\&.Y\&.(Z\-1) maint
.sp
Da \fImaint\fR branch should now be fast\-forwarded ta tha newly busted out code so dat maintenizzle fixes can be tracked fo' tha current release:
.PP
\fBExample\ \&8.\ \&Update maint ta freshly smoked up release\fR
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
git checkout maint
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
git merge \-\-ff\-only master
.RE
.sp
If tha merge fails cuz it aint a gangbangin' fast\-forward, then it is possible some fixes on \fImaint\fR was missed up in tha feature release\&. This aint gonna happen if tha content of tha branches was verified as busted lyrics bout up in tha previous section\&.
.SS "Branch pimpment fo' next n' pu afta a gangbangin' feature release"
.sp
Afta a gangbangin' feature release, tha integration branch \fInext\fR may optionally be rewound n' rebuilt from tha tip of \fImaster\fR rockin tha survivin topics on \fInext\fR:
.PP
\fBExample\ \&9.\ \&Rewind n' rebuild next\fR
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
git checkout next
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
git reset \-\-hard master
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
git merge ai/topic_in_next1
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
git merge ai/topic_in_next2
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\&...
.RE
.sp
Da advantage of bustin dis is dat tha history of \fInext\fR is ghon be clean\&. For example, some topics merged tha fuck into \fInext\fR may have initially looked promisin yo, but was lata found ta be undesirable or premature\&. In such a cold-ass lil case, tha topic is reverted outta \fInext\fR but tha fact remains up in tha history dat dat shiznit was once merged n' reverted\&. By rebustin \fInext\fR, you give another incarnation of such topics a cold-ass lil clean slate ta retry, n' a gangbangin' feature release be a phat point up in history ta do so\&.
.sp
If you do this, then you should cook up a hood announcement indicatin dat \fInext\fR was rewound n' rebuilt\&.
.sp
Da same rewind n' rebuild process may be followed fo' \fIpu\fR\& fo' realz. A hood announcement aint necessary since \fIpu\fR be a throw\-away branch, as busted lyrics bout above\&.
.SH "DISTRIBUTED WORKFLOWS"
.sp
Afta tha last section, you should know how tha fuck ta manage topics\&. In general, yo big-ass booty is ghon not be tha only thug hustlin on tha project, so yo big-ass booty is ghon gotta share yo' work\&.
.sp
Roughly bustin lyrics, there be two blingin workflows: merge n' patch\&. Da blingin difference is dat tha merge workflow can propagate full history, includin merges, while patches cannot\&. Both workflows can be used up in parallel: up in git\&.git, only subsystem maintainers use tha merge workflow, while any suckas sendz patches\&.
.sp
Note dat tha maintainer(s) may impose restrictions, like fuckin "Signed\-off\-by" requirements, dat all commits/patches submitted fo' inclusion must adhere to\&. Consult yo' project\(cqs documentation fo' mo' shiznit\&.
.SS "Merge workflow"
.sp
Da merge workflow works by copyin branches between upstream n' downstream\&. Upstream can merge contributions tha fuck into tha straight-up legit history; downstream base they work on tha straight-up legit history\&.
.sp
There is three main tools dat can be used fo' this:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBgit-push\fR(1)
copies yo' branches ta a remote repository, probably ta one dat can be read by all involved parties;
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBgit-fetch\fR(1)
that copies remote branches ta yo' repository; and
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBgit-pull\fR(1)
that do fetch n' merge up in one go\&.
.RE
.sp
Note tha last point\&. Do \fInot\fR use \fIgit pull\fR unless you straight-up wanna merge tha remote branch\&.
.sp
Gettin chizzlez up is easy as fuck :
.PP
\fBExample\ \&10.\ \&Push/pull: Publishin branches/topics\fR
.sp
git push <remote> <branch> n' tell mah playas where they can fetch from\&.
.sp
Yo ass will still gotta tell playas by other means, like fuckin mail\&. (Git serves up tha \fBgit-request-pull\fR(1) ta bust preformatted pull requests ta upstream maintainers ta simplify dis task\&.)
.sp
If you just wanna git tha newest copiez of tha integration branches, stayin up ta date is easy as fuck  too:
.PP
\fBExample\ \&11.\ \&Push/pull: Stayin up ta date\fR
.sp
Use git fetch <remote> or git remote update ta stay up ta date\&.
.sp
Then simply fork yo' topic branches from tha stable remotes as explained earlier\&.
.sp
If yo ass be a maintainer n' wanna merge other people\(cqs topic branches ta tha integration branches, they will typically bust a request ta do so by mail\&. Right back up in yo muthafuckin ass. Such a request looks like
.sp
.if n \{\
.RS 4
.\}
.nf
Please pull from
    <url> <branch>
.fi
.if n \{\
.RE
.\}
.sp
.sp
In dat case, \fIgit pull\fR can do tha fetch n' merge up in one go, as bigs up\&.
.PP
\fBExample\ \&12.\ \&Push/pull: Mergin remote topics\fR
.sp
git pull <url> <branch>
.sp
Occasionally, tha maintainer may git merge conflicts when tha pimpin' muthafucka tries ta pull chizzlez from downstream\&. In dis case, his schmoooove ass can ask downstream ta do tha merge n' resolve tha conflicts theyselves (like they will know betta how tha fuck ta resolve them)\&. Well shiiiit, it is one of tha rare cases where downstream \fIshould\fR merge from upstream\&.
.SS "Patch workflow"
.sp
If yo ass be a cold-ass lil contributor dat sendz chizzlez upstream up in tha form of emails, you should use topic branches as usual (see above)\&. Then use \fBgit-format-patch\fR(1) ta generate tha correspondin emails (highly recommended over manually formattin dem cuz it make tha maintainer\(cqs game easier)\&.
.PP
\fBExample\ \&13.\ \&format-patch/am: Publishin branches/topics\fR
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
git format\-patch \-M upstream\&.\&.topic
to turn dem tha fuck into preformatted patch files
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
git send\-email \-\-to=<recipient> <patches>
.RE
.sp
See tha \fBgit-format-patch\fR(1) n' \fBgit-send-email\fR(1) manpages fo' further usage notes\&.
.sp
If tha maintainer  drops some lyrics ta you dat yo' patch no longer applies ta tha current upstream, yo big-ass booty is ghon gotta rebase yo' topic (you cannot bust a merge cuz you cannot format\-patch merges):
.PP
\fBExample\ \&14.\ \&format-patch/am: Keepin topics up ta date\fR
.sp
git pull \-\-rebase <url> <branch>
.sp
Yo ass can then fix tha conflicts durin tha rebase\&. Presumably you aint published yo' topic other than by mail, so rebasin it aint a problem\&.
.sp
If you receive such a patch series (as maintainer, or like as a reader of tha mailin list dat shiznit was busted to), save tha mails ta files, create a freshly smoked up topic branch n' use \fIgit am\fR ta import tha commits:
.PP
\fBExample\ \&15.\ \&format-patch/am: Importin patches\fR
.sp
git be < patch
.sp
One feature worth pointin up is tha three\-way merge, which can help if you git conflicts: git be \-3 will use index shiznit contained up in patches ta figure up tha merge base\&. Right back up in yo muthafuckin ass. See \fBgit-am\fR(1) fo' other options\&.
.SH "SEE ALSO"
.sp
\fBgittutorial\fR(7), \fBgit-push\fR(1), \fBgit-pull\fR(1), \fBgit-merge\fR(1), \fBgit-rebase\fR(1), \fBgit-format-patch\fR(1), \fBgit-send-email\fR(1), \fBgit-am\fR(1)
.SH "GIT"
.sp
Part of tha \fBgit\fR(1) suite\&.
