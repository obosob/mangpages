'\" t
.\"     Title: gitcli
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 10/25/2014
.\"    Manual: Git Manual
.\"    Source: Git 1.9.3
.\"  Language: Gangsta
.\"
.TH "GITCLI" "7" "10/25/2014" "Git 1\&.9\&.3" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
gitcli \- Git command line intercourse n' conventions
.SH "SYNOPSIS"
.sp
gitcli
.SH "DESCRIPTION"
.sp
This manual raps bout tha convention used all up in Git CLI\&.
.sp
Many commandz take revisions (most often "commits" yo, but sometimes "tree\-ish", dependin on tha context n' command) n' paths as they arguments\& yo. Here is tha rules:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Revisions come first n' then paths\&. E\&.g\&. in
git diff v1\&.0 v2\&.0 arch/x86 include/asm\-x86,
v1\&.0
and
v2\&.0
are revisions and
arch/x86
and
include/asm\-x86
are paths\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
When a argument can be misunderstood as either a revision or a path, they can be disambiguated by placing
\-\-
between them\&. E\&.g\&.
git diff \-\- HEAD
is, "I gots a gangbangin' file called HEAD up in mah work tree\&. Please show chizzlez between tha version I staged up in tha index n' what tha fuck I have up in tha work tree fo' dat file", not "show difference between tha HEAD commit n' tha work tree as a whole"\&. Yo ass can say
git diff HEAD \-\-
to ask fo' tha latter\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Without disambiguating
\-\-, Git cook up a reasonable guess yo, but errors up n' askin you ta disambiguate when ambiguous\&. E\&.g\&. if you gotz a gangbangin' file called HEAD up in yo' work tree,
git diff HEAD
is ambiguous, n' you gotta say either
git diff HEAD \-\-
or
git diff \-\- HEAD
to disambiguate\&.
.sp
When freestylin a script dat is sposed ta fuckin handle random user\-input, it aint nuthin but a phat practice ta make it explicit which arguments is which by placin disambiguating
\-\-
at appropriate places\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Many commandz allow wildcardz up in paths yo, but you need ta protect dem from gettin globbed by tha shell\&. These two mean different thangs:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git checkout \-\- *\&.c
$ git checkout \-\- \e*\&.c
.fi
.if n \{\
.RE
.\}
.sp
Da forma lets yo' shell expand tha fileglob, n' yo ass be askin tha dot\-C filez up in yo' hustlin tree ta be overwritten wit tha version up in tha index\&. Da latta passes the
*\&.c
to Git, n' yo ass be askin tha paths up in tha index dat match tha pattern ta be checked up ta yo' hustlin tree\& fo' realz. Afta hustlin
git add hello\&.c; rm hello\&.c, you will
\fInot\fR
see
hello\&.c
in yo' hustlin tree wit tha former yo, but wit tha latta you will\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Just as tha filesystem
\fI\&.\fR
(period) refers ta tha current directory, rockin a
\fI\&.\fR
as a repository name up in Git (a dot\-repository) be a relatizzle path n' means yo' current repository\&.
.RE
.sp
Here is tha rulez regardin tha "flags" dat you should follow when yo ass is scriptin Git:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
it\(cqs preferred ta use tha non dashed form of Git commands, which means dat you should prefer
git foo
to
git\-foo\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
splittin short options ta separate lyrics (prefer
git foo \-a \-b
to
git foo \-ab, tha latta may not even work)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
when a cold-ass lil command line option takes a argument, use the
\fIstuck\fR
form\&. In other lyrics, write
git foo \-oArg
instead of
git foo \-o Arg
for short options, and
git foo \-\-long\-opt=Arg
instead of
git foo \-\-long\-opt Arg
for long options\& fo' realz. An option dat takes optionizzle option\-argument must be freestyled up in the
\fIstuck\fR
form\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
when you give a revision parameta ta a cold-ass lil command, make shizzle tha parameta aint ambiguous wit a name of a gangbangin' file up in tha work tree\&. E\&.g\&. do not write
git log \-1 HEAD
but write
git log \-1 HEAD \-\-; tha forma aint gonna work if you happen ta git a gangbangin' file called
HEAD
in tha work tree\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
many commandz allow a long-ass option
\-\-option
to be abbreviated only ta they unique prefix (e\&.g\&. if there is no other option whose name begins with
opt, you may be able ta spell
\-\-opt
to invoke the
\-\-option
flag) yo, but you should straight-up spell dem up when freestylin yo' scripts; lata versionz of Git may introduce a freshly smoked up option whose name shares tha same ol' dirty prefix, e\&.g\&.
\-\-optimize, ta cook up a gangbangin' finger-lickin' dirty-ass short prefix dat used ta be unique no longer unique\&.
.RE
.SH "ENHANCED OPTION PARSER"
.sp
From tha Git 1\&.5\&.4 series n' further, nuff Git commandz (not all of dem all up in tha time of tha freestylin though) come wit a enhanced option parser\&.
.sp
Here be a list of tha facilitizzles provided by dis option parser\&.
.SS "Magic Options"
.sp
Commandz which have tha enhanced option parser activated all KNOW a cold-ass lil couple magic command line options:
.PP
\-h
.RS 4
gives a pimpin' printed usage of tha command\&.
.sp
.if n \{\
.RS 4
.\}
.nf
$ git describe \-h
usage: git describe [options] <commit\-ish>*
   or: git describe [options] \-\-dirty

    \-\-gotz nuff            find tha tag dat comes afta tha commit
    \-\-debug               debug search game on stderr
    \-\-all                 use any ref
    \-\-tags                use any tag, even unannotated
    \-\-long                always use long format
    \-\-abbrev[=<n>]        use <n> digits ta display SHA\-1s
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
\-\-help\-all
.RS 4
Some Git commandz take options dat is only used fo' plumbin or dat is deprecated, n' such options is hidden from tha default usage\&. This option gives tha full list of options\&.
.RE
.SS "Negatin options"
.sp
Options wit long option names can be negated by prefixin \-\-no\-\&. For example, git branch has tha option \-\-track which is \fIon\fR by default\&. Yo ass can use \-\-no\-track ta override dat behaviour\&. Da same goes fo' \-\-color n' \-\-no\-color\&.
.SS "Aggregatin short options"
.sp
Commandz dat support tha enhanced option parser allow you ta aggregate short options\&. This means dat you can fo' example use git rm \-rf or git clean \-fdx\&.
.SS "Abbreviatin long options"
.sp
Commandz dat support tha enhanced option parser accepts unique prefix of a long-ass option as if it is straight-up spelled up yo, but use dis wit a cold-ass lil caution\&. For example, git commit \-\-amen behaves as if you typed git commit \-\-amend yo, but dat is legit only until a lata version of Git introduces another option dat shares tha same ol' dirty prefix, e\&.g\&. git commit \-\-amenitizzle option\&.
.SS "Separatin argument from tha option"
.sp
Yo ass can write tha mandatory option parameta ta a option as a separate word on tha command line\&. That means dat all tha followin uses work:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git foo \-\-long\-opt=Arg
$ git foo \-\-long\-opt Arg
$ git foo \-oArg
$ git foo \-o Arg
.fi
.if n \{\
.RE
.\}
.sp
.sp
But fuck dat shiznit yo, tha word on tha street is dat dis is \fBNOT\fR allowed fo' switches wit a optionizzle value, where tha \fIstuck\fR form must be used:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git describe \-\-abbrev HEAD     # erect
$ git describe \-\-abbrev=10 HEAD  # erect
$ git describe \-\-abbrev 10 HEAD  # NOT WHAT YOU MEANT
.fi
.if n \{\
.RE
.\}
.sp
.SH "NOTES ON FREQUENTLY CONFUSED OPTIONS"
.sp
Many commandz dat can work on filez up in tha hustlin tree and/or up in tha index can take \-\-cached and/or \-\-index options\&. Right back up in yo muthafuckin ass. Sometimes playas incorrectly be thinkin that, cuz tha index was originally called cache, these two is synonyms\&. They is \fBnot\fR \(em these two options mean straight-up different thangs\&.
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
The
\-\-cached
option is used ta ask a cold-ass lil command dat probably works on filez up in tha hustlin tree to
\fBonly\fR
work wit tha index\&. For example,
git grep, when used without a cold-ass lil commit ta specify from which commit ta look fo' strings in, probably works on filez up in tha hustlin tree yo, but wit the
\-\-cached
option, it looks fo' strings up in tha index\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
The
\-\-index
option is used ta ask a cold-ass lil command dat probably works on filez up in tha hustlin tree to
\fBalso\fR
affect tha index\&. For example,
git stash apply
usually merges chizzlez recorded up in a stash ta tha hustlin tree yo, but wit the
\-\-index
option, it also merges chizzlez ta tha index as well\&.
.RE
.sp
git apply command can be used wit \-\-cached n' \-\-index (but not all up in tha same time)\&. Usually tha command only affects tha filez up in tha hustlin tree yo, but wit \-\-index, it patches both tha filez n' they index entries, n' wit \-\-cached, it modifies only tha index entries\&.
.sp
See also \m[blue]\fBhttp://marc\&.info/?l=git&m=116563135620359\fR\m[] n' \m[blue]\fBhttp://marc\&.info/?l=git&m=119150393620273\fR\m[] fo' further shiznit\&.
.SH "GIT"
.sp
Part of tha \fBgit\fR(1) suite
