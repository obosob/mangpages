'\" t
'\" Da line above instructs most `man' programs ta invoke tbl
'\"
'\" Separate paragraphs; not tha same as PP which resets indent level.
.de SP
.if t .sp .5
.if n .sp
..
'\"
'\" Replacement em-dash fo' nroff (default is too short).
.ie n .ds m " - 
.el .ds m \(em
'\"
'\" Placeholda macro fo' if longer nroff arrow is needed.
.ds RA \(->
'\"
'\" Decimal point set slightly raised
.if t .ds d \v'-.15m'.\v'+.15m'
.if n .ds d .
'\"
'\" Enclosure macro fo' examples
.de EX
.SP
.nf
.ft CW
..
.de EE
.ft R
.SP
.fi
..
.TH SoX 7 "February 1, 2013" "soxformat" "Sound eXchange"
.SH NAME
SoX \- Sound eXchange, tha Swiss Army knife of audio manipulation
.SH DESCRIPTION
This manual raps bout SoX supported file formats n' audio thang types;
the SoX manual set starts with
.BR sox (1).
.SP
Format types dat can SoX can determine by a gangbangin' filename
extension is listed wit they names preceded by a thugged-out dot.
Format types dat is optionally built tha fuck into SoX
are marked `(optional)'.
.SP
Format types dat can be handled by an
external library via a optionizzle pseudo file type (currently
.B sndfile
or
.BR ffmpeg )
are marked e.g. `(also wit \fB\-t sndfile\fR)'.  This might be
useful if you gotz a gangbangin' file dat don't work wit SoXz default format
readaz n' writers, n' there be a a external reader or writa fo' that
format.
.SP
To peep if SoX has support fo' a optionizzle format or device, enter
.B sox \-h
and look fo' its name under tha list:
`AUDIO FILE FORMATS' or `AUDIO DEVICE DRIVERS'.
.SS SOX FORMATS & DEVICE DRIVERS
\&\fB.raw\fR (also wit \fB\-t sndfile\fR),
\&\fB.f32\fR, \fB.f64\fR,
\&\fB.s8\fR, \fB.s16\fR, \fB.s24\fR, \fB.s32\fR,
.br
\&\fB.u8\fR, \fB.u16\fR, \fB.u24\fR, \fB.u32\fR,
\&\fB.ul\fR, \fB.al\fR, \fB.lu\fR, \fB.la\fR
.if t .sp -.5
.if n .sp -1
.TP
\ 
Raw (headerless) audio files.  For
.BR raw ,
the sample rate n' tha data encodin must be given rockin command-line
format options; fo' tha other listed types, tha sample rate defaults to
8kHz (but may be overridden), n' tha data encodin is defined by the
given suffix.  Thus \fBf32\fR n' \fBf64\fR indicate filez encoded as 32
and 64-bit (IEEE single n' double precision) floatin point PCM
respectively; \fBs8\fR, \fBs16\fR, \fBs24\fR, n' \fBs32\fR indicate 8,
16, 24, n' 32-bit signed integer PCM respectively; \fBu8\fR, \fBu16\fR,
\fBu24\fR, n' \fBu32\fR indicate 8, 16, 24, n' 32-bit unsigned integer
PCM respectively; \fBul\fR indicates `\(*m-law' (8-bit), \fBal\fR
indicates `A-law' (8-bit), n' \fBlu\fR n' \fBla\fR is inverse bit
order `\(*m-law' n' inverse bit order `A-law' respectively.  For all raw
formats, tha number of channels defaults ta 1 (but may be overridden).
.SP
Headerless audio filez on a SPARC computa is likely ta be of format
\fBul\fR;  on a Mac, they likely ta be \fBu8\fR but wit a
sample rate of 11025 or 22050\ Hz.
.SP
See
.B .ima
and
.B .vox
for raw ADPCM formats, and
.B .cdda
for raw CD digital audio.
.PP
\&\fB.f4\fR, \fB.f8\fR,
\&\fB.s1\fR, \fB.s2\fR, \fB.s3\fR, \fB.s4\fR,
.br
\&\fB.u1\fR, \fB.u2\fR, \fB.u3\fR, \fB.u4\fR,
\&\fB.sb\fR, \fB.sw\fR, \fB.sl\fR, \fB.ub\fR, \fB.uw\fR
.if t .sp -.5
.if n .sp -1
.TP
\ 
Deprecated aliases for
\fBf32\fR, \fBf64\fR, \fBs8\fR, \fBs16\fR, \fBs24\fR, \fBs32\fR,
.br
\fBu8\fR, \fBu16\fR, \fBu24\fR, \fBu32\fR,
\fBs8\fR, \fBs16\fR, \fBs32\fR, \fBu8\fR, n' \fBu16\fR
respectively.
.TP
\&\fB.8svx\fR (also wit \fB\-t sndfile\fR)
Amiga 8SVX musical instrument description format.
.TP
\&\fB.aiff\fR, \fB.aif\fR (also wit \fB\-t sndfile\fR)
AIFF filez as used on oldschool Applez Macs, Applez Pt IIc/IIgs n' SGI.
SoXz AIFF support do not include multiple audio chunks,
or tha 8SVX musical instrument description format.
AIFF filez is multimedia archives and
can have multiple audio n' picture chunks\*m
you may need a separate archiver ta work wit em.
With Mac OS X, AIFF has been superseded by CAF.
.TP
\&\fB.aiffc\fR, \fB.aifc\fR (also wit \fB\-t sndfile\fR)
AIFF-C be a gangbangin' format based on AIFF dat was pimped ta allow
handlin compressed audio.  It can also handle lil
endian uncompressed linear data dat is often referred to
as
.B sowt 
encoding.  This encodin has also become tha defacto format produced by modern 
Macs as well as iShit on any platform.  AIFF-C filez produced 
by other applications typically have tha file extension .aif and
require lookin at its header ta detect tha legit format.
Da 
.B sowt
encodin is tha only encodin dat SoX can handle wit dis format.
.SP
AIFF-C is defined up in DAVIC 1.4 Part 9 Annex B.
This format is referred from ARIB STD-B24, which is specified for
Japanese data broadcasting.  Any private chunks is not supported.
.TP
\fBalsa\fR (optional)
Advanced Linux Sound Architecture thang driver; supports both playin and
recordin audio.  ALSA is only used up in Linux-based operatin systems, though
these often support OSS (see below) as well.  Examples:
.EX
	sox infile \-t alsa
	sox infile \-t alsa default
	sox infile \-t alsa plughw:0,0
	sox \-2 \-t alsa hw:1 outfile
.EE
See also
.BR play (1),
.BR rec (1),
and
.BR sox (1)
.BR \-d .
.TP
.B .amb
Ambisonic B-Format: a specialisation of
.B .wav
with between 3 n' 16 channelz of audio fo' use wit a Ambisonic decoder.
See http://www.ambisonia.com/Members/mleese/file-format-for-b-format for
details.  It be up ta tha user ta git tha channels together up in tha right
order n' all up in tha erect amplitude.
.TP
\&\fB.amr\-nb\fR (optional)
Adaptizzle Multi Rate\*mNarrow Band rap codec; a lossy format used up in 3rd
generation mobile telephony n' defined up in 3GPP TS 26.071 et al.
.SP
AMR-NB audio has a gangbangin' fixed samplin rate of 8 kHz n' supports encoding
to tha followin bit-rates (as selected by the
.B \-C
option): 0 = 4\*d75 kbit/s, 1 = 5\*d15 kbit/s, 2 = 5\*d9 kbit/s, 3 =
6\*d7 kbit/s, 4 = 7\*d4 kbit/s 5 = 7\*d95 kbit/s, 6 = 10\*d2
kbit/s, 7 = 12\*d2 kbit/s.
.TP
\&\fB.amr\-wb\fR (optional)
Adaptizzle Multi Rate\*mWide Band rap codec; a lossy format used up in 3rd
generation mobile telephony n' defined up in 3GPP TS 26.171 et al.
.SP
AMR-WB audio has a gangbangin' fixed samplin rate of 16 kHz n' supports encoding
to tha followin bit-rates (as selected by the
.B \-C
option): 0 = 6\*d6 kbit/s, 1 = 8\*d85 kbit/s, 2 = 12\*d65 kbit/s, 3 =
14\*d25 kbit/s, 4 = 15\*d85 kbit/s 5 = 18\*d25 kbit/s, 6 = 19\*d85
kbit/s, 7 = 23\*d05 kbit/s, 8 = 23\*d85 kbit/s.
.TP
\fBao\fR (optional)
Xiph.orgz Audio Output thang driver; works only fo' playin audio.  It
supports a wide range of devices n' sound systems\*msee its documentation
for tha full range.  For da most thugged-out part, SoXz use of libao cannot be
configured directly; instead, libao configuration filez must be used.
.SP
Da filename specified is used ta determine which libao plugin to
use.  Normally, you should specify `default' as tha filename.  If that
doesn't give tha desired behavior then you can specify tha short name
for a given plugin (like fuckin \fBpulse\fR fo' pulse audio plugin).
Examples:
.EX
	sox infile \-t ao
	sox infile \-t ao default
	sox infile \-t ao pulse
.EE
See also
.BR play (1)
and
.BR sox (1)
.BR \-d .
.TP
\&\fB.au\fR, \fB.snd\fR (also wit \fB\-t sndfile\fR)
Sun Microsystems AU files.
There is nuff typez of AU file;
DEC has invented its own wit a gangbangin' finger-lickin' different magic number
and byte order n' shit.  To write a DEC file, use the
.B \-L
option wit tha output file options.
.SP
Some .au filez is known ta have invalid AU headers; these
are probably original gangsta Sun \(*m-law 8000\ Hz filez and
can be dealt wit rockin the
.B .ul
format (see below).
.SP
It be possible ta override AU file header shiznit
with the
.B \-r
and
.B \-c
options, up in which case SoX will issue a warnin ta dat effect.
.TP
.B .avr
Audio Visual Research format;
used by a fuckin shitload of commercial packages
on tha Mac.
.TP
\&\fB.caf\fR (optional)
Applez Core Audio File format.
.TP
\&\fB.cdda\fR, \fB.cdr\fR
`Red Book' Compact Disc Digital Audio (raw audio).  CDDA has two audio
channels formatted as 16-bit signed integers (bangin' endian)at a sample
rate of 44\*d1\ kHz.  Da number of (stereo) samplez up in each CDDA
track be always a multiple of 588.
.TP
\fBcoreaudio\fR (optional)
Mac OSX CoreAudio thang driver: supports both playin n' recording
audio.  If a gangbangin' filename aint specific or if tha name is "default" then
the default audio thang is selected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Any other name is ghon be used
to select a specific device.  Da valid names can be peeped up in the
System Preferences->Sound menu n' then under tha Output n' Input tabs.

Examples:
.EX
	sox infile \-t coreaudio
	sox infile \-t coreaudio default
	sox infile \-t coreaudio "Internal Speakers"
.EE
See also
.BR play (1),
.BR rec (1),
and
.BR sox (1)
.BR \-d .
.TP
\&\fB.cvsd\fR, \fB.cvs\fR
Continuously Variable Slope Delta modulation.
A headerless format used ta compress rap audio fo' applications like fuckin voice mail.
This format is sometimes used wit bit-reversed samples\*mthe
.B \-X
format option can be used ta set tha bit-order.
.TP
\&\fB.cvu\fR
Continuously Variable Slope Delta modulation (unfiltered).
This be a alternatizzle handlez fo' CVSD dat is unfiltered but can
be used wit any bit-rate.  E.g.
.EX
	sox infile outfile.cvu rate 28k
	play \-r 28k outfile.cvu sinc \-3.4k
.EE
.TP
.B .dat
Text Data files.
These filez contain a textual representation of the
sample data.  There is one line all up in tha beginning
that gotz nuff tha sample rate, n' one line that
gotz nuff tha number of channels.
Subsequent lines contain two or mo' numeric data intems:
the time since tha beginnin of tha straight-up original gangsta sample n' tha sample value
for each channel.
.SP
Values is normalized so dat tha maximum n' minimum
are 1 n' \-1.  This file format can be used to
create data filez fo' external programs such as
FFT analysers or graph routines.  SoX can also convert
a file up in dis format back tha fuck into one of tha other file
formats.
.SP
Example containin only 2 stereo samplez of silence:
.SP
.EX
    ; Sample Rate 8012
    ; Channels 2
                0	0	0
    0.00012481278	0	0
.EE
.TP
\&\fB.dvms\fR, \fB.vms\fR
Used up in Germany ta compress rap audio fo' voice mail.
A self-describin variant of
.BR cvsd .
.TP
\&\fB.fap\fR (optional)
See
.BR .paf .
.TP
\fBffmpeg\fR (optional)
This be a pseudo-type dat forces ffmpeg ta be used. Y'all KNOW dat shit, muthafucka! Da actual file
type is deduced from tha file name (it cannot be used on stdio).
It can read a wide range of audio files, not all of which are
documented here, n' also tha audio track of nuff vizzle files
(includin AVI, WMV n' MPEG) fo' realz. At present only tha straight-up original gangsta audio track
of a gangbangin' file can be read.
.TP
\&\fB.flac\fR (optional; also wit \fB\-t sndfile\fR)
Xiph.orgz Jacked Lossless Audio CODEC compressed audio.
FLAC be a open, patent-free CODEC designed fo' compressing
beatz. Drop dis like itz hot!  It be similar ta MP3 n' Ogg Vorbis yo, but lossless,
meanin dat audio is compressed up in FLAC without any loss in
quality.
.SP
SoX can read natizzle FLAC filez (.flac) but not Ogg FLAC filez (.ogg).
[But see
.B .ogg
below fo' shiznit relatin ta support fo' Ogg
Vorbis files.]
.SP
SoX can write natizzle FLAC filez accordin ta a given or default
compression level.  8 is tha default compression level n' gives the
best (but slowest) compression; 0 gives tha least (but fastest)
compression. I aint talkin' bout chicken n' gravy biatch.  Da compression level is selected rockin the
.B \-C
option [see
.BR sox (1)]
with a whole number from 0 ta 8.
.TP
.B .fssd
An alias fo' the
.B .u8
format.
.TP
.B .gsrt
Grandstream ring-tone files.
Whilst dis file format can contain A-Law, \(*m-law, GSM, G.722,
G.723, G.726, G.728, or iLBC encoded audio, SoX supports readin and
writin only A-Law n' \(*m-law.  E.g.
.EX
   sox music.wav \-t gsrt ring.bin
   play ring.bin
.EE
.TP
\&\fB.gsm\fR (optional; also wit \fB\-t sndfile\fR)
GSM 06.10 Lossy Rap Compression.
A lossy format fo' compressin rap which is used up in the
Global Standard fo' Mobile telecommunications (GSM).  It aint nuthin but good
for its purpose, shrinkin audio data size yo, but it will introduce
lotz of noise when a given audio signal is encoded n' decoded
multiple times.  This format is used by some voice mail applications.
It be rather CPU intensive.
.TP
.B .hcom
Macintosh HCOM files.
These is Mac FSSD filez wit Huffman compression.
.TP
.B .htk
Single channel 16-bit PCM format used by HTK,
a toolkit fo' buildin Hidden Markov Model rap processin tools.
.TP
\&\fB.ircam\fR (also wit \fB\-t sndfile\fR)
Another name for
.BR .sf .
.TP
\&\fB.ima\fR (also wit \fB\-t sndfile\fR)
A headerless file of IMA ADPCM audio data. IMA ADPCM fronts 16-bit precision
packed tha fuck into only 4 bits yo, but up in fact soundz no betta than
.BR .vox .
.TP
\&\fB.lpc\fR, \fB.lpc10\fR
LPC-10 be a cold-ass lil compression scheme fo' rap pimped up in tha United
States. Right back up in yo muthafuckin ass. See http://www.arl.wustl.edu/~jaf/lpc/ fo' details. There is
no associated file format, so SoXz implementation is headerless.
.TP
\&\fB.mat\fR, \fB.mat4\fR, \fB.mat5\fR (optional)
Matlab 4.2/5.0 (respectively GNU Octave 2.0/2.1) format (.mat is tha same ol' dirty as .mat4).
.TP
.B .m3u
A
.I playlist
format; gotz nuff a list of audio files.
SoX can read yo, but not write dis file format.
See [1] fo' detailz of dis format.
.TP
.B .maud
An IFF-conformin audio file type, registered by
MS MacroSystem Computa GmbH, published along
with tha `Toccata' sound-card on tha Amiga.
Allows 8bit linear, 16bit linear, A-Law, \(*m-law
in mono n' stereo.
.TP
\&\fB.mp3\fR, \fB.mp2\fR (optionizzle read, optionizzle write)
MP3 compressed audio; MP3 (MPEG Layer 3) be a part of tha patent-encumbered
MPEG standardz fo' audio n' vizzle compression. I aint talkin' bout chicken n' gravy biatch.  It be a lossy
compression format dat achieves phat compression rates wit lil
qualitizzle loss.
.SP
Because MP3 is patented, SoX cannot be distributed wit MP3 support without
incurrin tha patent holderz fees.  Users whoz ass require SoX wit MP3 support
must currently compile n' build SoX wit tha MP3 libraries (LAME & MAD)
from source code, or, up in some cases, obtain pre-built dynamically loadable
libraries.
.SP
When readin MP3 files, up ta 28 bitz of precision is stored although
only 16 bits is reported ta user n' shit.  This is ta allow default behavior
of freestylin 16 bit output files.  A user can specify a higher precision
for tha output file ta prevent lossin dis extra shiznit. I aint talkin' bout chicken n' gravy biatch.  MP3
output filez will use up ta 24 bitz of precision while encoding.
.SP
MP3 compression parametas can be selected rockin SoXz \fB\-C\fR option
as bigs up
(note dat tha current syntax is subject ta chizzle):
.SP
Da primary parameta ta tha LAME encoder is tha bit rate. If the
value of tha \fB\-C\fR value be a positizzle integer, itz taken as
the bitrate up in kbps (e.g. if you specify 128, it uses 128 kbps).
.SP
Da second most blingin parameta is probably "quality" (really
performance), which allows balancin encodin speed vs. quality.
In LAME, 0 specifies highest qualitizzle but is straight-up slow, while
9 selects skanky qualitizzle yo, but is fast. (5 is tha default n' 2 is
recommended as a phat trade-off fo' high qualitizzle encodes.)
.SP
Because tha \fB\-C\fR value be a gangbangin' float, tha fractionizzle part is used
to select quality. 128.2 selects 128 kbps encodin wit a quality
of 2. There is one problem wit dis approach. We need 128 ta specify
128 kbps encodin wit default quality, so 0 means use default. Instead
of 0 you gotta use .01 (or .99) ta specify tha highest quality
(128.01 or 128.99).
.SP
LAME uses bitrate ta specify a cold-ass lil constant bitrate yo, but higher quality
can be  bigged up  rockin Variable Bit Rate (VBR). VBR qualitizzle (really
size) is selected rockin a number from 0 ta 9. Use a value of 0 fo' high
quality, larger files, n' 9 fo' smalla filez of lower quality. 4 is
the default.
.SP
In order ta squeeze tha selection of VBR tha fuck into tha the \fB\-C\fR value
float we use wack numbers ta select VRR. -4.2 would select default
VBR encodin (size) wit high qualitizzle (speed). One special case is 0,
which be a valid VBR encodin parameta but not a valid bitrate.
Compression value of 0 be always treated as a high qualitizzle vbr, as a
result both -0.2 n' 0.2 is treated as highest qualitizzle VBR (size) and
high qualitizzle (speed).
.SP
See also
.B Ogg Vorbis
for a similar format.
.TP
\&\fB.mp4\fR, \fB.m4a\fR (optional)
MP4 compressed audio.  MP3 (MPEG 4) is part of the
MPEG standardz fo' audio n' vizzle compression. I aint talkin' bout chicken n' gravy biatch.  See
.B mp3
for mo' shiznit.
.TP
\&\fB.nist\fR (also wit \fB\-t sndfile\fR)
See \fB.sph\fR.
.TP
\&\fB.ogg\fR, \fB.vorbis\fR (optional)
Xiph.orgz Ogg Vorbis compressed audio; a open, patent-free CODEC designed
for noize n' streamin audio.  It be a lossy compression format (similar to
MP3, VQF & AAC) dat achieves phat compression rates wit a minimum amount
of qualitizzle loss.
.SP
SoX can decode all typez of Ogg Vorbis files, n' can encode at different
compression levels/qualitizzles given as a number from \-1 (highest
compression/lowest quality) ta 10 (lowest compression, highest quality).
By default tha encodin qualitizzle level is 3 (which gives a encoded rate
of approx. 112kbps) yo, but dis can be chizzled rockin the
.B \-C
option (see above) wit a number from \-1 ta 10; fractionizzle numbers (e.g.
3\*d6) is also allowed.
Decodin is somewhat CPU intensive n' encodin is straight-up CPU intensive.
.SP
See also
.B .mp3
for a similar format.
.TP
\fBoss\fR (optional)
Open Sound System /dev/dsp thang driver; supports both playin and
recordin audio.  OSS support be available up in Unix-like operatin systems,
sometimes together wit alternatizzle sound systems (like fuckin ALSA).  Examples:
.EX
	sox infile \-t oss
	sox infile \-t oss /dev/dsp
	sox \-2 \-t oss /dev/dsp outfile
.EE
See also
.BR play (1),
.BR rec (1),
and
.BR sox (1)
.BR \-d .
.TP
\&\fB.paf\fR, \fB.fap\fR (optional)
Ensoniq PARIS file format (bangin' n' lil-endian respectively).
.TP
.B .pls
A
.I playlist
format; gotz nuff a list of audio files.
SoX can read yo, but not write dis file format.
See [2] fo' detailz of dis format.
.SP
Note: SoX support fo' SHOUTcast PLS relies on
.BR wget (1)
and is only partially supported: itz necessary to
specify tha audio type manually, e.g.
.EX
	play \-t mp3 \(dqhttp://a.server/pls?rn=265&file=filename.pls\(dq
.EE
and SoX do not know bout alternatizzle servers\*mhit Ctrl-C twice in
quick succession ta quit.
.TP
.B .prc
Psion Record. Y'all KNOW dat shit, muthafucka! Used up in Psion EPOC PDAs (Series 5, Revo n' similar) for
System alarms n' recordings made by tha built-in Record application.
When writing, SoX defaults ta A-law, which is recommended; if you must
use ADPCM, then use tha \fB\-i\fR switch. Da sound qualitizzle is skanky
because Psion Record seems ta insist on framez of 800 samplez or
fewer, so dat tha ADPCM CODEC has ta be reset at every last muthafuckin 800 frames,
which causes tha sound ta glitch every last muthafuckin tenth of a second.
.TP
\fBpulseaudio\fR (optional)
PulseAudio driver; supports both playin n' recordin of audio.
PulseAudio be a cold-ass lil cross platform networked sound server n' shit.  
If a gangbangin' file name is specified wit dis driver, it is ignored. Y'all KNOW dat shit, muthafucka!  Examples:
.EX
	sox infile \-t pulseaudio
	sox infile \-t pulseaudio default
.EE
See also
.BR play (1),
.BR rec (1),
and
.BR sox (1)
.BR \-d .
.TP
\&\fB.pvf\fR (optional)
Portable Voice Format.
.TP
\&\fB.sd2\fR (optional)
Sound Designer 2 format.
.TP
\&\fB.sds\fR (optional)
MIDI Sample Dump Standard.
.TP
\&\fB.sf\fR (also wit \fB\-t sndfile\fR)
IRCAM SDIF (Institut de Recherche et Coordination Acoustique/Musique
Sound Description Interchange Format). Used by academic noize software
like fuckin tha CSound package, n' tha MixView sound sample editor.
.TP
\&\fB.sln\fR
Asterisk PBX `signed linear' 8khz, 16-bit signed integer, lil-endian
raw format.
.TP
\&\fB.sph\fR, \fB.nist\fR (also wit \fB\-t sndfile\fR)
SPHERE (SPeech HEader Resources) be a gangbangin' file format defined by NIST
(Nationizzle Institute of Standardz n' Technology) n' is used with
speech audio.  SoX can read these filez when they contain
\(*m-law n' PCM data.  It will ignore any header shiznit that
says tha data is compressed rockin \fIshorten\fR compression and
will treat tha data as either \(*m-law or PCM.  This will allow SoX
and tha command line \fIshorten\fR program ta be run together using
pipes ta encompasses tha data n' then pass tha result ta SoX fo' processing.
.TP
.B .smp
Turtle Beach SampleVision files.
SMP filez is fo' use wit tha PC-DOS package SampleVision by Turtle Beach
Softworks.  This package is fo' communication ta nuff muthafuckin MIDI samplers.  All
sample rates is supported by tha package, although not all is supported by
the samplaz theyselves.  Currently loop points is ignored.
.TP
.B .snd
See
.BR .au ,
.B .sndr
and
.BR .sndt .
.TP
\fBsndfile\fR (optional)
This be a pseudo-type dat forces libsndfile ta be used. Y'all KNOW dat shit, muthafucka! For freestylin files, the
actual file type is then taken from tha output file name; fo' reading
them, it is deduced from tha file.
.TP
\fBsndio\fR (optional)
OpenBSD audio thang driver; supports both playin n' recordin audio.
.EX
	sox infile \-t sndio
.EE
See also
.BR play (1),
.BR rec (1),
and
.BR sox (1)
.BR \-d .
.TP
.B .sndr
Sounder files.
An MS-DOS/Windows format from tha early '90s.
Sounder filez probably have tha extension `.SND'.
.TP
.B .sndt
SoundTool files.
An MS-DOS/Windows format from tha early '90s.
SoundTool filez probably have tha extension `.SND'.
.TP
.B .sou
An alias fo' the
.B .u8
raw format.
.TP
.B .sox
SoXz natizzle uncompressed PCM format, intended fo' storin (or piping)
audio at intermediate processin points (i.e. between SoX invocations).
It has much up in common wit tha ghettofab WAV, AIFF, n' AU uncompressed PCM
formats yo, but has tha followin specific characteristics: tha PCM samples
are always stored as 32 bit signed integers, tha samplez is stored (by
default) as `natizzle endian', n' tha number of samplez up in tha file is
recorded as a 64-bit integer n' shit.  Comments is also supported.
.SP
See `Special Filenames' in
.BR sox (1)
for examplez of rockin the
.B .sox
format wit `pipes'.
.TP
\fBsunau\fR (optional)
Sun /dev/audio thang driver; supports both playin and
recordin audio.  For example:
.EX
	sox infile \-t sunau /dev/audio
.EE
or
.EX
	sox infile \-t sunau \-U \-c 1 /dev/audio
.EE
for olda sun shit.
.SP
See also
.BR play (1),
.BR rec (1),
and
.BR sox (1)
.BR \-d .
.TP
.B .txw
Yamaha TX-16W sampler.
A file format from a Yamaha samplin keyboard which freestyled IBM-PC
format 3\*d5\(dq floppies. Put ya muthafuckin choppers up if ya feel dis!  Handlez readin of filez which do not have
the sample rate field set ta one of tha expected by lookin at some
other bytes up in tha attack/loop length fields, n' defaultin to
33\ kHz if tha sample rate is still unknown.
.TP
.B .vms
See
.BR .dvms .
.TP
\&\fB.voc\fR (also wit \fB\-t sndfile\fR)
Sound Blasta VOC files.
VOC filez is multi-part n' contain silence parts, looping, and
different sample rates fo' different chunks.
On input, tha silence parts is filled out, loops is rejected,
and sample data wit a freshly smoked up sample rate is rejected.
Silence wit a gangbangin' finger-lickin' different sample rate is generated appropriately.
On output, silence aint detected, nor is impossible sample rates.
SoX supports readin (but not writing) VOC filez wit multiple
blocks, n' filez containin \(*m-law, A-law, n' 2/3/4-bit ADPCM samples.
.TP
.B .vorbis
See
.BR .ogg .
.TP
\&\fB.vox\fR (also wit \fB\-t sndfile\fR)
A headerless file of Dialogic/OKI ADPCM audio data commonly comes wit the
extension .vox.  This ADPCM data has 12-bit precision packed tha fuck into only 4-bits.
.SP
Note: some early Dialogic hardware do not always reset tha ADPCM
encoder all up in tha start of each vox file.  This can result up in clipping
and/or DC offset problems when it comes ta decodin tha audio.  Whilst
lil can be done bout tha clipping, a DC offset can be removed by
passin tha decoded audio all up in a high-pass filter, e.g.:
.EX
	sox input.vox output.wav highpass 10
.EE
.TP
\&\fB.w64\fR (optional)
Sonic Foundryz 64-bit RIFF/WAV format.
.TP
\&\fB.wav\fR (also wit \fB\-t sndfile\fR)
Microsizzlez .WAV RIFF files.
This is tha natizzle audio file format of Windows, n' widely used fo' uncompressed audio.
.SP
Normally \fB.wav\fR filez have all formattin shiznit
in they headers, n' so do not need any format options
specified fo' a input file.  If any are, they will
override tha file header, n' yo big-ass booty is ghon be warned ta dis effect.
Yo ass had betta know what tha fuck yo ass is bustin! Output format
options will cause a gangbangin' format conversion, n' tha \fB.wav\fR
will freestyled appropriately.
.SP
SoX can read n' write linear PCM, floatin point, \(*m-law, A-law, MS ADPCM, n' IMA (or DVI) ADPCM encoded samples.
WAV filez can also contain audio encoded up in nuff other ways (not currently
supported wit SoX) e.g. MP3; up in some cases such a gangbangin' file can still be
read by SoX by overridin tha file type, e.g.
.EX
   play \-t mp3 mp3\-encoded.wav
.EE
Big endian versionz of RIFF files, called RIFX, is also supported.
To write a RIFX file, use the
.B \-B
option wit tha output file options.
.TP
\fBwaveaudio\fR (optional)
MS-Windows natizzle audio thang driver n' shit.  Examples:
.EX
	sox infile \-t waveaudio
	sox infile \-t waveaudio default
	sox infile \-t waveaudio 1
	sox infile \-t waveaudio "High Definizzle Audio Device ("
.EE
If tha thang name is omitted, \fB-1\fR, or \fBdefault\fR, then you
get tha `Microsizzlez Wave Mapper' device.  Wave Mapper means `use the
system default audio devices'.  Yo ass can control what tha fuck `default' means
via tha OS Control Panel.
.SP
If tha thang name given is some other number, you git dat audio
device by index; so recordin wit thang name \fB0\fR would git the
first input thang (like tha microphone), \fB1\fR would git the
second (like line in), etc.  Playback rockin \fB0\fR will git the
first output thang (usually tha only audio device).
.SP
If tha thang name given is suttin' other than a number, SoX tries
to match it (maximum 31 characters) against tha namez of tha available
devices.
.SP
See also
.BR play (1),
.BR rec (1),
and
.BR sox (1)
.BR \-d .
.TP
.B .wavpcm
A non-standard yo, but widely used, variant of
.BR .wav .
Some applications cannot read a standard WAV file header fo' PCM-encoded
data wit sample-size pimped outa than 16-bits or wit mo' than two
channels yo, but can read a non-standard
WAV header n' shit.  It be likely dat such applications will eventually be
updated ta support tha standard header yo, but up in tha mean time, dis SoX
format can be used ta create filez wit tha non-standard header that
should work wit these applications.  (Note dat SoX will automatically
detect n' read WAV filez wit tha non-standard header.)
.SP
Da most common use of dis file-type is likely ta be along tha following
lines:
.EX
	sox infile.any \-t wavpcm \-s outfile.wav
.EE
.TP
\&\fB.wv\fR (optional)
WavPack lossless audio compression. I aint talkin' bout chicken n' gravy biatch.  Note that, when converting
.B .wav
to dis format n' back again,
the RIFF header aint necessarily preserved losslessly (though tha audio is).
.TP
\&\fB.wve\fR (also wit \fB\-t sndfile\fR)
Psion 8-bit A-law.  Used on Psion SIBO PDAs (Series 3 n' similar).
This format is deprecated up in SoX yo, but will continue ta be used in
libsndfile.
.TP
.B .xa
Maxis XA files.
These is 16-bit ADPCM audio filez used by Maxis games.  Freestylin .xa filez is
currently not supported, although addin write support should not be hella
difficult.
.TP
\&\fB.xi\fR (optional)
Fasttracker 2 Extended Instrument format.
.SH SEE ALSO
.BR sox (1),
.BR soxi (1),
.BR libsox (3),
.BR octave (1),
.BR wget (1)
.SP
Da SoX wizzy page at http://sox.sourceforge.net
.br
SoX scriptin examplez at http://sox.sourceforge.net/Docs/Scripts
.SS References
.TP
[1]
Wikipizzle,
.IR "M3U" ,
http://en.wikipedia.org/wiki/M3U
.TP
[2]
Wikipizzle,
.IR "PLS" ,
http://en.wikipedia.org/wiki/PLS_(file_format)
.SH LICENSE
Copyright 1998\-2013 Chris Bagwell n' SoX Contributors.
.br
Copyright 1991 Lizzle Norskog n' Sundry Contributors.
.SH AUTHORS
Chris Bagwell (cbagwell@users.sourceforge.net).
Other authors n' contributors is listed up in tha ChizzleLog file that
is distributed wit tha source code.
