'\" t
.\"     Title: dracut.cmdline
.\"    Author: [see tha "AUTHOR" section]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 03/19/2014
.\"    Manual: dracut
.\"    Source: dracut
.\"  Language: Gangsta
.\"
.TH "DRACUT\&.CMDLINE" "7" "03/19/2014" "dracut" "dracut"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
dracut.cmdline \- dracut kernel command line options
.SH "DESCRIPTION"
.sp
Da root thang used by tha kernel is specified up in tha boot configuration file on tha kernel command line, as always\&.
.sp
Da traditionizzle \fIroot=/dev/sda1\fR steez thang justification be allowed yo, but not encouraged\&. Da root thang should betta be identified by LABEL or UUID\&. If a label is used, as up in \fIroot=LABEL=<label_of_root>\fR tha initramfs will search all available devices fo' a gangbangin' filesystem wit tha appropriate label, n' mount dat thang as tha root filesystem\&. \fIroot=UUID=<uuidnumber>\fR will mount tha partizzle wit dat UUID as tha root filesystem\&.
.sp
In tha followin all kernel command line parameters, which is processed by dracut, is busted lyrics about\&.
.sp
"rd\&.*" parametas mentioned without "=" is boolean parameters\&. They can be turned on/off by settin dem ta {0|1}\&. If tha assignment wit "=" is missin "=1" is implied\&. For example \fIrd\&.info\fR can be turned off wit \fIrd\&.info=0\fR or turned on wit \fIrd\&.info=1\fR or \fIrd\&.info\fR\&. Da last value up in tha kernel command line is tha value, which is honored\&.
.SS "Standard"
.PP
\fBinit=\fR\fI<path ta real init>\fR
.RS 4
specify tha path ta tha init programm ta be started afta tha initramfs has finished
.RE
.PP
\fBroot=\fR\fI<path ta blockdevice>\fR
.RS 4
specify tha block thang ta use as tha root filesystem\&.
.PP
\fBExample\fR. 
.sp
.if n \{\
.RS 4
.\}
.nf
root=/dev/sda1
root=/dev/disk/by\-path/pci\-0000:00:1f\&.1\-scsi\-0:0:1:0\-part1
root=/dev/disk/by\-label/Root
root=LABEL=Root
root=/dev/disk/by\-uuid/3f5ad593\-4546\-4a94\-a374\-bcfb68aa11f7
root=UUID=3f5ad593\-4546\-4a94\-a374\-bcfb68aa11f7
root=PARTUUID=3f5ad593\-4546\-4a94\-a374\-bcfb68aa11f7
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
\fBrootfstype=\fR\fI<filesystem type>\fR
.RS 4
"auto" if not specified\&.
.PP
\fBExample\fR. 
.sp
.if n \{\
.RS 4
.\}
.nf
rootfstype=ext3
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
\fBrootflags=\fR\fI<mount options>\fR
.RS 4
specify additionizzle mount options fo' tha root filesystem\&. If not set,
\fI/etc/fstab\fR
of tha real root is ghon be parsed fo' special mount options n' mounted accordingly\&.
.RE
.PP
\fBro\fR
.RS 4
force mounting
\fI/\fR
and
\fI/usr\fR
(if it aint nuthin but a separate device) read\-only\&. If none of ro n' rw is present, both is mounted accordin to
\fI/etc/fstab\fR\&.
.RE
.PP
\fBrw\fR
.RS 4
force mounting
\fI/\fR
and
\fI/usr\fR
(if it aint nuthin but a separate device) read\-write\&. Right back up in yo muthafuckin ass. See also ro option\&.
.RE
.PP
\fBrootfallback=\fR\fI<path ta blockdevice>\fR
.RS 4
specify tha block thang ta use as tha root filesystem, if tha aiiight root cannot be found\&. This can only be a simple block thang wit a simple file system, fo' which tha filesystem driver is either compiled in, or added manually ta tha initramfs\&. This parameta can be specified multiple times\&.
.RE
.PP
\fBrd\&.auto\fR \fBrd\&.auto=1\fR
.RS 4
enable autoassembly of special devices like cryptoLUKS, dmraid, mdraid or lvm\&. Default is off az of dracut version >= 024\&.
.RE
.PP
\fBrd\&.fstab=0\fR
.RS 4
do not honor special mount options fo' tha root filesystem found in
\fI/etc/fstab\fR
of tha real root\&.
.RE
.PP
\fBresume=\fR\fI<path ta resume partition>\fR
.RS 4
resume from a swap partition
.PP
\fBExample\fR. 
.sp
.if n \{\
.RS 4
.\}
.nf
resume=/dev/disk/by\-path/pci\-0000:00:1f\&.1\-scsi\-0:0:1:0\-part1
resume=/dev/disk/by\-uuid/3f5ad593\-4546\-4a94\-a374\-bcfb68aa11f7
resume=UUID=3f5ad593\-4546\-4a94\-a374\-bcfb68aa11f7
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
\fBrd\&.skipfsck\fR
.RS 4
skip fsck fo' rootfs and
\fI/usr\fR\&. If you\(cqre mounting
\fI/usr\fR
read\-only n' tha init system performs fsck before remount, you might wanna use dis option ta avoid duplication\&.
.RE
.SS "Misc"
.PP
\fBrd\&.driver\&.blacklist=\fR\fI<drivername>\fR[,\fI<drivername>\fR,\&...]
.RS 4
do not load kernel module <drivername>\&. This parameta can be specified multiple times\&.
.RE
.PP
\fBrd\&.driver\&.pre=\fR\fI<drivername>\fR[,\fI<drivername>\fR,\&...]
.RS 4
force loadin kernel module <drivername>\&. This parameta can be specified multiple times\&.
.RE
.PP
\fBrd\&.driver\&.post=\fR\fI<drivername>\fR[,\fI<drivername>\fR,\&...]
.RS 4
force loadin kernel module <drivername> afta all automatic loadin modulez done been loaded\&. This parameta can be specified multiple times\&.
.RE
.PP
\fBrd\&.retry=\fR\fI<seconds>\fR
.RS 4
specify how tha fuck long dracut should wait fo' devices ta appear\&. Da default is 30 seconds\& fo' realz. Afta 2/3 of tha time, degraded raidz is force started\&. If you have hardware, which takes a straight-up long time ta announce its drives, you might wanna extend dis value\&.
.RE
.PP
\fBrd\&.noverifyssl\fR
.RS 4
accept self\-signed certificates fo' ssl downloads\&.
.RE
.PP
\fBrd\&.ctty=\fR\fI<terminal device>\fR
.RS 4
specify tha controllin terminal fo' tha console\&. This is useful, if you have multiple "console=" arguments\&.
.RE
.SS "Debug"
.sp
If yo ass is dropped ta a emergency shell, tha file \fI/run/initramfs/rdsosreport\&.txt\fR is pimped, which can be safed ta a (to be mounted by hand) partizzle (usually /boot) or a STD stick\& fo' realz. Additionizzle debuggin info can be produced by addin \fBrd\&.debug\fR ta tha kernel command line\&. \fI/run/initramfs/rdsosreport\&.txt\fR gotz nuff all logs n' tha output of some tools\&. Well shiiiit, it should be attached ta any report bout dracut problems\&.
.PP
\fBrd\&.info\fR
.RS 4
print shiznital output though "quiet" is set
.RE
.PP
\fBrd\&.shell\fR
.RS 4
allow droppin ta a gangbangin' finger-lickin' dirty-ass shell, if root mountin fails
.RE
.PP
\fBrd\&.debug\fR
.RS 4
set \-x fo' tha dracut shell\&. If systemd be actizzle up in tha initramfs, all output is logged ta tha systemd journal, which you can inspect wit "journalctl \-ab"\&. If systemd aint active, tha logs is freestyled ta dmesg and
\fI/run/initramfs/init\&.log\fR\&. If "quiet" is set, it also logs ta tha console\&.
.RE
.PP
\fBrd\&.memdebug=[0\-3]\fR
.RS 4
Print memory usage info at various points, set tha verbose level from 0 ta 3\&.
.sp
.if n \{\
.RS 4
.\}
.nf
Higher level means mo' debuggin output:
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.RS 4
.\}
.nf
    0 \- no output
    1 \- partial /proc/meminfo
    2 \- /proc/meminfo
    3 \- /proc/meminfo + /proc/slabinfo
.fi
.if n \{\
.RE
.\}
.RE
.PP
\fBrd\&.break\fR
.RS 4
drop ta a gangbangin' finger-lickin' dirty-ass shell all up in tha end
.RE
.PP
\fBrd\&.break=\fR\fI{cmdline|pre\-udev|pre\-trigger|initqueue|pre\-mount|mount|pre\-pivot|cleanup}\fR
.RS 4
drop ta a gangbangin' finger-lickin' dirty-ass shell on defined breakpoint
.RE
.PP
\fBrd\&.udev\&.info\fR
.RS 4
set udev ta loglevel info
.RE
.PP
\fBrd\&.udev\&.debug\fR
.RS 4
set udev ta loglevel debug
.RE
.SS "I18N"
.PP
\fBrd\&.vconsole\&.keymap=\fR\fI<keymap base file name>\fR
.RS 4
keyboard translation table loaded by loadkeys; taken from keymaps directory; is ghon be freestyled as KEYMAP to
\fI/etc/vconsole\&.conf\fR
in tha initramfs\&.
.PP
\fBExample\fR. 
.sp
.if n \{\
.RS 4
.\}
.nf
rd\&.vconsole\&.keymap=de\-latin1\-nodeadkeys
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
\fBrd\&.vconsole\&.keymap\&.ext=\fR\fI<list of keymap base file names>\fR
.RS 4
list of extra keymaps ta bo loaded (sep\&. by space); is ghon be freestyled as EXT_KEYMAP to
\fI/etc/vconsole\&.conf\fR
in tha initramfs
.RE
.PP
\fBrd\&.vconsole\&.unicode\fR
.RS 4
boolean, indicatin UTF\-8 mode; is ghon be freestyled as UNICODE to
\fI/etc/vconsole\&.conf\fR
in tha initramfs
.RE
.PP
\fBrd\&.vconsole\&.font=\fR\fI<font base file name>\fR
.RS 4
console font; taken from consolefonts directory; is ghon be freestyled as FONT to
\fI/etc/vconsole\&.conf\fR
in tha initramfs\&.
.PP
\fBExample\fR. 
.sp
.if n \{\
.RS 4
.\}
.nf
rd\&.vconsole\&.font=LatArCyrHeb\-16
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
\fBrd\&.vconsole\&.font\&.map=\fR\fI<console map base file name>\fR
.RS 4
see description of
\fI\-m\fR
parameta up in setfont manual; taken from consoletrans directory; is ghon be freestyled as FONT_MAP to
\fI/etc/vconsole\&.conf\fR
in tha initramfs
.RE
.PP
\fBrd\&.vconsole\&.font\&.unimap=\fR\fI<unicode table base file name>\fR
.RS 4
see description of
\fI\-u\fR
parameta up in setfont manual; taken from unimaps directory; is ghon be freestyled as FONT_UNIMAP to
\fI/etc/vconsole\&.conf\fR
in tha initramfs
.RE
.PP
\fBrd\&.locale\&.LANG=\fR\fI<locale>\fR
.RS 4
taken from tha environment; if no UNICODE is defined we set its value up in basiz of LANG value (whether it endz wit "\&.utf8" (or similar) or not); is ghon be freestyled as LANG to
\fI/etc/locale\&.conf\fR
in tha initramfs\&.
.PP
\fBExample\fR. 
.sp
.if n \{\
.RS 4
.\}
.nf
rd\&.locale\&.LANG=pl_PL\&.utf8
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
\fBrd\&.locale\&.LC_ALL=\fR\fI<locale>\fR
.RS 4
taken from tha environment; is ghon be freestyled as LC_ALL to
\fI/etc/locale\&.conf\fR
in tha initramfs
.RE
.SS "LVM"
.PP
\fBrd\&.lvm=0\fR
.RS 4
disable LVM detection
.RE
.PP
\fBrd\&.lvm\&.vg=\fR\fI<volume crew name>\fR
.RS 4
only activate tha volume crews wit tha given name\&. rd\&.lvm\&.vg can be specified multiple times on tha kernel command line\&.
.RE
.PP
\fBrd\&.lvm\&.lv=\fR\fI<logical volume name>\fR
.RS 4
only activate tha logical volumes wit tha given name\&. rd\&.lvm\&.lv can be specified multiple times on tha kernel command line\&.
.RE
.PP
\fBrd\&.lvm\&.conf=0\fR
.RS 4
remove any
\fI/etc/lvm/lvm\&.conf\fR, which may exist up in tha initramfs
.RE
.SS "crypto LUKS"
.PP
\fBrd\&.luks=0\fR
.RS 4
disable crypto LUKS detection
.RE
.PP
\fBrd\&.luks\&.uuid=\fR\fI<luks uuid>\fR
.RS 4
only activate tha LUKS partitions wit tha given UUID\& fo' realz. Any "luks\-" of tha LUKS UUID is removed before comparin to
\fI<luks uuid>\fR\&. Da comparisons also matches, if
\fI<luks uuid>\fR
is only tha beginnin of tha LUKS UUID, so you don\(cqt gotta specify tha full UUID\&. This parameta can be specified multiple times\&.
.RE
.PP
\fBrd\&.luks\&.allow\-discards=\fR\fI<luks uuid>\fR
.RS 4
Allow rockin of discardz (TRIM) requests fo' LUKS partitions wit tha given UUID\& fo' realz. Any "luks\-" of tha LUKS UUID is removed before comparin to
\fI<luks uuid>\fR\&. Da comparisons also matches, if
\fI<luks uuid>\fR
is only tha beginnin of tha LUKS UUID, so you don\(cqt gotta specify tha full UUID\&. This parameta can be specified multiple times\&.
.RE
.PP
\fBrd\&.luks\&.allow\-discards\fR
.RS 4
Allow rockin of discardz (TRIM) requests on all LUKS partitions\&.
.RE
.PP
\fBrd\&.luks\&.crypttab=0\fR
.RS 4
do not check, if LUKS partizzle is in
\fI/etc/crypttab\fR
.RE
.SS "crypto LUKS \- key on removable thang support"
.PP
\fBrd\&.luks\&.key=\fR\fI<keypath>\fR:\fI<keydev>\fR:\fI<luksdev>\fR
.RS 4
\fIkeypath\fR
is a path ta key file ta look for\&. It\(cqs REQUIRED\&. When
\fIkeypath\fR
endz with
\fI\&.gpg\fR
it\(cqs considered ta be key encrypted symmetrically wit GPG\&. Yo ass is ghon be prompted fo' password on boot\&. GPG support comes with
\fIcrypt\-gpg\fR
module which need ta be added explicitly\&.
.sp
\fIkeydev\fR
is a thang on which key file resides\&. Well shiiiit, it might be kernel name of devices (should start wit "/dev/"), UUID (prefixed wit "UUID=") or label (prefix wit "LABEL=")\&. Yo ass don\(cqt gotta specify full UUID\&. Just its beginnin will suffice, even if its ambiguous\& fo' realz. All matchin devices is ghon be probed\&. This parameta is recommended yo, but not required\&. If not present, all block devices is ghon be probed, which may hella increase boot time\&.
.sp
If
\fIluksdev\fR
is given, tha specified key will only be applied fo' dat LUKS device\&. Possible joints is tha same as for
\fIkeydev\fR\&. Unless you have nuff muthafuckin LUKS devices, you don\(cqt gotta specify dis parameter\&. Da simplest usage is:
.PP
\fBExample\fR. 
.sp
.if n \{\
.RS 4
.\}
.nf
rd\&.luks\&.key=/foo/bar\&.key
.fi
.if n \{\
.RE
.\}
.sp

As you see, you can skip colons up in such a cold-ass lil case\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
dracut pipes key ta cryptsetup with
\fI\-d \-\fR
argument, therefore you need ta pipe ta crypsetup luksFormat with
\fI\-d \-\fR, too!
.sp
Here bigs up example fo' key encrypted wit GPG:
.sp
.if n \{\
.RS 4
.\}
.nf
gpg \-\-quiet \-\-decrypt rootkey\&.gpg | \e
cryptsetup \-d \- \-v \-\-cipher serpent\-cbc\-essiv:sha256 \e
\-\-key\-size 256 luksFormat /dev/sda3
.fi
.if n \{\
.RE
.\}
.sp
If you use plain keys, just add path to
\fI\-d\fR
option:
.sp
.if n \{\
.RS 4
.\}
.nf
cryptsetup \-d rootkey\&.key \-v \-\-cipher serpent\-cbc\-essiv:sha256 \e
 \-\-key\-size 256 luksFormat /dev/sda3
.fi
.if n \{\
.RE
.\}
.sp .5v
.RE
.RE
.SS "MD RAID"
.PP
\fBrd\&.md=0\fR
.RS 4
disable MD RAID detection
.RE
.PP
\fBrd\&.md\&.imsm=0\fR
.RS 4
disable MD RAID fo' imsm/isw raids, use DM RAID instead
.RE
.PP
\fBrd\&.md\&.ddf=0\fR
.RS 4
disable MD RAID fo' SNIA ddf raids, use DM RAID instead
.RE
.PP
\fBrd\&.md\&.conf=0\fR
.RS 4
ignore mdadm\&.conf included up in initramfs
.RE
.PP
\fBrd\&.md\&.waitclean=1\fR
.RS 4
wait fo' any resync, recovery, or reshape activitizzle ta finish before continuing
.RE
.PP
\fBrd\&.md\&.uuid=\fR\fI<md raid uuid>\fR
.RS 4
only activate tha raid sets wit tha given UUID\&. This parameta can be specified multiple times\&.
.RE
.SS "DM RAID"
.PP
\fBrd\&.dm=0\fR
.RS 4
disable DM RAID detection
.RE
.PP
\fBrd\&.dm\&.uuid=\fR\fI<dm raid uuid>\fR
.RS 4
only activate tha raid sets wit tha given UUID\&. This parameta can be specified multiple times\&.
.RE
.SS "FIPS"
.PP
\fBrd\&.fips\fR
.RS 4
enable FIPS
.RE
.PP
\fBboot=\fR\fI<boot device>\fR
.RS 4
specify tha device, where /boot is located\&.
.PP
\fBExample\fR. 
.sp
.if n \{\
.RS 4
.\}
.nf
boot=/dev/sda1
boot=/dev/disk/by\-path/pci\-0000:00:1f\&.1\-scsi\-0:0:1:0\-part1
boot=UUID=<uuid>
boot=LABEL=<label>
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
\fBrd\&.fips\&.skipkernel\fR
.RS 4
skip checksum check of tha kernel image\&. Useful, if tha kernel image aint up in a separate boot partition\&.
.RE
.SS "Network"
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBImportant\fR
.ps -1
.br
.sp
It be recommended ta either bind a intercourse ta a MAC wit tha \fBifname\fR argument, or ta use tha systemd\-udevd predictable network intercourse names\&.
.sp
Predictable network intercourse thang names based on:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
firmware/bios\-provided index numbers fo' on\-board devices
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
firmware\-provided pci\-express hotplug slot index number
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
physical/geographical location of tha hardware
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
the intercourse\(cqs MAC address
.RE
.sp
See: \m[blue]\fBhttp://www\&.freedesktop\&.org/wiki/Software/systemd/PredictableNetworkInterfaceNames\fR\m[]
.sp
Two characta prefixes based on tha type of intercourse:
.PP
en
.RS 4
ethernet
.RE
.PP
wl
.RS 4
wlan
.RE
.PP
ww
.RS 4
wwan
.RE
.sp
Type of names:
.PP
o<index>
.RS 4
on\-board thang index number
.RE
.PP
s<slot>[f<function>][d<dev_id>]
.RS 4
hotplug slot index number
.RE
.PP
x<MAC>
.RS 4
MAC address
.RE
.PP
[P<domain>]p<bus>s<slot>[f<function>][d<dev_id>]
.RS 4
PCI geographical location
.RE
.PP
[P<domain>]p<bus>s<slot>[f<function>][u<port>][\&.\&.][c<config>][i<interface>]
.RS 4
STD port number chain
.RE
.sp
All multi\-function PCI devices will carry tha [f<function>] number up in tha thang name, includin tha function 0 device\&.
.sp
When rockin PCI geography, Da PCI domain is only prepended when it aint 0\&.
.sp
For STD devices tha full chain of port numberz of hubs is composed\&. If tha name gets longer than tha maximum number of 15 characters, tha name aint exported\&. Da usual STD configuration == 1 n' intercourse == 0 joints is suppressed\&.
.PP
PCI ethernet card wit firmware index "1"
.RS 4
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
eno1
.RE
.RE
.PP
PCI ethernet card up in hotplug slot wit firmware index number
.RS 4
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
ens1
.RE
.RE
.PP
PCI ethernet multi\-function card wit 2 ports
.RS 4
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
enp2s0f0
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
enp2s0f1
.RE
.RE
.PP
PCI wlan card
.RS 4
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
wlp3s0
.RE
.RE
.PP
STD built\-in 3G modem
.RS 4
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
wwp0s29u1u4i6
.RE
.RE
.PP
STD Andrizzle phone
.RS 4
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
enp0s29u1u2
.RE
.RE
.sp .5v
.RE
.PP
\fBip=\fR\fI{dhcp|on|any|dhcp6|auto6|ibft}\fR
.RS 4
.PP
dhcp|on|any
.RS 4
get ip from dhcp server from all intercourses\&. If root=dhcp, loop sequentially all up in all intercourses (eth0, eth1, \&...) n' use tha straight-up original gangsta wit a valid DHCP root\-path\&.
.RE
.PP
auto6
.RS 4
IPv6 autoconfiguration
.RE
.PP
dhcp6
.RS 4
IPv6 DHCP
.RE
.PP
ibft
.RS 4
iBFT autoconfiguration
.RE
.RE
.PP
\fBip=\fR\fI<interface>\fR:\fI{dhcp|on|any|dhcp6|auto6}\fR[:[\fI<mtu>\fR][:\fI<macaddr>\fR]]
.RS 4
This parameta can be specified multiple times\&.
.PP
dhcp|on|any|dhcp6
.RS 4
get ip from dhcp server on a specific intercourse
.RE
.PP
auto6
.RS 4
do IPv6 autoconfiguration
.RE
.PP
<macaddr>
.RS 4
optionally
\fBset\fR
<macaddr> on tha <interface>\&. This cannot be used up in conjunction wit the
\fBifname\fR
argument fo' tha same <interface>\&.
.RE
.RE
.PP
\fBip=\fR\fI<client\-IP>\fR:[\fI<peer>\fR]:\fI<gateway\-IP>\fR:\fI<netmask>\fR:\fI<client_hostname>\fR:\fI<interface>\fR:\fI{none|off|dhcp|on|any|dhcp6|auto6|ibft}\fR:[:[\fI<mtu>\fR][:\fI<macaddr>\fR]]
.RS 4
explicit network configuration\&. If you want do define a IPv6 address, put it up in brackets (e\&.g\&. [2001:DB8::1])\&. This parameta can be specified multiple times\&.
\fI<peer>\fR
is optionizzle n' is tha address of tha remote endpoint fo' pointopoint intercourses n' it may be followed by a slash n' a thugged-out decimal number, encodin tha network prefix length\&.
.PP
<macaddr>
.RS 4
optionally
\fBset\fR
<macaddr> on tha <interface>\&. This cannot be used up in conjunction wit the
\fBifname\fR
argument fo' tha same <interface>\&.
.RE
.RE
.PP
\fBip=\fR\fI<client\-IP>\fR:[\fI<peer>\fR]:\fI<gateway\-IP>\fR:\fI<netmask>\fR:\fI<client_hostname>\fR:\fI<interface>\fR:\fI{none|off|dhcp|on|any|dhcp6|auto6|ibft}\fR[:[\fI<dns1>\fR][:\fI<dns2>\fR]]
.RS 4
explicit network configuration\&. If you want do define a IPv6 address, put it up in brackets (e\&.g\&. [2001:DB8::1])\&. This parameta can be specified multiple times\&.
\fI<peer>\fR
is optionizzle n' is tha address of tha remote endpoint fo' pointopoint intercourses n' it may be followed by a slash n' a thugged-out decimal number, encodin tha network prefix length\&.
.RE
.PP
\fBifname=\fR\fI<interface>\fR:\fI<MAC>\fR
.RS 4
Assign network thang name <interface> (ie "bootnet") ta tha NIC wit MAC <MAC>\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBWarning\fR
.ps -1
.br
Do
\fBnot\fR
use tha default kernel namin scheme fo' tha intercourse name, as it can conflict wit tha kernel names\&. Right back up in yo muthafuckin ass. So, don\(cqt use "eth[0\-9]+" fo' tha intercourse name\&. Betta name it "bootnet" or "bluesocket"\&.
.sp .5v
.RE
.RE
.PP
\fBbootdev=\fR\fI<interface>\fR
.RS 4
specify network intercourse ta use routin n' netroot shiznit from\&. Required if multiple ip= lines is used\&.
.RE
.PP
\fBBOOTIF=\fR\fI<MAC>\fR
.RS 4
specify network intercourse ta use routin n' netroot shiznit from\&.
.RE
.PP
\fBrd\&.bootif=0\fR
.RS 4
Disable BOOTIF parsing, which is provided by PXE
.RE
.PP
\fBnameserver=\fR\fI<IP>\fR [\fBnameserver=\fR\fI<IP>\fR \&...]
.RS 4
specify nameserver(s) ta use
.RE
.PP
\fBbiosdevname=0\fR
.RS 4
boolean, turn off biosdevname network intercourse renaming
.RE
.PP
\fBrd\&.neednet=1\fR
.RS 4
boolean, brang up network even without netroot set
.RE
.PP
\fBvlan=\fR\fI<vlanname>\fR:\fI<phydevice>\fR
.RS 4
Setup vlan thang named <vlanname> on <phydeivce>\&. We support tha four stylez of vlan names: VLAN_PLUS_VID (vlan0005), VLAN_PLUS_VID_NO_PAD (vlan5), DEV_PLUS_VID (eth0\&.0005), DEV_PLUS_VID_NO_PAD (eth0\&.5)
.RE
.PP
\fBbond=\fR\fI<bondname>\fR[:\fI<bondslaves>\fR:[:\fI<options>\fR]]
.RS 4
Setup bondin thang <bondname> on top of <bondslaves>\&. <bondslaves> be a cold-ass lil comma\-separated list of physical (ethernet) intercourses\&. <options> be a cold-ass lil comma\-separated list on bondin options (modinfo bondin fo' details) up in format compatible wit initscripts\&. If <options> includes multi\-valued arp_ip_target option, then its joints should be separated by semicolon\&. Bond without parametas assumes bond=bond0:eth0,eth1:mode=balance\-rr
.RE
.PP
\fBteam=\fR\fI<teammaster>\fR:\fI<teamslaves>\fR
.RS 4
Setup crew thang <teammaster> on top of <teamslaves>\&. <teamslaves> be a cold-ass lil comma\-separated list of physical (ethernet) intercourses\&.
.RE
.PP
\fBbridge=\fR\fI<bridgename>\fR:\fI<ethnames>\fR
.RS 4
Setup bridge <bridgename> wit <ethnames>\&. <ethnames> be a cold-ass lil comma\-separated list of physical (ethernet) intercourses\&. Bridge without parametas assumes bridge=br0:eth0
.RE
.SS "NFS"
.PP
\fBroot=\fR[\fI<server\-ip>\fR:]\fI<root\-dir>\fR[:\fI<nfs\-options>\fR]
.RS 4
mount nfs share from <server\-ip>:/<root\-dir>, if no server\-ip is given, use dhcp next_server\&. if server\-ip be a IPv6 address it has ta be put up in brackets, e\&.g\&. [2001:DB8::1]\&. NFS options can be appended wit tha prefix ":" or "," n' is seperated by ","\&.
.RE
.PP
\fBroot=\fRnfs:[\fI<server\-ip>\fR:]\fI<root\-dir>\fR[:\fI<nfs\-options>\fR], \fBroot=\fRnfs4:[\fI<server\-ip>\fR:]\fI<root\-dir>\fR[:\fI<nfs\-options>\fR], \fBroot=\fR\fI{dhcp|dhcp6}\fR
.RS 4
root=dhcp ridin' solo directs initrd ta peep tha DHCP root\-path where NFS options can be specified\&.
.PP
\fBExample\fR. 
.sp
.if n \{\
.RS 4
.\}
.nf
    root\-path=<server\-ip>:<root\-dir>[,<nfs\-options>]
    root\-path=nfs:<server\-ip>:<root\-dir>[,<nfs\-options>]
    root\-path=nfs4:<server\-ip>:<root\-dir>[,<nfs\-options>]
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
\fBroot=\fR\fI/dev/nfs\fR nfsroot=[\fI<server\-ip>\fR:]\fI<root\-dir>\fR[:\fI<nfs\-options>\fR]
.RS 4
\fIDeprecated!\fR
kernel Documentation_/filesystems/nfsroot\&.txt_ defines dis method\&. This is supported by dracut yo, but not recommended\&.
.RE
.PP
\fBrd\&.nfs\&.domain=\fR\fI<NFSv4 domain name>\fR
.RS 4
Set tha NFSv4 domain name\&. Will overwrite tha settings in
\fI/etc/idmap\&.conf\fR\&.
.RE
.SS "CIFS"
.PP
\fBroot=\fRcifs://[\fI<username>\fR[:\fI<password>\fR]@]\fI<server\-ip>\fR:\fI<root\-dir>\fR
.RS 4
mount cifs share from <server\-ip>:/<root\-dir>, if no server\-ip is given, use dhcp next_server\&. if server\-ip be a IPv6 address it has ta be put up in brackets, e\&.g\&. [2001:DB8::1]\&. If a username or password is not specified as part of tha root, then they must be passed on tha command line all up in cifsuser/cifspass\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBWarning\fR
.ps -1
.br
Passwordz specified on tha kernel command line is visible fo' all playas via tha file
\fI/proc/cmdline\fR
and via dmesg or can be sniffed on tha network, when rockin DHCP wit DHCP root\-path\&.
.sp .5v
.RE
.RE
.PP
\fBcifsuser\fR=\fI<username>\fR
.RS 4
Set tha cifs username, if not specified as part of tha root\&.
.RE
.PP
\fBcifspass\fR=\fI<password>\fR
.RS 4
Set tha cifs password, if not specified as part of tha root\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBWarning\fR
.ps -1
.br
Passwordz specified on tha kernel command line is visible fo' all playas via tha file
\fI/proc/cmdline\fR
and via dmesg or can be sniffed on tha network, when rockin DHCP wit DHCP root\-path\&.
.sp .5v
.RE
.RE
.SS "iSCSI"
.PP
\fBroot=\fRiscsi:[\fI<username>\fR:\fI<password>\fR[:\fI<reverse>\fR:\fI<password>\fR]@][\fI<servername>\fR]:[\fI<protocol>\fR]:[\fI<port>\fR][:[\fI<iscsi_iface_name>\fR]:[\fI<netdev_name>\fR]]:[\fI<LUN>\fR]:\fI<targetname>\fR
.RS 4
protocol defaults ta "6", LUN defaults ta "0"\&. If tha "servername" field is provided by BOOTP or DHCP, then dat field is used up in conjunction wit other associated fieldz ta contact tha boot server up in tha Boot stage\&. But fuck dat shiznit yo, tha word on tha street is dat if tha "servername" field aint provided, then tha "targetname" field is then used up in tha Discovery Service stage up in conjunction wit other associated fields\&. Right back up in yo muthafuckin ass. See
\m[blue]\fBrfc4173\fR\m[]\&\s-2\u[1]\d\s+2\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBWarning\fR
.ps -1
.br
Passwordz specified on tha kernel command line is visible fo' all playas via tha file
\fI/proc/cmdline\fR
and via dmesg or can be sniffed on tha network, when rockin DHCP wit DHCP root\-path\&.
.sp .5v
.RE
.PP
\fBExample\fR. 
.sp
.if n \{\
.RS 4
.\}
.nf
root=iscsi:192\&.168\&.50\&.1::::iqn\&.2009\-06\&.dracut:target0
.fi
.if n \{\
.RE
.\}
.sp

If servername be a IPv6 address, it has ta be put up in brackets:
.PP
\fBExample\fR. 
.sp
.if n \{\
.RS 4
.\}
.nf
root=iscsi:[2001:DB8::1]::::iqn\&.2009\-06\&.dracut:target0
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
\fBroot=\fR\fI???\fR \fBnetroot=\fRiscsi:[\fI<username>\fR:\fI<password>\fR[:\fI<reverse>\fR:\fI<password>\fR]@][\fI<servername>\fR]:[\fI<protocol>\fR]:[\fI<port>\fR][:[\fI<iscsi_iface_name>\fR]:[\fI<netdev_name>\fR]]:[\fI<LUN>\fR]:\fI<targetname>\fR \&...
.RS 4
multiple netroot options allow settin up multiple iscsi disks:
.PP
\fBExample\fR. 
.sp
.if n \{\
.RS 4
.\}
.nf
root=UUID=12424547
netroot=iscsi:192\&.168\&.50\&.1::::iqn\&.2009\-06\&.dracut:target0
netroot=iscsi:192\&.168\&.50\&.1::::iqn\&.2009\-06\&.dracut:target1
.fi
.if n \{\
.RE
.\}
.sp

If servername be a IPv6 address, it has ta be put up in brackets:
.PP
\fBExample\fR. 
.sp
.if n \{\
.RS 4
.\}
.nf
netroot=iscsi:[2001:DB8::1]::::iqn\&.2009\-06\&.dracut:target0
.fi
.if n \{\
.RE
.\}
.sp
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBWarning\fR
.ps -1
.br
Passwordz specified on tha kernel command line is visible fo' all playas via tha file
\fI/proc/cmdline\fR
and via dmesg or can be sniffed on tha network, when rockin DHCP wit DHCP root\-path\&. Yo ass may wanna use rd\&.iscsi\&.firmware\&.
.sp .5v
.RE
.RE
.PP
\fBroot=\fR\fI???\fR \fBrd\&.iscsi\&.initiator=\fR\fI<initiator>\fR \fBrd\&.iscsi\&.target\&.name=\fR\fI<target name>\fR \fBrd\&.iscsi\&.target\&.ip=\fR\fI<target ip>\fR \fBrd\&.iscsi\&.target\&.port=\fR\fI<target port>\fR \fBrd\&.iscsi\&.target\&.group=\fR\fI<target group>\fR \fBrd\&.iscsi\&.username=\fR\fI<username>\fR \fBrd\&.iscsi\&.password=\fR\fI<password>\fR \fBrd\&.iscsi\&.in\&.username=\fR\fI<in username>\fR \fBrd\&.iscsi\&.in\&.password=\fR\fI<in password>\fR
.RS 4
manually specify all iscsistart parameta (see
\fBiscsistart\ \&\-\-help\fR)
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBWarning\fR
.ps -1
.br
Passwordz specified on tha kernel command line is visible fo' all playas via tha file
\fI/proc/cmdline\fR
and via dmesg or can be sniffed on tha network, when rockin DHCP wit DHCP root\-path\&. Yo ass may wanna use rd\&.iscsi\&.firmware\&.
.sp .5v
.RE
.RE
.PP
\fBroot=\fR\fI???\fR \fBnetroot=\fRiscsi \fBrd\&.iscsi\&.firmware=1\fR
.RS 4
will read tha iscsi parameta from tha BIOS firmware
.RE
.PP
\fBrd\&.iscsi\&.param=\fR\fI<param>\fR
.RS 4
<param> is ghon be passed as "\-\-param <param>" ta iscsistart\&. This parameta can be specified multiple times\&.
.PP
\fBExample\fR. 
.sp
.if n \{\
.RS 4
.\}
.nf
"netroot=iscsi rd\&.iscsi\&.firmware=1 rd\&.iscsi\&.param=node\&.session\&.timeo\&.replacement_timeout=30"
.fi
.if n \{\
.RE
.\}
.sp

will result in
.sp
.if n \{\
.RS 4
.\}
.nf
iscsistart \-b \-\-param node\&.session\&.timeo\&.replacement_timeout=30
.fi
.if n \{\
.RE
.\}
.RE
.SS "FCoE"
.PP
\fBfcoe=\fR\fI<edd|interface|MAC>\fR:\fI{dcb|nodcb}\fR
.RS 4
Try ta connect ta a FCoE SAN all up in tha NIC specified by
\fI<interface>\fR
or
\fI<MAC>\fR
or EDD settings\&. For tha second argument, currently only nodcb is supported\&. This parameta can be specified multiple times\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
lettas up in tha MAC\-address must be lowercase!
.sp .5v
.RE
.RE
.SS "NBD"
.PP
\fBroot=\fR??, biatch? \fBnetroot=\fRnbd:\fI<server>\fR:\fI<port>\fR[:\fI<fstype>\fR[:\fI<mountopts>\fR[:\fI<nbdopts>\fR]]]
.RS 4
mount nbd share from <server>
.RE
.PP
\fBroot=dhcp\fR wit \fBdhcp\fR \fBroot\-path=\fRnbd:\fI<server>\fR:\fI<port>\fR[:\fI<fstype>\fR[:\fI<mountopts>\fR[:\fI<nbdopts>\fR]]]
.RS 4
root=dhcp ridin' solo directs initrd ta peep tha DHCP root\-path where NBD options can be specified\&. This syntax is only usable up in cases where yo ass is directly mountin tha volume as tha rootfs\&.
.RE
.SS "DASD"
.PP
\fBrd\&.dasd=\fR\&...\&.
.RS 4
same syntax as tha kernel module parameta (s390 only)
.RE
.SS "ZFCP"
.PP
\fBrd\&.zfcp=\fR\fI<zfcp adaptor thang bus ID>\fR,\fI<WWPN>\fR,\fI<FCPLUN>\fR
.RS 4
rd\&.zfcp can be specified multiple times on tha kernel command line\&.
.PP
\fBExample\fR. 
.sp
.if n \{\
.RS 4
.\}
.nf
rd\&.zfcp=0\&.0\&.4000,0x5005076300C213e9,0x5022000000000000
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
\fBrd\&.zfcp\&.conf=0\fR
.RS 4
ignore zfcp\&.conf included up in tha initramfs
.RE
.SS "ZNET"
.PP
\fBrd\&.znet=\fR\fI<nettype>\fR,\fI<subchannels>\fR,\fI<options>\fR
.RS 4
rd\&.znet can be specified multiple times on tha kernel command line\&.
.PP
\fBExample\fR. 
.sp
.if n \{\
.RS 4
.\}
.nf
rd\&.znet=qeth,0\&.0\&.0600,0\&.0\&.0601,0\&.0\&.0602,layer2=1,portname=foo
rd\&.znet=ctc,0\&.0\&.0600,0\&.0\&.0601,protocol=bar
.fi
.if n \{\
.RE
.\}
.sp
.RE
.SS "Plymouth Boot Splash"
.PP
\fBplymouth\&.enable=0\fR
.RS 4
disable tha plymouth bootsplash completly\&.
.RE
.PP
\fBrd\&.plymouth=0\fR
.RS 4
disable tha plymouth bootsplash only fo' tha initramfs\&.
.RE
.SS "Kernel keys"
.PP
\fBmasterkey=\fR\fI<kernel masta key path name>\fR
.RS 4
Set tha path name of tha kernel masta key\&.
.PP
\fBExample\fR. 
.sp
.if n \{\
.RS 4
.\}
.nf
masterkey=/etc/keys/kmk\-trusted\&.blob
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
\fBmasterkeytype=\fR\fI<kernel masta key type>\fR
.RS 4
Set tha type of tha kernel masta key\&.
.PP
\fBExample\fR. 
.sp
.if n \{\
.RS 4
.\}
.nf
masterkeytype=trusted
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
\fBevmkey=\fR\fI<EVM key path name>\fR
.RS 4
Set tha path name of tha EVM key\&.
.PP
\fBExample\fR. 
.sp
.if n \{\
.RS 4
.\}
.nf
evmkey=/etc/keys/evm\-trusted\&.blob
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
\fBecryptfskey=\fR\fI<eCryptfs key path name>\fR
.RS 4
Set tha path name of tha eCryptfs key\&.
.PP
\fBExample\fR. 
.sp
.if n \{\
.RS 4
.\}
.nf
ecryptfskey=/etc/keys/ecryptfs\-trusted\&.blob
.fi
.if n \{\
.RE
.\}
.sp
.RE
.SS "Deprecated, renamed Options"
.sp
Here be a list of options, which was used up in dracut prior ta version 008, n' they freshly smoked up replacement\&.
.PP
rdbreak
.RS 4
rd\&.break
.RE
.PP
rd_CCW
.RS 4
rd\&.ccw
.RE
.PP
rd_DASD_MOD
.RS 4
rd\&.dasd
.RE
.PP
rd_DASD
.RS 4
rd\&.dasd
.RE
.PP
rdinitdebug rdnetdebug
.RS 4
rd\&.debug
.RE
.PP
rd_NO_DM
.RS 4
rd\&.dm=0
.RE
.PP
rd_DM_UUID
.RS 4
rd\&.dm\&.uuid
.RE
.PP
rdblacklist
.RS 4
rd\&.driver\&.blacklist
.RE
.PP
rdinsmodpost
.RS 4
rd\&.driver\&.post
.RE
.PP
rdloaddriver
.RS 4
rd\&.driver\&.pre
.RE
.PP
rd_NO_FSTAB
.RS 4
rd\&.fstab=0
.RE
.PP
rdinfo
.RS 4
rd\&.info
.RE
.PP
check
.RS 4
rd\&.live\&.check
.RE
.PP
rdlivedebug
.RS 4
rd\&.live\&.debug
.RE
.PP
live_dir
.RS 4
rd\&.live\&.dir
.RE
.PP
liveimg
.RS 4
rd\&.live\&.image
.RE
.PP
overlay
.RS 4
rd\&.live\&.overlay
.RE
.PP
readonly_overlay
.RS 4
rd\&.live\&.overlay\&.readonly
.RE
.PP
reset_overlay
.RS 4
rd\&.live\&.overlay\&.reset
.RE
.PP
live_ram
.RS 4
rd\&.live\&.ram
.RE
.PP
rd_NO_CRYPTTAB
.RS 4
rd\&.luks\&.crypttab=0
.RE
.PP
rd_LUKS_KEYDEV_UUID
.RS 4
rd\&.luks\&.keydev\&.uuid
.RE
.PP
rd_LUKS_KEYPATH
.RS 4
rd\&.luks\&.keypath
.RE
.PP
rd_NO_LUKS
.RS 4
rd\&.luks=0
.RE
.PP
rd_LUKS_UUID
.RS 4
rd\&.luks\&.uuid
.RE
.PP
rd_NO_LVMCONF
.RS 4
rd\&.lvm\&.conf
.RE
.PP
rd_LVM_LV
.RS 4
rd\&.lvm\&.lv
.RE
.PP
rd_NO_LVM
.RS 4
rd\&.lvm=0
.RE
.PP
rd_LVM_SNAPSHOT
.RS 4
rd\&.lvm\&.snapshot
.RE
.PP
rd_LVM_SNAPSIZE
.RS 4
rd\&.lvm\&.snapsize
.RE
.PP
rd_LVM_VG
.RS 4
rd\&.lvm\&.vg
.RE
.PP
rd_NO_MDADMCONF
.RS 4
rd\&.md\&.conf=0
.RE
.PP
rd_NO_MDIMSM
.RS 4
rd\&.md\&.imsm=0
.RE
.PP
rd_NO_MD
.RS 4
rd\&.md=0
.RE
.PP
rd_MD_UUID
.RS 4
rd\&.md\&.uuid
.RE
.PP
rd_NFS_DOMAIN
.RS 4
rd\&.nfs\&.domain
.RE
.PP
iscsi_initiator
.RS 4
rd\&.iscsi\&.initiator
.RE
.PP
iscsi_target_name
.RS 4
rd\&.iscsi\&.target\&.name
.RE
.PP
iscsi_target_ip
.RS 4
rd\&.iscsi\&.target\&.ip
.RE
.PP
iscsi_target_port
.RS 4
rd\&.iscsi\&.target\&.port
.RE
.PP
iscsi_target_group
.RS 4
rd\&.iscsi\&.target\&.group
.RE
.PP
iscsi_username
.RS 4
rd\&.iscsi\&.username
.RE
.PP
iscsi_password
.RS 4
rd\&.iscsi\&.password
.RE
.PP
iscsi_in_username
.RS 4
rd\&.iscsi\&.in\&.username
.RE
.PP
iscsi_in_password
.RS 4
rd\&.iscsi\&.in\&.password
.RE
.PP
iscsi_firmware
.RS 4
rd\&.iscsi\&.firmware=0
.RE
.PP
rd_NO_PLYMOUTH
.RS 4
rd\&.plymouth=0
.RE
.PP
rd_retry
.RS 4
rd\&.retry
.RE
.PP
rdshell
.RS 4
rd\&.shell
.RE
.PP
rd_NO_SPLASH
.RS 4
rd\&.splash
.RE
.PP
rdudevdebug
.RS 4
rd\&.udev\&.debug
.RE
.PP
rdudevinfo
.RS 4
rd\&.udev\&.info
.RE
.PP
rd_NO_ZFCPCONF
.RS 4
rd\&.zfcp\&.conf=0
.RE
.PP
rd_ZFCP
.RS 4
rd\&.zfcp
.RE
.PP
rd_ZNET
.RS 4
rd\&.znet
.RE
.PP
KEYMAP
.RS 4
vconsole\&.keymap
.RE
.PP
KEYTABLE
.RS 4
vconsole\&.keymap
.RE
.PP
SYSFONT
.RS 4
vconsole\&.font
.RE
.PP
CONTRANS
.RS 4
vconsole\&.font\&.map
.RE
.PP
UNIMAP
.RS 4
vconsole\&.font\&.unimap
.RE
.PP
UNICODE
.RS 4
vconsole\&.unicode
.RE
.PP
EXT_KEYMAP
.RS 4
vconsole\&.keymap\&.ext
.RE
.SS "Configuration up in tha Initramfs"
.PP
\fI/etc/conf\&.d/\fR
.RS 4
Any filez found in
\fI/etc/conf\&.d/\fR
will be sourced up in tha initramfs ta set initial joints\&. Command line options will override these joints set up in tha configuration files\&.
.RE
.PP
\fI/etc/cmdline\fR
.RS 4
Can contain additionizzle command line options\&. Deprecated, betta use /etc/cmdline\&.d/*\&.conf\&.
.RE
.PP
\fI/etc/cmdline\&.d/*\&.conf\fR
.RS 4
Can contain additionizzle command line options\&.
.RE
.SH "AUTHOR"
.sp
Harald Hoyer
.SH "SEE ALSO"
.sp
\fBdracut\fR(8) \fBdracut\&.conf\fR(5)
.SH "NOTES"
.IP " 1." 4
rfc4173
.RS 4
\%http://tools.ietf.org/html/rfc4173#section-5
.RE
