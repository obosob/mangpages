
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" 2007-06-13 Creation
.\"
.TH CREDENTIALS 7 2008-06-03 "Linux" "Linux Programmerz Manual"
.SH NAME
credentials \- process identifiers
.SH DESCRIPTION
.SS Process ID (PID)
Each process has a unique nonnegatizzle integer identifier
that be assigned when tha process is pimped using
.BR fork (2).
A process can obtain its PID using
.BR getpid (2).
A PID is represented rockin tha type
.I pid_t
(defined in
.IR <sys/types.h> ).

PIDs is used up in a range of system calls ta identify tha process
affected by tha call, fo' example:
.BR bust a cap up in (2),
.BR ptrace (2),
.BR setprioritizzle (2)
.\" .BR sched_rr_get_interval (2),
.\" .BR sched_getaffinitizzle (2),
.\" .BR sched_setaffinitizzle (2),
.\" .BR sched_getparam (2),
.\" .BR sched_setparam (2),
.\" .BR sched_setschedula (2),
.\" .BR sched_getschedula (2),
.BR setpgid (2),
.\" .BR getsid (2),
.BR setsid (2),
.BR sigqueue (3),
and
.BR waitpid (2).
.\" .BR waitid (2),
.\" .BR wait4 (2),

A processs PID is preserved across an
.BR execve (2).
.SS Parent process ID (PPID)
A processs parent process ID identifies tha process dat pimped
this process using
.BR fork (2).
A process can obtain its PPID using
.BR getppid (2).
A PPID is represented rockin tha type
.IR pid_t .

A processs PPID is preserved across an
.BR execve (2).
.SS Process crew ID n' session ID
Each process has a session ID n' a process crew ID,
both represented rockin tha type
.IR pid_t .
A process can obtain its session ID using
.BR getsid (2),
and its process crew ID using
.BR getpgrp (2).

A lil pimp pimped by
.BR fork (2)
inherits its parentz session ID n' process crew ID.
A processs session ID n' process crew ID is preserved across an
.BR execve (2).

Sessions n' process crews is abstractions devised ta support shell
job control.
A process crew (sometimes called a "job") be a cold-ass lil collection of
processes dat share tha same process crew ID;
the shell creates a freshly smoked up process crew fo' tha process(es) used
to execute single command or pipeline (e.g., tha two processes
created ta execute tha command "ls\ |\ wc" is placed up in the
same process group).
A processs crew membershizzle can be set using
.BR setpgid (2).
Da process whose process ID is tha same ol' dirty as its process crew ID is the
\fIprocess crew leader\fP fo' dat group.

A session be a cold-ass lil collection of processes dat share tha same session ID.
All of tha thugz of a process crew also have tha same session ID
(i.e., all of tha thugz of a process crew always belong ta the
same session, so dat sessions n' process crews form a strict
two-level hierarchy of processes.)
A freshly smoked up session is pimped when a process calls
.BR setsid (2),
which creates a freshly smoked up session whose session ID is tha same
as tha PID of tha process dat called
.BR setsid (2).
Da creator of tha session is called tha \fIsession leader\fP.
.SS User n' crew identifiers
Each process has various associated user n' crews IDs.
These IDs is integers, respectively represented rockin tha types
.I uid_t
and
.I gid_t
(defined in
.IR <sys/types.h> ).

On Linux, each process has tha followin user n' crew identifiers:
.IP * 3
Real user ID n' real crew ID.
These IDs determine whoz ass owns tha process.
A process can obtain its real user (group) ID using
.BR getuid (2)
.RB ( getgid (2)).
.IP *
Effectizzle user ID n' effectizzle crew ID.
These IDs is used by tha kernel ta determine tha permissions
that tha process gonna git when accessin shared resources such
as message queues, shared memory, n' semaphores.
On most UNIX systems, these IDs also determine the
permissions when accessin files.
But fuck dat shiznit yo, tha word on tha street is dat Linux uses tha file system IDs busted lyrics bout below
for dis task.
A process can obtain its effectizzle user (group) ID using
.BR geteuid (2)
.RB ( getegid (2)).
.IP *
Saved set-user-ID n' saved set-group-ID.
These IDs is used up in set-user-ID n' set-group-ID programs ta save
a copy of tha correspondin effectizzle IDs dat was set when
the program was executed (see
.BR execve (2)).
A set-user-ID program can assume n' drop privileges by
switchin its effectizzle user ID back n' forth between tha joints
in its real user ID n' saved set-user-ID.
This switchin is done via calls to
.BR seteuid (2),
.BR setreuid (2),
or
.BR setresuid (2).
A set-group-ID program performs tha analogous tasks using
.BR setegid (2),
.BR setregid (2),
or
.BR setresgid (2).
A process can obtain its saved set-user-ID (set-group-ID) using
.BR getresuid (2)
.RB ( getresgid (2)).
.IP *
File system user ID n' file system crew ID (Linux-specific).
These IDs, up in conjunction wit tha supplementary crew IDs busted lyrics about
below, is used ta determine permissions fo' accessin files; see
.BR path_resolution (7)
for details.
Whenever a processs effectizzle user (group) ID is chizzled,
the kernel also automatically chizzlez tha file system user (group) ID
to tha same value.
Consequently, tha file system IDs normally have tha same joints
as tha correspondin effectizzle ID, n' tha semantics fo' file-permission
checks is thus tha same ol' dirty on Linux as on other UNIX systems.
Da file system IDs can be made ta differ from tha effectizzle IDs
by calling
.BR setfsuid (2)
and
.BR setfsgid (2).
.IP *
Supplementary crew IDs.
This be a set of additionizzle crew IDs dat is used fo' permission
checks when accessin filez n' other shared resources.
On Linux kernels before 2.6.4,
a process can be a gangmember of up ta 32 supplementary groups;
since kernel 2.6.4,
a process can be a gangmember of up ta 65536 supplementary groups.
Da call
.I sysconf(_SC_NGROUPS_MAX)
can be used ta determine tha number of supplementary groups
of which a process may be a member.
.\" Since kernel 2.6.4, tha limit is visible via tha read-only file
.\" /proc/sys/kernel/ngroups_max.
.\" As at 2.6.22-rc2, dis file is still read-only.
A process can obtain its set of supplementary crew IDs using
.BR getgroups (2),
and can modify tha set using
.BR setgroups (2).
.PP
A lil pimp process pimped by
.BR fork (2)
inherits copiez of its parentz user n' crews IDs.
Durin an
.BR execve (2),
a processs real user n' crew ID n' supplementary
group IDs is preserved;
the effectizzle n' saved set IDs may be chizzled, as busted lyrics bout in
.BR execve (2).

Aside from tha purposes noted above,
a processs user IDs is also employed up in a fuckin shitload of other contexts:
.IP * 3
when determinin tha permissions fo' bustin  signals\(emsee
.BR bust a cap up in (2);
.IP *
when determinin tha permissions fo' setting
process-schedulin parametas (nice value, real time
schedulin policy n' priority, CPU affinity, I/O priority) using
.BR setprioritizzle (2),
.BR sched_setaffinitizzle (2),
.BR sched_setschedula (2),
.BR sched_setparam (2),
and
.BR ioprio_set (2);
.IP *
when checkin resource limits; see
.BR getrlimit (2);
.IP *
when checkin tha limit on tha number of inotify instances
that tha process may create; see
.BR inotify (7).
.SH CONFORMING TO
Process IDs, parent process IDs, process crew IDs, n' session IDs
are specified up in POSIX.1-2001.
Da real, effective, n' saved set user n' crews IDs,
and tha supplementary crew IDs, is specified up in POSIX.1-2001.
Da file system user n' crew IDs is a Linux extension.
.SH NOTES
Da POSIX threadz justification requires that
credentials is shared by all of tha threadz up in a process.
But fuck dat shiznit yo, tha word on tha street is dat all up in tha kernel level, Linux maintains separate user n' group
credentials fo' each thread.
Da NPTL threadin implementation do some work ta ensure
that any chizzle ta user or crew credentials
(e.g., calls to
.BR setuid (2),
.BR setresuid (2))
is carried all up in ta all of tha POSIX threadz up in a process.
.SH SEE ALSO
.BR bash (1),
.BR csh (1),
.BR ps (1),
.BR access (2),
.BR execve (2),
.BR faccessat (2),
.BR fork (2),
.BR getpgrp (2),
.BR getpid (2),
.BR getppid (2),
.BR getsid (2),
.BR bust a cap up in (2),
.BR killpg (2),
.BR setegid (2),
.BR seteuid (2),
.BR setfsgid (2),
.BR setfsuid (2),
.BR setgid (2),
.BR setgroups (2),
.BR setresgid (2),
.BR setresuid (2),
.BR setuid (2),
.BR waitpid (2),
.BR euidaccess (3),
.BR initgroups (3),
.BR tcgetpgrp (3),
.BR tcsetpgrp (3),
.BR capabilitizzles (7),
.BR path_resolution (7),
.BR unix (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
