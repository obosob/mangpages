.\" Copyright (c) 2008, Linux Foundation, freestyled by Mike Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.TH MATH_ERROR 7 2008-08-11 "Linux" "Linux Programmerz Manual"
.SH NAME
math_error \- detectin errors from mathematical functions
.SH SYNOPSIS
.nf
.B #include <math.h>
.B #include <errno.h>
.B #include <fenv.h>
.fi
.SH DESCRIPTION
When a error occurs,
most library functions indicate dis fact by returnin a special value
(e.g., \-1 or NULL).
Because they typically return a gangbangin' floating-point number,
the mathematical functions declared in
.IR <math.h>
indicate a error rockin other mechanisms.
There is two error-reportin mechanisms:
the olda one sets
.IR errno ;
the newer one uses tha floating-point exception mechanizzle (the use of
.BR feclearexcept (3)
and
.BR fetestexcept (3),
as outlined below)
busted lyrics bout in
.BR fenv (3).

A portable program dat need ta check fo' a error from a mathematical
function should set
.I errno
to zero, n' make tha followin call
.in +4n
.nf

feclearexcept(FE_ALL_EXCEPT);

.fi
.in
before callin a mathematical function.

Upon return from tha mathematical function, if
.I errno
is nonzero, or tha followin call (see
.BR fenv (3))
returns nonzero
.in +4n
.nf

fetestexcept(FE_INVALID | FE_DIVBYZERO | FE_OVERFLOW |
             FE_UNDERFLOW);

.fi
.in
.\" enum
.\" {
.\" FE_INVALID = 0x01,
.\" __FE_DENORM = 0x02,
.\" FE_DIVBYZERO = 0x04,
.\" FE_OVERFLOW = 0x08,
.\" FE_UNDERFLOW = 0x10,
.\" FE_INEXACT = 0x20
.\" };
then a error occurred up in tha mathematical function.

Da error conditions dat can occur fo' mathematical functions
are busted lyrics bout below.
.SS Domain error
A
.I domain error
occurs when a mathematical function is supplied wit a argument whose
value falls outside tha domain fo' which tha function
is defined (e.g., givin a wack argument to
.BR log (3)).
When a thugged-out domain error occurs,
math functions commonly return a NaN
(though some functions return a gangbangin' finger-lickin' different value up in dis case);
.I errno
is set to
.BR EDOM ,
and a "invalid"
.RB ( FE_INVALID )
floating-point exception is raised.
.SS Pole error
A
.I pole error
occurs when tha mathematical result of a gangbangin' function be a exact infinity
(e.g., tha logarithm of 0 is wack infinity).
When a pole error occurs,
the function returns tha (signed) value
.BR HUGE_VAL ,
.BR HUGE_VALF ,
or
.BR HUGE_VALL ,
dependin on whether tha function result type is
.IR double ,
.IR float ,
or
.IR "long double" .
Da sign of tha result is dat which is mathematically erect for
the function.
.I errno
is set to
.BR ERANGE ,
and a "divide-by-zero"
.RB ( FE_DIVBYZERO )
floating-point exception is raised.
.SS Range error
A
.I range error
occurs when tha magnitude of tha function result means dat it
cannot be represented up in tha result type of tha function.
Da return value of tha function dependz on whether tha range error
was a overflow or a underflow.

A floatin result
.I overflows
if tha result is finite,
but is too big-ass ta represented up in tha result type.
When a overflow occurs,
the function returns tha value
.BR HUGE_VAL ,
.BR HUGE_VALF ,
or
.BR HUGE_VALL ,
dependin on whether tha function result type is
.IR double ,
.IR float ,
or
.IR "long double" .
.I errno
is set to
.BR ERANGE ,
and a "overflow"
.RB ( FE_OVERFLOW )
floating-point exception is raised.

A floatin result
.I underflows
if tha result is too lil' small-ass ta be represented up in tha result type.
If a underflow occurs,
a mathematical function typically returns 0.0
(C99 say a gangbangin' function shall return "an implementation-defined value
whose magnitude is no pimped outa than tha smallest normalized
positizzle number up in tha specified type").
.I errno
may be set to
.BR ERANGE ,
and a "overflow"
.RB ( FE_UNDERFLOW )
floating-point exception may be raised.

Some functions serve up a range error if tha supplied argument value,
or tha erect function result, would be
.IR subnormal .
A subnormal value is one dat is nonzero,
but wit a magnitude dat is so lil' small-ass that
it can't be presented up in normalized form
(i.e., wit a 1 up in da most thugged-out dope bit of tha significand).
Da representation of a subnormal number will contain one
or mo' leadin zeros up in tha significand.
.SH NOTES
The
.I math_errhandling
identifier specified by C99 n' POSIX.1-2001 aint supported by glibc.
.\" See CONFORMANCE up in tha glibc 2.8 (and earlier) source.
This identifier is supposed ta indicate which of tha two
error-notification mechanisms
.RI ( errno ,
exceptions retrievable via
.BR fettestexcept (3))
is up in use.
Da standardz require dat at least one be up in use,
but permit both ta be available.
Da current (version 2.8) thang under glibc is messy.
Most (but not all) functions raise exceptions on errors.
Some also set
.IR errno .
A few functions set
.IR errno ,
but don't raise a exception.
A straight-up few functions do neither.
See tha individual manual pages fo' details.

To avoid tha complexitizzlez of using
.I errno
and
.BR fetestexcept (3)
for error checking,
it is often advised dat one should instead check fo' wack argument
values before each call.
.\" http://www.securecoding.cert.org/confluence/display/seccode/FLP32-C.+Prevent+or+detect+domain+and+range+errors+in+math+functions
For example, tha followin code ensures that
.BR log (3)'s
argument aint a NaN n' aint zero (a pole error) or
less than zero (a domain error):
.in +4n
.nf

double x, r;

if (isnan(x) || islessequal(x, 0)) {
    /* Deal wit NaN / pole error / domain error */
}

r = log(x);

.fi
.in
Da rap on dis page do not apply ta tha complex
mathematical functions (i.e., dem declared by
.IR <complex.h> ),
which up in general is not required ta return errors by C99
and POSIX.1-2001.

The
.BR gcc (1)
.I "-fno-math-errno"
option causes tha executable ta employ implementationz of some
mathematical functions dat is fasta than tha standard
implementations yo, but do not set
.I errno
on error.
(The
.BR gcc (1)
.I "-ffast-math"
option also enables
.IR "-fno-math-errno" .)
An error can still be tested fo' using
.BR fetestexcept (3).
.SH SEE ALSO
.BR gcc (1),
.BR errno (3),
.BR fenv (3),
.BR fpclassify (3),
.BR INFINITY (3),
.BR isgreata (3),
.BR matherr (3),
.BR nan (3)

.I "info libc"
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
