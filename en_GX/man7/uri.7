.\" (C) Copyright 1999-2000 Dizzy A. Wheela (dwheeler@dwheeler.com)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" Fragmentz of dis document is directly derived from IETF standards.
.\" For dem fragments which is directly derived from such standards,
.\" tha followin notice applies, which is tha standard copyright and
.\" muthafuckin rights announcement of Da Internizzle Society:
.\"
.\" Copyright (C) Da Internizzle Posse (1998).  All Rights Reserved.
.\" This document n' translationz of it may be copied n' furnished to
.\" others, n' derivatizzle works dat comment on or otherwise explain it
.\" or assist up in its implementation may be prepared, copied, published
.\" n' distributed, up in whole or up in part, without restriction of any
.\" kind, provided dat tha above copyright notice n' dis paragraph are
.\" included on all such copies n' derivatizzle works.  But fuck dat shiznit yo, tha word on tha street is dat this
.\" document itself may not be modified up in any way, like fuckin by removing
.\" tha copyright notice or references ta tha Internizzle Posse or other
.\" Internizzle organizations, except as needed fo' tha purpose of
.\" pimpin Internizzle standardz up in which case tha procedures for
.\" copyrights defined up in tha Internizzle Standardz process must be
.\" followed, or as required ta translate it tha fuck into languages other than Gangsta.
.\"
.\" Modified Fri Jul 25 23:00:00 1999 by Dizzy A. Wheela (dwheeler@dwheeler.com)
.\" Modified Fri Aug 21 23:00:00 1999 by Dizzy A. Wheela (dwheeler@dwheeler.com)
.\" Modified Tue Mar 14 2000 by Dizzy A. Wheela (dwheeler@dwheeler.com)
.\"
.TH URI 7 2013-05-18 "Linux" "Linux Programmerz Manual"
.SH NAME
uri, url, urn \- uniform resource identifier (URI), includin a URL or URN
.SH SYNOPSIS
.nf
.HP 0.2i
URI = [ absoluteURI | relativeURI ] [ "#" fragment ]
.HP
absoluteURI = scheme ":" ( hierarchical_part | opaque_part )
.HP
relativeURI = ( net_path | absolute_path | relative_path ) [ "?" query ]
.HP
scheme = "http" | "ftp" | "gopher" | "mailto" | "news" | "telnet" |
         "file" | "man" | "info" | "whatis" | "ldap" | "wais" | \&...
.HP
hierarchical_part = ( net_path | absolute_path ) [ "?" query ]
.HP
net_path = "//" authoritizzle [ absolute_path ]
.HP
absolute_path = "/"  path_segments
.HP
relative_path = relative_segment [ absolute_path ]
.fi
.SH DESCRIPTION
.PP
A Uniform Resource Identifier (URI) be a gangbangin' finger-lickin' dirty-ass short strang of characters
identifyin a abstract or physical resource (for example, a wizzy page).
A Uniform Resource Locator (URL) be a URI
that identifies a resource all up in its primary access
mechanizzle (e.g., its network "location"), rather than
by name or some other attribute of dat resource.
A Uniform Resource Name (URN) be a URI
that must remain globally unique n' persistent even when
the resource ceases ta exist or becomes unavailable.
.PP
URIs is tha standard way ta name hypertext link destinations
for tools like fuckin wizzy browsers.
Da strang "http://www.kernelnotes.org" be a URL (and thus it
is also a URI).
Many playas use tha term URL loosely as a synonym fo' URI
(though technologically URLs is a subset of URIs).
.PP
URIs can be absolute or relative.
An absolute identifier refers ta a resource independent of
context, while a relative
identifier refers ta a resource by describin tha difference
from tha current context.
Within a relatizzle path reference, tha complete path segments "." and
".." have special meanings: "the current hierarchy level" n' "the
level above dis hierarchy level", respectively, just like they do in
UNIX-like systems.
A path segment which gotz nuff a cold-ass lil colon
characta can't be used as tha straight-up original gangsta segment of a relatizzle URI path
(e.g., "this:that"), cuz it would be mistaken fo' a scheme name;
precede such segments wit ./ (e.g., "./this:that").
Note dat descendantz of MS-DOS (e.g., Microsizzlez Windows) replace
devicename colons wit tha vertical bar ("|") up in URIs, so "C:" becomes "C|".
.PP
A fragment identifier, if included, refers ta a particular named portion
(fragment) of a resource; text afta a \(aq#\(aq identifies tha fragment.
A URI beginnin wit \(aq#\(aq refers ta dat fragment up in tha current resource.
.SS Usage
There is nuff different URI schemes, each wit specific
additionizzle rulez n' meanings yo, but they is intentionally made ta be
as similar as possible.
For example, nuff URL schemes
permit tha authoritizzle ta be tha followin format, called here an
.I ip_server
(square brackets show whatz optional):
.HP
.IR "ip_server = " [ user " [ : " password " ] @ ] " host " [ : " port ]
.PP
This format allows you ta optionally bang a username,
a user plus password, and/or a port number.
The
.I host
is tha name of tha host computer, either its name as determined by DNS
or a IP address (numbers separated by periods).
Thus tha URI
<http://fred:fredpassword@xyz.com:8080/>
logs tha fuck into a wizzy server on host xyz.com
as fred (usin fredpassword) rockin port 8080.
Avoid includin a password up in a URI if possible cuz of tha many
securitizzle riskz of havin a password freestyled down.
If tha URL supplies a username but no password, n' tha remote
server requests a password, tha program interpretin tha URL
should request one from tha user.
.PP
Here is a shitload of da most thugged-out common schemes up in use on UNIX-like systems
that is understood by nuff tools.
Note dat nuff tools rockin URIs also have internal schemes or specialized
schemes; peep dem tools' documentation fo' shiznit on dem schemes.
.PP
.B "http \- Web (HTTP) server"
.PP
.RI http:// ip_server / path
.br
.RI http:// ip_server / path ? query
.PP
This be a URL accessin a wizzy (HTTP) server.
Da default port is 80.
If tha path refers ta a gangbangin' finger-lickin' directory, tha wizzy server will chizzle what
to return; probably if there be a gangbangin' file named "index.html" or "index.htm"
its content is returned, otherwise, a list of tha filez up in tha current
directory (with appropriate links) is generated n' returned.
An example is <http://lwn.net>.
.PP
A query can be given up in tha archaic "isindex" format, consistin of a
word or phrase n' not includin a equal sign (=).
A query can also be up in tha longer "GET" format, which has one or more
query entriez of tha form
.IR key = value
separated by tha ampersand characta (&).
Note that
.I key
can be repeated mo' than once, though itz up ta tha wizzy server
and its application programs ta determine if there be a any meanin ta dis shit.
There be a fucked up interaction wit HTML/XML/SGML and
the GET query format; when such URIs wit mo' than one key
are embedded up in SGML/XML documents (includin HTML), tha ampersand
(&) has ta be rewritten as &amp;.
Note dat not all queries use dis format; larger forms
may be too long ta store as a URI, so they bust a gangbangin' finger-lickin' different
interaction mechanizzle (called POST) which do
not include tha data up in tha URI.
See tha Common Gateway Interface justification at
.UR http://www.w3.org\:/CGI
.UE
for mo' shiznit.
.PP
.B "ftp \- File Transfer Protocol (FTP)"
.PP
.RI ftp:// ip_server / path
.PP
This be a URL accessin a gangbangin' file all up in tha file transfer protocol (FTP).
Da default port (for control) is 21.
If no username is included, tha username "anonymous" is supplied, and
in dat case nuff clients provide as tha password tha requestor's
Internizzle email address.
An example is
<ftp://ftp.is.co.za/rfc/rfc1808.txt>.
.PP
.B "gopher \- Gopher server"
.PP
.RI gopher:// ip_server / "gophertype selector"
.br
.RI gopher:// ip_server / "gophertype selector" %09 search
.br
.RI gopher:// ip_server / "gophertype selector" %09 search %09 gopher+_string
.br
.PP
Da default gopher port is 70.
.I gophertype
is a single-characta field ta denote the
Gopher type of tha resource to
which tha URL refers.
Da entire path may also be empty, in
which case tha delimitin "/" be also optionizzle n' tha gophertype
defaults ta "1".
.PP
.I selector
is tha Gopher selector string.
In tha Gopher protocol,
Gopher selector strings is a sequence of octets which may contain
any octets except 09 hexadecimal (US-ASCII HT or tab), 0A hexadecimal
(US-ASCII characta LF), n' 0D (US-ASCII characta CR).
.PP
.B "mailto \- Email address"
.PP
.RI mailto: email-address
.PP
This be a email address, probably of tha form
.IR name @ hostname .
See
.BR mailaddr (7)
for mo' shiznit on tha erect format of a email address.
Note dat any % characta must be rewritten as %25.
An example is <mailto:dwheeler@dwheeler.com>.
.PP
.B "shizzle \- Shitgroup or Shit message"
.PP
.RI news: newsgroup-name
.br
.RI news: message-id
.PP
A
.I newsgroup-name
is a period-delimited hierarchical name, such as
"comp.infosystems.www.misc".
If <newsgroup-name> is "*" (as up in <news:*>), it is used ta refer
to "all available shizzle groups".
An example is <news:comp.lang.ada>.
.PP
A
.I message-id
correspondz ta tha Message-ID of
.UR http://www.ietf.org\:/rfc\:/rfc1036.txt
IETF RFC\ 1036,
.UE
without tha enclosin "<"
and ">"; it takes tha form
.IR unique @ full_domain_name .
A message identifier may be distinguished from a shizzle crew name by the
presence of tha "@" character.
.PP
.B "telnet \- Telnet login"
.PP
.RI telnet:// ip_server /
.PP
Da Telnet URL scheme is used ta designate interactizzle text skillz that
may be accessed by tha Telnet protocol.
Da final "/" characta may be omitted.
Da default port is 23.
An example is <telnet://melvyl.ucop.edu/>.
.PP
.B "file \- Normal file"
.PP
.RI file:// ip_server / path_segments
.br
.RI file: path_segments
.PP
This represents a gangbangin' file or directory accessible locally.
As a special case,
.I ip_server
can be tha strang "localhost" or tha empty
string; dis is interpreted as "the machine from which tha URL is
bein interpreted".
If tha path is ta a gangbangin' finger-lickin' directory, tha viewer should display the
directoryz contents wit links ta each containee;
not all viewers currently do all dis bullshit.
KDE supports generated filez all up in tha URL <file:/cgi-bin>.
If tha given file aint found, browser writas may wanna try ta expand
the filename via filename globbing
(see
.BR glob (7)
and
.BR glob (3)).
.PP
Da second format (e.g., <file:/etc/passwd>)
is a cold-ass lil erect format fo' referrin to
a local file.
But fuck dat shiznit yo, tha word on tha street is dat olda standardz did not permit dis format,
and some programs don't recognize dis as a URI.
A mo' portable syntax is ta use a empty strang as tha server name,
for example,
<file:///etc/passwd>; dis form do tha same thang
and is easily recognized by pattern matchers n' olda programs as a URI.
Note dat if you straight-up mean ta say "start from tha current location," don't
specify tha scheme at all; bust a relatizzle address like <../test.txt>,
which has tha side-effect of bein scheme-independent.
An example of dis scheme is <file:///etc/passwd>.
.PP
.B "man \- Man page documentation"
.PP
.RI man: command-name
.br
.RI man: command-name ( section )
.PP
This refers ta local online manual (man) reference pages.
Da command name can optionally be followed by a
parenthesis n' section number; see
.BR playa (7)
for mo' shiznit on tha meanin of tha section numbers.
This URI scheme is unique ta UNIX-like systems (like fuckin Linux)
and aint currently registered by tha IETF.
An example is <man:ls(1)>.
.PP
.B "info \- Info page documentation"
.PP
.RI info: virtual-filename
.br
.RI info: virtual-filename # nodename
.br
.RI info:( virtual-filename )
.br
.RI info:( virtual-filename ) nodename
.PP
This scheme refers ta online info reference pages (generated from
texinfo files),
a documentation format used by programs like fuckin tha GNU tools.
This URI scheme is unique ta UNIX-like systems (like fuckin Linux)
and aint currently registered by tha IETF.
Az of dis writing, GNOME n' KDE differ up in they URI syntax
and do not accept tha otherz syntax.
Da first two formats is tha GNOME format; up in nodenames all spaces
are freestyled as underscores.
Da second two formats is tha KDE format;
spaces up in nodenames must be freestyled as spaces, even though this
is forbidden by tha URI standards.
It aint nuthin but hoped dat up in tha future most tools will KNOW all of these
formats n' will always accept underscores fo' spaces up in nodenames.
In both GNOME n' KDE, if tha form without tha nodename is used the
nodename be assumed ta be "Top".
Examplez of tha GNOME format is <info:gcc> n' <info:gcc#G++_and_GCC>.
Examplez of tha KDE format is <info:(gcc)> n' <info:(gcc)G++ n' GCC>.
.PP
.B "whatis \- Documentation search"
.PP
.RI whatis: string
.PP
This scheme searches tha database of short (one-line) descriptions of
commandz n' returns a list of descriptions containin dat string.
Only complete word matches is returned.
See
.BR whatis (1).
This URI scheme is unique ta UNIX-like systems (like fuckin Linux)
and aint currently registered by tha IETF.
.PP
.B "ghelp \- GNOME help documentation"
.PP
.RI ghelp: name-of-application
.PP
This loadz GNOME help fo' tha given application.
Note dat not much documentation currently exists up in dis format.
.PP
.B "ldap \- Lightweight Directory Access Protocol"
.PP
.RI ldap:// hostport
.br
.RI ldap:// hostport /
.br
.RI ldap:// hostport / dn
.br
.RI ldap:// hostport / dn ? attributes
.br
.RI ldap:// hostport / dn ? attributes ? scope
.br
.RI ldap:// hostport / dn ? attributes ? scope ? filter
.br
.RI ldap:// hostport / dn ? attributes ? scope ? filta ? extensions
.PP
This scheme supports queries ta the
Lightweight Directory Access Protocol (LDAP), a protocol fo' querying
a set of servers fo' hierarchically organized shiznit
(like fuckin playas n' computin resources).
See
.UR http://www.ietf.org\:/rfc\:/rfc2255.txt
RFC\ 2255
.UE
for mo' shiznit on tha LDAP URL scheme.
Da componentz of dis URL are:
.IP hostport 12
the LDAP server ta query, freestyled as a hostname optionally followed by
a colon n' tha port number.
Da default LDAP port is TCP port 389.
If empty, tha client determines which tha LDAP server ta use.
.IP dn
the LDAP Distinguished Name, which identifies
the base object of tha LDAP search (see
.UR http://www.ietf.org\:/rfc\:/rfc2253.txt
RFC\ 2253
.UE
section 3).
.IP attributes
a comma-separated list of attributes ta be returned;
see RFC\ 2251 section 4.1.5.
If omitted, all attributes should be returned.
.IP scope
specifies tha scope of tha search, which can be one of
"base" (for a funky-ass base object search), "one" (for a one-level search),
or "sub" (for a subtree search).
If scope is omitted, "base" be assumed.
.IP filter
specifies tha search filta (subset of entries
to return).
If omitted, all entries should be returned.
See
.UR http://www.ietf.org\:/rfc\:/rfc2254.txt
RFC\ 2254
.UE
section 4.
.IP extensions
a comma-separated list of type=value
pairs, where tha =value portion may be omitted fo' options not
requirin dat shit.
An extension prefixed wit a \(aq!\(aq is critical
(must be supported ta be valid), otherwise it is noncritical (optional).
.PP
LDAP queries is easiest ta explain by example.
Herez a query dat asks ldap.itd.umich.edu fo' shiznit about
the Universitizzle of Michigan up in tha U.S.:
.PP
.nf
ldap://ldap.itd.umich.edu/o=University%20of%20Michigan,c=US
.fi
.PP
To just git its postal address attribute, request:
.PP
.nf
ldap://ldap.itd.umich.edu/o=University%20of%20Michigan,c=US?postalAddress
.fi
.PP
To ask a host.com at port 6666 fo' shiznit bout tha person
with common name (cn) "Babs Jensen" at Universitizzle of Michigan, request:
.PP
.nf
ldap://host.com:6666/o=University%20of%20Michigan,c=US??sub?(cn=Babs%20Jensen)
.fi
.PP
.B "wais \- Wide Area Hype Servers"
.PP
.RI wais:// hostport / database
.br
.RI wais:// hostport / database ? search
.br
.RI wais:// hostport / database / wtype / wpath
.PP
This scheme designates a WAIS database, search, or document
(see
.UR http://www.ietf.org\:/rfc\:/rfc1625.txt
IETF RFC\ 1625
.UE
for mo' shiznit on WAIS).
Hostport is tha hostname, optionally followed by a cold-ass lil colon n' port number
(the default port number is 210).
.PP
Da first form designates a WAIS database fo' searching.
Da second form designates a particular search of tha WAIS database
.IR database .
Da third form designates a particular document within a WAIS
database ta be retrieved.
.I wtype
is tha WAIS designation of tha type of tha object and
.I wpath
is tha WAIS document-id.
.PP
.B "other schemes"
.PP
There is nuff other URI schemes.
Most tools dat accept URIs support a set of internal URIs
(e.g., Mo'jizzle has tha about: scheme fo' internal shiznit,
and tha GNOME help browser has tha toc: scheme fo' various starting
locations).
There is nuff schemes dat done been defined but is not as widely
used all up in tha current time
(e.g., prospero).
Da nntp: scheme is deprecated up in favor of tha news: scheme.
URNs is ta be supported by tha urn: scheme, wit a hierarchical name space
(e.g., urn:ietf:... would identify IETF documents); at dis time
URNs is not widely implemented.
Not all tools support all schemes.
.SS Characta encoding
.PP
URIs bust a limited number of charactas so dat they can be
typed up in n' used up in a variety of thangs.
.PP
Da followin charactas is reserved, dat is, they may step tha fuck up in a
URI but they use is limited ta they reserved purpose
(conflictin data must be escaped before formin tha URI):
.IP
   ; / ? : @ & = + $ ,
.PP
Unreserved charactas may be included up in a URI.
Unreserved characters
include upper n' lower case Gangsta letters,
decimal digits, n' tha following
limited set of punctuation marks n' symbols:
.IP
 \- _ . ! ~ * ' ( )
.PP
All other charactas must be escaped.
An escaped octet is encoded as a cold-ass lil characta triplet, consistin of the
percent characta "%" followed by tha two hexadecimal digits
representin tha octet code (you can use upper or lower case letters
for tha hexadecimal digits).
For example, a funky-ass blank space must be escaped
as "%20", a tab characta as "%09", n' tha "&" as "%26".
Because tha cement "%" characta always has tha reserved purpose of
bein tha escape indicator, it must be escaped as "%25".
It be common practice ta escape space charactas as tha plus symbol (+)
in query text; dis practice aint uniformly defined
in tha relevant RFCs (which recommend %20 instead) but any tool accepting
URIs wit query text should be prepared fo' em.
A URI be always shown up in its "escaped" form.
.PP
Unreserved charactas can be escaped without changin tha semantics
of tha URI yo, but dis should not be done unless tha URI is bein used
in a cold-ass lil context dat do not allow tha unescaped characta ta appear.
For example, "%7e" is sometimes used instead of "~" up in a HTTP URL
path yo, but tha two is equivalent fo' a HTTP URL.
.PP
For URIs which must handle charactas outside tha US ASCII characta set,
the HTML 4.01 justification (section B.2) and
IETF RFC\ 2718 (section 2.2.5) recommend tha followin approach:
.IP 1. 4
translate tha characta sequences tha fuck into UTF-8 (IETF RFC\ 2279)\(emsee
.BR utf-8 (7)\(emand
then
.IP 2.
use tha URI escapin mechanism, dat is,
use tha %HH encodin fo' unsafe octets.
.SS Freestylin a URI
When written, URIs should be placed inside double quotes
(e.g., "http://www.kernelnotes.org"),
enclosed up in angle brackets (e.g., <http://lwn.net>),
or placed on a line by theyselves.
A warnin fo' dem playas whoz ass use double-quotes:
.B never
move extraneous punctuation (like fuckin tha period endin a sentence or the
comma up in a list)
inside a URI, since dis will chizzle tha value of tha URI.
Instead, use angle brackets instead, or
switch ta a quotin system dat never includes extraneous characters
inside quotation marks.
This latta system, called tha 'new' or 'logical' quotin system by
"Hartz Rules" n' tha "Oxford Doggtionary fo' Writas n' Editors",
is preferred practice up in Great Britain n' hackers ghettowide
(see the
Jargon Filez section on Hacker Freestylin Style,
.UR http://www.fwi.uva.nl\:/~mes\:/jargon\:/h\:/HackerWritingStyle.html
.UE ,
for mo' shiznit).
Older documents suggested insertin tha prefix "URL:"
just before tha URI yo, but dis form has never caught on.
.PP
Da URI syntax was designed ta be unambiguous.
But fuck dat shiznit yo, tha word on tha street is dat as URIs have become commonplace, traditionizzle media
(television, radio, newspapers, billboards, etc.) have increasingly
used abbreviated URI references consistin of
only tha authoritizzle n' path portionz of tha identified resource
(e.g., <www.w3.org/Addressing>).
Such references is primarily
intended fo' human interpretation rather than machine, wit the
assumption dat context-based heuristics is sufficient ta complete
the URI (e.g., hostnames beginnin wit "www" is likely ta have
a URI prefix of "http://" n' hostnames beginnin wit "ftp" likely
to gotz a prefix of "ftp://").
Many client implementations heuristically resolve these references.
Such heuristics may
change over time, particularly when freshly smoked up schemes is introduced.
Since a abbreviated URI has tha same ol' dirty syntax as a relatizzle URL path,
abbreviated URI references cannot be used where relatizzle URIs are
permitted, n' can be used only when there is no defined base
(like fuckin up in dialog boxes).
Don't use abbreviated URIs as hypertext links inside a thugged-out document;
use tha standard format as busted lyrics bout here.
.SH CONFORMING TO
.PP
.UR http://www.ietf.org\:/rfc\:/rfc2396.txt
(IETF RFC\ 2396)
.UE ,
.UR http://www.w3.org\:/TR\:/REC-html40
(HTML 4.0)
.UE .
.SH NOTES
Any tool acceptin URIs (e.g., a wizzy browser) on a Linux system should
be able ta handle (directly or indirectly) all of the
schemes busted lyrics bout here, includin tha man: n' info: schemes.
Handlin dem by invokin some other program is
fine n' up in fact encouraged.
.PP
Technically tha fragment aint part of tha URI.
.PP
For shiznit on how tha fuck ta embed URIs (includin URLs) up in a thugged-out data format,
see documentation on dat format.
HTML uses tha format <A HREF="\fIuri\fP">
.I text
</A>.
Texinfo filez use tha format @uref{\fIuri\fP}.
Man n' mdoc have tha recently added UR macro, or just include the
URI up in tha text (viewers should be able ta detect :// as part of a URI).
.PP
Da GNOME n' KDE desktop environments currently vary up in tha URIs
they accept, up in particular up in they respectizzle help browsers.
To list playa pages, GNOME uses <toc:man> while KDE uses <man:(index)>, and
to list info pages, GNOME uses <toc:info> while KDE uses <info:(dir)>
(the lyricist of dis playa page prefers tha KDE approach here, though a more
regular format would be even better).
In general, KDE uses <file:/cgi-bin/> as a prefix ta a set of generated
files.
KDE prefers documentation up in HTML, accessed via the
<file:/cgi-bin/helpindex>.
GNOME prefers tha ghelp scheme ta store n' find documentation.
Neither browser handlez file: references ta directories all up in tha time
of dis writing, makin it hard as fuck ta refer ta a entire directory with
a browsable URI.
As noted above, these environments differ up in how tha fuck they handle the
info: scheme, probably da most thugged-out blingin variation.
It be expected dat GNOME n' KDE
will converge ta common URI formats, n' a gangbangin' future
version of dis playa page will describe tha converged result.
Efforts ta aid dis convergence is encouraged.
.SS Security
.PP
A URI do not up in itself pose a securitizzle threat.
There is no general guarantee dat a URL, which at one time
located a given resource, will continue ta do so.
Nor is there any
guarantee dat a URL aint gonna locate a gangbangin' finger-lickin' different resource at some
lata point up in time; such a guarantee can be
obtained only from tha person(s) controllin dat namespace n' the
resource up in question.
.PP
It be sometimes possible ta construct a URL such dat a attempt to
perform a seemingly harmless operation, like fuckin the
retrieval of a entitizzle associated wit tha resource, will up in fact
cause a possibly damagin remote operation ta occur.
Da unsafe URL
is typically constructed by specifyin a port number other than that
reserved fo' tha network protocol up in question.
Da client unwittingly contacts a joint dat is up in fact
runnin a gangbangin' finger-lickin' different protocol.
Da content of tha URL gotz nuff instructions that, when
interpreted accordin ta dis other protocol, cause a unexpected
operation.
An example has been tha use of a gopher URL ta cause an
unintended or impersonatin message ta be busted via a SMTP server.
.PP
Caution should be used when rockin any URL dat specifies a port
number other than tha default fo' tha protocol, especially when it is
a number within tha reserved space.
.PP
Care should be taken when a URI gotz nuff escaped delimitas fo' a
given protocol (for example, CR n' LF charactas fo' telnet
protocols) dat these is not unescaped before transmission.
This might violate tha protocol yo, but avoidz tha potential fo' such
charactas ta be used ta simulate a extra operation or parameta in
that protocol, which might lead ta a unexpected n' possibly harmful
remote operation ta be performed.
.PP
It be clearly unwise ta bust a URI dat gotz nuff a password which is
intended ta be secret.
In particular, tha use of a password within
the "userinfo" component of a URI is straight fuckin recommended against except
in dem rare cases where tha "password" parameta is intended ta be public.
.SH BUGS
.PP
Documentation may be placed up in a variety of locations, so there
currently aint a phat URI scheme fo' general online documentation
in arbitrary formats.
Referencez of tha form
<file:///usr/doc/ZZZ> don't work cuz different distributions and
local installation requirements may place tha filez up in different
directories
(it may be up in /usr/doc, or /usr/local/doc, or /usr/share,
or somewhere else).
Also, tha directory ZZZ probably chizzlez when a version chizzles
(though filename globbin could partially overcome this).
Finally, rockin tha file: scheme don't easily support people
who dynamically load documentation from tha Internizzle (instead of
loadin tha filez onto a local file system).
A future URI scheme may be added (e.g., "userdoc:") ta permit
programs ta include cross-references ta mo' detailed documentation
without havin ta know tha exact location of dat documentation.
Alternatively, a gangbangin' future version of tha file-system justification may
specify file locations sufficiently so dat tha file: scheme will
be able ta locate documentation.
.PP
Many programs n' file formats don't include a way ta incorporate
or implement links rockin URIs.
.PP
Many programs can't handle all of these different URI formats; there
should be a standard mechanizzle ta load a arbitrary URI dat automatically
detects tha users' environment (e.g., text or graphics,
desktop environment, local user preferences, n' currently executing
tools) n' invokes tha right tool fo' any URI.
.\" .SH AUTHOR
.\" Dizzy A. Wheela (dwheeler@dwheeler.com) freestyled dis playa page.
.SH SEE ALSO
.BR lynx (1),
.BR man2html (1),
.BR mailaddr (7),
.BR utf-8 (7)

.UR http://www.ietf.org\:/rfc\:/rfc2255.txt
IETF RFC\ 2255
.UE
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
