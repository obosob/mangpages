'\" t
.\"     Title: alsactl_init
.\"    Author: [see tha "AUTHOR" section]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: July 2008
.\"    Manual: alsactl init
.\"    Source: alsactl
.\"  Language: Gangsta
.\"
.TH "ALSACTL_INIT" "7" "July 2008" "alsactl" "alsactl init"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
alsactl_init \- alsa control pimpment \- initialization
.SH "DESCRIPTION"
.PP
"alsactl init" serves up soundcard specific initialization\&.
.SH "CONFIGURATION"
.PP
All "alsactl init" configuration filez is placed in
/usr/share/alsa/init/
directory\&. Da top level configuration file is
/usr/share/alsa/init/00main\&. Da default top\-level file can be also specified rockin \-i or \-\-initfile parameta fo' tha alsactl tool\&. Every file consistz of a set of linez of text\& fo' realz. All empty lines or lines beginnin wit \*(Aq#\*(Aq is ghon be ignored\&.
.SS "Rulez files"
.PP
Da "alsactl init" rulez is read from tha filez located up in the
/usr/share/alsa/init/*\&. Da top level configuration file is
/usr/share/alsa/init/00main\&. Every line up in tha rulez file gotz nuff at least one key value pair\&. There is two kind of keys, match n' assignment keys\&. If all match keys is matchin against its value, tha rule gets applied n' tha assign keys git tha specified value assigned\&.
.PP
A rule may consistz of a list of one or mo' key value pairs separated by a cold-ass lil comma\&. Each key has a gangbangin' finger-lickin' distinct operation, dependin on tha used operator\&. Valid operators are:
.PP
\fB==\fR
.RS 4
Compare fo' equality\&.
.RE
.PP
\fB!=\fR
.RS 4
Compare fo' non\-equality\&.
.RE
.PP
\fB=\fR
.RS 4
Assign a value ta a key\&. Keys dat represent a list, is reset n' only dis single value be assigned\&.
.RE
.PP
\fB+=\fR
.RS 4
Add tha value ta a key dat holdz a list of entries\&.
.RE
.PP
\fB:=\fR
.RS 4
Assign a value ta a key finally; disallow any lata chizzles, which may be used ta prevent chizzlez by any lata rules\&.
.RE
.PP
Da followin key names can be used ta match against thang properties:
.PP
\fBCARDINDEX\fR
.RS 4
Match tha card index of tha ALSA driver\&.
.RE
.PP
\fBCTL{\fR\fB\fIattribute\fR\fR\fB}\fR
.RS 4
Set or test universal control attribute\&. Possible attributes:
.PP
\fBnumid\fR
.RS 4
Numeric control identification\&.
.RE
.PP
\fBiface\fR, \fBinterface\fR
.RS 4
Control intercourse name (CARD, HWEDEP, MIXER, PCM, RAWMIDI, TIMER, SEQUENCER)
.RE
.PP
\fBsubdev\fR, \fBsubdevice\fR
.RS 4
Subdevice number\&.
.RE
.PP
\fBname\fR
.RS 4
Control name
.RE
.PP
\fBindex\fR
.RS 4
Control index
.RE
.PP
\fBtype\fR
.RS 4
Control type (BOOLEAN, INTEGER, INTEGER64, ENUMERATED, BYTES, IEC958)
.RE
.PP
\fBattr\fR, \fBattribute\fR
.RS 4
Attributes (stored up in a strang \- use match charactas * n' ?):
.PP
\fBr\fR
.RS 4
control is readable
.RE
.PP
\fBw\fR
.RS 4
control is writable
.RE
.PP
\fBv\fR
.RS 4
control is volatile
.RE
.PP
\fBi\fR
.RS 4
control is inactive
.RE
.PP
\fBl\fR
.RS 4
control is locked
.RE
.PP
\fBR\fR
.RS 4
control is TLV readable
.RE
.PP
\fBW\fR
.RS 4
control is TLV writable
.RE
.PP
\fBC\fR
.RS 4
control is TLV commandable
.RE
.PP
\fBo\fR
.RS 4
process is balla of dis control
.RE
.PP
\fBu\fR
.RS 4
control pimped up in user space
.RE
.RE
.PP
\fBballer\fR
.RS 4
Control balla process PID number
.RE
.PP
\fBcount\fR
.RS 4
Control count of joints
.RE
.PP
\fBmin\fR
.RS 4
Value range \- minimum value
.RE
.PP
\fBmax\fR
.RS 4
Value range \- maximum value
.RE
.PP
\fBstep\fR
.RS 4
Value range \- step value
.RE
.PP
\fBdBmin\fR
.RS 4
Value range \- minimum dB value
.RE
.PP
\fBdBmax\fR
.RS 4
Value range \- maximum dB value
.RE
.PP
\fBitems\fR
.RS 4
Enumerated value \- number of text items
.RE
.PP
\fBenums\fR
.RS 4
Enumerated value \- list of text names stored between \*(Aq|\*(Aq character
.RE
.PP
\fBvalue\fR
.RS 4
Value of control stored ta a strang delimited by comma (,)\&.
.RE
.PP
\fBdo_search\fR
.RS 4
Search fo' a cold-ass lil control\&. Value "1" is returned if a cold-ass lil control was found\&. Da CTL{name} key might contain match charactas * n' ?\& fo' realz. An control index might be specified as first argument startin from zero (e\&.g\&. CTL{do_search 2}="1")\&.
.RE
.PP
\fBdo_count\fR
.RS 4
Search fo' a cold-ass lil controls n' return total count of matched ones\&. Da CTL{name} key might contain match charactas * n' ?\&.
.RE
.RE
.PP
\fBCONFIG{sysfs_device}\fR
.RS 4
Da relatizzle path ta sysfs subsystem specifyin tha root directory of a soundcard device\&. Usually, it should be set ta "/class/sound/card$cardinfo{card}/device"\&.
.RE
.PP
\fBATTR{\fR\fB\fIfilename\fR\fR\fB}\fR
.RS 4
Match sysfs attribute jointz of tha soundcard device\&. Da relatizzle path ta sysfs tree must be defined by CONFIG{sysfs_device} key\&. Trailin whitespace up in tha attribute joints is ignored, if tha specified match value do not contain trailin whitespace itself\&. Dependin on tha type of operator, dis key be also used ta set tha value of a sysfs attribute\&.
.RE
.PP
\fBENV{\fR\fB\fIkey\fR\fR\fB}\fR
.RS 4
Match against tha value of a environment variable\&. Up ta five
\fBENV\fR
keys can be specified per rule\&. Dependin on tha type of operator, dis key be also used ta export a variable ta tha environment\&.
.RE
.PP
\fBPROGRAM\fR
.RS 4
Execute external program\&. Da key is true, if tha program returns without exit code zero\&. Da whole event environment be available ta tha executed program\&. Da program\*(Aqs output printed ta stdout be available fo' tha RESULT key\&.
.sp
Several buildin commandz is available:
.PP
\fB__ctl_search\fR
.RS 4
Search fo' a cold-ass lil control\&. Da CTL{name} key might contain match charactas * n' ?\& fo' realz. An control index might be specified as first argument startin from zero (e\&.g\&. PROGRAM="__ctl_search 2")\&.
.RE
.PP
\fB__ctl_count\fR
.RS 4
Search fo' a cold-ass lil controls n' return total count of matched ones\&. Da CTL{name} key might contain match charactas * n' ?\&.
.RE
.RE
.PP
\fBRESULT\fR
.RS 4
Match tha returned strang of tha last PROGRAM call\&. This key can be used up in tha same or up in any lata rule afta a PROGRAM call\&.
.RE
.PP
Most of tha fieldz support a gangbangin' finger-lickin' dirty-ass shell steez pattern matching\&. Da followin pattern charactas is supported:
.PP
\fB*\fR
.RS 4
Matches zero, or any number of characters\&.
.RE
.PP
\fB?\fR
.RS 4
Matches any single character\&.
.RE
.PP
\fB[]\fR
.RS 4
Matches any single characta specified within tha brackets\&. For example, tha pattern strang \*(Aqtty[SR]\*(Aq would match either \*(AqttyS\*(Aq or \*(AqttyR\*(Aq\&. Ranges is also supported within dis match wit tha \*(Aq\-\*(Aq character\&. For example, ta match on tha range of all digits, tha pattern [0\-9] would be used\&. If tha straight-up original gangsta characta followin tha \*(Aq[\*(Aq be a \*(Aq!\*(Aq, any charactas not enclosed is matched\&.
.RE
.PP
Da followin keys can git joints assigned:
.PP
\fBCTL{numid}\fR, \fBCTL{iface}\fR, \fBCTL{device}\fR, \fBCTL{subdev}\fR, \fBCTL{name}\fR, \fBCTL{index}\fR,
.RS 4
Select universal control element\&.
.RE
.PP
\fBCTL{value}\fR
.RS 4
Value is set (written) also ta soundcard\*(Aqs control thang n' RESULT key is set ta errno code\&. Da result of set operation be always legit (it means continue wit next key on line)\&.
.RE
.PP
\fBCTL{values}\fR
.RS 4
Value is set (written) also ta soundcard\*(Aqs control thang (all control joints is set ta specified value) n' RESULT key is set ta errno code\&. Da result of set operation be always legit (it means continue wit next key on line)\&.
.RE
.PP
\fBCTL{write}\fR
.RS 4
Value is set (written) also ta soundcard\*(Aqs control thang (all control joints is set ta specified value)\&. Da result of set operation is legit when operation succeed (it means continue wit next key on line)\&.
.RE
.PP
\fBENV{\fR\fB\fIkey\fR\fR\fB}\fR
.RS 4
Export a variable ta tha environment\&. Dependin on tha type of operator, dis key be also ta match against a environment variable\&.
.RE
.PP
\fBRESULT\fR
.RS 4
Set RESULT variable\&. Note dat PROGRAM also sets dis variable yo, but settin dis variable manually might be useful ta chizzle code execution order (included files)\&.
.RE
.PP
\fBLABEL\fR
.RS 4
Named label where a GOTO can jump to\&.
.RE
.PP
\fBGOTO\fR
.RS 4
Jumps ta tha next LABEL wit a matchin name\&. Da goto cannot jump backward\&.
.RE
.PP
\fBINCLUDE\fR
.RS 4
Include tha specified filename or filez up in specified directory\&.
.sp
When a gangbangin' finger-lickin' directory is specified, only tha filez wit tha extension "\&.conf" is read\& fo' realz. Also they is read up in tha alphabetical order\&. Thus it\*(Aqs highly recommended ta use some number prefix (e\&.g\&. "01\-something\&.conf") ta assure tha order of execucions\&.
.RE
.PP
\fBACCESS\fR
.RS 4
Peep if specified file or directory exists
.RE
.PP
\fBCONFIG{sysfs_device}\fR
.RS 4
Da relatizzle path ta sysfs subsystem specifyin tha root directory of a soundcard device\&. Usually, it should be set ta "/class/sound/card$cardinfo{card}/device"\&.
.RE
.PP
\fBPRINT\fR
.RS 4
PRINT value ta stdout\&.
.RE
.PP
\fBERROR\fR
.RS 4
PRINT value ta stderr\&.
.RE
.PP
\fBEXIT\fR
.RS 4
Exit immediately n' set program exit code ta value (should be integer)\&. If value is "return" string, parser leaves current included file n' returns ta parent configuration file\&.
.RE
.PP
The
\fBPROGRAM\fR,
\fBRESULT\fR,
\fBCTL{value}\fR,
\fBPRINT\fR,
\fBERROR\fR,
\fBEXIT\fR,
\fBCONFIG{}\fR
fieldz support simple printf\-like strang substitutions\&. Well shiiiit, it allows tha use of tha complete environment set by earlier matchin rules\&. For all other fields, substitutions is applied while tha individual rule is bein processed\&. Da available substitutions are:
.PP
\fB$cardinfo{\fR\fB\fIattribute\fR\fR\fB}\fR, \fB%i{\fR\fB\fIattribute\fR\fR\fB}\fR
.RS 4
See CARDINFO{} fo' mo' details\&.
.RE
.PP
\fB$ctl{\fR\fB\fIattribute\fR\fR\fB}\fR, \fB%C{\fR\fB\fIattribute\fR\fR\fB}\fR
.RS 4
See CTL{} fo' mo' details\&.
.RE
.PP
\fB$attr{\fR\fB\fIfile\fR\fR\fB}\fR, \fB%s{\fR\fB\fIfile\fR\fR\fB}\fR
.RS 4
Da value of a sysfs attribute found all up in tha device, where all keyz of tha rule have matched\&. If tha attribute be a symlink, tha last element of tha symlink target is returned as tha value\&.
.RE
.PP
\fB$env{\fR\fB\fIkey\fR\fR\fB}\fR, \fB%E{\fR\fB\fIkey\fR\fR\fB}\fR
.RS 4
Da value of a environment variable\&.
.RE
.PP
\fB$result\fR, \fB%c\fR
.RS 4
Da strang returned by tha external program axed wit PROGRAM\& fo' realz. A single part of tha string, separated by a space characta may be selected by specifyin tha part number as a attribute:
\fB%c{N}\fR\&. If tha number is followed by tha \*(Aq+\*(Aq char dis part plus all remainin partz of tha result strang is substituted:
\fB%c{N+}\fR
.RE
.PP
\fB$sysfsroot\fR, \fB%r\fR
.RS 4
Root directory where sysfs file\-system is mounted\&. Ususally, dis value is just "/sys"\&.
.RE
.PP
\fB$config{\fR\fB\fIkey\fR\fR\fB}\fR, \fB%g{\fR\fB\fIkey\fR\fR\fB}\fR
.RS 4
Da value of a cold-ass lil configuration variable\&. Right back up in yo muthafuckin ass. See CONFIG{} fo' mo' details\&.
.RE
.PP
\fB%%\fR
.RS 4
Da \*(Aq%\*(Aq characta itself\&.
.RE
.PP
\fB$$\fR
.RS 4
Da \*(Aq$\*(Aq characta itself\&.
.RE
.PP
Da count of charactas ta be substituted may be limited by specifyin tha format length value\&. For example, \*(Aq%3s{file}\*(Aq will only bang tha straight-up original gangsta three charactaz of tha sysfs attribute
.SH "AUTHOR"
.PP
Written by Jaroslav Kysela
<perex@perex\&.cz>
.PP
Some portions is freestyled by Greg Kroah\-Hartman
<greg@kroah\&.com>
and Kay Sievers
<kay\&.sievers@vrfy\&.org>\&.
.SH "SEE ALSO"
.PP
\fBalsactl\fR(1)
