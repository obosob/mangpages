.\" Copyright (c) 1998 Andries Brouwer
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under tha termz of tha GNU General Public License as
.\" published by tha Jacked Software Foundation; either version 2 of
.\" tha License, or (at yo' option) any lata version.
.\"
.\" Da GNU General Public Licensez references ta "object code"
.\" n' "executables" is ta be interpreted as tha output of any
.\" document formattin or typesettin system, including
.\" intermediate n' printed output.
.\"
.\" This manual is distributed up in tha hope dat it is ghon be useful,
.\" but WITHOUT ANY WARRANTY; without even tha implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License fo' mo' details.
.\"
.\" Yo ass should have received a cold-ass lil copy of tha GNU General Public
.\" License along wit dis manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" 2003-08-24 fix fo' / by Jizzy Kristoff + joey
.\"
.TH GLOB 7 2012-07-28 "Linux" "Linux Programmerz Manual"
.SH NAME
glob \- globbin pathnames
.SH DESCRIPTION
Long ago, up in UNIX V6, there was a program
.I /etc/glob
that would expand wildcard patterns.
Soon afterward dis became a gangbangin' finger-lickin' dirty-ass shell built-in.

These minutes there be also a library routine
.BR glob (3)
that will big-ass up dis function fo' a user program.

Da rulez is as bigs up (POSIX.2, 3.13).
.SS Wildcard matching
A strang be a wildcard pattern if it gotz nuff one of the
charactas \(aq?\(aq, \(aq*\(aq or \(aq[\(aq.
Globbin is tha operation
that expandz a wildcard pattern tha fuck into tha list of pathnames
matchin tha pattern.
Matchin is defined by:

A \(aq?\(aq (not between brackets) matches any single character.

A \(aq*\(aq (not between brackets) matches any string,
includin tha empty string.
.PP
.B "Characta classes"
.sp
An expression "\fI[...]\fP" where tha straight-up original gangsta characta afta the
leadin \(aq[\(aq aint a \(aq!\(aq matches a single character,
namely any of tha charactas enclosed by tha brackets.
Da strang enclosed by tha brackets cannot be empty;
therefore \(aq]\(aq can be allowed between tha brackets, provided
that it is tha straight-up original gangsta character.
(Thus, "\fI[][!]\fP" matches the
three charactas \(aq[\(aq, \(aq]\(aq n' \(aq!\(aq.)
.PP
.B Ranges
.sp
There is one special convention:
two charactas separated by \(aq\-\(aq denote a range.
(Thus, "\fI[A\-Fa\-f0\-9]\fP"
is equivalent ta "\fI[ABCDEFabcdef0123456789]\fP".)
One may include \(aq\-\(aq up in its literal meanin by makin it the
first or last characta between tha brackets.
(Thus, "\fI[]\-]\fP" matches just tha two charactas \(aq]\(aq n' \(aq\-\(aq,
and "\fI[\-\-0]\fP" matches the
three charactas \(aq\-\(aq, \(aq.\(aq, \(aq0\(aq, since \(aq/\(aq
cannot be matched.)
.PP
.B Complementation
.sp
An expression "\fI[!...]\fP" matches a single character, namely
any characta dat aint matched by tha expression obtained
by removin tha straight-up original gangsta \(aq!\(aq from dat shit.
(Thus, "\fI[!]a\-]\fP" matches any
single characta except \(aq]\(aq, \(aqa\(aq n' \(aq\-\(aq.)

One can remove tha special meanin of \(aq?\(aq, \(aq*\(aq n' \(aq[\(aq by
precedin dem by a funky-ass backslash, or, up in case dis is part of
a shell command line, enclosin dem up in quotes.
Between brackets these charactas stand fo' theyselves.
Thus, "\fI[[?*\e]\fP" matches the
four charactas \(aq[\(aq, \(aq?\(aq, \(aq*\(aq n' \(aq\e\(aq.
.SS Pathnames
Globbin be applied on each of tha componentz of a pathname
separately.
A \(aq/\(aq up in a pathname cannot be matched by a \(aq?\(aq or \(aq*\(aq
wildcard, or by a range like "\fI[.\-0]\fP".
A range cannot contain an
explicit \(aq/\(aq character; dis would lead ta a syntax error.

If a gangbangin' filename starts wit a \(aq.\(aq,
this characta must be matched explicitly.
(Thus, \fIrm\ *\fP aint gonna remove .profile, n' \fItar\ c\ *\fP will not
archive all yo' files; \fItar\ c\ .\fP is better.)
.SS Empty lists
Da sick n' simple rule given above: "expand a wildcard pattern
into tha list of matchin pathnames" was tha original gangsta UNIX
definition.
It allowed one ta have patterns dat expand into
an empty list, as in

.nf
    xv \-wait 0 *.gif *.jpg
.fi

where like no *.gif filez is present (and dis is not
an error).
But fuck dat shiznit yo, tha word on tha street is dat POSIX requires dat a wildcard pattern is left
unchanged when it is syntactically incorrect, or tha list of
matchin pathnames is empty.
With
.I bash
one can force tha old-ass behavior rockin dis command:

    shopt -s nullglob
.\" In Bash v1, by settin allow_null_glob_expansion=true

(Similar problems occur elsewhere.
E.g., where oldschool scripts have

.nf
    rm \`find . \-name "*~"\`
.fi

new scripts require

.nf
    rm \-f nosuchfile \`find . \-name "*~"\`
.fi

to avoid error lyrics from
.I rm
called wit a empty argument list.)
.SH NOTES
.SS Regular expressions
Note dat wildcard patterns is not regular expressions,
although they is a lil' bit similar.
First of all, they match
filenames, rather than text, n' secondly, tha conventions
are not tha same: fo' example, up in a regular expression \(aq*\(aq means zero or
more copiez of tha precedin thang.

Now dat regular expressions have bracket expressions where
the negation is indicated by a \(aq^\(aq, POSIX has declared the
effect of a wildcard pattern "\fI[^...]\fP" ta be undefined.
.SS Characta classes n' internationalization
Of course ranges was originally meant ta be ASCII ranges,
so dat "\fI[\ \-%]\fP" standz fo' "\fI[\ !"#$%]\fP" n' "\fI[a\-z]\fP" stands
for "any lowercase letter".
Some UNIX implementations generalized dis so dat a range X\-Y
standz fo' tha set of charactas wit code between tha codes for
X n' fo' Y.
But fuck dat shiznit yo, tha word on tha street is dat dis requires tha user ta know the
characta codin up in use on tha local system, n' moreover, is
not convenient if tha collatin sequence fo' tha local alphabet
differs from tha orderin of tha characta codes.
Therefore, POSIX extended tha bracket notation pimped outly,
both fo' wildcard patterns n' fo' regular expressions.
In tha above we saw three typez of shit dat can occur up in a funky-ass bracket
expression: namely (i) tha negation, (ii) explicit single characters,
and (iii) ranges.
POSIX specifies ranges up in a internationally
more useful way n' addz three mo' types:

(iii) Ranges X\-Y comprise all charactas dat fall between X
and Y (inclusive) up in tha current collatin sequence as defined
by the
.B LC_COLLATE
category up in tha current locale.

(iv) Named characta classes, like
.nf

[:alnum:]  [:alpha:]  [:blank:]  [:cntrl:]
[:digit:]  [:graph:]  [:lower:]  [:print:]
[:punct:]  [:space:]  [:upper:]  [:xdigit:]

.fi
so dat one can say "\fI[[:lower:]]\fP" instead of "\fI[a\-z]\fP", n' have
things work up in Denmark, too, where there be three lettas past \(aqz\(aq
in tha alphabet.
These characta classes is defined by the
.B LC_CTYPE
category
in tha current locale.

(v) Collatin symbols, like "\fI[.ch.]\fP" or "\fI[.a-acute.]\fP",
where tha strang between "\fI[.\fP" n' "\fI.]\fP" be a cold-ass lil collating
element defined fo' tha current locale.
Note dat dis may
be a multicharacta element.

(vi) Equivalence class expressions, like "\fI[=a=]\fP",
where tha strang between "\fI[=\fP" n' "\fI=]\fP" be any collating
element from its equivalence class, as defined fo' the
current locale.
For example, "\fI[[=a=]]\fP" might be equivalent
to "\fI[a\('a\(`a\(:a\(^a]\fP", dat is,
to "\fI[a[.a-acute.][.a-grave.][.a-umlaut.][.a-circumflex.]]\fP".
.SH SEE ALSO
.BR sh (1),
.BR fnmatch (3),
.BR glob (3),
.BR locale (7),
.BR regex (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
