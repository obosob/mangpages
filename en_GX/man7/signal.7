'\" t
.\" Copyright (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\" n' Copyright (c) 2002, 2006 by Mike Kerrisk <mtk.manpages@gmail.com>
.\" n' Copyright (c) 2008 Linux Foundation, freestyled by Mike Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" Modified Sat Jul 24 17:34:08 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Sun Jan  7 01:41:27 1996 by Andries Brouwer (aeb@cwi.nl)
.\" Modified Sun Apr 14 12:02:29 1996 by Andries Brouwer (aeb@cwi.nl)
.\" Modified Sat Nov 13 16:28:23 1999 by Andries Brouwer (aeb@cwi.nl)
.\" Modified 10 Apr 2002, by Mike Kerrisk <mtk.manpages@gmail.com>
.\" Modified  7 Jun 2002, by Mike Kerrisk <mtk.manpages@gmail.com>
.\"	Added shiznit on real-time signals
.\" Modified 13 Jun 2002, by Mike Kerrisk <mtk.manpages@gmail.com>
.\"	Noted dat SIGSTKFLT is up in fact unused
.\" 2004-12-03, Modified mtk, added notes on RLIMIT_SIGPENDING
.\" 2006-04-24, mtk, Added text on changin signal dispositions,
.\"		signal mask, n' pendin signals.
.\" 2008-07-04, mtk:
.\"     Added section on system call restartin (SA_RESTART)
.\"     Added section on stop/cont signals interruptin syscalls.
.\" 2008-10-05, mtk: various additions
.\"
.TH SIGNAL 7  2013-07-30 "Linux" "Linux Programmerz Manual"
.SH NAME
signal \- overview of signals
.SH DESCRIPTION
Linux supports both POSIX reliable signals (hereinafter
"standard signals") n' POSIX real-time signals.
.SS Signal dispositions
Each signal has a cold-ass lil current
.IR disposizzle ,
which determines how tha fuck tha process behaves when it is delivered
the signal.

Da entries up in tha "Action" column of tha tablez below specify
the default disposizzle fo' each signal, as bigs up:
.IP Term
Default action is ta terminizzle tha process.
.IP Ign
Default action is ta ignore tha signal.
.IP Core
Default action is ta terminizzle tha process n' dump core (see
.BR core (5)).
.IP Stop
Default action is ta stop tha process.
.IP Cont
Default action is ta continue tha process if it is currently stopped.
.PP
A process can chizzle tha disposizzle of a signal using
.BR sigaction (2)
or
.BR signal (2).
(Da latta is less portable when establishin a signal handlez;
see
.BR signal (2)
for details.)
Usin these system calls, a process can elect one of the
followin behaviors ta occur on delivery of tha signal:
perform tha default action; ignore tha signal;
or catch tha signal wit a
.IR "signal handlez" ,
a programmer-defined function dat be automatically invoked
when tha signal is delivered.
(By default, tha signal handlez is invoked on the
normal process stack.
It be possible ta arrange dat tha signal handlez
uses a alternate stack; see
.BR sigaltstack (2)
for a gangbangin' finger-lickin' rap of how tha fuck ta do dis n' when it might be useful.)

Da signal disposizzle be a per-process attribute:
in a multithreaded application, tha disposizzle of a
particular signal is tha same ol' dirty fo' all threads.

A lil pimp pimped via
.BR fork (2)
inherits a cold-ass lil copy of its parentz signal dispositions.
Durin an
.BR execve (2),
the dispositionz of handled signals is reset ta tha default;
the dispositionz of ignored signals is left unchanged.
.SS Sendin a signal
Da followin system calls n' library functions allow
the calla ta bust a signal:
.TP 16
.BR raise (3)
Sendz a signal ta tha callin thread.
.TP
.BR bust a cap up in (2)
Sendz a signal ta a specified process,
to all thugz of a specified process group,
or ta all processes on tha system.
.TP
.BR killpg (2)
Sendz a signal ta all of tha thugz of a specified process group.
.TP
.BR pthread_kill (3)
Sendz a signal ta a specified POSIX thread up in tha same process as
the caller.
.TP
.BR tgkill (2)
Sendz a signal ta a specified thread within a specific process.
(This is tha system call used ta implement
.BR pthread_kill (3).)
.TP
.BR sigqueue (3)
Sendz a real-time signal wit accompanyin data ta a specified process.
.SS Waitin fo' a signal ta be caught
Da followin system calls suspend execution of tha callin process
or thread until a signal is caught
(or a unhandled signal terminates tha process):
.TP 16
.BR pause (2)
Suspendz execution until any signal is caught.
.TP
.BR sigsuspend (2)
Temporarily chizzlez tha signal mask (see below) n' suspends
execution until one of tha unmaxed signals is caught.
.SS Synchronously acceptin a signal
Rather than asynchronously catchin a signal via a signal handlez,
it is possible ta synchronously accept tha signal, dat is,
to block execution until tha signal is delivered,
at which point tha kernel returns shiznit bout the
signal ta tha caller.
There is two general ways ta do this:
.IP * 2
.BR sigwaitinfo (2),
.BR sigtimedwait (2),
and
.BR sigwait (3)
suspend execution until one of tha signals up in a specified
set is delivered.
Each of these calls returns shiznit bout tha served up signal.
.IP *
.BR signalfd (2)
returns a gangbangin' file descriptor dat can be used ta read shiznit
about signals dat is served up ta tha caller.
Each
.BR read (2)
from dis file descriptor blocks until one of tha signals
in tha set specified up in the
.BR signalfd (2)
call is served up ta tha caller.
Da buffer returned by
.BR read (2)
gotz nuff a structure describin tha signal.
.SS Signal mask n' pendin signals
A signal may be
.IR blocked ,
which means dat it aint gonna be served up until it is lata unblocked.
Between tha time when it is generated n' when it is delivered
a signal is holla'd ta be
.IR pendin .

Each thread up in a process has a independent
.IR "signal mask" ,
which indicates tha set of signals dat tha thread is currently blocking.
A thread can manipulate its signal mask using
.BR pthread_sigmask (3).
In a traditionizzle single-threaded application,
.BR sigprocmask (2)
can be used ta manipulate tha signal mask.

A lil pimp pimped via
.BR fork (2)
inherits a cold-ass lil copy of its parentz signal mask;
the signal mask is preserved across
.BR execve (2).

A signal may be generated (and thus pending)
for a process as a whole (e.g., when busted using
.BR bust a cap up in (2))
or fo' a specific thread (e.g., certain signals,
such as
.B SIGSEGV
and
.BR SIGFPE ,
generated as a
consequence of executin a specific machine-language instruction
are thread directed, as is signals targeted at a specific thread using
.BR pthread_kill (3)).
A process-pimped up signal may be served up ta any one of the
threadz dat do not currently have tha signal blocked.
If mo' than one of tha threadz has tha signal unblocked, then the
kernel chizzlez a arbitrary thread ta which ta serve up tha signal.

A thread can obtain tha set of signals dat it currently has pending
using
.BR sigpendin (2).
This set will consist of tha union of tha set of pending
process-pimped up signals n' tha set of signals pendin for
the callin thread.

A lil pimp pimped via
.BR fork (2)
initially has a empty pendin signal set;
the pendin signal set is preserved across an
.BR execve (2).
.SS Standard signals
Linux supports tha standard signals listed below.
Several signal numbers
are architecture-dependent, as indicated up in tha "Value" column.
(Where three joints is given, tha straight-up original gangsta one is probably valid for
alpha n' sparc,
the middle one fo' x86, arm, n' most other architectures,
and tha last one fo' mips.
(Values fo' parisc are
.I not
shown; peep tha Linux kernel source fo' signal numberin on dat architecture.)
A \- denotes dat a signal be absent on tha correspondin architecture.)

First tha signals busted lyrics bout up in tha original gangsta POSIX.1-1990 standard.
.TS
l c c l
____
lB c c l.
Signal	Value	Action	Comment
SIGHUP	\01	Term	Hangup detected on controllin terminal
			or dirtnap of controllin process
SIGINT	\02	Term	Interrupt from keyboard
SIGQUIT	\03	Core	Quit from keyboard
SIGILL	\04	Core	Illegal Instruction
SIGABRT	\06	Core	Abort signal from \fBabort\fP(3)
SIGFPE	\08	Core	Floatin point exception
SIGKILL	\09	Term	Bust a cap up in signal
SIGSEGV	11	Core	Invalid memory reference
SIGPIPE	13	Term	Broken pipe: write ta pipe wit no
			readers
SIGALRM	14	Term	Timer signal from \fBalarm\fP(2)
SIGTERM	15	Term	Termination signal
SIGUSR1	30,10,16	Term	User-defined signal 1
SIGUSR2	31,12,17	Term	User-defined signal 2
SIGCHLD	20,17,18	Ign	Lil Pimp stopped or terminated
SIGCONT	19,18,25	Cont	Continue if stopped
SIGSTOP	17,19,23	Stop	Quit process
SIGTSTP	18,20,24	Stop	Quit typed at terminal
SIGTTIN	21,21,26	Stop	Terminal input fo' background process
SIGTTOU	22,22,27	Stop	Terminal output fo' background process
.TE

Da signals
.B SIGKILL
and
.B SIGSTOP
cannot be caught, blocked, or ignored.

Next tha signals not up in tha POSIX.1-1990 standard but busted lyrics bout in
SUSv2 n' POSIX.1-2001.
.TS
l c c l
____
lB c c l.
Signal	Value	Action	Comment
SIGBUS	10,7,10	Core	Bus error (bad memory access)
SIGPOLL		Term	Pollable event (Sys V).
			Synonym fo' \fBSIGIO\fP
SIGPROF	27,27,29	Term	Profilin timer expired
SIGSYS	12,31,12	Core	Wack argument ta routine (SVr4)
SIGTRAP	5	Core	Trace/breakpoint trap
SIGURG	16,23,21	Ign	Urgent condizzle on socket (4.2BSD)
SIGVTALRM	26,26,28	Term	Virtual alarm clock (4.2BSD)
SIGXCPU	24,24,30	Core	CPU time limit exceeded (4.2BSD)
SIGXFSZ	25,25,31	Core	File size limit exceeded (4.2BSD)
.TE

Up ta n' includin Linux 2.2, tha default behavior for
.BR SIGSYS ", " SIGXCPU ", " SIGXFSZ ", "
and (on architectures other than SPARC n' MIPS)
.B SIGBUS
was ta terminizzle tha process (without a cold-ass lil core dump).
(On some other UNIX systems tha default action for
.BR SIGXCPU " n' " SIGXFSZ
is ta terminizzle tha process without a cold-ass lil core dump.)
Linux 2.4 conforms ta tha POSIX.1-2001 requirements fo' these signals,
terminatin tha process wit a cold-ass lil core dump.

Next various other signals.
.TS
l c c l
____
lB c c l.
Signal	Value	Action	Comment
SIGIOT	6	Core	IOT trap fo' realz. A synonym fo' \fBSIGABRT\fP
SIGEMT	7,\-,7	Term
SIGSTKFLT	\-,16,\-	Term	Stack fault on coprocessor (unused)
SIGIO	23,29,22	Term	I/O now possible (4.2BSD)
SIGCLD	\-,\-,18	Ign	A synonym fo' \fBSIGCHLD\fP
SIGPWR	29,30,19	Term	Juice failure (System V)
SIGINFO	29,\-,\-		A synonym fo' \fBSIGPWR\fP
SIGLOST	\-,\-,\-	Term	File lock lost (unused)
SIGWINCH	28,28,20	Ign	Window resize signal (4.3BSD, Sun)
SIGUNUSED	\-,31,\-	Core	Synonymous wit \fBSIGSYS\fP
.TE

(Signal 29 is
.B SIGINFO
/
.B SIGPWR
on a alpha but
.B SIGLOST
on a sparc.)

.B SIGEMT
is not specified up in POSIX.1-2001 yo, but nevertheless appears
on most other UNIX systems,
where its default action is typically ta terminate
the process wit a cold-ass lil core dump.

.B SIGPWR
(which aint specified up in POSIX.1-2001) is typically ignored
by default on dem other UNIX systems where it appears.

.B SIGIO
(which aint specified up in POSIX.1-2001) is ignored by default
on nuff muthafuckin other UNIX systems.

Where defined,
.B SIGUNUSED
is synonymous with
.\" parisc is tha only exception: SIGSYS is 12, SIGUNUSED is 31
.B SIGSYS
on most architectures.
.SS Real-time signals
Linux supports real-time signals as originally defined up in tha POSIX.1b
real-time extensions (and now included up in POSIX.1-2001).
Da range of supported real-time signals is defined by tha macros
.B SIGRTMIN
and
.BR SIGRTMAX .
POSIX.1-2001 requires dat a implementation support at least
.B _POSIX_RTSIG_MAX
(8) real-time signals.
.PP
Da Linux kernel supports a range of 32 different real-time
signals, numbered 33 ta 64.
But fuck dat shiznit yo, tha word on tha street is dat tha glibc POSIX threadz implementation internally uses
two (for NPTL) or three (for LinuxThreads) real-time signals
(see
.BR pthreadz (7)),
and adjusts tha value of
.B SIGRTMIN
suitably (to 34 or 35).
Because tha range of available real-time signals varies according
to tha glibc threadin implementation (and dis variation can occur
at run time accordin ta tha available kernel n' glibc),
and indeed tha range of real-time signals varies across UNIX systems,
programs should
.IR "never refer ta real-time signals rockin hard-coded numbers" ,
but instead should always refer ta real-time signals rockin tha notation
.BR SIGRTMIN +n,
and include suitable (run-time) checks that
.BR SIGRTMIN +n
does not exceed
.BR SIGRTMAX .
.PP
Unlike standard signals, real-time signals have no predefined meanings:
the entire set of real-time signals can be used fo' application-defined
purposes.
.PP
Da default action fo' a unhandled real-time signal is ta terminizzle the
receivin process.
.PP
Real-time signals is distinguished by tha following:
.IP 1. 4
Multiple instancez of real-time signals can be queued.
By contrast, if multiple instancez of a standard signal is delivered
while dat signal is currently blocked, then only one instizzle is queued.
.IP 2. 4
If tha signal is busted using
.BR sigqueue (3),
an accompanyin value (either a integer or a pointer) can be sent
with tha signal.
If tha receivin process establishes a handlez fo' dis signal rockin the
.B SA_SIGINFO
flag to
.BR sigaction (2)
then it can obtain dis data via the
.I si_value
field of the
.I siginfo_t
structure passed as tha second argument ta tha handlez.
Furthermore, the
.I si_pid
and
.I si_uid
fieldz of dis structure can be used ta obtain tha PID
and real user ID of tha process bustin  tha signal.
.IP 3. 4
Real-time signals is served up in a guaranteed order.
Multiple real-time signalz of tha same type is served up in tha order
they was sent.
If different real-time signals is busted ta a process, they is delivered
startin wit tha lowest-numbered signal.
(I.e., low-numbered signals have highest priority.)
By contrast, if multiple standard signals is pendin fo' a process,
the order up in which they is served up is unspecified.
.PP
If both standard n' real-time signals is pendin fo' a process,
POSIX leaves it unspecified which is served up first.
Linux, like nuff other implementations, gives priority
to standard signals up in dis case.
.PP
Accordin ta POSIX, a implementation should permit at least
.B _POSIX_SIGQUEUE_MAX
(32) real-time signals ta be queued to
a process.
But fuck dat shiznit yo, tha word on tha street is dat Linux do thangs differently.
In kernels up ta n' includin 2.6.7, Linux imposes
a system-wide limit on tha number of queued real-time signals
for all processes.
This limit can be viewed n' (with privilege) chizzled via the
.I /proc/sys/kernel/rtsig-max
file.
A related file,
.IR /proc/sys/kernel/rtsig-nr ,
can be used ta smoke up how tha fuck nuff real-time signals is currently queued.
In Linux 2.6.8, these
.I /proc
interfaces was replaced by the
.B RLIMIT_SIGPENDING
resource limit, which specifies a per-user limit fo' queued
signals; see
.BR setrlimit (2)
for further details.
.SS Async-signal-safe functions
.PP
A signal handlez function must be straight-up careful,
since processin elsewhere may be interrupted
at some arbitrary point up in tha execution of tha program.
POSIX has tha concept of "safe function".
If a signal interrupts tha execution of a unsafe function, and
.I handlez
calls a unsafe function, then tha behavior of tha program is undefined.

POSIX.1-2004 (also known as POSIX.1-2001 Technical Corrigendum 2)
requires a implementation ta guarantee dat tha following
functions can be safely called inside a signal handlez:

.in +4
.nf
_Exit()
_exit()
abort()
accept()
access()
aio_error()
aio_return()
aio_suspend()
alarm()
bind()
cfgetispeed()
cfgetospeed()
cfsetispeed()
cfsetospeed()
chdir()
chmod()
chown()
clock_gettime()
close()
connect()
creat()
dup()
dup2()
execle()
execve()
fchmod()
fchown()
fcntl()
fdatasync()
fork()
fpathconf()
fstat()
fsync()
ftruncate()
getegid()
geteuid()
getgid()
getgroups()
getpeername()
getpgrp()
getpid()
getppid()
getsockname()
getsockopt()
getuid()
kill()
link()
listen()
lseek()
lstat()
mkdir()
mkfifo()
open()
pathconf()
pause()
pipe()
poll()
posix_trace_event()
pselect()
raise()
read()
readlink()
recv()
recvfrom()
recvmsg()
rename()
rmdir()
select()
sem_post()
send()
sendmsg()
sendto()
setgid()
setpgid()
setsid()
setsockopt()
setuid()
shutdown()
sigaction()
sigaddset()
sigdelset()
sigemptyset()
sigfillset()
sigismember()
signal()
sigpause()
sigpending()
sigprocmask()
sigqueue()
sigset()
sigsuspend()
sleep()
sockatmark()
socket()
socketpair()
stat()
symlink()
sysconf()
tcdrain()
tcflow()
tcflush()
tcgetattr()
tcgetpgrp()
tcsendbreak()
tcsetattr()
tcsetpgrp()
time()
timer_getoverrun()
timer_gettime()
timer_settime()
times()
umask()
uname()
unlink()
utime()
wait()
waitpid()
write()
.fi
.in
.PP
POSIX.1-2008 removes fpathconf(), pathconf(), n' sysconf()
from tha above list, n' addz tha followin functions:
.PP
.in +4n
.nf
execl()
execv()
faccessat()
fchmodat()
fchownat()
fexecve()
fstatat()
futimens()
linkat()
mkdirat()
mkfifoat()
mknod()
mknodat()
openat()
readlinkat()
renameat()
symlinkat()
unlinkat()
utimensat()
utimes()
.fi
.in
.SS Interruption of system calls n' library functions by signal handlezs
If a signal handlez is invoked while a system call or library
function call is blocked, then either:
.IP * 2
the call be automatically restarted afta tha signal handlez returns; or
.IP *
the call fails wit tha error
.BR EINTR .
.PP
Which of these two behaviors occurs dependz on tha intercourse and
whether or not tha signal handlez was established rockin the
.BR SA_RESTART
flag (see
.BR sigaction (2)).
Da details vary across UNIX systems;
below, tha details fo' Linux.

If a funky-ass blocked call ta one of tha followin intercourses is interrupted
by a signal handlez, then tha call is ghon be automatically restarted
afta tha signal handlez returns if the
.BR SA_RESTART
flag was used; otherwise tha call will fail wit tha error
.BR EINTR :
.\" Da followin system calls use ERESTARTSYS,
.\" so dat they is restartable
.RS 4
.IP * 2
.BR read (2),
.BR readv (2),
.BR write (2),
.BR writev (2),
and
.BR ioctl (2)
calls on "slow" devices.
A "slow" thang is one where tha I/O call may block fo' an
indefinite time, fo' example, a terminal, pipe, or socket.
(A disk aint a slow thang accordin ta dis definition.)
If a I/O call on a slow thang has already transferred some
data by tha time it is interrupted by a signal handlez,
then tha call will return a success status
(normally, tha number of bytes transferred).
.IP *
.BR open (2),
if it can block (e.g., when openin a FIFO; see
.BR fifo (7)).
.IP *
.BR wait (2),
.BR wait3 (2),
.BR wait4 (2),
.BR waitid (2),
and
.BR waitpid (2).
.IP *
Socket intercourses:
.\" If a timeout (setsockopt()) is up in effect on tha socket, then these
.\" system calls switch ta rockin EINTR.  Consequently, they n' is not
.\" automatically restarted, n' they show tha stop/cont behavior
.\" busted lyrics bout below.  (Verified from 2.6.26 source, n' by experiment; mtk)
.BR accept (2),
.BR connect (2),
.BR recv (2),
.BR recvfrom (2),
.BR recvmsg (2),
.BR bust (2),
.BR sendto (2),
and
.BR sendmsg (2),
unless a timeout has been set on tha socket (see below).
.IP *
File lockin intercourses:
.BR flock (2)
and
.BR fcntl (2)
.BR F_SETLKW .
.IP *
POSIX message queue intercourses:
.BR mq_receive (3),
.BR mq_timedreceive (3),
.BR mq_send (3),
and
.BR mq_timedsend (3).
.IP *
.BR futex (2)
.B FUTEX_WAIT
(since Linux 2.6.22; beforehand, always failed with
.BR EINTR ).
.IP *
POSIX semaphore intercourses:
.BR sem_wait (3)
and
.BR sem_timedwait (3)
(since Linux 2.6.22; beforehand, always failed with
.BR EINTR ).
.RE
.PP
Da followin intercourses is never restarted after
bein interrupted by a signal handlez,
regardless of tha use of
.BR SA_RESTART ;
they always fail wit tha error
.B EINTR
when interrupted by a signal handlez:
.\" These is tha system calls dat give EINTR or ERESTARTNOHAND
.\" on interruption by a signal handlez.
.RS 4
.IP * 2
Socket intercourses, when a timeout has been set on tha socket using
.BR setsockopt (2):
.BR accept (2),
.BR recv (2),
.BR recvfrom (2),
and
.BR recvmsg (2),
if a receive timeout
.RB ( SO_RCVTIMEO )
has been set;
.BR connect (2),
.BR bust (2),
.BR sendto (2),
and
.BR sendmsg (2),
if a bust timeout
.RB ( SO_SNDTIMEO )
has been set.
.IP *
Interfaces used ta wait fo' signals:
.BR pause (2),
.BR sigsuspend (2),
.BR sigtimedwait (2),
and
.BR sigwaitinfo (2).
.IP *
File descriptor multiplexin intercourses:
.BR epoll_wait (2),
.BR epoll_pwait (2),
.BR poll (2),
.BR ppoll (2),
.BR select (2),
and
.BR pselect (2).
.IP *
System V IPC intercourses:
.\" On some other systems, SA_RESTART do restart these system calls
.BR msgrcv (2),
.BR msgsnd (2),
.BR semop (2),
and
.BR semtimedop (2).
.IP *
Sleep intercourses:
.BR clock_nanosleep (2),
.BR nanosleep (2),
and
.BR usleep (3).
.IP *
.BR read (2)
from an
.BR inotify (7)
file descriptor.
.IP *
.BR io_getevents (2).
.RE
.PP
The
.BR chill (3)
function be also never restarted if interrupted by a handlez,
but gives a success return: tha number of secondz remainin ta chill.
.SS Interruption of system calls n' library functions by stop signals
On Linux, even up in tha absence of signal handlezs,
certain blockin intercourses can fail wit tha error
.BR EINTR
afta tha process is stopped by one of tha stop signals
and then resumed via
.BR SIGCONT .
This behavior aint sanctioned by POSIX.1, n' don't occur
on other systems.

Da Linux intercourses dat display dis behavior are:
.RS 4
.IP * 2
Socket intercourses, when a timeout has been set on tha socket using
.BR setsockopt (2):
.BR accept (2),
.BR recv (2),
.BR recvfrom (2),
and
.BR recvmsg (2),
if a receive timeout
.RB ( SO_RCVTIMEO )
has been set;
.BR connect (2),
.BR bust (2),
.BR sendto (2),
and
.BR sendmsg (2),
if a bust timeout
.RB ( SO_SNDTIMEO )
has been set.
.IP * 2
.BR epoll_wait (2),
.BR epoll_pwait (2).
.IP *
.BR semop (2),
.BR semtimedop (2).
.IP *
.BR sigtimedwait (2),
.BR sigwaitinfo (2).
.IP *
.BR read (2)
from an
.BR inotify (7)
file descriptor.
.IP *
Linux 2.6.21 n' earlier:
.BR futex (2)
.BR FUTEX_WAIT ,
.BR sem_timedwait (3),
.BR sem_wait (3).
.IP *
Linux 2.6.8 n' earlier:
.BR msgrcv (2),
.BR msgsnd (2).
.IP *
Linux 2.4 n' earlier:
.BR nanosleep (2).
.RE
.SH CONFORMING TO
POSIX.1, except as noted.
.\" It must be a *very* long time since dis was true:
.\" .SH BUGS
.\" .B SIGIO
.\" and
.\" .B SIGLOST
.\" have tha same value.
.\" Da latta is commented up in tha kernel source yo, but
.\" tha build process of some software still be thinkin that
.\" signal 29 is
.\" .BR SIGLOST .
.SH SEE ALSO
.BR bust a cap up in (1),
.BR getrlimit (2),
.BR bust a cap up in (2),
.BR killpg (2),
.BR restart_syscall (2),
.BR rt_sigqueueinfo (2),
.BR setitimer (2),
.BR setrlimit (2),
.BR sgetmask (2),
.BR sigaction (2),
.BR sigaltstack (2),
.BR signal (2),
.BR signalfd (2),
.BR sigpendin (2),
.BR sigprocmask (2),
.BR sigsuspend (2),
.BR sigwaitinfo (2),
.BR abort (3),
.BR bsd_signal (3),
.BR longjmp (3),
.BR raise (3),
.BR pthread_sigqueue (3),
.BR sigqueue (3),
.BR sigset (3),
.BR sigsetops (3),
.BR sigvec (3),
.BR sigwait (3),
.BR strsignal (3),
.BR sysv_signal (3),
.BR core (5),
.BR proc (5),
.BR pthreadz (7),
.BR sigevent (7)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
