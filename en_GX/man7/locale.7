.\" Copyright (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted ta make n' distribute verbatim copiez of this
.\" manual provided tha copyright notice n' dis permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted ta copy n' distribute modified versionz of this
.\" manual under tha conditions fo' verbatim copying, provided dat the
.\" entire resultin derived work is distributed under tha termz of a
.\" permission notice identical ta dis one.
.\"
.\" Since tha Linux kernel n' libraries is constantly changing, this
.\" manual page may be incorrect or out-of-date.  Da author(s) assume no
.\" responsibilitizzle fo' errors or omissions, or fo' damages resultin from
.\" tha use of tha shiznit contained herein. I aint talkin' bout chicken n' gravy biatch.  Da author(s) may not
.\" have taken tha same level of care up in tha thang of dis manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versionz of dis manual, if unaccompanied by
.\" tha source, must acknowledge tha copyright n' authorz of dis work.
.\" %%%LICENSE_END
.\"
.\" Modified Sat Jul 24 17:28:34 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Sun Jun 01 17:16:34 1997 by Jochen Hein
.\"   <jochen.hein@delphi.central.de>
.\" Modified Thu Apr 25 00:43:19 2002 by Bruno Haible <bruno@clisp.org>
.\"
.\" FIXME Document LOCPATH;
.\" peep http://sourceware.org/bugzilla/show_bug.cgi?id=174
.TH LOCALE 7  2008-12-05 "Linux" "Linux Programmerz Manual"
.SH NAME
locale \- description of multilanguage support
.SH SYNOPSIS
.nf
.B #include <locale.h>
.fi
.SH DESCRIPTION
A locale be a set of language n' cultural rules.
These cover aspects
like fuckin language fo' lyrics, different characta sets, lexicographic
conventions, n' so on.
A program need ta be able ta determine its locale
and act accordingly ta be portable ta different cultures.
.PP
Da header
.I <locale.h>
declares data types, functions n' macros which is useful up in this
task.
.PP
Da functions it declares are
.BR setlocale (3)
to set tha current locale, and
.BR localeconv (3)
to git shiznit bout number formatting.
.PP
There is different categories fo' local shiznit a program might
need; they is declared as macros.
Usin dem as tha straight-up original gangsta argument
to the
.BR setlocale (3)
function, it is possible ta set one of these ta tha desired locale:
.TP
.B LC_COLLATE
This is used ta chizzle tha behavior of tha functions
.BR strcoll (3)
and
.BR strxfrm (3),
which is used ta compare strings up in tha local alphabet.
For example,
the German sharp s is sorted as "ss".
.TP
.B LC_CTYPE
This chizzlez tha behavior of tha characta handlin and
classification functions, such as
.BR isupper (3)
and
.BR toupper (3),
and tha multibyte characta functions such as
.BR mblen (3)
or
.BR wctomb (3).
.TP
.B LC_MONETARY
changes tha shiznit returned by
.BR localeconv (3)
which raps bout tha way numbers is probably printed, wit details such
as decimal point versus decimal comma.
This shiznit is internally
used by tha function
.BR strfmon (3).
.TP
.B LC_MESSAGES
changes tha language lyrics is displayed up in n' what tha fuck a affirmatizzle or
negatizzle answer looks like.
Da GNU C-library gotz nuff the
.BR gettext (3),
.BR ngettext (3),
and
.BR rpmatch (3)
functions ta ease tha use of these shiznit.
Da GNU gettext crew of
functions also obey tha environment variable
.BR LANGUAGE
(containin a cold-ass lil colon-separated list of locales)
if tha category is set ta a valid locale other than
.BR """C""" .
.TP
.B LC_NUMERIC
changes tha shiznit used by the
.BR printf (3)
and
.BR scanf (3)
family of functions, when they is advised ta use tha locale-settings.
This shiznit can also be read wit the
.BR localeconv (3)
function.
.TP
.B LC_TIME
changes tha behavior of the
.BR strftime (3)
function ta display tha current time up in a locally aaight form; for
example, most of Europe uses a 24-hour clock versus the
12-hour clock used up in tha United Hoods.
.TP
.B LC_ALL
All of tha above.
.\" FIXME glibc 2.2.2 added freshly smoked up nonstandard locale categories:
.\" LC_ADDRESS, LC_IDENTIFICATION, LC_MEASUREMENT, LC_NAME,
.\" LC_PAPER, LC_TELEPHONE.  These need ta be documented.
.PP
If tha second argument to
.BR setlocale (3)
is empty string,
.BR """""" ,
for tha default locale, it is determined rockin tha followin steps:
.IP 1.
If there be a non-null environment variable
.BR LC_ALL ,
the value of
.B LC_ALL
is used.
.IP 2.
If a environment variable wit tha same name as one of tha categories
above exists n' is non-null, its value is used fo' dat category.
.IP 3.
If there be a non-null environment variable
.BR LANG ,
the value of
.B LANG
is used.
.PP
Values bout local numeric formattin is made available up in a
.I struct lconv
returned by the
.BR localeconv (3)
function, which has tha followin declaration:
.in +2n
.nf

struct lconv {

    /* Numeric (nonmonetary) shiznit */

    char *decimal_point;     /* Radix characta */
    char *thousands_sep;     /* Separator fo' digit crews ta left
                                of radix characta */
    char *grouping; /* Each element is tha number of digits up in a
                       group; elements wit higher indices are
                       further left.  An element wit value CHAR_MAX
                       means dat no further groupin is done.  An
                       element wit value 0 means dat tha previous
                       element is used fo' all crews further left. */

    /* Remainin fieldz is fo' monetary shiznit */

    char *int_curr_symbol;   /* First three chars is a cold-ass lil currency symbol
                                from ISO 4217.  Fourth char is the
                                separator. Shiiit, dis aint no joke.  Fifth char is \(aq\\0\(aq. */
    char *currency_symbol;   /* Local currency symbol */
    char *mon_decimal_point; /* Radix characta */
    char *mon_thousands_sep; /* Like \fIthousands_sep\fP above */
    char *mon_grouping;      /* Like \fIgrouping\fP above */
    char *positive_sign;     /* Sign fo' positizzle joints */
    char *negative_sign;     /* Sign fo' wack joints */
    char  int_frac_digits;   /* Internationistic fractionizzle digits */
    char  frac_digits;       /* Local fractionizzle digits */
    char  p_cs_precedes;     /* 1 if currency_symbol precedes a
                                positizzle value, 0 if succeedz */
    char  p_sep_by_space;    /* 1 if a space separates currency_symbol
                                from a positizzle value */
    char  n_cs_precedes;     /* 1 if currency_symbol precedes a
                                wack value, 0 if succeedz */
    char  n_sep_by_space;    /* 1 if a space separates currency_symbol
                                from a wack value */
    /* Positizzle n' wack sign positions:
       0 Parentheses surround tha quantitizzle n' currency_symbol.
       1 Da sign strang precedes tha quantitizzle n' currency_symbol.
       2 Da sign strang succeedz tha quantitizzle n' currency_symbol.
       3 Da sign strang immediately precedes tha currency_symbol.
       4 Da sign strang immediately succeedz tha currency_symbol. */
    char  p_sign_posn;
    char  n_sign_posn;
};
.fi
.in
.SH CONFORMING TO
POSIX.1-2001.

Da GNU gettext functions is specified up in LI18NUX2000.
.SH SEE ALSO
.BR locale (1),
.BR localedef (1),
.BR gettext (3),
.BR localeconv (3),
.BR ngettext (3),
.BR nl_langinfo (3),
.BR rpmatch (3),
.BR setlocale (3),
.BR strcoll (3),
.BR strfmon (3),
.BR strftime (3),
.BR strxfrm (3)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
