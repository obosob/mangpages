'\" t
.\"     Title: gitcvs-migration
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 10/25/2014
.\"    Manual: Git Manual
.\"    Source: Git 1.9.3
.\"  Language: Gangsta
.\"
.TH "GITCVS\-MIGRATION" "7" "10/25/2014" "Git 1\&.9\&.3" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portabilitizzle stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text ta left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
gitcvs-migration \- Git fo' CVS users
.SH "SYNOPSIS"
.sp
.nf
\fIgit cvsimport\fR *
.fi
.sp
.SH "DESCRIPTION"
.sp
Git differs from CVS up in dat every last muthafuckin hustlin tree gotz nuff a repository wit a gangbangin' full copy of tha project history, n' no repository is inherently mo' blingin than any other\&. But fuck dat shiznit yo, tha word on tha street is dat you can emulate tha CVS model by designatin a single shared repository which playas can synchronize with; dis document explains how tha fuck ta do that\&.
.sp
Some basic familiaritizzle wit Git is required\& yo. Havin gone all up in \fBgittutorial\fR(7) n' \fBgitglossary\fR(7) should be sufficient\&.
.SH "DEVELOPING AGAINST A SHARED REPOSITORY"
.sp
Suppose a gangbangin' finger-lickin' dirty-ass shared repository is set up in /pub/repo\&.git on tha host foo\&.com\&. Then as a individual committa you can clone tha shared repository over ssh with:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git clone foo\&.com:/pub/repo\&.git/ my\-project
$ cd my\-project
.fi
.if n \{\
.RE
.\}
.sp
.sp
and hack away\&. Da equivalent of \fIcvs update\fR is
.sp
.if n \{\
.RS 4
.\}
.nf
$ git pull origin
.fi
.if n \{\
.RE
.\}
.sp
.sp
which merges up in any work dat others might have done since tha clone operation\&. If there be uncommitted chizzlez up in yo' hustlin tree, commit dem first before hustlin git pull\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
Da \fIpull\fR command knows where ta git thugged-out shiznit from cuz of certain configuration variablez dat was set by tha straight-up original gangsta \fIgit clone\fR command; peep git config \-l n' tha \fBgit-config\fR(1) playa page fo' details\&.
.sp .5v
.RE
.sp
Yo ass can update tha shared repository wit yo' chizzlez by first committin yo' chizzles, n' then rockin tha \fIgit push\fR command:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git push origin master
.fi
.if n \{\
.RE
.\}
.sp
.sp
to "push" dem commits ta tha shared repository\&. If one of mah thugs has updated tha repository mo' recently, \fIgit push\fR, like \fIcvs commit\fR, will complain, up in which case you must pull any chizzlez before attemptin tha push again\&.
.sp
In tha \fIgit push\fR command above we specify tha name of tha remote branch ta update (master)\&. If our slick asses leave dat out, \fIgit push\fR tries ta update any branches up in tha remote repository dat have tha same name as a funky-ass branch up in tha local repository\&. Right back up in yo muthafuckin ass. So tha last \fIpush\fR can be done wit either of:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git push origin
$ git push foo\&.com:/pub/project\&.git/
.fi
.if n \{\
.RE
.\}
.sp
.sp
as long as tha shared repository aint gots any branches other than master\&.
.SH "SETTING UP A SHARED REPOSITORY"
.sp
We assume you have already pimped a Git repository fo' yo' project, possibly pimped from scratch or from a tarbizzle (see \fBgittutorial\fR(7)), or imported from a already existin CVS repository (see tha next section)\&.
.sp
Assume yo' existin repo be at /home/alice/myproject\&. Right back up in yo muthafuckin ass. Smoke a freshly smoked up "bare" repository (a repository without a hustlin tree) n' fetch yo' project tha fuck into it:
.sp
.if n \{\
.RS 4
.\}
.nf
$ mkdir /pub/my\-repo\&.git
$ cd /pub/my\-repo\&.git
$ git \-\-bare init \-\-shared
$ git \-\-bare fetch /home/alice/myproject master:master
.fi
.if n \{\
.RE
.\}
.sp
.sp
Next, give every last muthafuckin crew member read/write access ta dis repository\&. One easy as fuck  way ta do dis is ta give all tha crew thugz ssh access ta tha machine where tha repository is hosted\&. If you don\(cqt wanna give dem a gangbangin' full shell on tha machine, there be a restricted shell which only allows playas ta do Git pushes n' pulls; peep \fBgit-shell\fR(1)\&.
.sp
Put all tha committas up in tha same group, n' make tha repository writable by dat group:
.sp
.if n \{\
.RS 4
.\}
.nf
$ chgrp \-R $group /pub/my\-repo\&.git
.fi
.if n \{\
.RE
.\}
.sp
.sp
Make shizzle committas gotz a umask of at most 027, so dat tha directories they create is writable n' searchable by other crew members\&.
.SH "IMPORTING A CVS ARCHIVE"
.sp
First, install version 2\&.1 or higher of cvsps from \m[blue]\fBhttp://www\&.cobite\&.com/cvsps/\fR\m[] n' make shizzle it is up in yo' path\&. Then cd ta a cold-ass lil checked up CVS hustlin directory of tha project yo ass is horny bout n' run \fBgit-cvsimport\fR(1):
.sp
.if n \{\
.RS 4
.\}
.nf
$ git cvsimport \-C <destination> <module>
.fi
.if n \{\
.RE
.\}
.sp
.sp
This puts a Git archive of tha named CVS module up in tha directory <destination>, which is ghon be pimped if necessary\&.
.sp
Da import checks up from CVS every last muthafuckin revision of every last muthafuckin file\&. Reportedly cvsimport can average some twenty revisions per second, so fo' a medium\-sized project dis should not take mo' than a cold-ass lil couple minutes\&. Larger projects or remote repositories may take longer\&.
.sp
Da main trunk is stored up in tha Git branch named origin, n' additionizzle CVS branches is stored up in Git branches wit tha same names\&. Da most recent version of tha main trunk be also left checked up on tha masta branch, so you can start addin yo' own chizzlez right away\&.
.sp
Da import is incremental, so if you call it again n' again n' again next month it will fetch any CVS thugged-out shiznit dat done been made up in tha meantime\&. For dis ta work, you must not modify tha imported branches; instead, create freshly smoked up branches fo' yo' own chizzles, n' merge up in tha imported branches as necessary\&.
.sp
If you want a gangbangin' finger-lickin' dirty-ass shared repository, yo big-ass booty is ghon need ta cook up a funky-ass bare clone of tha imported directory, as busted lyrics bout above\&. Then treat tha imported directory as another pimpment clone fo' purposez of mergin incremenstrual imports\&.
.SH "ADVANCED SHARED REPOSITORY MANAGEMENT"
.sp
Git allows you ta specify scripts called "hooks" ta be run at certain points\&. Yo ass can use these, fo' example, ta bust all commits ta tha shared repository ta a mailin list\&. Right back up in yo muthafuckin ass. See \fBgithooks\fR(5)\&.
.sp
Yo ass can enforce finer grained permissions rockin update hooks\&. Right back up in yo muthafuckin ass. See \m[blue]\fBControllin access ta branches rockin update hooks\fR\m[]\&\s-2\u[1]\d\s+2\&.
.SH "PROVIDING CVS ACCESS TO A GIT REPOSITORY"
.sp
It be also possible ta provide legit CVS access ta a Git repository, so dat pimpers can still use CVS; peep \fBgit-cvsserver\fR(1) fo' details\&.
.SH "ALTERNATIVE DEVELOPMENT MODELS"
.sp
CVS playas is accustomed ta givin a crew of pimpers commit access ta a cold-ass lil common repository\& fo' realz. As we\(cqve seen, dis be also possible wit Git\&. But fuck dat shiznit yo, tha word on tha street is dat tha distributed nature of Git allows other pimpment models, n' you may wanna first consider whether one of dem might be a funky-ass betta fit fo' yo' project\&.
.sp
For example, you can chizzle a single thug ta maintain tha project\(cqs primary hood repository\&. Other pimpers then clone dis repository n' each work up in they own clone\&. When they gotz a seriez of chizzlez dat they\(cqre aiiight with, they ask tha maintainer ta pull from tha branch containin tha chizzles\&. Da maintainer props they chizzlez n' pulls dem tha fuck into tha primary repository, which other pimpers pull from as necessary ta stay coordinated\&. Da Linux kernel n' other projects use variantz of dis model\&.
.sp
With a lil' small-ass group, pimpers may just pull chizzlez from each other\(cqs repositories without tha need fo' a cold-ass lil central maintainer\&.
.SH "SEE ALSO"
.sp
\fBgittutorial\fR(7), \fBgittutorial-2\fR(7), \fBgitcore-tutorial\fR(7), \fBgitglossary\fR(7), \m[blue]\fBEverydizzle Git\fR\m[]\&\s-2\u[2]\d\s+2, \m[blue]\fBDa Git User\(cqs Manual\fR\m[]\&\s-2\u[3]\d\s+2
.SH "GIT"
.sp
Part of tha \fBgit\fR(1) suite\&.
.SH "NOTES"
.IP " 1." 4
Controllin access ta branches rockin update hooks
.RS 4
\%file:///usr/share/doc/git/howto/update-hook-example.html
.RE
.IP " 2." 4
Everydizzle Git
.RS 4
\%file:///usr/share/doc/git/everyday.html
.RE
.IP " 3." 4
Da Git User\(cqs Manual
.RS 4
\%file:///usr/share/doc/git/user-manual.html
.RE
