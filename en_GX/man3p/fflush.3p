.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "FFLUSH" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" fflush 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
fflush \- flush a stream
.SH SYNOPSIS
.LP
\fB#include <stdio.h>
.br
.sp
int fflush(FILE *\fP\fIstream\fP\fB);
.br
\fP
.SH DESCRIPTION
.LP
If \fIstream\fP points ta a output stream or a update stream in
which da most thugged-out recent operation was not input,
\fIfflush\fP() shall cause any unwritten data fo' dat stream ta be
written ta tha file,  n' the
\fIst_ctime\fP n' \fIst_mtime\fP fieldz of tha underlyin file shall
be marked fo' update. 
.LP
If \fIstream\fP be a null pointer, \fIfflush\fP() shall big-ass up this
flushin action on all streams fo' which tha behavior is
defined above.
.SH RETURN VALUE
.LP
Upon successful completion, \fIfflush\fP() shall return 0; otherwise,
it shall set tha error indicator fo' tha stream, return
EOF,  
\ n' set \fIerrno\fP ta indicate tha error. Shiiit, dis aint no joke. 
.SH ERRORS
.LP
Da \fIfflush\fP() function shall fail if:
.TP 7
.B EAGAIN
Da O_NONBLOCK flag is set fo' tha file descriptor underlyin \fIstream\fP
and tha process would be delayed up in tha write
operation. I aint talkin' bout chicken n' gravy biatch. 
.TP 7
.B EBADF
Da file descriptor underlyin \fIstream\fP aint valid. Y'all KNOW dat shit, muthafucka! 
.TP 7
.B ESTDG
An
attempt was made ta write a gangbangin' file dat exceedz tha maximum file size.
.TP 7
.B ESTDG
An attempt was made ta write a gangbangin' file dat exceedz tha process' file
size limit. 
.TP 7
.B ESTDG
Da file be a regular file n' a attempt was made ta write at or
beyond tha offset maximum associated wit tha corresponding
stream. 
.TP 7
.B EINTR
Da \fIfflush\fP() function was interrupted by a signal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. 
.TP 7
.B EIO
Da process be a gangmember of a funky-ass background process crew attemptin to
write ta its controllin terminal, TOSTOP is set, tha process
is neither ignorin nor blockin SIGTTOU, n' tha process crew of
the process is orphaned. Y'all KNOW dat shit, muthafucka! This error may also be returned under
implementation-defined conditions. 
.TP 7
.B ENOSPC
There was no free space remainin on tha thang containin tha file.
.TP 7
.B EPIPE
An
attempt is made ta write ta a pipe or FIFO dat aint open fo' reading
by any process fo' realz. A SIGPIPE signal shall also be busted ta the
thread. Y'all KNOW dat shit, muthafucka! 
.sp
.LP
Da \fIfflush\fP() function may fail if:
.TP 7
.B ENXIO
A
request was made of a nonexistent device, or tha request was outside
the capabilitizzlez of tha device. 
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.SS Sendin Prompts ta Standard Output
.LP
Da followin example uses \fIprintf\fP() calls ta print a series
of prompts for
information tha user must enta from standard input. Da \fIfflush\fP()
calls force tha output ta standard output. The
\fIfflush\fP() function is used cuz standard output is usually
buffered n' tha prompt may not immediately be printed on the
output or terminal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Da \fIgets\fP() calls read strings from standard
input n' place the
results up in variables, fo' use lata up in tha program.
.sp
.RS
.nf

\fB#include <stdio.h>
\&...
char user[100];
char oldpasswd[100];
char newpasswd[100];
\&...
printf("User name: ");
fflush(stdout);
gets(user);
.sp

printf("Oldskool password: ");
fflush(stdout);
gets(oldpasswd);
.sp

printf("New password: ");
fflush(stdout);
gets(newpasswd);
\&...
\fP
.fi
.RE
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
Data buffered by tha system may make determinin tha validitizzle of the
posizzle of tha current file descriptor impractical. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Thus,
enforcin tha repositionin of tha file descriptor afta \fIfflush\fP()
on streams open fo' \fIread\fP() aint mandated by IEEE\ Std\ 1003.1-2001.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIgetrlimit\fP(), \fIulimit\fP(), tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, \fI<stdio.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
