.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "PTHREAD_COND_DESTROY" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" pthread_cond_destroy 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
pthread_cond_destroy, pthread_cond_init \- destroy n' initialize condition
variables
.SH SYNOPSIS
.LP
\fB#include <pthread.h>
.br
.sp
int pthread_cond_destroy(pthread_cond_t *\fP\fIcond\fP\fB);
.br
int pthread_cond_init(pthread_cond_t *restrict\fP \fIcond\fP\fB,
.br
\ \ \ \ \ \  const pthread_condattr_t *restrict\fP \fIattr\fP\fB);
.br
pthread_cond_t\fP \fIcond\fP \fB= PTHREAD_COND_INITIALIZER; \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIpthread_cond_destroy\fP() function shall destroy tha given
condizzle variable specified by \fIcond\fP; tha object
becomes, up in effect, uninitialized. Y'all KNOW dat shit, muthafucka! An implementation may cause \fIpthread_cond_destroy\fP()
to set tha object referenced by
\fIcond\fP ta a invalid value fo' realz. A destroyed condizzle variable object
can be reinitialized rockin \fIpthread_cond_init\fP(); the
resultz of otherwise referencin tha object afta it has been destroyed
are undefined.
.LP
It shall be safe ta destroy a initialized condizzle variable upon
which no threadz is currently blocked. Y'all KNOW dat shit, muthafucka! Attemptin ta destroy
a condizzle variable upon which other threadz is currently blocked
results up in undefined behavior.
.LP
Da \fIpthread_cond_init\fP() function shall initialize tha condition
variable referenced by \fIcond\fP wit attributes
referenced by \fIattr\fP. If \fIattr\fP is NULL, tha default condition
variable attributes shall be used; tha effect is tha same
as passin tha address of a thugged-out default condizzle variable attributes
object. Upon successful initialization, tha state of the
condizzle variable shall become initialized.
.LP
Only \fIcond\fP itself may be used fo' struttin synchronization.
Da result of referrin ta copiez of \fIcond\fP up in calls to
\fIpthread_cond_wait\fP(), \fIpthread_cond_timedwait\fP(), \fIpthread_cond_signal\fP(),
\fIpthread_cond_broadcast\fP(), n' \fIpthread_cond_destroy\fP() is
undefined.
.LP
Attemptin ta initialize a already initialized condizzle variable
results up in undefined behavior.
.LP
In cases where default condizzle variable attributes is appropriate,
the macro PTHREAD_COND_INITIALIZER can be used to
initialize condizzle variablez dat is statically allocated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. The
effect shall be equivalent ta dynamic initialization by a cold-ass lil call to
\fIpthread_cond_init\fP() wit parameta \fIattr\fP specified as NULL,
except dat no error checks is performed.
.SH RETURN VALUE
.LP
If successful, tha \fIpthread_cond_destroy\fP() n' \fIpthread_cond_init\fP()
functions shall return zero; otherwise, a error
number shall be moonwalked back ta indicate tha error.
.LP
Da [EBUSY] n' [EINVAL] error checks, if implemented, shall act as
if they was performed immediately all up in tha beginnin of
processin fo' tha function n' caused a error return prior ta modifying
the state of tha condizzle variable specified by
\fIcond\fP.
.SH ERRORS
.LP
Da \fIpthread_cond_destroy\fP() function may fail if:
.TP 7
.B EBUSY
Da implementation has detected a attempt ta destroy tha object referenced
by \fIcond\fP while it is referenced (for example,
while bein used up in a \fIpthread_cond_wait\fP() or \fIpthread_cond_timedwait\fP())
by another thread.
.TP 7
.B EINVAL
Da value specified by \fIcond\fP is invalid.
.sp
.LP
Da \fIpthread_cond_init\fP() function shall fail if:
.TP 7
.B EAGAIN
Da system lacked tha necessary resources (other than memory) ta initialize
another condizzle variable.
.TP 7
.B ENOMEM
Insufficient memory exists ta initialize tha condizzle variable.
.sp
.LP
Da \fIpthread_cond_init\fP() function may fail if:
.TP 7
.B EBUSY
Da implementation has detected a attempt ta reinitialize tha object
referenced by \fIcond\fP, a previously initialized yo, but
not yet destroyed, condizzle variable.
.TP 7
.B EINVAL
Da value specified by \fIattr\fP is invalid.
.sp
.LP
These functions shall not return a error code of [EINTR].
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
A condizzle variable can be destroyed immediately afta all tha threads
that is blocked on it is awakened. Y'all KNOW dat shit, muthafucka! For example,
consider tha followin code:
.sp
.RS
.nf

\fBstruct list {
    pthread_mutex_t lm;
    ...
}
.sp

struct elt {
    key k;
    int busy;
    pthread_cond_t notbusy;
    ...
}
.sp

/* Find a list element n' reserve dat shit. */
struct elt *
list_find(struct list *lp, key k)
{
    struct elt *ep;
.sp

    pthread_mutex_lock(&lp->lm);
    while ((ep = find_elt(l, k) != NULL) && ep->busy)
        pthread_cond_wait(&ep->notbusy, &lp->lm);
    if (ep != NULL)
        ep->busy = 1;
    pthread_mutex_unlock(&lp->lm);
    return(ep);
}
.sp

delete_elt(struct list *lp, struct elt *ep)
{
    pthread_mutex_lock(&lp->lm);
    assert(ep->busy);
    ... remove ep from list ...
    ep->busy = 0;  /* Paranoid. Y'all KNOW dat shit, muthafucka! */
(A) pthread_cond_broadcast(&ep->notbusy);
    pthread_mutex_unlock(&lp->lm);
(B) pthread_cond_destroy(&rp->notbusy);
    free(ep);
}
\fP
.fi
.RE
.LP
In dis example, tha condizzle variable n' its list element may be
freed (line B) immediately afta all threadz waitin fo' it
are awakened (line A), since tha mutex n' tha code ensure dat no
other thread can bust a nut on tha element ta be deleted.
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
See \fIpthread_mutex_init\fP(); a similar rationale applies ta condition
variables.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIpthread_cond_broadcast\fP(), \fIpthread_cond_signal\fP(), \fIpthread_cond_timedwait\fP(),
the Base Definitions volume of IEEE\ Std\ 1003.1-2001,
\fI<pthread.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
