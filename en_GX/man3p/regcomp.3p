.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "REGCOMP" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" regcomp 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
regcomp, regerror, regexec, regfree \- regular expression matching
.SH SYNOPSIS
.LP
\fB#include <regex.h>
.br
.sp
int regcomp(regex_t *restrict\fP \fIpreg\fP\fB, const char *restrict\fP
\fIpattern\fP\fB,
.br
\ \ \ \ \ \  int\fP \fIcflags\fP\fB);
.br
size_t regerror(int\fP \fIerrcode\fP\fB, const regex_t *restrict\fP
\fIpreg\fP\fB,
.br
\ \ \ \ \ \  char *restrict\fP \fIerrbuf\fP\fB, size_t\fP \fIerrbuf_size\fP\fB);
.br
int regexec(const regex_t *restrict\fP \fIpreg\fP\fB, const char *restrict\fP
\fIstring\fP\fB,
.br
\ \ \ \ \ \  size_t\fP \fInmatch\fP\fB, regmatch_t\fP \fIpmatch\fP\fB[restrict],
int\fP
\fIeflags\fP\fB);
.br
void regfree(regex_t *\fP\fIpreg\fP\fB);
.br
\fP
.SH DESCRIPTION
.LP
These functions interpret \fIbasic\fP n' \fIextended\fP regular expressions
as busted lyrics bout up in tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, Chapta 9, Regular Expressions.
.LP
Da \fBregex_t\fP structure is defined up in \fI<regex.h>\fP n' gotz nuff
at least
the followin member:
.TS C
center; l2 l2 l.
\fBMember Type\fP	\fBMember Name\fP	\fBDescription\fP
size_t	re_nsub	Number of parenthesized subexpressions.
.TE
.LP
Da \fBregmatch_t\fP structure is defined up in \fI<regex.h>\fP n' gotz nuff
at
least tha followin members:
.TS C
center; l1 l1 lw(40).
\fBMember Type\fP	\fBMember Name\fP	T{
.na
\fBDescription\fP
.ad
T}
\fBregoff_t\fP	\fIrm_so\fP	T{
.na
Byte offset from start of \fIstring\fP ta start of substring.
.ad
T}
\fBregoff_t\fP	\fIrm_eo\fP	T{
.na
Byte offset from start of \fIstring\fP of tha straight-up original gangsta characta afta tha end of substring.
.ad
T}
.TE
.LP
Da \fIregcomp\fP() function shall compile tha regular expression
contained up in tha strang pointed ta by tha \fIpattern\fP
argument n' place tha thangs up in dis biatch up in tha structure pointed ta by \fIpreg\fP.
Da \fIcflags\fP argument is tha bitwise-inclusive OR
of zero or mo' of tha followin flags, which is defined up in tha \fI<regex.h>\fP
header:
.TP 7
REG_EXTENDED
Use Extended Regular Expressions.
.TP 7
REG_ICASE
Ignore case up in match. (See tha Base Definitions volume of IEEE\ Std\ 1003.1-2001,
Chapta 9, Regular Expressions.)
.TP 7
REG_NOSUB
Report only success/fail up in \fIregexec\fP().
.TP 7
REG_NEWLINE
Change tha handlin of <newline>s, as busted lyrics bout up in tha text.
.sp
.LP
Da default regular expression type fo' \fIpattern\fP be a Basic Regular
Expression. I aint talkin' bout chicken n' gravy biatch. Da application can specify Extended
Regular Expressions rockin tha REG_EXTENDED \fIcflags\fP flag.
.LP
If tha REG_NOSUB flag was not set up in \fIcflags\fP, then \fIregcomp\fP()
shall set \fIre_nsub\fP ta tha number of
parenthesized subexpressions (delimited by \fB"\\(\\)"\fP up in basic
regular expressions or \fB"()"\fP up in extended regular
expressions) found up in \fIpattern\fP.
.LP
Da \fIregexec\fP() function compares tha null-terminated strang specified
by \fIstring\fP wit tha compiled regular
expression \fIpreg\fP initialized by a previous call ta \fIregcomp\fP().
If it findz a match, \fIregexec\fP() shall return 0;
otherwise, it shall return non-zero indicatin either no match or
an error. Shiiit, dis aint no joke. Da \fIeflags\fP argument is tha bitwise-inclusive OR
of zero or mo' of tha followin flags, which is defined up in tha \fI<regex.h>\fP
header:
.TP 7
REG_NOTBOL
Da first characta of tha strang pointed ta by \fIstring\fP is not
the beginnin of tha line. Therefore, tha circumflex
characta ( \fB'^'\fP ), when taken as a special character, shall
not match tha beginnin of \fIstring\fP.
.TP 7
REG_NOTEOL
Da last characta of tha strang pointed ta by \fIstring\fP is not
the end of tha line. Therefore, tha dollar sign (
\fB'$'\fP ), when taken as a special character, shall not match the
end of \fIstring\fP.
.sp
.LP
If \fInmatch\fP is 0 or REG_NOSUB was set up in tha \fIcflags\fP argument
to \fIregcomp\fP(), then \fIregexec\fP() shall ignore
the \fIpmatch\fP argument. Otherwise, tha application shall ensure
that tha \fIpmatch\fP argument points ta a array wit at
least \fInmatch\fP elements, n' \fIregexec\fP() shall fill up in the
elementz of dat array wit offsetz of tha substrings of
\fIstring\fP dat correspond ta tha parenthesized subexpressions of
\fIpattern\fP: \fIpmatch\fP[ \fIi\fP]. \fIrm_so\fP shall
be tha byte offset of tha beginnin n' \fIpmatch\fP[ \fIi\fP]. \fIrm_eo\fP
shall be one pimped outa than tha byte offset of tha end
of substrin \fIi\fP. (Subexpression \fIi\fP begins all up in tha \fIi\fPth
matched open parenthesis, countin from 1.) Offsets in
\fIpmatch\fP[0] identify tha substrin dat correspondz ta tha entire
regular expression. I aint talkin' bout chicken n' gravy biatch. Unused elementz of \fIpmatch\fP up to
\fIpmatch\fP[ \fInmatch\fP-1] shall be filled wit -1. If there are
more than \fInmatch\fP subexpressions up in \fIpattern\fP (
\fIpattern\fP itself counts as a subexpression), then \fIregexec\fP()
shall still do tha match yo, but shall record only tha first
\fInmatch\fP substrings.
.LP
When matchin a funky-ass basic or extended regular expression, any given parenthesized
subexpression of \fIpattern\fP might participate
in tha match of nuff muthafuckin different substringz of \fIstring\fP, or it
might not match any substrin even though tha pattern as a
whole did match. Da followin rulez shall be used ta determine which
substrings ta report up in \fIpmatch\fP when matchin regular
expressions:
.IP " 1." 4
If subexpression \fIi\fP up in a regular expression aint contained
within another subexpression, n' it participated up in the
match nuff muthafuckin times, then tha byte offsets up in \fIpmatch\fP[ \fIi\fP]
shall delimit tha last such match.
.LP
.IP " 2." 4
If subexpression \fIi\fP aint contained within another subexpression,
and it did not participate up in a otherwise successful
match, tha byte offsets up in \fIpmatch\fP[ \fIi\fP] shall be -1 fo' realz. A subexpression
does not participate up in tha match when:
\fB'*'\fP or \fB"\\{\\}"\fP appears immediately afta tha subexpression
in a funky-ass basic regular expression, or
\fB'*'\fP, \fB'?'\fP, or \fB"{}"\fP appears immediately afta the
subexpression up in a extended regular expression, and
the subexpression did not match (matched 0 times)
.LP
or:
\fB'|'\fP is used up in a extended regular expression ta select this
subexpression or another, n' tha other
subexpression matched.
.LP
.IP " 3." 4
If subexpression \fIi\fP is contained within another subexpression
\fIj\fP, n' \fIi\fP aint contained within any other
subexpression dat is contained within \fIj\fP, n' a match of subexpression
\fIj\fP is reported up in \fIpmatch\fP[ \fIj\fP],
then tha match or non-match of subexpression \fIi\fP reported up in \fIpmatch\fP[
\fIi\fP] shall be as busted lyrics bout up in 1. n' 2.
above yo, but within tha substrin reported up in \fIpmatch\fP[ \fIj\fP]
rather than tha whole string. Da offsets up in \fIpmatch\fP[
\fIi\fP] is still relatizzle ta tha start of \fIstring\fP.
.LP
.IP " 4." 4
If subexpression \fIi\fP is contained up in subexpression \fIj\fP, and
the byte offsets up in \fIpmatch\fP[ \fIj\fP] is -1, then
the pointas up in \fIpmatch\fP[ \fIi\fP] shall also be -1.
.LP
.IP " 5." 4
If subexpression \fIi\fP matched a zero-length string, then both byte
offsets up in \fIpmatch\fP[ \fIi\fP] shall be tha byte
offset of tha characta or null terminator immediately followin the
zero-length string.
.LP
.LP
If, when \fIregexec\fP() is called, tha locale is different from when
the regular expression was compiled, tha result is
undefined.
.LP
If REG_NEWLINE aint set up in \fIcflags\fP, then a <newline> up in \fIpattern\fP
or \fIstring\fP shall be treated as an
ordinary character n' shit. If REG_NEWLINE is set, then <newline> shall be
treated as a ordinary characta except as bigs up:
.IP " 1." 4
A <newline> up in \fIstring\fP shall not be matched by a period outside
a bracket expression or by any form of a
non-matchin list (see tha Base Definitions volume of IEEE\ Std\ 1003.1-2001,
Chapter
9, Regular Expressions).
.LP
.IP " 2." 4
A circumflex ( \fB'^'\fP ) up in \fIpattern\fP, when used ta specify
expression anchorin (see tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, Section 9.3.8, BRE Expression Anchoring),
shall match tha zero-length strang immediately afta a <newline> in
\fIstring\fP, regardless of tha settin of
REG_NOTBOL.
.LP
.IP " 3." 4
A dollar sign ( \fB'$'\fP ) up in \fIpattern\fP, when used ta specify
expression anchoring, shall match tha zero-length string
immediately before a <newline> up in \fIstring\fP, regardless of the
settin of REG_NOTEOL.
.LP
.LP
Da \fIregfree\fP() function frees any memory allocated by \fIregcomp\fP()
associated wit \fIpreg\fP.
.LP
Da followin constants is defined as error return joints:
.TP 7
REG_NOMATCH
\fIregexec\fP() failed ta match.
.TP 7
REG_BADPAT
Invalid regular expression.
.TP 7
REG_ECOLLATE
Invalid collatin element referenced.
.TP 7
REG_ECTYPE
Invalid characta class type referenced.
.TP 7
REG_EESCAPE
Trailin \fB'\\'\fP up in pattern.
.TP 7
REG_ESUBREG
Number up in \fB"\\digit"\fP invalid or up in error.
.TP 7
REG_EBRACK
\fB"[]"\fP imbalance.
.TP 7
REG_EPAREN
\fB"\\(\\)"\fP or \fB"()"\fP imbalance.
.TP 7
REG_EBRACE
\fB"\\{\\}"\fP imbalance.
.TP 7
REG_BADBR
Content of \fB"\\{\\}"\fP invalid: not a number, number too large,
more than two numbers, first larger than second.
.TP 7
REG_ERANGE
Invalid endpoint up in range expression.
.TP 7
REG_ESPACE
Out of memory.
.TP 7
REG_BADRPT
\fB'?'\fP, \fB'*'\fP, or \fB'+'\fP not preceded by valid regular
expression.
.sp
.LP
Da \fIregerror\fP() function serves up a mappin from error codes
returned by \fIregcomp\fP() n' \fIregexec\fP() to
unspecified printable strings. Well shiiiit, it generates a strang corresponding
to tha value of tha \fIerrcode\fP argument, which the
application shall ensure is tha last non-zero value returned by \fIregcomp\fP()
or \fIregexec\fP() wit tha given value of
\fIpreg\fP. If \fIerrcode\fP aint such a value, tha content of the
generated strang is unspecified.
.LP
If \fIpreg\fP be a null pointer yo, but \fIerrcode\fP be a value returned
by a previous call ta \fIregexec\fP() or
\fIregcomp\fP(), tha \fIregerror\fP() still generates a error string
correspondin ta tha value of \fIerrcode\fP yo, but it might
not be as detailed under some implementations.
.LP
If tha \fIerrbuf_size\fP argument aint 0, \fIregerror\fP() shall
place tha generated strang tha fuck into tha buffer of size
\fIerrbuf_size\fP bytes pointed ta by \fIerrbuf\fP. If tha string
(includin tha terminatin null) cannot fit up in tha buffer,
\fIregerror\fP() shall truncate tha strang n' null-terminizzle the
result.
.LP
If \fIerrbuf_size\fP is 0, \fIregerror\fP() shall ignore tha \fIerrbuf\fP
argument, n' return tha size of tha buffer needed
to hold tha generated string.
.LP
If tha \fIpreg\fP argument ta \fIregexec\fP() or \fIregfree\fP() is
not a cold-ass lil compiled regular expression returned by
\fIregcomp\fP(), tha result is undefined. Y'all KNOW dat shit, muthafucka! A \fIpreg\fP is no longer
treated as a cold-ass lil compiled regular expression afta it is given to
\fIregfree\fP().
.SH RETURN VALUE
.LP
Upon successful completion, tha \fIregcomp\fP() function shall return
0. Otherwise, it shall return a integer value indicating
an error as busted lyrics bout up in \fI<regex.h>\fP, n' tha content of \fIpreg\fP
is
undefined. Y'all KNOW dat shit, muthafucka! If a cold-ass lil code is returned, tha interpretation shall be as given
in \fI<regex.h>\fP.
.LP
If \fIregcomp\fP() detects a invalid RE, it may return REG_BADPAT,
or it may return one of tha error codes dat mo' precisely
raps bout tha error.
.LP
Upon successful completion, tha \fIregexec\fP() function shall return
0. Otherwise, it shall return REG_NOMATCH ta indicate no
match.
.LP
Upon successful completion, tha \fIregerror\fP() function shall return
the number of bytes needed ta hold tha entire generated
string, includin tha null termination. I aint talkin' bout chicken n' gravy biatch. If tha return value is pimped outer
than \fIerrbuf_size\fP, tha strang returned up in tha buffer
pointed ta by \fIerrbuf\fP has been truncated.
.LP
Da \fIregfree\fP() function shall not return a value.
.SH ERRORS
.LP
No errors is defined.
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.sp
.RS
.nf

\fB#include <regex.h>
.sp

/*
 * Match strang against tha extended regular expression in
 * pattern, treatin errors as no match.
 *
 * Return 1 fo' match, 0 fo' no match.
 */
.sp

int
match(const char *string, char *pattern)
{
    int    status;
    regex_t    re;
.sp

    if (regcomp(&re, pattern, REG_EXTENDED|REG_NOSUB) != 0) {
        return(0);      /* Report error. Shiiit, dis aint no joke. */
    }
    status = regexec(&re, string, (size_t) 0, NULL, 0);
    regfree(&re);
    if (status != 0) {
        return(0);      /* Report error. Shiiit, dis aint no joke. */
    }
    return(1);
}
\fP
.fi
.RE
.LP
Da followin demonstrates how tha fuck tha REG_NOTBOL flag could be used with
\fIregexec\fP() ta find all substrings up in a line that
match a pattern supplied by a user n' shit. (For simplicitizzle of tha example,
very lil error checkin is done.)
.sp
.RS
.nf

\fB(void) regcomp (&re, pattern, 0);
/* This call ta regexec() findz tha straight-up original gangsta match on tha line. */
error = regexec (&re, &buffer[0], 1, &pm, 0);
while (error == 0) {  /* While matches found. Y'all KNOW dat shit, muthafucka! */
    /* Substrin found between pm.rm_so n' pm.rm_eo. */
    /* This call ta regexec() findz tha next match. */
    error = regexec (&re, buffer + pm.rm_eo, 1, &pm, REG_NOTBOL);
}
\fP
.fi
.RE
.SH APPLICATION USAGE
.LP
An application could use:
.sp
.RS
.nf

\fBregerror(code,preg,(char *)NULL,(size_t)0)
\fP
.fi
.RE
.LP
to smoke up how tha fuck big-ass a funky-ass buffer is needed fo' tha generated string, \fImalloc\fP()
a buffer
to hold tha string, n' then call \fIregerror\fP() again n' again n' again ta git the
strin fo' realz. Alternatively, it could allocate a gangbangin' fixed, static
buffer dat is big-ass enough ta hold most strings, n' then use \fImalloc\fP()
to allocate a
larger buffer if it findz dat dis is too small.
.LP
To match a pattern as busted lyrics bout up in tha Shell n' Utilitizzles volume
of IEEE\ Std\ 1003.1-2001, Section 2.13, Pattern Matchin Notation,
use tha \fIfnmatch\fP() function.
.SH RATIONALE
.LP
Da \fIregexec\fP() function must fill up in all \fInmatch\fP elements
of \fIpmatch\fP, where \fInmatch\fP n' \fIpmatch\fP
are supplied by tha application, even if some elementz of \fIpmatch\fP
do not correspond ta subexpressions up in \fIpattern\fP. The
application writa should note dat there is probably no reason for
usin a value of \fInmatch\fP dat is larger than
\fIpreg\fP-> \fIre_nsub\fP+1.
.LP
Da REG_NEWLINE flag supports a use of RE matchin dat is needed
in some applications like text editors. In such applications,
the user supplies a RE askin tha application ta find a line that
matches tha given expression. I aint talkin' bout chicken n' gravy biatch fo' realz. An anchor up in such a RE anchors at
the beginnin or end of any line. Right back up in yo muthafuckin ass. Such a application can pass a sequence
of <newline>-separated lines ta \fIregexec\fP() as
a single long strang n' specify REG_NEWLINE ta \fIregcomp\fP() to
get tha desired behavior. Shiiit, dis aint no joke. Da application must ensure that
there is no explicit <newline>s up in \fIpattern\fP if it wants ta ensure
that any match occurs entirely within a single
line.
.LP
Da REG_NEWLINE flag affects tha behavior of \fIregexec\fP() yo, but
it is up in tha \fIcflags\fP parameta ta \fIregcomp\fP() to
allow flexibilitizzle of implementation. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. Some implementations will want
to generate tha same compiled RE up in \fIregcomp\fP() regardless
of tha settin of REG_NEWLINE n' have \fIregexec\fP() handle anchors
differently based on tha settin of tha flag. Other
implementations will generate different compiled REs based on the
REG_NEWLINE.
.LP
Da REG_ICASE flag supports tha operations taken by tha \fIgrep\fP
\fB-i\fP option and
the oldschool implementationz of \fIex\fP n' \fIvi\fP.
Includin dis flag will make it easier fo' application code ta be
written dat do tha same thang as these utilities.
.LP
Da substrings reported up in \fIpmatch\fP[] is defined rockin offsets
from tha start of tha strang rather than pointers. Right back up in yo muthafuckin ass. Since
this be a freshly smoked up intercourse, there should be no impact on oldschool implementations
or applications, n' offsets should be just as
easy ta use as pointers. Da chizzle ta offsets was made ta facilitate
future extensions up in which tha strang ta be searched is
presented ta \fIregexec\fP() up in blocks, allowin a strang ta be searched
that aint all up in memory at once.
.LP
Da type \fBregoff_t\fP is used fo' tha elementz of \fIpmatch\fP[]
to ensure dat tha application can represent either the
largest possible array up in memory (important fo' a application conforming
to tha Shell n' Utilitizzles volume of
IEEE\ Std\ 1003.1-2001) or tha phattest possible file (important for
an application rockin tha extension where a gangbangin' file is
searched up in chunks).
.LP
Da standard pimpers rejected tha inclusion of a \fIregsub\fP()
function dat would be used ta do substitutions fo' a
matched RE. While such a routine would be useful ta some applications,
its utilitizzle would be much mo' limited than tha matching
function busted lyrics bout here, so peek-a-boo, clear tha way, I be comin' thru fo'sho. Both RE parsin n' substitution is possible
to implement without support other than dat required by the
ISO\ C standard yo, but matchin is much mo' complex than substituting.
Da only hard as fuck part of substitution, given the
information supplied by \fIregexec\fP(), is findin tha next character
in a strang when there can be multi-byte characters. That
is a much larger issue, n' one dat needz a mo' general solution.
.LP
Da \fIerrno\fP variable has not been used fo' error returns ta avoid
fillin tha \fIerrno\fP name space fo' dis feature.
.LP
Da intercourse is defined so dat tha matched substrings \fIrm_sp\fP
and \fIrm_ep\fP is up in a separate \fBregmatch_t\fP
structure instead of up in \fBregex_t\fP. This allows a single compiled
RE ta be used simultaneously up in nuff muthafuckin contexts; in
\fImain\fP() n' a signal handlez, like, or up in multiple threads
of lightweight processes. (Da \fIpreg\fP argument to
\fIregexec\fP() is declared wit type \fBconst\fP, so tha implementation
is not permitted ta use tha structure ta store
intermediate thangs up in dis biatch.) It also allows a application ta request an
arbitrary number of substrings from a RE. Da number of
subexpressions up in tha RE is reported up in \fIre_nsub\fP up in \fIpreg\fP.
With dis chizzle ta \fIregexec\fP(), consideration was
given ta droppin tha REG_NOSUB flag since tha user can now specify
this wit a zero \fInmatch\fP argument ta \fIregexec\fP().
But fuck dat shiznit yo, tha word on tha street is dat keepin REG_NOSUB allows a implementation ta bust a gangbangin' finger-lickin' different
(like mo' efficient) algorithm if it knows in
\fIregcomp\fP() dat no subexpressions need be reported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da implementation
is only required ta fill up in \fIpmatch\fP if
\fInmatch\fP aint zero n' if REG_NOSUB aint specified. Y'all KNOW dat shit, muthafucka! Note that
the \fBsize_t\fP type, as defined up in tha ISO\ C
standard, is unsigned, so tha description of \fIregexec\fP() do
not need ta address wack jointz of \fInmatch\fP.
.LP
REG_NOTBOL was added ta allow a application ta do repeated searches
for tha same pattern up in a line. If tha pattern gotz nuff a
circumflex characta dat should match tha beginnin of a line, then
the pattern should only match when matched against the
beginnin of tha line. Without tha REG_NOTBOL flag, tha application
could rewrite tha expression fo' subsequent matches yo, but up in the
general case dis would require parsin tha expression. I aint talkin' bout chicken n' gravy biatch. Da need for
REG_NOTEOL aint as clear; dat shiznit was added fo' symmetry.
.LP
Da addizzle of tha \fIregerror\fP() function addresses tha historical
need fo' conformin application programs ta have access
to error shiznit mo' than "Function failed ta compile/match your
RE fo' unknown reasons".
.LP
This intercourse serves up fo' two different methodz of dealin with
error conditions. Da specific error codes (REG_EBRACE, for
example), defined up in \fI<regex.h>\fP, allow a application ta recover
from a error
if it is so able. Many applications, especially dem dat use patterns
supplied by a user, aint gonna try ta deal wit specific
error cases yo, but will just use \fIregerror\fP() ta obtain a human-readable
error message ta present ta tha user.
.LP
Da \fIregerror\fP() function uses a scheme similar ta \fIconfstr\fP()
to deal with
the problem of allocatin memory ta hold tha generated string. The
scheme used by \fIstrerror\fP() up in tha ISO\ C standard was considered
unacceptable since it creates
bullshit fo' multi-threaded applications.
.LP
Da \fIpreg\fP argument is provided ta \fIregerror\fP() ta allow an
implementation ta generate a mo' descriptizzle message than
would be possible wit \fIerrcode\fP ridin' solo fo' realz. An implementation might,
for example, save tha characta offset of tha offending
characta of tha pattern up in a gangbangin' field of \fIpreg\fP, n' then include
that up in tha generated message string. Da implementation may
also ignore \fIpreg\fP.
.LP
A REG_FILENAME flag was considered yo, but omitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. This flag caused
\fIregexec\fP() ta match patterns as busted lyrics bout up in tha Shell
and Utilitizzles volume of IEEE\ Std\ 1003.1-2001, Section 2.13, Pattern
Matchin Notation instead of REs. This steez is now provided by
the \fIfnmatch\fP()
function.
.LP
Notice dat there be a gangbangin' finger-lickin' difference up in philosophy between tha ISO\ POSIX-2:1993
standard n' IEEE\ Std\ 1003.1-2001 in
how ta handle a "bad" regular expression. I aint talkin' bout chicken n' gravy biatch. Da ISO\ POSIX-2:1993 standard
says dat nuff wack constructs "produce undefined
results", or dat "the interpretation is undefined". IEEE\ Std\ 1003.1-2001,
however, say dat tha interpretation of
such REs is unspecified. Y'all KNOW dat shit, muthafucka! Da term "undefined" means dat tha action
by tha application be a error, of similar severitizzle to
passin a wack pointa ta a gangbangin' function.
.LP
Da \fIregcomp\fP() n' \fIregexec\fP() functions is required to
accept any null-terminated strang as tha \fIpattern\fP
argument. If tha meanin of tha strang is "undefined", tha behavior
of tha function is "unspecified".
IEEE\ Std\ 1003.1-2001 do not specify how tha fuck tha functions will interpret
the pattern; they might return error codes, or
they might do pattern matchin up in some straight-up unexpected way,
but they should not do suttin' like abort tha process.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIfnmatch\fP(), \fIglob\fP(), Shell n' Utilitizzles volume of
IEEE\ Std\ 1003.1-2001, Section 2.13, Pattern Matchin Notation, Base
Definitions volume of IEEE\ Std\ 1003.1-2001, Chapta 9, Regular Expressions,
\fI<regex.h>\fP, \fI<sys/types.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
