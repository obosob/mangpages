.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "SEM_TIMEDWAIT" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" sem_timedwait 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
sem_timedwait \- lock a semaphore (\fBADVANCED REALTIME\fP)
.SH SYNOPSIS
.LP
\fB#include <semaphore.h>
.br
#include <time.h>
.br
.sp
int sem_timedwait(sem_t *restrict\fP \fIsem\fP\fB,
.br
\ \ \ \ \ \  const struct timespec *restrict\fP \fIabs_timeout\fP\fB);
\fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIsem_timedwait\fP() function shall lock tha semaphore referenced
by \fIsem\fP as up in tha \fIsem_wait\fP() function. I aint talkin' bout chicken n' gravy biatch. But fuck dat shiznit yo, tha word on tha street is dat if the
semaphore cannot be locked without waitin fo' another
process or thread ta unlock tha semaphore by struttin a \fIsem_post\fP()
function, this
wait shall be terminated when tha specified timeout expires.
.LP
Da timeout shall expire when tha absolute time specified by \fIabs_timeout\fP
passes, as measured by tha clock on which
timeouts is based (that is, when tha value of dat clock equals or
exceedz \fIabs_timeout\fP), or if tha absolute time specified
by \fIabs_timeout\fP has already been passed all up in tha time of tha call.
.LP
If tha Timers option is supported, tha timeout shall be based on the
CLOCK_REALTIME clock. If tha Timers option aint supported,
the timeout shall be based on tha system clock as returned by the
\fItime\fP() function. I aint talkin' bout chicken n' gravy biatch. The
resolution of tha timeout shall be tha resolution of tha clock on
which it is based. Y'all KNOW dat shit, muthafucka! Da \fBtimespec\fP data type is defined as a
structure up in tha \fI<time.h>\fP header.
.LP
Under no circumstizzle shall tha function fail wit a timeout if the
semaphore can be locked immediately. Da validitizzle of the
\fIabs_timeout\fP need not be checked if tha semaphore can be locked
immediately. 
.SH RETURN VALUE
.LP
Da \fIsem_timedwait\fP() function shall return zero if tha calling
process successfully performed tha semaphore lock operation
on tha semaphore designated by \fIsem\fP. If tha call was unsuccessful,
the state of tha semaphore shall be unchanged, n' the
function shall return a value of -1 n' set \fIerrno\fP ta indicate
the error.
.SH ERRORS
.LP
Da \fIsem_timedwait\fP() function shall fail if:
.TP 7
.B EINVAL
Da \fIsem\fP argument do not refer ta a valid semaphore.
.TP 7
.B EINVAL
Da process or thread would have blocked, n' tha \fIabs_timeout\fP
parameta specified a nanosecondz field value less than
zero or pimped outa than or equal ta 1000 million.
.TP 7
.B ETIMEDOUT
Da semaphore could not be locked before tha specified timeout expired.
.sp
.LP
Da \fIsem_timedwait\fP() function may fail if:
.TP 7
.B EDEADLK
A deadlock condizzle was detected.
.TP 7
.B EINTR
A signal interrupted dis function.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
Applications rockin these functions may be subject ta prioritizzle inversion,
as discussed up in tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, Section 3.285, Prioritizzle Inversion.
.LP
Da \fIsem_timedwait\fP() function is part of tha Semaphores n' Timeouts
options n' need not be provided on all
implementations.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIsem_post\fP(), \fIsem_trywait\fP(), \fIsem_wait\fP(), \fIsemctl\fP(),
\fIsemget\fP(), \fIsemop\fP(), \fItime\fP(), tha Base Definitions
volume of
IEEE\ Std\ 1003.1-2001, \fI<semaphore.h>\fP, \fI<time.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
