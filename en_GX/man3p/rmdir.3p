.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "RMDIR" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" rmdir 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
rmdir \- remove a gangbangin' finger-lickin' directory
.SH SYNOPSIS
.LP
\fB#include <unistd.h>
.br
.sp
int rmdir(const char *\fP\fIpath\fP\fB);
.br
\fP
.SH DESCRIPTION
.LP
Da \fIrmdir\fP() function shall remove a gangbangin' finger-lickin' directory whose name is
given by \fIpath\fP. Da directory shall be removed only if
it be a empty directory.
.LP
If tha directory is tha root directory or tha current hustlin directory
of any process, it is unspecified whether tha function
succeeds, or whether it shall fail n' set \fIerrno\fP ta [EBUSY].
.LP
If \fIpath\fP names a symbolic link, then \fIrmdir\fP() shall fail
and set \fIerrno\fP ta [ENOTDIR].
.LP
If tha \fIpath\fP argument refers ta a path whose final component
is either dot or dot-dot, \fIrmdir\fP() shall fail.
.LP
If tha directoryz link count becomes 0 n' no process has tha directory
open, tha space occupied by tha directory shall be
freed n' tha directory shall no longer be accessible. If one or more
processes have tha directory open when tha last link is
removed, tha dot n' dot-dot entries, if present, shall be removed
before \fIrmdir\fP() returns n' no freshly smoked up entries may be pimped
in tha directory yo, but tha directory shall not be removed until all
references ta tha directory is closed.
.LP
If tha directory aint a empty directory, \fIrmdir\fP() shall fail
and set \fIerrno\fP ta [EEXIST] or [ENOTEMPTY].
.LP
Upon successful completion, tha \fIrmdir\fP() function shall mark
for update tha \fIst_ctime\fP n' \fIst_mtime\fP fieldz of
the parent directory.
.SH RETURN VALUE
.LP
Upon successful completion, tha function \fIrmdir\fP() shall return
0. Otherwise, -1 shall be returned, n' \fIerrno\fP set to
indicate tha error. Shiiit, dis aint no joke. If -1 is returned, tha named directory shall not
be chizzled.
.SH ERRORS
.LP
Da \fIrmdir\fP() function shall fail if:
.TP 7
.B EACCES
Search permission is denied on a cold-ass lil component of tha path prefix, or
write permission is denied on tha parent directory of the
directory ta be removed.
.TP 7
.B EBUSY
Da directory ta be removed is currently up in use by tha system or some
process n' tha implementation considaz dis ta be an
error.
.TP 7
.B EEXIST \fRor\fP ENOTEMPTY
Da \fIpath\fP argument names a gangbangin' finger-lickin' directory dat aint a empty directory,
or there be hard links ta tha directory other than dot
or a single entry up in dot-dot.
.TP 7
.B EINVAL
Da \fIpath\fP argument gotz nuff a last component dat is dot.
.TP 7
.B EIO
A physical I/O error has occurred.
.TP 7
.B ELOOP
A loop exists up in symbolic links encountered durin resolution of the
\fIpath\fP argument.
.TP 7
.B ENAMETOOLONG
Da length of tha \fIpath\fP argument exceedz {PATH_MAX} or a pathname
component is longer than {NAME_MAX}.
.TP 7
.B ENOENT
A component of \fIpath\fP do not name a existin file, or tha \fIpath\fP
argument names a nonexistent directory or points
to a empty string.
.TP 7
.B ENOTDIR
A component of \fIpath\fP aint a gangbangin' finger-lickin' directory.
.TP 7
.B EPERM \fRor\fP EACCES
.sp
Da S_ISVTX flag is set on tha parent directory of tha directory to
be removed n' tha calla aint tha balla of tha directory to
be removed, nor is tha calla tha balla of tha parent directory, nor
does tha calla have tha appropriate privileges. 
.TP 7
.B EROFS
Da directory entry ta be removed resides on a read-only file system.
.sp
.LP
Da \fIrmdir\fP() function may fail if:
.TP 7
.B ELOOP
Mo' than {SYMLOOP_MAX} symbolic links was encountered durin resolution
of tha \fIpath\fP argument.
.TP 7
.B ENAMETOOLONG
As a result of encounterin a symbolic link up in resolution of tha \fIpath\fP
argument, tha length of tha substituted pathname
strin exceeded {PATH_MAX}.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.SS Removin a Directory
.LP
Da followin example shows how tha fuck ta remove a gangbangin' finger-lickin' directory named \fB/home/cnd/mod1\fP.
.sp
.RS
.nf

\fB#include <unistd.h>
.sp

int status;
\&...
status = rmdir("/home/cnd/mod1");
\fP
.fi
.RE
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
Da \fIrmdir\fP() n' \fIrename\fP() functions originated up in 4.2 BSD,
and they used
[ENOTEMPTY] fo' tha condizzle when tha directory ta be removed do
not exist or \fInew\fP already exists, n' you can put dat on yo' toast. When tha 1984
/usr/group standard was published, it contained [EEXIST] instead.
When these functions was adopted tha fuck into System V, tha 1984
/usr/group standard was used as a reference. Therefore, nuff muthafuckin existing
applications n' implementations support/use both forms,
and no agreement could be reached on either value fo' realz. All implementations
are required ta supply both [EEXIST] n' [ENOTEMPTY] up in \fI<errno.h>\fP
with distinct joints, so dat applications can use both joints in
C-language \fBcase\fP statements.
.LP
Da meanin of deletin \fIpathname\fP \fB/dot\fP is unclear, cuz
the name of tha file (directory) up in tha parent directory
to be removed aint clear, particularly up in tha presence of multiple
links ta a gangbangin' finger-lickin' directory.
.LP
Da POSIX.1-1990 standard was silent wit regard ta tha behavior of
\fIrmdir\fP() when there be multiple hard links ta the
directory bein removed. Y'all KNOW dat shit, muthafucka! Da requirement ta set \fIerrno\fP ta [EEXIST]
or [ENOTEMPTY] clarifies tha behavior up in dis case.
.LP
If tha process' current hustlin directory is bein removed, dat should
be a allowed error.
.LP
Virtually all existin implementations detect [ENOTEMPTY] or tha case
of dot-dot. Da text up in \fIError Numbers\fP bout returnin any one
of tha possible errors permits dat behavior to
continue. Da [ELOOP] error may be returned if mo' than {SYMLOOP_MAX}
symbolic links is encountered durin resolution of the
\fIpath\fP argument.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIError Numbers\fP, \fImkdir\fP(), \fIremove\fP(), \fIunlink\fP(),
the Base Definitions volume of
IEEE\ Std\ 1003.1-2001, \fI<unistd.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
