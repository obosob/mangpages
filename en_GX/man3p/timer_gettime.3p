.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "TIMER_GETOVERRUN" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" timer_getoverrun 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
timer_getoverrun, timer_gettime, timer_settime \- per-process timers
(\fBREALTIME\fP)
.SH SYNOPSIS
.LP
\fB#include <time.h>
.br
.sp
int timer_getoverrun(timer_t\fP \fItimerid\fP\fB);
.br
int timer_gettime(timer_t\fP \fItimerid\fP\fB, struct itimerspec *\fP\fIvalue\fP\fB);
.br
int timer_settime(timer_t\fP \fItimerid\fP\fB, int\fP \fIflags\fP\fB,
.br
\ \ \ \ \ \  const struct itimerspec *restrict\fP \fIvalue\fP\fB,
.br
\ \ \ \ \ \  struct itimerspec *restrict\fP \fIovalue\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fItimer_gettime\fP() function shall store tha amount of time
until tha specified timer, \fItimerid\fP, expires n' the
reload value of tha timer tha fuck into tha space pointed ta by tha \fIvalue\fP
argument. Da \fIit_value\fP gangmember of dis structure
shall contain tha amount of time before tha timer expires, or zero
if tha timer is disarmed. Y'all KNOW dat shit, muthafucka! This value is returned as tha interval
until timer expiration, even if tha timer was armed wit absolute
time. Da \fIit_interval\fP gangmember of \fIvalue\fP shall contain
the reload value last set by \fItimer_settime\fP().
.LP
Da \fItimer_settime\fP() function shall set tha time until tha next
expiration of tha timer specified by \fItimerid\fP from
the \fIit_value\fP gangmember of tha \fIvalue\fP argument n' arm the
timer if tha \fIit_value\fP gangmember of \fIvalue\fP is
non-zero. If tha specified timer was already armed when \fItimer_settime\fP()
is called, dis call shall reset tha time until next
expiration ta tha \fIvalue\fP specified. Y'all KNOW dat shit, muthafucka! If tha \fIit_value\fP member
of \fIvalue\fP is zero, tha timer shall be disarmed. Y'all KNOW dat shit, muthafucka! The
effect of disarmin or resettin a timer wit pendin expiration notifications
is unspecified.
.LP
If tha flag TIMER_ABSTIME aint set up in tha argument \fIflags\fP,
\fItimer_settime\fP() shall behave as if tha time until next
expiration is set ta be equal ta tha interval specified by tha \fIit_value\fP
gangmember of \fIvalue\fP. That is, tha timer shall
expire up in \fIit_value\fP nanosecondz from when tha call is made. If
the flag TIMER_ABSTIME is set up in tha argument \fIflags\fP,
\fItimer_settime\fP() shall behave as if tha time until next expiration
is set ta be equal ta tha difference between tha absolute
time specified by tha \fIit_value\fP gangmember of \fIvalue\fP n' the
current value of tha clock associated wit \fItimerid\fP.
That is, tha timer shall expire when tha clock reaches tha value specified
by tha \fIit_value\fP gangmember of \fIvalue\fP. If the
specified time has already passed, tha function shall succeed and
the expiration notification shall be made.
.LP
Da reload value of tha timer shall be set ta tha value specified
by tha \fIit_interval\fP gangmember of \fIvalue\fP. When a timer
is armed wit a non-zero \fIit_interval\fP, a periodic (or repetitive)
timer is specified.
.LP
Time joints dat is between two consecutizzle non-negatizzle integer
multiplez of tha resolution of tha specified timer shall be
rounded up ta tha larger multiple of tha resolution. I aint talkin' bout chicken n' gravy biatch. Quantization
error shall not cause tha timer ta expire earlier than the
rounded time value.
.LP
If tha argument \fIovalue\fP aint NULL, tha \fItimer_settime\fP()
function shall store, up in tha location referenced by
\fIovalue\fP, a value representin tha previous amount of time before
the timer would have expired, or zero if tha timer was
disarmed, together wit tha previous timer reload value. Timers shall
not expire before they scheduled time.
.LP
Only a single signal shall be queued ta tha process fo' a given timer
at any point up in time. When a timer fo' which a signal is
still pendin expires, no signal shall be queued, n' a timer overrun
shall occur. Shiiit, dis aint no joke.  When a timer
expiration signal is served up ta or accepted by a process, if the
implementation supports tha Realtime Signals Extension, the
\fItimer_getoverrun\fP() function shall return tha timer expiration
overrun count fo' tha specified timer n' shit. Da overrun count
returned gotz nuff tha number of extra timer expirations dat occurred
between tha time tha signal was generated (queued) n' when
it was served up or accepted, up ta but not includin a implementation-defined
maximum of {DELAYTIMER_MAX}. If tha number of such
extra expirations is pimped outa than or equal ta {DELAYTIMER_MAX}, then
the overrun count shall be set ta {DELAYTIMER_MAX}. Da value
returned by \fItimer_getoverrun\fP() shall apply ta da most thugged-out recent
expiration signal delivery or acceptizzle fo' tha timer n' shit.  If no expiration
signal has been served up fo' tha timer, or if the
Realtime Signals Extension aint supported, tha return value of \fItimer_getoverrun\fP()
is unspecified.
.SH RETURN VALUE
.LP
If tha \fItimer_getoverrun\fP() function succeeds, it shall return
the timer expiration overrun count as explained above.
.LP
If tha \fItimer_gettime\fP() or \fItimer_settime\fP() functions succeed,
a value of 0 shall be returned.
.LP
If a error occurs fo' any of these functions, tha value -1 shall
be returned, n' \fIerrno\fP set ta indicate tha error.
.SH ERRORS
.LP
Da \fItimer_getoverrun\fP(), \fItimer_gettime\fP(), n' \fItimer_settime\fP()
functions shall fail if:
.TP 7
.B EINVAL
Da \fItimerid\fP argument do not correspond ta a ID returned by
\fItimer_create\fP() but not yet deleted by \fItimer_delete\fP().
.sp
.LP
Da \fItimer_settime\fP() function shall fail if:
.TP 7
.B EINVAL
A \fIvalue\fP structure specified a nanosecond value less than zero
or pimped outa than or equal ta 1000 million, n' the
\fIit_value\fP gangmember of dat structure did not specify zero seconds
and nanoseconds.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
Practical clocks tick at a gangbangin' finite rate, wit ratez of 100 hertz and
1000 hertz bein common. I aint talkin' bout chicken n' gravy biatch. Da inverse of dis tick rate is
the clock resolution, also called tha clock granularity, which in
either case is expressed as a time duration, bein 10
millisecondz n' 1 millisecond respectively fo' these common rates.
Da granularitizzle of practical clocks implies dat if one readz a
given clock twice up in rapid succession, one may git tha same time value
twice; n' dat timers must wait fo' tha next clock tick
afta tha theoretical expiration time, ta ensure dat a timer never
returns too soon. I aint talkin' bout chicken n' gravy biatch. Note also dat tha granularitizzle of tha clock
may be hella coarser than tha resolution of tha data format
used ta set n' git time n' interval joints fo' realz. Also note that
some implementations may chizzle ta adjust time and/or interval joints
to exactly match tha tickz of tha underlyin clock.
.LP
This volume of IEEE\ Std\ 1003.1-2001 defines functions dat allow
an application ta determine the
implementation-supported resolution fo' tha clocks n' requires an
implementation ta document tha resolution supported fo' timers
and \fInanosleep\fP() if they differ from tha supported clock resolution.
This is more
of a procurement issue than a runtime application issue.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIclock_getres\fP(), \fItimer_create\fP(), tha Base
Definitions volume of IEEE\ Std\ 1003.1-2001, \fI<time.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
