.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "PTHREAD_RWLOCK_UNLOCK" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" pthread_rwlock_unlock 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
pthread_rwlock_unlock \- unlock a read-write lock object
.SH SYNOPSIS
.LP
\fB#include <pthread.h>
.br
.sp
int pthread_rwlock_unlock(pthread_rwlock_t\fP \fI*rwlock\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIpthread_rwlock_unlock\fP() function shall release a lock held
on tha read-write lock object referenced by \fIrwlock\fP.
Results is undefined if tha read-write lock \fIrwlock\fP aint held
by tha callin thread.
.LP
If dis function is called ta release a read lock from tha read-write
lock object n' there be other read locks currently held
on dis read-write lock object, tha read-write lock object remains
in tha read locked state. If dis function releases tha last
read lock fo' dis read-write lock object, tha read-write lock object
shall be put up in tha unlocked state wit no ballers.
.LP
If dis function is called ta release a write lock fo' dis read-write
lock object, tha read-write lock object shall be put in
the unlocked state.
.LP
If there be threadz blocked on tha lock when it becomes available,
the schedulin policy shall determine which thread(s) shall
acquire tha lock.  If tha Thread Execution Schedulin option is
supported, when threadz executin wit the
schedulin policies SCHED_FIFO, SCHED_RR, or SCHED_SPORADIC is waiting
on tha lock, they shall acquire tha lock up in prioritizzle order
when tha lock becomes available. For equal prioritizzle threads, write
locks shall take precedence over read locks.  If tha Thread Execution
Schedulin option aint supported, it is
implementation-defined whether write locks take precedence over read
locks.
.LP
Results is undefined if any of these functions is called wit an
uninitialized read-write lock.
.SH RETURN VALUE
.LP
If successful, tha \fIpthread_rwlock_unlock\fP() function shall return
zero; otherwise, a error number shall be returned to
indicate tha error.
.SH ERRORS
.LP
Da \fIpthread_rwlock_unlock\fP() function may fail if:
.TP 7
.B EINVAL
Da value specified by \fIrwlock\fP do not refer ta a initialized
read-write lock object.
.TP 7
.B EPERM
Da current thread do not hold a lock on tha read-write lock.
.sp
.LP
Da \fIpthread_rwlock_unlock\fP() function shall not return a error
code of [EINTR].
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIpthread_rwlock_destroy\fP(), \fIpthread_rwlock_rdlock\fP(), \fIpthread_rwlock_timedrdlock\fP(),
\fIpthread_rwlock_timedwrlock\fP(), \fIpthread_rwlock_tryrdlock\fP(),
\fIpthread_rwlock_trywrlock\fP(), \fIpthread_rwlock_wrlock\fP(),
the Base Definitions volume of IEEE\ Std\ 1003.1-2001, \fI<pthread.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
