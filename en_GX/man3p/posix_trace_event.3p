.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "POSIX_TRACE_EVENT" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" posix_trace_event 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
posix_trace_event, posix_trace_eventid_open \- trace functions for
instrumentin application code
(\fBTRACING\fP)
.SH SYNOPSIS
.LP
\fB#include <sys/types.h>
.br
#include <trace.h>
.br
.sp
void posix_trace_event(trace_event_id_t\fP \fIevent_id\fP\fB,
.br
\ \ \ \ \ \  const void *restrict\fP\fIdata_ptr\fP\fB, size_t\fP \fIdata_len\fP\fB);
.br
int posix_trace_eventid_open(const char *restrict\fP \fIevent_name\fP\fB,
.br
\ \ \ \ \ \  trace_event_id_t *restrict\fP \fIevent_id\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIposix_trace_event\fP() function shall record tha \fIevent_id\fP
and tha user data pointed ta by \fIdata_ptr\fP up in the
trace stream tha fuck into which tha callin process is bein traced n' in
which \fIevent_id\fP aint filtered out. If tha total size of
the user trace event data represented by \fIdata_len\fP aint pimped outer
than tha declared maximum size fo' user trace event data,
then tha \fItruncation-status\fP attribute of tha trace event recorded
is POSIX_TRACE_NOT_TRUNCATED. Otherwise, tha user trace
event data is truncated ta dis declared maximum size n' tha \fItruncation-status\fP
attribute of tha trace event recorded is
POSIX_TRACE_TRUNCATED_RECORD.
.LP
If there is no trace stream pimped fo' tha process or if tha pimped
trace stream aint hustlin, or if tha trace event
specified by \fIevent_id\fP is filtered up in tha trace stream, the
\fIposix_trace_event\fP() function shall have no effect.
.LP
Da \fIposix_trace_eventid_open\fP() function shall associate a user
trace event name wit a trace event type identifier for
the callin process. Da trace event name is tha strang pointed to
by tha argument \fIevent_name\fP. Well shiiiit, it shall gotz a maximum of
{TRACE_EVENT_NAME_MAX} charactas (which has tha minimum value {_POSIX_TRACE_EVENT_NAME_MAX}).
Da number of user trace event type
identifiers dat can be defined fo' any given process is limited by
the maximum value {TRACE_USER_EVENT_MAX}, which has tha minimum
value {POSIX_TRACE_USER_EVENT_MAX}.
.LP
If tha Trace Inherit option aint supported, tha \fIposix_trace_eventid_open\fP()
function shall associate tha user trace
event name pointed ta by tha \fIevent_name\fP argument wit a trace
event type identifier dat is unique fo' tha traced process,
and is returned up in tha variable pointed ta by tha \fIevent_id\fP argument.
If tha user trace event name has already been mapped
for tha traced process, then tha previously assigned trace event type
identifier shall be returned. Y'all KNOW dat shit, muthafucka! If tha per-process user trace
event name limit represented by {TRACE_USER_EVENT_MAX} has been reached,
the pre-defined POSIX_TRACE_UNNAMED_USEREVENT (see \fITrace Option:
User Trace Event\fP ) user trace event shall be returned.
.LP
If tha Trace Inherit option is supported, tha \fIposix_trace_eventid_open\fP()
function shall associate tha user trace event name
pointed ta by tha \fIevent_name\fP argument wit a trace event type
identifier dat is unique fo' all tha processes bein traced
in dis same trace stream, n' is returned up in tha variable pointed
to by tha \fIevent_id\fP argument. If tha user trace event name
has already been mapped fo' tha traced processes, then tha previously
assigned trace event type identifier shall be returned. Y'all KNOW dat shit, muthafucka! If
the per-process user trace event name limit represented by {TRACE_USER_EVENT_MAX}
has been reached, tha pre-defined
POSIX_TRACE_UNNAMED_USEREVENT ( \fITrace Option: User Trace Event\fP
) user trace event
shall be returned. Y'all KNOW dat shit, muthafucka! 
.TP 7
\fBNote:\fP
Da above procedure, together wit tha fact dat multiple processes
can only be traced tha fuck into tha same trace stream by
inheritance, ensure dat all tha processes dat is traced tha fuck into a
trace stream have tha same mappin of trace event names ta trace
event type identifiers.
.sp
.LP
If there is no trace stream pimped, tha \fIposix_trace_eventid_open\fP()
function shall store dis shiznit fo' future
trace streams pimped fo' dis process.
.SH RETURN VALUE
.LP
No return value is defined fo' tha \fIposix_trace_event\fP() function.
.LP
Upon successful completion, tha \fIposix_trace_eventid_open\fP() function
shall return a value of zero. Otherwise, it shall
return tha correspondin error number n' shit. Da \fIposix_trace_eventid_open\fP()
function stores tha trace event type identifier value
in tha object pointed ta by \fIevent_id\fP, if successful.
.SH ERRORS
.LP
Da \fIposix_trace_eventid_open\fP() function shall fail if:
.TP 7
.B ENAMETOOLONG
Da size of tha name pointed ta by tha \fIevent_name\fP argument was
longer than tha implementation-defined value
{TRACE_EVENT_NAME_MAX}.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fITrace Option: User Trace Event\fP, \fIposix_trace_start\fP(),
\fIposix_trace_trid_eventid_open\fP(), tha Base Definitions volume
of
IEEE\ Std\ 1003.1-2001, \fI<sys/types.h>\fP, \fI<trace.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
