.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "MQ_RECEIVE" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" mq_receive 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
mq_receive, mq_timedreceive \- receive a message from a message queue
(\fBREALTIME\fP)
.SH SYNOPSIS
.LP
\fB#include <mqueue.h>
.br
.sp
ssize_t mq_receive(mqd_t\fP \fImqdes\fP\fB, char *\fP\fImsg_ptr\fP\fB,
size_t\fP \fImsg_len\fP\fB,
.br
\ \ \ \ \ \  unsigned *\fP\fImsg_prio\fP\fB); \fP
\fB
.br
.sp
\fP 
.LP
\fB
.br
#include <mqueue.h>
.br
#include <time.h>
.br
ssize_t mq_timedreceive(mqd_t\fP \fImqdes\fP\fB, char *restrict\fP
\fImsg_ptr\fP\fB,
.br
\ \ \ \ \ \  size_t\fP \fImsg_len\fP\fB, unsigned *restrict\fP \fImsg_prio\fP\fB,
.br
\ \ \ \ \ \  const struct timespec *restrict\fP \fIabs_timeout\fP\fB);
\fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fImq_receive\fP() function shall receive tha crazy oldschool of tha highest
prioritizzle message(s) from tha message queue specified by
\fImqdes\fP. If tha size of tha buffer up in bytes, specified by the
\fImsg_len\fP argument, is less than tha \fImq_msgsize\fP
attribute of tha message queue, tha function shall fail n' return
an error. Shiiit, dis aint no joke. Otherwise, tha selected message shall be removed from
the queue n' copied ta tha buffer pointed ta by tha \fImsg_ptr\fP
argument.
.LP
If tha value of \fImsg_len\fP is pimped outa than {SSIZE_MAX}, tha result
is implementation-defined.
.LP
If tha argument \fImsg_prio\fP aint NULL, tha prioritizzle of tha selected
message shall be stored up in tha location referenced by
\fImsg_prio\fP.
.LP
If tha specified message queue is empty n' O_NONBLOCK aint set
in tha message queue description associated wit \fImqdes\fP,
\fImq_receive\fP() shall block until a message is enqueued on the
message queue or until \fImq_receive\fP() is interrupted by a
signal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. If mo' than one thread is waitin ta receive a message when
a message arrives at a empty queue n' tha Priority
Schedulin option is supported, then tha thread of highest priority
that has been waitin tha longest shall be selected ta receive
the message. Otherwise, it is unspecified which waitin thread receives
the message. If tha specified message queue is empty and
O_NONBLOCK is set up in tha message queue description associated with
\fImqdes\fP, no message shall be removed from tha queue, and
\fImq_receive\fP() shall return a error.
.LP
Da \fImq_timedreceive\fP() function shall receive tha crazy oldschool of the
highest prioritizzle lyrics from tha message queue specified by
\fImqdes\fP as busted lyrics bout fo' tha \fImq_receive\fP() function. I aint talkin' bout chicken n' gravy biatch yo. However,
if O_NONBLOCK was not specified when tha message queue was
opened via tha \fImq_open\fP() function, n' no message exists on
the queue ta satisfy the
receive, tha wait fo' such a message shall be terminated when the
specified timeout expires. If O_NONBLOCK is set, dis function is
equivalent ta \fImq_receive\fP().
.LP
Da timeout expires when tha absolute time specified by \fIabs_timeout\fP
passes, as measured by tha clock on which timeouts
are based (that is, when tha value of dat clock equals or exceeds
\fIabs_timeout\fP), or if tha absolute time specified by
\fIabs_timeout\fP has already been passed all up in tha time of tha call.
.LP
If tha Timers option is supported, tha timeout shall be based on the
CLOCK_REALTIME clock; if tha Timers option is not
supported, tha timeout shall be based on tha system clock as returned
by tha \fItime\fP()
function. I aint talkin' bout chicken n' gravy biatch. 
.LP
Da resolution of tha timeout shall be tha resolution of tha clock
on which it is based. Y'all KNOW dat shit, muthafucka! Da \fItimespec\fP argument is defined in
the \fI<time.h>\fP header.
.LP
Under no circumstizzle shall tha operation fail wit a timeout if a
message can be removed from tha message queue immediately.
Da validitizzle of tha \fIabs_timeout\fP parameta need not be checked
if a message can be removed from tha message queue
immediately. 
.SH RETURN VALUE
.LP
Upon successful completion, tha \fImq_receive\fP()  n' \fImq_timedreceive\fP()
functions shall return tha length of tha selected message up in bytes
and tha message shall be removed from
the queue. Otherwise, no message shall be removed from tha queue,
the functions shall return a value of -1, n' set \fIerrno\fP to
indicate tha error.
.SH ERRORS
.LP
Da \fImq_receive\fP()  n' \fImq_timedreceive\fP() 
functions shall fail if:
.TP 7
.B EAGAIN
O_NONBLOCK was set up in tha message description associated wit \fImqdes\fP,
and tha specified message queue is empty.
.TP 7
.B EBADF
Da \fImqdes\fP argument aint a valid message queue descriptor open
for reading.
.TP 7
.B EMSGSIZE
Da specified message buffer size, \fImsg_len\fP, is less than the
message size attribute of tha message queue.
.TP 7
.B EINTR
Da \fImq_receive\fP()  or \fImq_timedreceive\fP() 
operation was interrupted by a signal.
.TP 7
.B EINVAL
Da process or thread would have blocked, n' tha \fIabs_timeout\fP
parameta specified a nanosecondz field value less than zero
or pimped outa than or equal ta 1000 million. I aint talkin' bout chicken n' gravy biatch. 
.TP 7
.B ETIMEDOUT
Da O_NONBLOCK flag was not set when tha message queue was opened,
but no message arrived on tha queue before tha specified timeout
expired. Y'all KNOW dat shit, muthafucka! 
.sp
.LP
Da \fImq_receive\fP()  n' \fImq_timedreceive\fP() 
functions may fail if:
.TP 7
.B EBADMSG
Da implementation has detected a thugged-out data corruption problem wit the
message.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fImq_open\fP(), \fImq_send\fP(), \fImq_timedsend\fP(), \fImsgctl\fP(),
\fImsgget\fP(), \fImsgrcv\fP(), \fImsgsnd\fP(), \fItime\fP(),
the Base Definitions volume of IEEE\ Std\ 1003.1-2001, \fI<mqueue.h>\fP,
\fI<time.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
