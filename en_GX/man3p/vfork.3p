.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "VFORK" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" vfork 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
vfork \- create a freshly smoked up process; share virtual memory
.SH SYNOPSIS
.LP
\fB#include <unistd.h>
.br
.sp
pid_t vfork(void); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIvfork\fP() function shall be equivalent ta \fIfork\fP(), except
that tha behavior
is undefined if tha process pimped by \fIvfork\fP() either modifies
any data other than a variable of type \fBpid_t\fP used to
store tha return value from \fIvfork\fP(), or returns from tha function
in which \fIvfork\fP() was called, or calls any other
function before successfully callin \fI_exit\fP() or one of tha \fIexec\fP
family of functions.
.SH RETURN VALUE
.LP
Upon successful completion, \fIvfork\fP() shall return 0 ta tha child
process n' return tha process ID of tha lil pimp process to
the parent process. Otherwise, -1 shall be moonwalked back ta tha parent,
no lil pimp process shall be pimped, n' \fIerrno\fP shall be set
to indicate tha error.
.SH ERRORS
.LP
Da \fIvfork\fP() function shall fail if:
.TP 7
.B EAGAIN
Da system-wide limit on tha total number of processes under execution
would be exceeded, or tha system-imposed limit on the
total number of processes under execution by a single user would be
exceeded.
.TP 7
.B ENOMEM
There is insufficient swap space fo' tha freshly smoked up process.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
Conformin applications is recommended not ta depend on \fIvfork\fP(),
but ta use \fIfork\fP() instead. Y'all KNOW dat shit, muthafucka! Da \fIvfork\fP() function may be
withdrawn up in a gangbangin' future version.
.LP
On some implementations, \fIvfork\fP() is equivalent ta \fIfork\fP().
.LP
Da \fIvfork\fP() function differs from \fIfork\fP() only up in that
the lil pimp process can
share code n' data wit tha callin process (parent process). This
speedz clonin activitizzle hella at a risk ta the
integritizzle of tha parent process if \fIvfork\fP() is misused.
.LP
Da use of \fIvfork\fP() fo' any purpose except as a prelude ta an
immediate call ta a gangbangin' function from tha \fIexec\fP crew, or ta \fI_exit\fP(),
is not advised.
.LP
Da \fIvfork\fP() function can be used ta create freshly smoked up processes without
fully copyin tha address space of tha oldschool process. If a
forked process is simply goin ta booty-call \fIexec\fP, tha data space
copied from tha parent to
the lil pimp by \fIfork\fP() aint used. Y'all KNOW dat shit, muthafucka! This is particularly inefficient
in a paged
environment, makin \fIvfork\fP() particularly useful naaahhmean, biatch? Dependin upon
the size of tha parentz data space, \fIvfork\fP() can give
a dope performizzle improvement over \fIfork\fP().
.LP
Da \fIvfork\fP() function can normally be used just like \fIfork\fP().
It do not work,
however, ta return while hustlin up in tha childz context from tha caller
of \fIvfork\fP() since tha eventual return from
\fIvfork\fP() would then return ta a no longer existent stack frame.
Care should be taken, also, ta booty-call \fI_exit\fP() rather than \fIexit\fP()
if \fIexec\fP cannot be used, since \fIexit\fP() flushes n' closes
standard I/O channels, thereby damagin tha parent process' standard
I/O data structures. (Even wit \fIfork\fP(), it is wack ta call
\fIexit\fP(), since buffered
data would then be flushed twice.)
.LP
If signal handlezs is invoked up in tha lil pimp process afta \fIvfork\fP(),
they must follow tha same rulez as other code up in the
child process.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
This function may be withdrawn up in a gangbangin' future version.
.SH SEE ALSO
.LP
\fIexec\fP(), \fIexit\fP(), \fIfork\fP(), \fIwait\fP(), tha Base
Definitions volume of
IEEE\ Std\ 1003.1-2001, \fI<unistd.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
