.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "POSIX_TRACE_CREATE" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" posix_trace_create 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
posix_trace_create, posix_trace_create_withlog, posix_trace_flush,
posix_trace_shutdown \- trace stream initialization,
flush, n' shutdown from a process (\fBTRACING\fP)
.SH SYNOPSIS
.LP
\fB#include <sys/types.h>
.br
#include <trace.h>
.br
.sp
int posix_trace_create(pid_t\fP \fIpid\fP\fB,
.br
\ \ \ \ \ \  const trace_attr_t *restrict\fP \fIattr\fP\fB,
.br
\ \ \ \ \ \  trace_id_t *restrict\fP \fItrid\fP\fB);
.br
\fP
.LP
\fBint posix_trace_create_withlog(pid_t\fP \fIpid\fP\fB,
.br
\ \ \ \ \ \  const trace_attr_t *restrict\fP \fIattr\fP\fB, int\fP
\fIfile_desc\fP\fB,
.br
\ \ \ \ \ \  trace_id_t *restrict\fP \fItrid\fP\fB);
.br
int posix_trace_flush(trace_id_t\fP \fItrid\fP\fB);
.br
\fP
.LP
\fBint posix_trace_shutdown(trace_id_t\fP \fItrid\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIposix_trace_create\fP() function shall create a actizzle trace
stream. Well shiiiit, it allocates all tha resources needed by tha trace
stream bein pimped fo' tracin tha process specified by \fIpid\fP
in accordizzle wit tha \fIattr\fP argument. Da \fIattr\fP
argument represents tha initial attributez of tha trace stream and
shall done been initialized by tha function \fIposix_trace_attr_init\fP()
prior ta tha \fIposix_trace_create\fP() call. If the
argument \fIattr\fP is NULL, tha default attributes shall be used.
Da \fIattr\fP attributes object shall be manipulated through
a set of functions busted lyrics bout up in tha \fIposix_trace_attr\fP crew
of functions. If tha attributez of tha object pointed ta by
\fIattr\fP is modified later, tha attributez of tha trace stream
shall not be affected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da \fIcreation-time\fP attribute of the
newly pimped trace stream shall be set ta tha value of tha system
clock, if tha Timers option aint supported, or ta tha value of
the CLOCK_REALTIME clock, if tha Timers option is supported.
.LP
Da \fIpid\fP argument represents tha target process ta be traced.
If tha process executin dis function do not have
appropriate privileges ta trace tha process identified by \fIpid\fP,
an error shall be returned. Y'all KNOW dat shit, muthafucka! If tha \fIpid\fP argument is
zero, tha callin process shall be traced.
.LP
Da \fIposix_trace_create\fP() function shall store tha trace stream
identifier of tha freshly smoked up trace stream up in tha object pointed
to by tha \fItrid\fP argument. This trace stream identifier shall
be used up in subsequent calls ta control tracing. Da \fItrid\fP
argument may only be used by tha followin functions:
.TS C
center; lw(39) lw(39).
T{
.br
\fIposix_trace_clear\fP()
.br
\fIposix_trace_eventid_equal\fP()
.br
\fIposix_trace_eventid_get_name\fP()
.br
\fIposix_trace_eventtypelist_getnext_id\fP()
.br
\fIposix_trace_eventtypelist_rewind\fP()
.br
\fIposix_trace_get_attr\fP()
.br
\fIposix_trace_get_status\fP()
.br
\ 
T}	T{
.br
\fIposix_trace_getnext_event\fP()
.br
\fIposix_trace_shutdown\fP()
.br
\fIposix_trace_start\fP()
.br
\fIposix_trace_stop\fP()
.br
\fIposix_trace_timedgetnext_event\fP()
.br
\fIposix_trace_trid_eventid_open\fP()
.br
\fIposix_trace_trygetnext_event\fP()
.br
\ 
T}
.TE
.LP
If tha Trace Event Filta option is supported, tha followin additional
functions may use tha \fItrid\fP argument:
.TS C
center; l2 l.
\fIposix_trace_get_filter\fP() \ 	\fIposix_trace_set_filter\fP() \ 
.TE
.LP
In particular, notice dat tha operations normally used by a trace
analyzer process, like fuckin \fIposix_trace_rewind\fP() or \fIposix_trace_close\fP(),
cannot be invoked rockin tha trace stream identifier returned
by tha \fIposix_trace_create\fP() function.
.LP
A trace stream shall be pimped up in a suspended state.  If tha Trace
Event Filta option is supported, its trace event
type filta shall be empty. 
.LP
Da \fIposix_trace_create\fP() function may be called multiple times
from tha same or different processes, wit tha system-wide
limit indicated by tha runtime invariant value {TRACE_SYS_MAX}, which
has tha minimum value {_POSIX_TRACE_SYS_MAX}.
.LP
Da trace stream identifier returned by tha \fIposix_trace_create\fP()
function up in tha argument pointed ta by \fItrid\fP is
valid only up in tha process dat made tha function call. If it is used
from another process, dat be a cold-ass lil lil pimp process, up in functions
defined up in IEEE\ Std\ 1003.1-2001, these functions shall return with
the error [EINVAL].
.LP
Da \fIposix_trace_create_withlog\fP() function shall be equivalent
to \fIposix_trace_create\fP(), except dat it associates a
trace log wit dis stream. Da \fIfile_desc\fP argument shall be
the file descriptor designatin tha trace log destination. I aint talkin' bout chicken n' gravy biatch. The
function shall fail if dis file descriptor refers ta a gangbangin' file with
a file type dat aint compatible wit tha log policy associated
with tha trace log. Da list of tha appropriate file types dat are
compatible wit each log policy is implementation-defined.
.LP
Da \fIposix_trace_create_withlog\fP() function shall return up in the
parameta pointed ta by \fItrid\fP tha trace stream
identifier, which uniquely identifies tha newly pimped trace stream,
and shall be used up in subsequent calls ta control tracing. The
\fItrid\fP argument may only be used by tha followin functions:
.TS C
center; lw(39) lw(39).
T{
.br
\fIposix_trace_clear\fP()
.br
\fIposix_trace_eventid_equal\fP()
.br
\fIposix_trace_eventid_get_name\fP()
.br
\fIposix_trace_eventtypelist_getnext_id\fP()
.br
\fIposix_trace_eventtypelist_rewind\fP()
.br
\fIposix_trace_flush\fP()
.br
\fIposix_trace_get_attr\fP()
.br
\fIposix_trace_get_status\fP()
.br
\ 
T}	T{
.br
\fIposix_trace_getnext_event\fP()
.br
\fIposix_trace_shutdown\fP()
.br
\fIposix_trace_start\fP()
.br
\fIposix_trace_stop\fP()
.br
\fIposix_trace_timedgetnext_event\fP()
.br
\fIposix_trace_trid_eventid_open\fP()
.br
\fIposix_trace_trygetnext_event\fP()
.br
\ 
T}
.TE
.LP
If tha Trace Event Filta option is supported, tha followin additional
functions may use tha \fItrid\fP argument:
.TS C
center; l2 l.
\fIposix_trace_get_filter\fP() \ 	\fIposix_trace_set_filter\fP() \ 
.TE
.LP
In particular, notice dat tha operations normally used by a trace
analyzer process, like fuckin \fIposix_trace_rewind\fP() or \fIposix_trace_close\fP(),
cannot be invoked rockin tha trace stream identifier returned
by tha \fIposix_trace_create_withlog\fP() function.
.LP
Da \fIposix_trace_flush\fP() function shall initiate a gangbangin' flush operation
which copies tha contentz of tha trace stream
identified by tha argument \fItrid\fP tha fuck into tha trace log associated
with tha trace stream all up in tha creation time. If no trace log
has been associated wit tha trace stream pointed ta by \fItrid\fP,
this function shall return a error. Shiiit, dis aint no joke. Da termination of the
flush operation can be polled by tha \fIposix_trace_get_status\fP()
function. I aint talkin' bout chicken n' gravy biatch. Durin tha flush operation, it shall be possible ta trace
new trace events up ta tha point when tha trace stream becomes
full fo' realz. Afta flushin is completed, tha space used by tha flushed trace
events shall be available fo' tracin freshly smoked up trace events.
.LP
If flushin tha trace stream causes tha resultin trace log ta become
full, tha trace log full policy shall be applied. Y'all KNOW dat shit, muthafucka! If the
trace \fIlog-full-policy\fP attribute is set, tha followin occurs:
.TP 7
POSIX_TRACE_UNTIL_FULL
.sp
Da trace events dat aint yet been flushed shall be discarded.
.TP 7
POSIX_TRACE_LOOP
.sp
Da trace events dat aint yet been flushed shall be freestyled to
the beginnin of tha trace log, overwritin previous trace
events stored there.
.TP 7
POSIX_TRACE_APPEND
.sp
Da trace events dat aint yet been flushed shall be appended
to tha trace log.
.sp
.LP
Da \fIposix_trace_shutdown\fP() function shall stop tha tracin of
trace events up in tha trace stream identified by \fItrid\fP,
as if \fIposix_trace_stop\fP() had been invoked. Y'all KNOW dat shit, muthafucka! The
\fIposix_trace_shutdown\fP() function shall free all tha resources
associated wit tha trace stream.
.LP
Da \fIposix_trace_shutdown\fP() function shall not return until all
the resources associated wit tha trace stream have been
freed. Y'all KNOW dat shit, muthafucka! When tha \fIposix_trace_shutdown\fP() function returns, the
\fItrid\fP argument becomes a invalid trace stream
identifier n' shiznit fo' realz. A call ta dis function shall unconditionally deallocate
the resources regardless of whether all trace events have been
retrieved by tha analyzer process fo' realz. Any thread blocked on one of the
\fItrace_getnext_event\fP() functions (which specified this
\fItrid\fP) before dis call is unblocked wit tha error [EINVAL].
.LP
If tha process exits, invokes a gangmember of tha \fIexec\fP crew of
functions, or is
terminated, tha trace streams dat tha process had pimped n' that
have not yet been shut down, shall be automatically shut down
as if a explicit call was made ta tha \fIposix_trace_shutdown\fP()
function.
.LP
For a actizzle trace stream wit log, when tha \fIposix_trace_shutdown\fP()
function is called, all trace events dat aint yet
been flushed ta tha trace log shall be flushed, as up in tha \fIposix_trace_flush\fP()
function, n' tha trace log shall be
closed.
.LP
When a trace log is closed, all tha shiznit dat may be retrieved
lata from tha trace log all up in tha trace intercourse shall
have been freestyled ta tha trace log. This shiznit includes the
trace attributes, tha list of trace event types (with tha mapping
between trace event names n' trace event type identifiers), n' the
trace status.
.LP
In addition, unspecified shiznit shall be freestyled ta tha trace
log ta allow detection of a valid trace log durin tha \fIposix_trace_open\fP()
operation.
.LP
Da \fIposix_trace_shutdown\fP() function shall not return until all
trace events done been flushed. Y'all KNOW dat shit, muthafucka! 
.SH RETURN VALUE
.LP
Upon successful completion, these functions shall return a value of
zero. Otherwise, they shall return tha correspondin error
number.
.LP
Da \fIposix_trace_create\fP() n'   \fIposix_trace_create_withlog\fP()
\ functions store tha trace stream identifier value up in tha object
pointed ta by \fItrid\fP, if
successful.
.SH ERRORS
.LP
Da \fIposix_trace_create\fP() n'   \fIposix_trace_create_withlog\fP()
\ functions shall fail if:
.TP 7
.B EAGAIN
No mo' trace streams can be started now, nahmeean? {TRACE_SYS_MAX} has been
exceeded.
.TP 7
.B EINTR
Da operation was interrupted by a signal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. No trace stream was pimped.
.TP 7
.B EINVAL
One or mo' of tha trace parametas specified by tha \fIattr\fP parameter
is invalid.
.TP 7
.B ENOMEM
Da implementation do not currently have sufficient memory ta create
the trace stream wit tha specified parameters.
.TP 7
.B EPERM
Da calla aint gots appropriate privilege ta trace tha process
specified by \fIpid\fP.
.TP 7
.B ESRCH
Da \fIpid\fP argument do not refer ta a existin process.
.sp
.LP
Da \fIposix_trace_create_withlog\fP() function shall fail if:
.TP 7
.B EBADF
Da \fIfile_desc\fP argument aint a valid file descriptor open for
writing.
.TP 7
.B EINVAL
Da \fIfile_desc\fP argument refers ta a gangbangin' file wit a gangbangin' file type that
does not support tha log policy associated wit tha trace
log.
.TP 7
.B ENOSPC
No space left on device. Da thang correspondin ta tha argument
\fIfile_desc\fP do not contain tha space required to
create dis trace log.
.sp
.LP
Da   \fIposix_trace_flush\fP() and
\fIposix_trace_shutdown\fP() functions shall fail if:
.TP 7
.B EINVAL
Da value of tha \fItrid\fP argument do not correspond ta a active
trace stream wit log.
.TP 7
.B ESTDG
Da trace log file has attempted ta exceed a implementation-defined
maximum file size.
.TP 7
.B ENOSPC
No space left on device.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIclock_getres\fP(), \fIexec\fP(), \fIposix_trace_attr_init\fP(),
\fIposix_trace_clear\fP(), \fIposix_trace_close\fP(), \fIposix_trace_eventid_equal\fP(),
\fIposix_trace_eventtypelist_getnext_id\fP(), \fIposix_trace_flush\fP(),
\fIposix_trace_get_attr\fP(),
\fIposix_trace_get_filter\fP(), \fIposix_trace_get_status\fP(),
\fIposix_trace_getnext_event\fP(), \fIposix_trace_open\fP(), \fIposix_trace_set_filter\fP()
,
\fIposix_trace_shutdown\fP(), \fIposix_trace_start\fP(), \fIposix_trace_timedgetnext_event\fP(),
\fIposix_trace_trid_eventid_open\fP(), \fIposix_trace_start\fP(),
\fItime\fP(), tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, \fI<sys/types.h>\fP, \fI<trace.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
