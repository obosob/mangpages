.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "PTHREAD_COND_TIMEDWAIT" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" pthread_cond_timedwait 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
pthread_cond_timedwait, pthread_cond_wait \- wait on a cold-ass lil condition
.SH SYNOPSIS
.LP
\fB#include <pthread.h>
.br
.sp
int pthread_cond_timedwait(pthread_cond_t *restrict\fP \fIcond\fP\fB,
.br
\ \ \ \ \ \  pthread_mutex_t *restrict\fP \fImutex\fP\fB,
.br
\ \ \ \ \ \  const struct timespec *restrict\fP \fIabstime\fP\fB);
.br
int pthread_cond_wait(pthread_cond_t *restrict\fP \fIcond\fP\fB,
.br
\ \ \ \ \ \  pthread_mutex_t *restrict\fP \fImutex\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIpthread_cond_timedwait\fP() n' \fIpthread_cond_wait\fP() functions
shall block on a cold-ass lil condizzle variable. They shall be
called wit \fImutex\fP locked by tha callin thread or undefined
behavior thangs up in dis biatch.
.LP
These functions atomically release \fImutex\fP n' cause tha calling
thread ta block on tha condizzle variable \fIcond\fP;
atomically here means "atomically wit respect ta access by another
thread ta tha mutex n' then tha condizzle variable". That
is, if another thread be able ta acquire tha mutex afta tha about-to-block
thread has busted out it, then a subsequent call ta \fIpthread_cond_broadcast\fP()
or \fIpthread_cond_signal\fP() up in dat thread shall behave as if it
were issued afta the
about-to-block thread has blocked.
.LP
Upon successful return, tha mutex shall done been locked n' shall
be owned by tha callin thread.
.LP
When rockin condizzle variablez there be always a Boolean predicate
involvin shared variablez associated wit each condition
wait dat is legit if tha thread should proceed. Y'all KNOW dat shit, muthafucka! Spurious wakeups from
the \fIpthread_cond_timedwait\fP() or
\fIpthread_cond_wait\fP() functions may occur. Shiiit, dis aint no joke. Right back up in yo muthafuckin ass. Since tha return from
\fIpthread_cond_timedwait\fP() or \fIpthread_cond_wait\fP()
does not imply anythang bout tha value of dis predicate, tha predicate
should be re-evaluated upon such return.
.LP
Da effect of rockin mo' than one mutex fo' concurrent \fIpthread_cond_timedwait\fP()
or \fIpthread_cond_wait\fP() operations
on tha same condizzle variable is undefined; dat is, a cold-ass lil condition
variable becomes bound ta a unique mutex when a thread waits on
the condizzle variable, n' dis (dynamic) bindin shall end when
the wait returns.
.LP
A condizzle wait (whether timed or not) be a cold-ass lil cancellation point. When
the cancelabilitizzle enable state of a thread is set to
PTHREAD_CANCEL_DEFERRED, a side effect of actin upon a cold-ass lil cancellation
request while up in a cold-ass lil condizzle wait is dat tha mutex is (in
effect) re-acquired before callin tha straight-up original gangsta cancellation cleanup
handlez n' shit. Da effect be as if tha thread was unblocked, allowed
to execute up ta tha deal wit returnin from tha call ta \fIpthread_cond_timedwait\fP()
or \fIpthread_cond_wait\fP() yo, but at that
point notices tha cancellation request n' instead of returnin to
the calla of \fIpthread_cond_timedwait\fP() or
\fIpthread_cond_wait\fP(), starts tha thread cancellation activities,
which includes callin cancellation cleanup handlezs.
.LP
A thread dat has been unblocked cuz it has been canceled while
blocked up in a cold-ass lil call ta \fIpthread_cond_timedwait\fP() or
\fIpthread_cond_wait\fP() shall not consume any condizzle signal that
may be pimped up concurrently all up in tha condizzle variable if
there is other threadz blocked on tha condizzle variable.
.LP
Da \fIpthread_cond_timedwait\fP() function shall be equivalent to
\fIpthread_cond_wait\fP(), except dat a error is returned
if tha absolute time specified by \fIabstime\fP passes (that is, system
time equals or exceedz \fIabstime\fP) before the
condizzle \fIcond\fP is signaled or broadcasted, or if tha absolute
time specified by \fIabstime\fP has already been passed at
the time of tha call.
.LP
If
the Clock Selection option is supported, tha condizzle variable shall
have a cold-ass lil clock attribute which specifies tha clock dat shall
be used ta measure tha time specified by tha \fIabstime\fP argument.
When such timeouts occur, \fIpthread_cond_timedwait\fP() shall nonetheless
release n' re-acquire tha mutex referenced by
\fImutex\fP. Da \fIpthread_cond_timedwait\fP() function be also a
cancellation point.
.LP
If a signal is served up ta a thread waitin fo' a cold-ass lil condizzle variable,
upon return from tha signal handlez tha thread resumes
waitin fo' tha condizzle variable as if dat shiznit was not interrupted, or
it shall return zero cuz of spurious wakeup.
.SH RETURN VALUE
.LP
Except up in tha case of [ETIMEDOUT], all these error checks shall act
as if they was performed immediately all up in tha beginnin of
processin fo' tha function n' shall cause a error return, up in effect,
prior ta modifyin tha state of tha mutex specified by
\fImutex\fP or tha condizzle variable specified by \fIcond\fP.
.LP
Upon successful completion, a value of zero shall be returned; otherwise,
an error number shall be moonwalked back ta indicate the
error.
.SH ERRORS
.LP
Da \fIpthread_cond_timedwait\fP() function shall fail if:
.TP 7
.B ETIMEDOUT
Da time specified by \fIabstime\fP ta \fIpthread_cond_timedwait\fP()
has passed.
.sp
.LP
Da \fIpthread_cond_timedwait\fP() n' \fIpthread_cond_wait\fP() functions
may fail if:
.TP 7
.B EINVAL
Da value specified by \fIcond\fP, \fImutex\fP, or \fIabstime\fP is
invalid.
.TP 7
.B EINVAL
Different mutexes was supplied fo' concurrent \fIpthread_cond_timedwait\fP()
or \fIpthread_cond_wait\fP() operations on the
same condizzle variable.
.TP 7
.B EPERM
Da mutex was not owned by tha current thread all up in tha time of tha call.
.sp
.LP
These functions shall not return a error code of [EINTR].
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.SS Condizzle Wait Semantics
.LP
It be blingin ta note dat when \fIpthread_cond_wait\fP() n' \fIpthread_cond_timedwait\fP()
return without error, the
associated predicate may still be false. Right back up in yo muthafuckin ass. Similarly, when \fIpthread_cond_timedwait\fP()
returns wit tha timeout error, the
associated predicate may be legit cuz of a unavoidable race between
the expiration of tha timeout n' tha predicate state
change.
.LP
Some implementations, particularly on a multi-processor, may sometimes
cause multiple threadz ta raise up when tha condition
variable is signaled simultaneously on different processors.
.LP
In general, whenever a cold-ass lil condizzle wait returns, tha thread has ta re-evaluate
the predicate associated wit tha condizzle wait to
determine whether it can safely proceed, should wait again, or should
declare a timeout fo' realz. A return from tha wait do not imply that
the associated predicate is either legit or false.
.LP
It be thus recommended dat a cold-ass lil condizzle wait be enclosed up in tha equivalent
of a "while loop" dat checks tha predicate.
.SS Timed Wait Semantics
.LP
An absolute time measure was chosen fo' specifyin tha timeout parameter
for two reasons. First, a relatizzle time measure can be
easily implemented on top of a gangbangin' function dat specifies absolute time,
but there be a race condizzle associated wit specifyin an
absolute timeout on top of a gangbangin' function dat specifies relatizzle timeouts.
For example, assume dat \fIclock_gettime\fP() returns tha current
time n' \fIcond_relative_timed_wait\fP() uses
relatizzle timeouts:
.sp
.RS
.nf

\fBclock_gettime(CLOCK_REALTIME, &now)
reltime = chill_til_this_absolute_time -now;
cond_relative_timed_wait(c, m, &reltime);
\fP
.fi
.RE
.LP
If tha thread is preempted between tha straight-up original gangsta statement n' tha last
statement, tha thread blocks fo' too long. Blocking,
however, is irrelevant if a absolute timeout is used. Y'all KNOW dat shit, muthafucka! An absolute
timeout also need not be recomputed if it is used multiple times
in a loop, like fuckin dat enclosin a cold-ass lil condizzle wait.
.LP
For cases when tha system clock be advanced discontinuously by an
operator, it is expected dat implementations process any
timed wait expirin at a intervenin time as if dat time had actually
occurred.
.SS Cancellation n' Condizzle Wait
.LP
A condizzle wait, whether timed or not, be a cold-ass lil cancellation point. That
is, tha functions \fIpthread_cond_wait\fP() or
\fIpthread_cond_timedwait\fP() is points where a pendin (or concurrent)
cancellation request is noticed. Y'all KNOW dat shit, muthafucka! Da reason fo' dis is
that a indefinite wait is possible at these points-whatever event
is bein waited for, even if tha program is straight-up erect,
might never occur; fo' example, some input data bein awaited might
never be sent. By makin condizzle wait a cold-ass lil cancellation point,
the thread can be canceled n' big-ass up its cancellation cleanup handlez
even though it may be stuck up in some indefinite wait.
.LP
A side effect of actin on a cold-ass lil cancellation request while a thread is
blocked on a cold-ass lil condizzle variable is ta re-acquire tha mutex
before callin any of tha cancellation cleanup handlezs. This is done
in order ta ensure dat tha cancellation cleanup handlez is
executed up in tha same state as tha critical code dat lies both before
and afta tha call ta tha condizzle wait function. I aint talkin' bout chicken n' gravy biatch. This rule
is also required when interfacin ta POSIX threadz from languages,
like fuckin Ada or C++, which may chizzle ta map cancellation onto a
language exception; dis rule ensures dat each exception handlez
guardin a cold-ass lil critical section can always safely depend upon the
fact dat tha associated mutex has already been locked regardless
of exactly where within tha critical section tha exception was
raised. Y'all KNOW dat shit, muthafucka! Without dis rule, there would not be a uniform rule that
exception handlezs could follow regardin tha lock, n' so coding
would become straight-up cumbersome.
.LP
Therefore, since \fIsome\fP statement has ta be made regardin the
state of tha lock when a cold-ass lil cancellation is served up durin a
wait, a thugged-out definizzle has been chosen dat make application codin most
convenient n' error free.
.LP
When actin on a cold-ass lil cancellation request while a thread is blocked on
a condizzle variable, tha implementation is required to
ensure dat tha thread do not consume any condizzle signals directed
at dat condizzle variable if there be any other threads
waitin on dat condizzle variable. This rule is specified up in order
to avoid deadlock conditions dat could occur if these two
independent requests (one actin on a thread n' tha other acting
on tha condizzle variable) was not processed independently.
.SS Performizzle of Mutexes n' Condizzle Variables
.LP
Mutexes is sposed ta fuckin be locked only fo' all dem instructions. This
practice be almost automatically enforced by tha desire of
programmers ta avoid long serial regionz of execution (which would
reduce total effectizzle parallelism).
.LP
When rockin mutexes n' condizzle variables, one tries ta ensure that
the usual case is ta lock tha mutex, access shared data,
and unlock tha mutex. Waitin on a cold-ass lil condizzle variable should be a
relatively rare thang. For example, when implementin a
read-write lock, code dat acquires a read-lock typically needz only
to increment tha count of readaz (under mutual-exclusion) and
return, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch. Da callin thread would straight-up wait on tha condizzle variable
only when there be already a actizzle thug n' shit. Right back up in yo muthafuckin ass. So the
efficiency of a synchronization operation is bounded by tha cost of
mutex lock/unlock n' not by condizzle wait. Note dat up in the
usual case there is no context switch.
.LP
This aint ta say dat tha efficiency of condizzle waitin is unimportant.
Since there need ta be at least one context switch
per Ada rendezvous, tha efficiency of waitin on a cold-ass lil condizzle variable
is blingin. Da cost of waitin on a cold-ass lil condizzle variable
should be lil mo' than tha minimal cost fo' a cold-ass lil context switch plus
the time ta unlock n' lock tha mutex.
.SS Featurez of Mutexes n' Condizzle Variables
.LP
It had been suggested dat tha mutex acquisizzle n' release be decoupled
from condizzle wait. This was rejected cuz it is
the combined nature of tha operation that, up in fact, facilitates realtime
implementations. Those implementations can atomically move
a high-prioritizzle thread between tha condizzle variable n' tha mutex
in a manner dat is transparent ta tha calla n' shit. This can prevent
extra context switches n' provide mo' deterministic acquisition
of a mutex when tha waitin thread is signaled. Y'all KNOW dat shit, muthafucka! Thus, fairness
and prioritizzle thangs can be dealt wit directly by tha schedulin discipline.
Furthermore, tha current condizzle wait operation
matches existin practice.
.SS Schedulin Behavior of Mutexes n' Condizzle Variables
.LP
Synchronization primitives dat attempt ta interfere wit scheduling
policy by specifyin a orderin rule is considered
undesirable. Threadz waitin on mutexes n' condizzle variablez are
selected ta proceed up in a order dependent upon tha scheduling
policy rather than up in some fixed order (for example, FIFO or priority).
Thus, tha schedulin policy determines which thread(s) are
awakened n' allowed ta proceed.
.SS Timed Condizzle Wait
.LP
Da \fIpthread_cond_timedwait\fP() function allows a application
to give up waitin fo' a particular condizzle afta a given
amount of time fo' realz. An example of its use bigs up:
.sp
.RS
.nf

\fB(void) pthread_mutex_lock(&t.mn);
        t.waiters++;
    clock_gettime(CLOCK_REALTIME, &ts);
    ts.tv_sec += 5;
    rc = 0;
    while (! mypredicate(&t) && rc == 0)
        rc = pthread_cond_timedwait(&t.cond, &t.mn, &ts);
    t.waiters--;
    if (rc == 0) setmystate(&t);
(void) pthread_mutex_unlock(&t.mn);
\fP
.fi
.RE
.LP
By makin tha timeout parameta absolute, it do not need ta be recomputed
each time tha program checks its blockin predicate.
If tha timeout was relative, it would gotta be recomputed before
each call. This would be especially hard as fuck since such code
would need ta take tha fuck into account tha possibilitizzle of extra wakeups that
result from extra broadcasts or signals on tha condition
variable dat occur before either tha predicate is legit or tha timeout
is due.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIpthread_cond_signal\fP(), \fIpthread_cond_broadcast\fP(), the
Base Definitions volume of IEEE\ Std\ 1003.1-2001,
\fI<pthread.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
