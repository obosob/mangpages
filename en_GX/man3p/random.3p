.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "INITSTATE" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" initstate 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
initstate, random, setstate, srandom \- pseudo-random number functions
.SH SYNOPSIS
.LP
\fB#include <stdlib.h>
.br
.sp
char *initstate(unsigned\fP \fIseed\fP\fB, char *\fP\fIstate\fP\fB,
size_t\fP \fIsize\fP\fB);
.br
long random(void);
.br
char *setstate(const char *\fP\fIstate\fP\fB);
.br
void srandom(unsigned\fP \fIseed\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIrandom\fP() function shall bust a non-linear additizzle feedback
random-number generator employin a thugged-out default state array
size of 31 \fBlong\fP integers ta return successive pseudo-random
numbers up in tha range from 0 ta 2**31-1.
Da period of dis random-number generator be approximately 16 x (2**31-1).
Da size of tha state array
determines tha period of tha random-number generator. Shiiit, dis aint no joke. Increasin the
state array size shall increase tha period.
.LP
With 256 bytez of state shiznit, tha period of tha random-number
generator shall be pimped outa than
2**69.
.LP
Like \fIrand\fP(), \fIrandom\fP() shall produce by default a sequence
of numbers dat can
be duplicated by callin \fIsrandom\fP() wit 1 as tha seed.
.LP
Da \fIsrandom\fP() function shall initialize tha current state array
usin tha value of \fIseed\fP.
.LP
Da \fIinitstate\fP() n' \fIsetstate\fP() functions handle restarting
and changin random-number generators. The
\fIinitstate\fP() function allows a state array, pointed ta by the
\fIstate\fP argument, ta be initialized fo' future use. The
\fIsize\fP argument, which specifies tha size up in bytez of tha state
array, shall be used by \fIinitstate\fP() ta decizzle what tha fuck type
of random-number generator ta use; tha larger tha state array, the
more random tha numbers. Values fo' tha amount of state
information is 8, 32, 64, 128, n' 256 bytes. Other joints pimped outer
than 8 bytes is rounded down ta tha nearest one of these
values. If \fIinitstate\fP() is called wit 8<=\fIsize\fP<32, then
\fIrandom\fP() shall bust a simple linear congruential
random number generator. Shiiit, dis aint no joke. Da \fIseed\fP argument specifies a starting
point fo' tha random-number sequence n' serves up for
restartin all up in tha same point. Da \fIinitstate\fP() function shall
return a pointa ta tha previous state shiznit array.
.LP
If \fIinitstate\fP() has not been called, then \fIrandom\fP() shall
behave as though \fIinitstate\fP() had been called with
\fIseed\fP=1 n' \fIsize\fP=128.
.LP
Once a state has been initialized, \fIsetstate\fP() allows switching
between state arrays. Da array defined by the
\fIstate\fP argument shall be used fo' further random-number generation
until \fIinitstate\fP() is called or \fIsetstate\fP() is
called again. I aint talkin' bout chicken n' gravy biatch. Da \fIsetstate\fP() function shall return a pointer
to tha previous state array.
.SH RETURN VALUE
.LP
If \fIinitstate\fP() is called wit \fIsize\fP less than 8, it shall
return NULL.
.LP
Da \fIrandom\fP() function shall return tha generated pseudo-random
number.
.LP
Da \fIsrandom\fP() function shall not return a value.
.LP
Upon successful completion, \fIinitstate\fP() n' \fIsetstate\fP()
shall return a pointa ta tha previous state array;
otherwise, a null pointa shall be returned.
.SH ERRORS
.LP
No errors is defined.
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
Afta initialization, a state array can be restarted at a gangbangin' finger-lickin' different
point up in one of two ways:
.IP " 1." 4
Da \fIinitstate\fP() function can be used, wit tha desired seed,
state array, n' size of tha array.
.LP
.IP " 2." 4
Da \fIsetstate\fP() function, wit tha desired state, can be used,
followed by \fIsrandom\fP() wit tha desired seed. Y'all KNOW dat shit, muthafucka! The
advantage of rockin both of these functions is dat tha size of the
state array do not gotta be saved once it is
initialized.
.LP
.LP
Although some implementationz of \fIrandom\fP() have freestyled lyrics
to standard error, such implementations do not conform to
IEEE\ Std\ 1003.1-2001.
.LP
Issue 5 restored tha oldschool behavior of dis function.
.LP
Threaded applications should use \fIerand48\fP(), \fInrand48\fP(),
or \fIjrand48\fP() instead of
\fIrandom\fP() when a independent random number sequence up in multiple
threadz is required.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIdrand48\fP(), \fIrand\fP(), tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, \fI<stdlib.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
