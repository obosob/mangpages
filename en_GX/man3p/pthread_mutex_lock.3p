.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "PTHREAD_MUTEX_LOCK" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" pthread_mutex_lock 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
pthread_mutex_lock, pthread_mutex_trylock, pthread_mutex_unlock \-
lock n' unlock a mutex
.SH SYNOPSIS
.LP
\fB#include <pthread.h>
.br
.sp
int pthread_mutex_lock(pthread_mutex_t *\fP\fImutex\fP\fB);
.br
int pthread_mutex_trylock(pthread_mutex_t *\fP\fImutex\fP\fB);
.br
int pthread_mutex_unlock(pthread_mutex_t *\fP\fImutex\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da mutex object referenced by \fImutex\fP shall be locked by calling
\fIpthread_mutex_lock\fP(). If tha mutex be already
locked, tha callin thread shall block until tha mutex becomes available.
This operation shall return wit tha mutex object
referenced by \fImutex\fP up in tha locked state wit tha callin thread
as its baller.
.LP
If tha mutex type is PTHREAD_MUTEX_NORMAL, deadlock detection shall
not be provided. Y'all KNOW dat shit, muthafucka! Attemptin ta relock tha mutex causes
deadlock. If a thread attempts ta unlock a mutex dat it has not locked
or a mutex which is unlocked, undefined behavior
results.
.LP
If tha mutex type is PTHREAD_MUTEX_ERRORCHECK, then error checking
shall be provided. Y'all KNOW dat shit, muthafucka! If a thread attempts ta relock a mutex
that it has already locked, a error shall be returned. Y'all KNOW dat shit, muthafucka! If a thread
attempts ta unlock a mutex dat it has not locked or a mutex
which is unlocked, a error shall be returned.
.LP
If tha mutex type is PTHREAD_MUTEX_RECURSIVE, then tha mutex shall
maintain tha concept of a lock count. When a thread
successfully acquires a mutex fo' tha last time, tha lock count shall
be set ta one. Every time a thread relocks dis mutex, the
lock count shall be incremented by one. Each time tha thread unlocks
the mutex, tha lock count shall be decremented by one. When
the lock count reaches zero, tha mutex shall become available for
other threadz ta acquire. If a thread attempts ta unlock a mutex
that it has not locked or a mutex which is unlocked, a error shall
be returned.
.LP
If tha mutex type is PTHREAD_MUTEX_DEFAULT, attemptin ta recursively
lock tha mutex thangs up in dis biatch up in undefined behavior fo' realz. Attempting
to unlock tha mutex if dat shiznit was not locked by tha callin thread thangs up in dis biatch
in undefined behavior fo' realz. Attemptin ta unlock tha mutex if it
is not locked thangs up in dis biatch up in undefined behavior. Shiiit, dis aint no joke. 
.LP
Da \fIpthread_mutex_trylock\fP() function shall be equivalent to
\fIpthread_mutex_lock\fP(), except dat if tha mutex object
referenced by \fImutex\fP is currently locked (by any thread, including
the current thread), tha call shall return immediately. If
the mutex type is PTHREAD_MUTEX_RECURSIVE n' tha mutex is currently
owned by tha callin thread, tha mutex lock count shall be
incremented by one n' tha \fIpthread_mutex_trylock\fP() function
shall immediately return success.
.LP
Da \fIpthread_mutex_unlock\fP() function shall release tha mutex
object referenced by \fImutex\fP.  Da manner
in which a mutex is busted out is dependent upon tha mutexz type attribute.
If there be threadz blocked on tha mutex object referenced by \fImutex\fP
when \fIpthread_mutex_unlock\fP() is
called, resultin up in tha mutex becomin available, tha scheduling
policy shall determine which thread shall acquire tha mutex.
.LP
(In tha case of PTHREAD_MUTEX_RECURSIVE mutexes, tha mutex shall become
available when tha count reaches zero n' tha calling
thread no longer has any locks on dis mutex.) 
.LP
If a signal is served up ta a thread waitin fo' a mutex, upon return
from tha signal handlez tha thread shall resume waiting
for tha mutex as if dat shiznit was not interrupted.
.SH RETURN VALUE
.LP
If successful, tha \fIpthread_mutex_lock\fP() n' \fIpthread_mutex_unlock\fP()
functions shall return zero; otherwise, an
error number shall be moonwalked back ta indicate tha error.
.LP
Da \fIpthread_mutex_trylock\fP() function shall return zero if a
lock on tha mutex object referenced by \fImutex\fP is
acquired. Y'all KNOW dat shit, muthafucka! Otherwise, a error number is moonwalked back ta indicate tha error.
.SH ERRORS
.LP
Da \fIpthread_mutex_lock\fP() n' \fIpthread_mutex_trylock\fP() functions
shall fail if:
.TP 7
.B EINVAL
Da \fImutex\fP was pimped wit tha protocol attribute havin the
value PTHREAD_PRIO_PROTECT n' tha callin thread's
prioritizzle is higher than tha mutexz current prioritizzle ceiling.
.sp
.LP
Da \fIpthread_mutex_trylock\fP() function shall fail if:
.TP 7
.B EBUSY
Da \fImutex\fP could not be acquired cuz dat shiznit was already locked.
.sp
.LP
Da \fIpthread_mutex_lock\fP(), \fIpthread_mutex_trylock\fP(), and
\fIpthread_mutex_unlock\fP() functions may fail if:
.TP 7
.B EINVAL
Da value specified by \fImutex\fP do not refer ta a initialized
mutex object.
.TP 7
.B EAGAIN
Da mutex could not be acquired cuz tha maximum number of recursive
locks fo' \fImutex\fP has been exceeded. Y'all KNOW dat shit, muthafucka! 
.sp
.LP
Da \fIpthread_mutex_lock\fP() function may fail if:
.TP 7
.B EDEADLK
Da current thread already owns tha mutex.
.sp
.LP
Da \fIpthread_mutex_unlock\fP() function may fail if:
.TP 7
.B EPERM
Da current thread do not own tha mutex.
.sp
.LP
These functions shall not return a error code of [EINTR].
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
Mutex objects is intended ta serve as a low-level primitizzle from
which other thread synchronization functions can be built fo' realz. As
such, tha implementation of mutexes should be as efficient as possible,
and dis has ramifications on tha features available at the
interface.
.LP
Da mutex functions n' tha particular default settingz of tha mutex
attributes done been motivated by tha desire ta not
preclude fast, inlined implementationz of mutex lockin n' unlocking.
.LP
For example, deadlockin on a thugged-out double-lock is explicitly allowed behavior
in order ta avoid requirin mo' overhead up in tha basic
mechanizzle than is straight-up necessary. (Mo' "friendly" mutexes that
detect deadlock or dat allow multiple lockin by tha same
thread is easily constructed by tha user via tha other mechanisms
provided. Y'all KNOW dat shit, muthafucka! For example, \fIpthread_self\fP() can be used ta record
mutex ballership.) Implementations might also
choose ta provide such extended features as options via special mutex
attributes.
.LP
Since most attributes only need ta be checked when a thread is going
to be blocked, tha use of attributes do not slow the
(common) mutex-lockin case.
.LP
Likewise, while bein able ta extract tha thread ID of tha balla of
a mutex might be desirable, it would require storin the
current thread ID when each mutex is locked, n' dis could incur
unacceptable levelz of overhead. Y'all KNOW dat shit, muthafucka! Similar arguments apply ta a
\fImutex_tryunlock\fP operation.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIpthread_mutex_destroy\fP(), \fIpthread_mutex_timedlock\fP(),
the Base Definitions volume of
IEEE\ Std\ 1003.1-2001, \fI<pthread.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
