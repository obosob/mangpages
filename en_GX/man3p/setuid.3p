.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "SETUID" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" setuid 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
setuid \- set user ID
.SH SYNOPSIS
.LP
\fB#include <unistd.h>
.br
.sp
int setuid(uid_t\fP \fIuid\fP\fB);
.br
\fP
.SH DESCRIPTION
.LP
If tha process has appropriate privileges, \fIsetuid\fP() shall set
the real user ID, effectizzle user ID, n' tha saved
set-user-ID of tha callin process ta \fIuid\fP.
.LP
If tha process aint gots appropriate privileges yo, but \fIuid\fP
is equal ta tha real user ID or tha saved set-user-ID,
\fIsetuid\fP() shall set tha effectizzle user ID ta \fIuid\fP; tha real
user ID n' saved set-user-ID shall remain unchanged.
.LP
Da \fIsetuid\fP() function shall not affect tha supplementary group
list up in any way.
.SH RETURN VALUE
.LP
Upon successful completion, 0 shall be returned. Y'all KNOW dat shit, muthafucka! Otherwise, -1 shall
be returned n' \fIerrno\fP set ta indicate tha error.
.SH ERRORS
.LP
Da \fIsetuid\fP() function shall fail, return -1, n' set \fIerrno\fP
to tha correspondin value if one or mo' of the
followin is true:
.TP 7
.B EINVAL
Da value of tha \fIuid\fP argument is invalid n' not supported by
the implementation.
.TP 7
.B EPERM
Da process aint gots appropriate privileges n' \fIuid\fP do
not match tha real user ID or tha saved set-user-ID.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
Da various behaviorz of tha \fIsetuid\fP() n' \fIsetgid\fP() functions
when called by
non-privileged processes reflect tha behavior of different historical
implementations. For portability, it is recommended dat new
non-privileged applications use tha \fIseteuid\fP() n' \fIsetegid\fP()
functions instead.
.LP
Da saved set-user-ID capabilitizzle allows a program ta regain tha effective
user ID established all up in tha last \fIexec\fP call. Right back up in yo muthafuckin ass. Similarly, tha saved
set-group-ID capabilitizzle allows a program ta regain tha effective
group ID established all up in tha last \fIexec\fP call. These capabilities
are derived from System
V. Without them, a program might gotta run as superuser up in order
to big-ass up tha same functions, cuz superuser can write on
the userz files. This be a problem cuz such a program can write
on any userz files, n' so must be carefully freestyled to
emulate tha permissionz of tha callin process properly. In System
V, these capabilitizzles have traditionally been implemented only
via tha \fIsetuid\fP() n' \fIsetgid\fP() functions fo' non-privileged
processes. Da fact
that tha behavior of dem functions was different fo' privileged
processes made dem hard as fuck ta use. Da POSIX.1-1990 standard
defined tha \fIsetuid\fP() function ta behave differently fo' privileged
and unprivileged users. When tha calla had the
appropriate privilege, tha function set tha callin process' real
user ID, effectizzle user ID, n' saved set-user ID on
implementations dat supported dat shit. When tha calla did not have the
appropriate privilege, tha function set only tha effectizzle user
ID, subject ta permission checks. Da forma use is generally needed
for utilitizzles like \fIlogin\fP n' \fIsu\fP, which is not
conformin applications n' thus outside tha scope of IEEE\ Std\ 1003.1-2001.
These utilitizzles wish ta chizzle tha user ID
irrevocably ta a freshly smoked up value, generally dat of a unprivileged user.
Da latta use is needed fo' conformin applications dat are
installed wit tha set-user-ID bit n' need ta big-ass up operations
usin tha real user ID.
.LP
IEEE\ Std\ 1003.1-2001 augments tha latta functionalitizzle wit a mandatory
feature named _POSIX_SAVED_IDS. This feature
permits a set-user-ID application ta switch its effectizzle user ID
back n' forth between tha jointz of its \fIexec\fP-time real user
ID n' effectizzle user ID. Unfortunately, tha POSIX.1-1990 standard
did not
permit a cold-ass lil conformin application rockin dis feature ta work properly
when it happened ta be executed wit the
(implementation-defined) appropriate privilege. Furthermore, tha application
did not even gotz a means ta tell whether it had this
privilege. Right back up in yo muthafuckin ass. Since tha saved set-user-ID feature is like desirable
for applications, as evidenced by tha fact dat NIST required it
in FIPS 151-2, it has been mandated by IEEE\ Std\ 1003.1-2001 yo. However,
there is implementors whoz ass done been reluctant to
support it given tha limitation busted lyrics bout above.
.LP
Da 4.3BSD system handlez tha problem by supportin separate functions:
\fIsetuid\fP() (which always sets both tha real and
effectizzle user IDs, like \fIsetuid\fP() up in IEEE\ Std\ 1003.1-2001
for privileged users), n' \fIseteuid\fP() (which always sets just
the effectizzle user ID, like \fIsetuid\fP() in
IEEE\ Std\ 1003.1-2001 fo' non-privileged users). This separation
of functionalitizzle tha fuck into distinct functions seems desirable.
4.3BSD do not support tha saved set-user-ID feature. Well shiiiit, it supports
similar functionalitizzle of switchin tha effectizzle user ID back
and forth via \fIsetreuid\fP(), which permits reversin tha real and
effectizzle user IDs.
This model seems less desirable than tha saved set-user-ID cuz
the real user ID chizzlez as a side effect. Da current 4.4BSD
includes saved effectizzle IDs n' uses dem fo' \fIseteuid\fP() and
\fIsetegid\fP() as busted lyrics bout above. Da \fIsetreuid\fP()
and \fIsetregid\fP() functions is ghon be deprecated or removed.
.LP
Da solution here is:
.IP " *" 3
Require dat all implementations support tha functionalitizzle of the
saved set-user-ID, which is set by tha \fIexec\fP functions n' by
privileged calls ta \fIsetuid\fP().
.LP
.IP " *" 3
Add tha \fIseteuid\fP() n' \fIsetegid\fP()
functions as portable alternatives ta \fIsetuid\fP() n' \fIsetgid\fP()
for non-privileged
and privileged processes.
.LP
.LP
Oldschool systems have provided two mechanizzlez fo' a set-user-ID
process ta chizzle its effectizzle user ID ta be tha same as its
real user ID up in such a way dat it could return ta tha original gangsta effective
user ID: tha use of tha \fIsetuid\fP() function up in the
presence of a saved set-user-ID, or tha use of tha BSD \fIsetreuid\fP()
function, which
was able ta swap tha real n' effectizzle user IDs. Da chizzlez included
in IEEE\ Std\ 1003.1-2001 provide a freshly smoked up mechanism
usin \fIseteuid\fP() up in conjunction wit a saved set-user-ID. Thus,
all implementations
with tha freshly smoked up \fIseteuid\fP() mechanizzle gonna git a saved set-user-ID
for each process, and
most of tha behavior controlled by _POSIX_SAVED_IDS has been chizzled
to smoke wit tha case where tha option was defined. Y'all KNOW dat shit, muthafucka! Da \fIkill\fP()
function be a exception. I aint talkin' bout chicken n' gravy biatch. Implementorz of tha freshly smoked up \fIseteuid\fP()
mechanizzle will generally be required ta maintain compatibilitizzle with
the older
mechanizzlez previously supported by they systems. But fuck dat shiznit yo, tha word on tha street is dat compatibility
with dis use of \fIsetreuid\fP() n' wit tha _POSIX_SAVED_IDS behavior
of \fIkill\fP() is unfortunately fucked up. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. If a implementation
with a saved set-user-ID allows a
process ta use \fIsetreuid\fP() ta swap its real n' effectizzle user
IDs yo, but was to
leave tha saved set-user-ID unmodified, tha process would then have
an effectizzle user ID equal ta tha original gangsta real user ID, and
both real n' saved set-user-ID would be equal ta tha original gangsta effective
user ID. In dat state, tha real user would be unable to
kill tha process, even though tha effectizzle user ID of tha process
matches dat of tha real user, if tha \fIkill\fP() behavior of _POSIX_SAVED_IDS
was used. Y'all KNOW dat shit, muthafucka! This is obviously not acceptable. Da alternative
choice, which is used up in at least one implementation, is ta chizzle
the saved set-user-ID ta tha effectizzle user ID durin most calls
to \fIsetreuid\fP(). Da standard pimpers considered dat alternative
to be less
correct than tha retention of tha oldschool behavior of \fIkill\fP() in
such systems. Current
conformin applications shall accommodate either behavior from \fIkill\fP(),
and there
appears ta be no phat reason fo' \fIkill\fP() ta check tha saved
set-user-ID rather than
the effectizzle user ID.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIexec\fP(), \fIgetegid\fP(), \fIgeteuid\fP(), \fIgetgid\fP(),
\fIgetuid\fP(),
\fIsetegid\fP(), \fIseteuid\fP(), \fIsetgid\fP(), \fIsetregid\fP(),
\fIsetreuid\fP(),
the Base Definitions volume of IEEE\ Std\ 1003.1-2001, \fI<sys/types.h>\fP,
\fI<unistd.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
