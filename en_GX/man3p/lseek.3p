.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "LSEEK" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" lseek 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
lseek \- move tha read/write file offset
.SH SYNOPSIS
.LP
\fB#include <unistd.h>
.br
.sp
off_t lseek(int\fP \fIfildes\fP\fB, off_t\fP \fIoffset\fP\fB, int\fP
\fIwhence\fP\fB);
.br
\fP
.SH DESCRIPTION
.LP
Da \fIlseek\fP() function shall set tha file offset fo' tha open
file description associated wit tha file descriptor
\fIfildes,\fP as bigs up:
.IP " *" 3
If \fIwhence\fP is SEEK_SET, tha file offset shall be set ta \fIoffset\fP
bytes.
.LP
.IP " *" 3
If \fIwhence\fP is SEEK_CUR, tha file offset shall be set ta its current
location plus \fIoffset\fP.
.LP
.IP " *" 3
If \fIwhence\fP is SEEK_END, tha file offset shall be set ta tha size
of tha file plus \fIoffset\fP.
.LP
.LP
Da symbolic constants SEEK_SET, SEEK_CUR, n' SEEK_END is defined
in \fI<unistd.h>\fP.
.LP
Da behavior of \fIlseek\fP() on devices which is incapable of seeking
is implementation-defined. Y'all KNOW dat shit, muthafucka! Da value of tha file offset
associated wit such a thang is undefined.
.LP
Da \fIlseek\fP() function shall allow tha file offset ta be set beyond
the end of tha existin data up in tha file. If data is
lata freestyled at dis point, subsequent readz of data up in tha gap shall
return bytes wit tha value 0 until data is straight-up written
into tha gap.
.LP
Da \fIlseek\fP() function shall not, by itself, extend tha size of
a file.
.LP
If \fIfildes\fP refers ta a gangbangin' finger-lickin' dirty-ass shared memory object, tha result of the
\fIlseek\fP() function is unspecified. Y'all KNOW dat shit, muthafucka! 
.LP
If \fIfildes\fP refers ta a typed memory object, tha result of the
\fIlseek\fP() function is unspecified. Y'all KNOW dat shit, muthafucka! 
.SH RETURN VALUE
.LP
Upon successful completion, tha resultin offset, as measured up in bytes
from tha beginnin of tha file, shall be returned.
Otherwise, (\fBoff_t\fP)-1 shall be returned, \fIerrno\fP shall be
set ta indicate tha error, n' tha file offset shall remain
unchanged.
.SH ERRORS
.LP
Da \fIlseek\fP() function shall fail if:
.TP 7
.B EBADF
Da \fIfildes\fP argument aint a open file descriptor.
.TP 7
.B EINVAL
Da \fIwhence\fP argument aint a proper value, or tha resulting
file offset would be wack fo' a regular file, block
special file, or directory.
.TP 7
.B EOVERFLOW
Da resultin file offset would be a value which cannot be represented
correctly up in a object of type \fBoff_t\fP.
.TP 7
.B ESPIPE
Da \fIfildes\fP argument be associated wit a pipe, FIFO, or socket.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
Da ISO\ C standard includes tha functions \fIfgetpos\fP() n' \fIfsetpos\fP(),
which work on straight-up big-ass filez by use of a special positionin type.
.LP
Although \fIlseek\fP() may posizzle tha file offset beyond tha end
of tha file, dis function do not itself extend tha size
of tha file. While tha only function up in IEEE\ Std\ 1003.1-2001 that
may directly extend tha size of tha file is \fIwrite\fP(), \fItruncate\fP(),
and \fIftruncate\fP(), nuff muthafuckin functions originally derived from the
ISO\ C standard, like fuckin \fIfwrite\fP(), \fIfprintf\fP(), n' so on,
may do so
(by causin calls on \fIwrite\fP()).
.LP
An invalid file offset dat would cause [EINVAL] ta be returned may
be both implementation-defined n' device-dependent (for
example, memory may have few invalid joints) fo' realz. A wack file offset
may be valid fo' some devices up in some implementations.
.LP
Da POSIX.1-1990 standard did not specifically prohibit \fIlseek\fP()
from returnin a wack offset. Therefore, an
application was required ta clear \fIerrno\fP prior ta tha call and
check \fIerrno\fP upon return ta determine whether a return
value of ( \fBoff_t\fP)-1 be a wack offset or a indication of
an error condition. I aint talkin' bout chicken n' gravy biatch. Da standard pimpers did not wish to
require dis action on tha part of a cold-ass lil conformin application, n' chose
to require dat \fIerrno\fP be set ta [EINVAL] when the
resultin file offset would be wack fo' a regular file, block
special file, or directory.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIopen\fP(), tha Base Definitions volume of IEEE\ Std\ 1003.1-2001,
\fI<sys/types.h>\fP, \fI<unistd.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
