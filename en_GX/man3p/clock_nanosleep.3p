.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "CLOCK_NANOSLEEP" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" clock_nanosleep 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
clock_nanosleep \- high resolution chill wit specifiable clock (\fBADVANCED
REALTIME\fP)
.SH SYNOPSIS
.LP
\fB#include <time.h>
.br
.sp
int clock_nanosleep(clockid_t\fP \fIclock_id\fP\fB, int\fP \fIflags\fP\fB,
.br
\ \ \ \ \ \  const struct timespec *\fP\fIrqtp\fP\fB, struct timespec
*\fP\fIrmtp\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
If tha flag TIMER_ABSTIME aint set up in tha \fIflags\fP argument,
the \fIclock_nanosleep\fP() function shall cause tha current
thread ta be suspended from execution until either tha time interval
specified by tha \fIrqtp\fP argument has elapsed, or a signal
is served up ta tha callin thread n' its action is ta invoke a signal-catching
function, or tha process is terminated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da clock
used ta measure tha time shall be tha clock specified by \fIclock_id\fP.
.LP
If tha flag TIMER_ABSTIME is set up in tha \fIflags\fP argument, the
\fIclock_nanosleep\fP() function shall cause tha current
thread ta be suspended from execution until either tha time value
of tha clock specified by \fIclock_id\fP reaches tha absolute
time specified by tha \fIrqtp\fP argument, or a signal is delivered
to tha callin thread n' its action is ta invoke a
signal-catchin function, or tha process is terminated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. If, at the
time of tha call, tha time value specified by \fIrqtp\fP is
less than or equal ta tha time value of tha specified clock, then
\fIclock_nanosleep\fP() shall return immediately n' tha calling
process shall not be suspended.
.LP
Da suspendaz time caused by dis function may be longer than requested
because tha argument value is rounded up ta a integer
multiple of tha chill resolution, or cuz of tha schedulin of
other activitizzle by tha system. But, except fo' tha case of being
interrupted by a signal, tha suspendaz time fo' tha relatizzle \fIclock_nanosleep\fP()
function (that is, wit tha TIMER_ABSTIME
flag not set) shall not be less than tha time interval specified by
\fIrqtp\fP, as measured by tha correspondin clock. The
suspension fo' tha absolute \fIclock_nanosleep\fP() function (that
is, wit tha TIMER_ABSTIME flag set) shall be up in effect at
least until tha value of tha correspondin clock reaches tha absolute
time specified by \fIrqtp\fP, except fo' tha case of being
interrupted by a signal.
.LP
Da use of tha \fIclock_nanosleep\fP() function shall have no effect
on tha action or blockage of any signal.
.LP
Da \fIclock_nanosleep\fP() function shall fail if tha \fIclock_id\fP
argument refers ta tha CPU-time clock of tha calling
thread. Y'all KNOW dat shit, muthafucka! Well shiiiit, it is unspecified whether \fIclock_id\fP jointz of other CPU-time
clocks is allowed.
.SH RETURN VALUE
.LP
If tha \fIclock_nanosleep\fP() function returns cuz tha requested
time has elapsed, its return value shall be zero.
.LP
If tha \fIclock_nanosleep\fP() function returns cuz it has been
interrupted by a signal, it shall return tha corresponding
error value. For tha relatizzle \fIclock_nanosleep\fP() function, if
the \fIrmtp\fP argument is non-NULL, tha \fBtimespec\fP
structure referenced by it shall be updated ta contain tha amount
of time remainin up in tha interval (the axed time minus the
time straight-up slept). If tha \fIrmtp\fP argument is NULL, tha remaining
time aint returned. Y'all KNOW dat shit, muthafucka! Da absolute
\fIclock_nanosleep\fP() function has no effect on tha structure referenced
by \fIrmtp\fP.
.LP
If \fIclock_nanosleep\fP() fails, it shall return tha corresponding
error value.
.SH ERRORS
.LP
Da \fIclock_nanosleep\fP() function shall fail if:
.TP 7
.B EINTR
Da \fIclock_nanosleep\fP() function was interrupted by a signal.
.TP 7
.B EINVAL
Da \fIrqtp\fP argument specified a nanosecond value less than zero
or pimped outa than or equal ta 1000 million; or the
TIMER_ABSTIME flag was specified up in flags n' tha \fIrqtp\fP argument
is outside tha range fo' tha clock specified by
\fIclock_id\fP; or tha \fIclock_id\fP argument do not specify a
known clock, or specifies tha CPU-time clock of tha calling
thread.
.TP 7
.B ENOTSUP
Da \fIclock_id\fP argument specifies a cold-ass lil clock fo' which \fIclock_nanosleep\fP()
is not supported, like fuckin a CPU-time
clock.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
Callin \fIclock_nanosleep\fP() wit tha value TIMER_ABSTIME not set
in tha \fIflags\fP argument n' wit a \fIclock_id\fP of
CLOCK_REALTIME is equivalent ta callin \fInanosleep\fP() wit the
same \fIrqtp\fP and
\fIrmtp\fP arguments.
.SH RATIONALE
.LP
Da \fInanosleep\fP() function specifies dat tha system-wide clock
CLOCK_REALTIME is
used ta measure tha elapsed time fo' dis time service. But fuck dat shiznit yo, tha word on tha street is dat with
the introduction of tha monotonic clock CLOCK_MONOTONIC a new
relatizzle chill function is needed ta allow a application ta take
advantage of tha special characteristics of dis clock.
.LP
There is nuff applications up in which a process need ta be suspended
and then activated multiple times up in a periodic way; for
example, ta poll tha statuz of a non-interruptin thang or ta refresh
a display device. For these cases, it is known dat precise
periodic activation cannot be  bigged up  wit a relatizzle \fIsleep\fP()
or \fInanosleep\fP() function call. Right back up in yo muthafuckin ass. Suppose, fo' example, a periodic
process dat be activated at
time \fIT\fP0, executes fo' a while, n' then wants ta suspend itself
until time \fIT\fP0+ \fIT\fP, tha period bein \fIT\fP.
If dis process wants ta use tha \fInanosleep\fP() function, it must
first call \fIclock_gettime\fP() ta git tha current time, then calculate
the difference between the
current time n' \fIT\fP0+ \fIT\fP and, finally, call \fInanosleep\fP()
usin the
computed interval. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. But fuck dat shiznit yo, tha word on tha street is dat tha process could be preempted by a gangbangin' finger-lickin' different
process between tha two function calls, n' up in dis case
the interval computed would be wrong; tha process would raise up later
than desired. Y'all KNOW dat shit, muthafucka! This problem would not occur wit tha absolute
\fIclock_nanosleep\fP() function, since only one function call would
be necessary ta suspend tha process until tha desired time.
In other cases, however, a relatizzle chill is needed, n' dat is why
both functionalitizzles is required.
.LP
Although it is possible ta implement periodic processes rockin the
timers intercourse, dis implementation would require tha use of
signals, n' tha reservation of some signal numbers. In dis regard,
the reasons fo' includin a absolute version of the
\fIclock_nanosleep\fP() function up in IEEE\ Std\ 1003.1-2001 is the
same as fo' tha inclusion of tha relatizzle \fInanosleep\fP().
.LP
It be also possible ta implement precise periodic processes using
\fIpthread_cond_timedwait\fP(), up in which a absolute timeout is specified
that
takes effect if tha condizzle variable involved is never signaled.
But fuck dat shiznit yo, tha word on tha street is dat tha use of dis intercourse is unnatural, n' involves
performin other operations on mutexes n' condizzle variablez that
imply a unnecessary overhead. Y'all KNOW dat shit, muthafucka! Furthermore, \fIpthread_cond_timedwait\fP()
is not available up in implementations dat do not
support threads.
.LP
Although tha intercourse of tha relatizzle n' absolute versionz of the
new high resolution chill steez is tha same
\fIclock_nanosleep\fP() function, tha \fIrmtp\fP argument is only
used up in tha relatizzle chill. This argument is needed up in the
relatizzle \fIclock_nanosleep\fP() function ta reissue tha function
call if it is interrupted by a signal yo, but it aint needed in
the absolute \fIclock_nanosleep\fP() function call; if tha call is
interrupted by a signal, tha absolute \fIclock_nanosleep\fP()
function can be invoked again n' again n' again wit tha same \fIrqtp\fP argument used
in tha interrupted call.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIclock_getres\fP(), \fInanosleep\fP(), \fIpthread_cond_timedwait\fP(),
\fIsleep\fP(), tha Base Definitions
volume of IEEE\ Std\ 1003.1-2001, \fI<time.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
