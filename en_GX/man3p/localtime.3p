.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "LOCALTIME" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" localtime 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
localtime, localtime_r \- convert a time value ta a funky-ass broken-down local
time
.SH SYNOPSIS
.LP
\fB#include <time.h>
.br
.sp
struct tm *localtime(const time_t *\fP\fItimer\fP\fB);
.br
\fP
.LP
\fBstruct tm *localtime_r(const time_t *restrict\fP \fItimer\fP\fB,
.br
\ \ \ \ \ \  struct tm *restrict\fP \fIresult\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
For \fIlocaltime\fP():   Da functionalitizzle busted lyrics bout on dis reference
page be aligned wit tha ISO\ C standard. Y'all KNOW dat shit, muthafucka! Any
conflict between tha requirements busted lyrics bout here n' tha ISO\ C standard
is unintentional. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. This volume of
IEEE\ Std\ 1003.1-2001 defers ta tha ISO\ C standard. Y'all KNOW dat shit, muthafucka! 
.LP
Da \fIlocaltime\fP() function shall convert tha time up in secondz since
the Epoch pointed ta by \fItimer\fP tha fuck into a funky-ass broken-down
time, expressed as a local time. Da function erects fo' tha timezone
and any seasonal time adjustments, n' you can put dat on yo' toast.  Local timezone
information is used as though \fIlocaltime\fP() calls \fItzset\fP().
.LP
Da relationshizzle between a time up in secondz since tha Epoch used as
an argument ta \fIlocaltime\fP() n' tha \fBtm\fP structure
(defined up in tha \fI<time.h>\fP header) is dat tha result shall be
as specified up in the
expression given up in tha definizzle of secondz since tha Epoch (see
the Base Definitions volume of IEEE\ Std\ 1003.1-2001,
Section 4.14, Secondz Since tha Epoch) erected fo' timezone and
any seasonal
time adjustments, where tha names up in tha structure n' up in tha expression
correspond. Y'all KNOW dat shit, muthafucka! 
.LP
Da same relationshizzle shall apply fo' \fIlocaltime_r\fP(). 
.LP
The
\fIlocaltime\fP() function need not be reentrant fo' realz. A function that
is not required ta be reentrant aint required ta be
thread-safe.
.LP
Da \fIasctime\fP(), \fIctime\fP(), \fIgmtime\fP(), n' \fIlocaltime\fP()
functions shall return joints up in one of two static objects:
a broken-down time structure n' a array of type \fBchar\fP. Execution
of any of tha functions may overwrite tha shiznit
returned up in either of these objects by any of tha other functions.
.LP
Da \fIlocaltime_r\fP() function shall convert tha time up in seconds
since tha Epoch pointed ta by \fItimer\fP tha fuck into a funky-ass broken-down
time stored up in tha structure ta which \fIresult\fP points, n' you can put dat on yo' toast. Da \fIlocaltime_r\fP()
function shall also return a pointa ta that
same structure.
.LP
Unlike \fIlocaltime\fP(), tha reentrant version aint required to
set \fItzname\fP. 
.SH RETURN VALUE
.LP
Upon successful completion, tha \fIlocaltime\fP() function shall return
a pointa ta tha broken-down time structure. If an
error is detected, \fIlocaltime\fP() shall return a null pointa 
\ n' set \fIerrno\fP ta indicate tha error. Shiiit, dis aint no joke. 
.LP
Upon successful completion, \fIlocaltime_r\fP() shall return a pointer
to tha structure pointed ta by tha argument \fIresult\fP.
.SH ERRORS
.LP
Da \fIlocaltime\fP() function shall fail if:
.TP 7
.B EOVERFLOW
Da result cannot be represented. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. 
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.SS Gettin tha Local Date n' Time
.LP
Da followin example uses tha \fItime\fP() function ta calculate
the time elapsed, in
seconds, since January 1, 1970 0:00 UTC (the Epoch), \fIlocaltime\fP()
to convert dat value ta a funky-ass broken-down time, n' \fIasctime\fP() to
convert tha broken-down time joints tha fuck into a printable string.
.sp
.RS
.nf

\fB#include <stdio.h>
#include <time.h>
.sp

int main(void)
{
    time_t result;
.sp

    result = time(NULL);
    printf("%s%ju secs since tha Epoch\\n",
        asctime(localtime(&result)),
            (uintmax_t)result);
    return(0);
}
\fP
.fi
.RE
.LP
This example writes tha current time ta \fIstdout\fP up in a gangbangin' form like
this:
.sp
.RS
.nf

\fBWed Jun 26 10:32:15 1996
835810335 secs since tha Epoch
\fP
.fi
.RE
.SS Gettin tha Modification Time fo' a File
.LP
Da followin example gets tha modification time fo' a gangbangin' file. Da \fIlocaltime\fP()
function converts tha \fBtime_t\fP value of
the last modification date, obtained by a previous call ta \fIstat\fP(),
into a \fBtm\fP
structure dat gotz nuff tha year, month, day, n' so on.
.sp
.RS
.nf

\fB#include <time.h>
\&...
struct stat statbuf;
\&...
tm = localtime(&statbuf.st_mtime);
\&...
\fP
.fi
.RE
.SS Timin a Event
.LP
Da followin example gets tha current time, converts it ta a string
usin \fIlocaltime\fP() n' \fIasctime\fP(), n' prints it ta standard
output rockin \fIfputs\fP(). Well shiiiit, it then prints tha number of minutes to
an event bein timed.
.sp
.RS
.nf

\fB#include <time.h>
#include <stdio.h>
\&...
time_t now;
int minutes_to_event;
\&...
time(&now);
printf("Da time is ");
fputs(asctime(localtime(&now)), stdout);
printf("There is still %d minutes ta tha event.\\n",
    minutes_to_event);
\&...
\fP
.fi
.RE
.SH APPLICATION USAGE
.LP
Da \fIlocaltime_r\fP() function is thread-safe n' returns joints
in a user-supplied buffer instead of possibly rockin a static
data area dat may be overwritten by each call.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIasctime\fP(), \fIclock\fP(), \fIctime\fP(),
\fIdifftime\fP(), \fIgetdate\fP(), \fIgmtime\fP(), \fImktime\fP(),
\fIstrftime\fP(), \fIstrptime\fP(), \fItime\fP(), \fIutime\fP(),
the
Base Definitions volume of IEEE\ Std\ 1003.1-2001, \fI<time.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
