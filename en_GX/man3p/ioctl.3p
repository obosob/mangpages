.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "IOCTL" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" ioctl 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
ioctl \- control a STREAMS thang (\fBSTREAMS\fP)
.SH SYNOPSIS
.LP
\fB#include <stropts.h>
.br
.sp
int ioctl(int\fP \fIfildes\fP\fB, int\fP \fIrequest\fP\fB, ... /*
arg */); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIioctl\fP() function shall big-ass up a variety of control functions
on STREAMS devices. For non-STREAMS devices, the
functions performed by dis call is unspecified. Y'all KNOW dat shit, muthafucka! Da \fIrequest\fP
argument n' a optionizzle third argument (with varyin type)
shall be passed ta n' interpreted by tha appropriate part of the
STREAM associated wit \fIfildes\fP.
.LP
Da \fIfildes\fP argument be a open file descriptor dat refers to
a device.
.LP
Da \fIrequest\fP argument selects tha control function ta be performed
and shall depend on tha STREAMS thang being
addressed.
.LP
Da \fIarg\fP argument represents additionizzle shiznit dat is needed
by dis specific STREAMS thang ta big-ass up the
axed function. I aint talkin' bout chicken n' gravy biatch. Da type of \fIarg\fP dependz upon tha particular
control request yo, but it shall be either a integer or a
pointa ta a thugged-out device-specific data structure.
.LP
Da \fIioctl\fP() commandz applicable ta STREAMS, they arguments,
and error conditions dat apply ta each individual command
are busted lyrics bout below.
.LP
Da followin \fIioctl\fP() commands, wit error joints indicated,
are applicable ta all STREAMS files:
.TP 7
I_PUSH
Pushes tha module whose name is pointed ta by \fIarg\fP onto tha top
of tha current STREAM, just below tha STREAM head. Y'all KNOW dat shit, muthafucka! It
then calls tha \fIopen\fP() function of tha newly-pushed module. 
.LP
Da \fIioctl\fP() function wit tha I_PUSH command shall fail if:
.TP 7
.B EINVAL
.RS
Invalid module name.
.RE
.TP 7
.B ENXIO
.RS
Open function of freshly smoked up module failed.
.RE
.TP 7
.B ENXIO
.RS
Hangup received on \fIfildes\fP.
.RE
.sp
.TP 7
I_POP
Removes tha module just below tha STREAM head of tha STREAM pointed
to by \fIfildes\fP. Da \fIarg\fP argument should be 0 in
an I_POP request. 
.LP
Da \fIioctl\fP() function wit tha I_POP command shall fail if:
.TP 7
.B EINVAL
.RS
No module present up in tha STREAM.
.RE
.TP 7
.B ENXIO
.RS
Hangup received on \fIfildes\fP.
.RE
.sp
.TP 7
I_LOOK
Retrieves tha name of tha module just below tha STREAM head of the
STREAM pointed ta by \fIfildes\fP, n' places it up in a
characta strang pointed ta by \fIarg\fP. Da buffer pointed ta by
\fIarg\fP should be at least FMNAMESZ+1 bytes long, where
FMNAMESZ is defined up in \fI<stropts.h>\fP. 
.LP
Da \fIioctl\fP() function wit tha I_LOOK command shall fail if:
.TP 7
.B EINVAL
.RS
No module present up in tha STREAM.
.RE
.sp
.TP 7
I_FLUSH
Flushes read and/or write queues, dependin on tha value of \fIarg\fP.
Valid \fIarg\fP joints are: 
.TP 7
FLUSHR
.RS
Flush all read queues.
.RE
.TP 7
FLUSHW
.RS
Flush all write queues.
.RE
.TP 7
FLUSHRW
.RS
Flush all read n' all write queues.
.RE
.sp
.LP
Da \fIioctl\fP() function wit tha I_FLUSH command shall fail if:
.TP 7
.B EINVAL
.RS
Invalid \fIarg\fP value.
.RE
.TP 7
.B EAGAIN \fRor\fP ENOSR
.RS
.sp
Unable ta allocate buffers fo' flush message.
.RE
.TP 7
.B ENXIO
.RS
Hangup received on \fIfildes\fP.
.RE
.sp
.TP 7
I_FLUSHBAND
Flushes a particular crew of lyrics. Da \fIarg\fP argument points
to a \fBbandinfo\fP structure. Da \fIbi_flag\fP member
may be one of FLUSHR, FLUSHW, or FLUSHRW as busted lyrics bout above. Da \fIbi_pri\fP
member determines tha prioritizzle crew ta be
flushed.
.TP 7
I_SETSIG
Requests dat tha STREAMS implementation bust tha SIGPOLL signal to
the callin process when a particular event has occurred on
the STREAM associated wit \fIfildes\fP. I_SETSIG supports a asynchronous
processin capabilitizzle up in STREAMS. Da value of
\fIarg\fP be a funky-ass bitmask dat specifies tha events fo' which tha process
should be signaled. Y'all KNOW dat shit, muthafucka! Well shiiiit, it is tha bitwise-inclusive OR of any
combination of tha followin constants: 
.TP 7
S_RDNORM
.RS
A aiiight (prioritizzle crew set ta 0) message has arrived all up in tha head
of a STREAM head read queue fo' realz. A signal shall be generated even
if tha message iz of zero length.
.RE
.TP 7
S_RDBAND
.RS
A message wit a non-zero prioritizzle crew has arrived all up in tha head of
a STREAM head read queue fo' realz. A signal shall be generated even
if tha message iz of zero length.
.RE
.TP 7
S_INPUT
.RS
A message, other than a high-prioritizzle message, has arrived at the
head of a STREAM head read queue fo' realz. A signal shall be generated
even if tha message iz of zero length.
.RE
.TP 7
S_HIPRI
.RS
A high-prioritizzle message is present on a STREAM head read queue fo' realz. A
signal shall be generated even if tha message iz of zero
length.
.RE
.TP 7
S_OUTPUT
.RS
Da write queue fo' aiiight data (prioritizzle crew 0) just below tha STREAM
head is no longer full. This notifies tha process that
there is room on tha queue fo' bustin  (or writing) aiiight data downstream.
.RE
.TP 7
S_WRNORM
.RS
Equivalent ta S_OUTPUT.
.RE
.TP 7
S_WRBAND
.RS
Da write queue fo' a non-zero prioritizzle crew just below tha STREAM
head is no longer full. This notifies tha process dat there
is room on tha queue fo' bustin  (or writing) prioritizzle data downstream.
.RE
.TP 7
S_MSG
.RS
A STREAMS signal message dat gotz nuff tha SIGPOLL signal has reached
the front of tha STREAM head read queue.
.RE
.TP 7
S_ERROR
.RS
Notification of a error condizzle has reached tha STREAM head.
.RE
.TP 7
S_HANGUP
.RS
Notification of a hangup has reached tha STREAM head.
.RE
.TP 7
S_BANDURG
.RS
When used up in conjunction wit S_RDBAND, SIGURG is generated instead
of SIGPOLL when a prioritizzle message reaches tha front of the
STREAM head read queue.
.RE
.sp
.LP
If \fIarg\fP is 0, tha callin process shall be unregistered n' shall
not receive further SIGPOLL signals fo' tha stream
associated wit \fIfildes\fP.
.LP
Processes dat wish ta receive SIGPOLL signals shall ensure dat they
explicitly regista ta receive dem rockin I_SETSIG. If
several processes regista ta receive dis signal fo' tha same event
on tha same STREAM, each process shall be signaled when the
event occurs.
.LP
Da \fIioctl\fP() function wit tha I_SETSIG command shall fail if:
.TP 7
.B EINVAL
.RS
Da value of \fIarg\fP is invalid.
.RE
.TP 7
.B EINVAL
.RS
Da value of \fIarg\fP is 0 n' tha callin process aint registered
to receive tha SIGPOLL signal.
.RE
.TP 7
.B EAGAIN
.RS
There was insufficient resources ta store tha signal request.
.RE
.sp
.TP 7
I_GETSIG
Returns tha events fo' which tha callin process is currently registered
to be busted a SIGPOLL signal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Da events is returned
as a funky-ass bitmask up in a \fBint\fP pointed ta by \fIarg\fP, where tha events
are dem specified up in tha description of I_SETSIG above. 
.LP
Da \fIioctl\fP() function wit tha I_GETSIG command shall fail if:
.TP 7
.B EINVAL
.RS
Process aint registered ta receive tha SIGPOLL signal.
.RE
.sp
.TP 7
I_FIND
Compares tha namez of all modulez currently present up in tha STREAM
to tha name pointed ta by \fIarg\fP, n' returns 1 if the
named module is present up in tha STREAM, or returns 0 if tha named module
is not present. 
.LP
Da \fIioctl\fP() function wit tha I_FIND command shall fail if:
.TP 7
.B EINVAL
.RS
\fIarg\fP do not contain a valid module name.
.RE
.sp
.TP 7
I_PEEK
Retrieves tha shiznit up in tha straight-up original gangsta message on tha STREAM head
read queue without takin tha message off tha queue. Well shiiiit, it is
analogous ta \fIgetmsg\fP() except dat dis command do not remove
the message from the
queue. Da \fIarg\fP argument points ta a \fBstrpeek\fP structure.
.LP
Da application shall ensure dat tha \fImaxlen\fP member up in tha \fBctlbuf\fP
and \fBdatabuf strbuf\fP structures is set to
the number of bytez of control shiznit and/or data shiznit,
respectively, ta retrieve. Da \fIflags\fP member may be
marked RS_HIPRI or 0, as busted lyrics bout by \fIgetmsg\fP(). If tha process
sets \fIflags\fP to
RS_HIPRI, fo' example, I_PEEK shall only look fo' a high-priority
message on tha STREAM head read queue.
.LP
I_PEEK returns 1 if a message was retrieved, n' returns 0 if no message
was found on tha STREAM head read queue, or if the
RS_HIPRI flag was set up in \fIflags\fP n' a high-prioritizzle message was
not present on tha STREAM head read queue. Well shiiiit, it do not wait
for a message ta arrive. On return, \fBctlbuf\fP specifies shiznit
in tha control buffer, \fBdatabuf\fP specifies shiznit
in tha data buffer, n' \fIflags\fP gotz nuff tha value RS_HIPRI or
0.
.TP 7
I_SRDOPT
Sets tha read mode rockin tha value of tha argument \fIarg\fP. Read
modes is busted lyrics bout up in \fIread\fP(). Valid \fIarg\fP flags are: 
.TP 7
RNORM
.RS
Byte-stream mode, tha default.
.RE
.TP 7
RMSGD
.RS
Message-discard mode.
.RE
.TP 7
RMSGN
.RS
Message-nondiscard mode.
.RE
.sp
.LP
Da bitwise-inclusive OR of RMSGD n' RMSGN shall return [EINVAL].
Da bitwise-inclusive OR of RNORM n' either RMSGD or RMSGN
shall result up in tha other flag overridin RNORM which is tha default.
.LP
In addition, treatment of control lyrics by tha STREAM head may
be chizzled by settin any of tha followin flags in
\fIarg\fP:
.TP 7
RPROTNORM
.RS
Fail \fIread\fP() wit [EBADMSG] if a message containin a cold-ass lil control
part be all up in tha front
of tha STREAM head read queue.
.RE
.TP 7
RPROTDAT
.RS
Deliver tha control part of a message as data when a process issues
a \fIread\fP().
.RE
.TP 7
RPROTDIS
.RS
Discard tha control part of a message, deliverin any data portion,
when a process thangs a \fIread\fP().
.RE
.sp
.LP
Da \fIioctl\fP() function wit tha I_SRDOPT command shall fail if:
.TP 7
.B EINVAL
.RS
Da \fIarg\fP argument aint valid.
.RE
.sp
.TP 7
I_GRDOPT
Returns tha current read mode setting, as busted lyrics bout above, up in a \fBint\fP
pointed ta by tha argument \fIarg\fP. Read modes
are busted lyrics bout up in \fIread\fP().
.TP 7
I_NREAD
Counts tha number of data bytes up in tha data part of tha straight-up original gangsta message
on tha STREAM head read queue n' places dis value in
the \fBint\fP pointed ta by \fIarg\fP. Da return value fo' tha command
shall be tha number of lyrics on tha STREAM head read
queue. For example, if 0 is returned up in \fIarg\fP yo, but tha \fIioctl\fP()
return value is pimped outa than 0, dis indicates dat a
zero-length message is next on tha queue.
.TP 7
I_FDINSERT
Creates a message from specified buffer(s), addz shiznit about
another STREAM, n' sendz tha message downstream. The
message gotz nuff a cold-ass lil control part n' a optionizzle data part. Da data
and control parts ta be busted is distinguished by placement in
separate buffers, as busted lyrics bout below. Da \fIarg\fP argument points
to a \fBstrfdinsert\fP structure. 
.LP
Da application shall ensure dat tha \fIlen\fP member up in tha \fBctlbuf
strbuf\fP structure is set ta tha size of a
\fBt_uscalar_t\fP plus tha number of bytez of control shiznit
to be busted wit tha message. Da \fIfildes\fP member specifies
the file descriptor of tha other STREAM, n' tha \fIoffset\fP member,
which must be suitably aligned fo' use as a
\fBt_uscalar_t\fP, specifies tha offset from tha start of tha control
buffer where I_FDINSERT shall store a \fBt_uscalar_t\fP
whose interpretation is specific ta tha STREAM end yo, but it ain't no stoppin cause I be still poppin'. Da application
shall ensure dat tha \fIlen\fP member up in tha \fBdatabuf
strbuf\fP structure is set ta tha number of bytez of data shiznit
to be busted wit tha message, or ta 0 if no data part is to
be sent.
.LP
Da \fIflags\fP member specifies tha type of message ta be pimped.
A aiiight message is pimped if \fIflags\fP is set ta 0,
and a high-prioritizzle message is pimped if \fIflags\fP is set ta RS_HIPRI.
For non-prioritizzle lyrics, I_FDINSERT shall block if the
STREAM write queue is full cuz of internal flow control conditions.
For prioritizzle lyrics, I_FDINSERT do not block on this
condition. I aint talkin' bout chicken n' gravy biatch. For non-prioritizzle lyrics, I_FDINSERT do not block when
the write queue is full n' O_NONBLOCK is set. Instead, it
fails n' sets \fIerrno\fP ta [EAGAIN].
.LP
I_FDINSERT also blocks, unless prevented by lack of internal resources,
waitin fo' tha availabilitizzle of message blocks up in the
STREAM, regardless of prioritizzle or whether O_NONBLOCK has been specified.
No partial message is sent.
.LP
Da \fIioctl\fP() function wit tha I_FDINSERT command shall fail
if:
.TP 7
.B EAGAIN
.RS
A non-prioritizzle message is specified, tha O_NONBLOCK flag is set, and
the STREAM write queue is full cuz of internal flow
control conditions.
.RE
.TP 7
.B EAGAIN \fRor\fP ENOSR
.RS
.sp
Buffers cannot be allocated fo' tha message dat is ta be pimped.
.RE
.TP 7
.B EINVAL
.RS
One of tha following: 
.RS
.IP " *" 3
Da \fIfildes\fP gangmember of tha \fBstrfdinsert\fP structure is not
a valid, open STREAM file descriptor.
.LP
.IP " *" 3
Da size of a \fBt_uscalar_t\fP plus \fIoffset\fP is pimped outa than
the \fIlen\fP member fo' tha buffer specified through
\fBctlbuf\fP.
.LP
.IP " *" 3
Da \fIoffset\fP member do not specify a properly-aligned location
in tha data buffer.
.LP
.IP " *" 3
An undefined value is stored up in \fIflags\fP.
.LP
.RE
.RE
.TP 7
.B ENXIO
.RS
Hangup received on tha STREAM identified by either tha \fIfildes\fP
argument or tha \fIfildes\fP gangmember of the
\fBstrfdinsert\fP structure.
.RE
.TP 7
.B ERANGE
.RS
Da \fIlen\fP member fo' tha buffer specified all up in \fBdatabuf\fP
does not fall within tha range specified by tha maximum
and minimum packet sizez of tha topmost STREAM module; or tha \fIlen\fP
member fo' tha buffer specified all up in \fBdatabuf\fP is
larger than tha maximum configured size of tha data part of a message;
or tha \fIlen\fP member fo' tha buffer specified through
\fBctlbuf\fP is larger than tha maximum configured size of tha control
part of a message.
.RE
.sp
.TP 7
I_STR
Constructs a internal STREAMS \fIioctl\fP() message from tha data
pointed ta by \fIarg\fP, n' sendz dat message
downstream. 
.LP
This mechanizzle is provided ta bust \fIioctl\fP() requests ta downstream
modulez n' drivers. Well shiiiit, it allows shiznit ta be sent
with \fIioctl\fP(), n' returns ta tha process any shiznit sent
upstream by tha downstream recipient. I_STR shall block until
the system respondz wit either a positizzle or wack acknowledgement
message, or until tha request times up afta some period of
time. If tha request times out, it shall fail wit \fIerrno\fP set
to [ETIME].
.LP
At most, one I_STR can be actizzle on a STREAM. Further I_STR calls
shall block until tha actizzle I_STR completes all up in tha STREAM
head. Y'all KNOW dat shit, muthafucka! Da default timeout interval fo' these requests is 15 seconds.
Da O_NONBLOCK flag has no effect on dis call.
.LP
To bust requests downstream, tha application shall ensure dat \fIarg\fP
points ta a \fBstrioctl\fP structure.
.LP
Da \fIic_cmd\fP member is tha internal \fIioctl\fP() command intended
for a thugged-out downstream module or driver n' \fIic_timout\fP
is tha number of secondz (-1=infinite, 0=use implementation-defined
timeout interval, >0=as specified) a I_STR request shall
wait fo' acknowledgement before timin out. \fIic_len\fP is tha number
of bytes up in tha data argument, n' \fIic_dp\fP be a
pointa ta tha data argument. Da \fIic_len\fP member has two uses:
on input, it gotz nuff tha length of tha data argument passed
in, n' on return from tha command, it gotz nuff tha number of bytes
bein moonwalked back ta tha process (the buffer pointed ta by
\fIic_dp\fP should be big-ass enough ta contain tha maximum amount of
data dat any module or tha driver up in tha STREAM can
return).
.LP
Da STREAM head shall convert tha shiznit pointed ta by tha \fBstrioctl\fP
structure ta a internal \fIioctl\fP() command
message n' bust it downstream.
.LP
Da \fIioctl\fP() function wit tha I_STR command shall fail if:
.TP 7
.B EAGAIN \fRor\fP ENOSR
.RS
.sp
Unable ta allocate buffers fo' tha \fIioctl\fP() message.
.RE
.TP 7
.B EINVAL
.RS
Da \fIic_len\fP member is less than 0 or larger than tha maximum
configured size of tha data part of a message, or
\fIic_timout\fP is less than -1.
.RE
.TP 7
.B ENXIO
.RS
Hangup received on \fIfildes\fP.
.RE
.TP 7
.B ETIME
.RS
A downstream \fIioctl\fP() timed up before acknowledgement was received.
.RE
.sp
.LP
An I_STR can also fail while waitin fo' a acknowledgement if a message
indicatin a error or a hangup is received at the
STREAM head. Y'all KNOW dat shit, muthafucka! In addition, a error code can be returned up in tha positive
or wack acknowledgement message, up in tha event the
\fIioctl\fP() command busted downstream fails. For these cases, I_STR
shall fail wit \fIerrno\fP set ta tha value up in the
message.
.TP 7
I_SWROPT
Sets tha write mode rockin tha value of tha argument \fIarg\fP. Valid
bit settings fo' \fIarg\fP are: 
.TP 7
SNDZERO
.RS
Send a zero-length message downstream when a \fIwrite\fP() of 0 bytes
occurs. To not
send a zero-length message when a \fIwrite\fP() of 0 bytes occurs,
the application shall
ensure dat dis bit aint set up in \fIarg\fP (for example, \fIarg\fP
would be set ta 0).
.RE
.sp
.LP
Da \fIioctl\fP() function wit tha I_SWROPT command shall fail if:
.TP 7
.B EINVAL
.RS
\fIarg\fP aint tha above value.
.RE
.sp
.TP 7
I_GWROPT
Returns tha current write mode setting, as busted lyrics bout above, up in the
\fBint\fP dat is pointed ta by tha argument
\fIarg\fP.
.TP 7
I_SENDFD
Creates a freshly smoked up reference ta tha open file description associated with
the file descriptor \fIarg\fP, n' writes a message on
the STREAMS-based pipe \fIfildes\fP containin dis reference, together
with tha user ID n' crew ID of tha callin process. 
.LP
Da \fIioctl\fP() function wit tha I_SENDFD command shall fail if:
.TP 7
.B EAGAIN
.RS
Da bustin  STREAM is unable ta allocate a message block ta contain
the file pointer; or tha read queue of tha receivin STREAM
head is full n' cannot accept tha message busted by I_SENDFD.
.RE
.TP 7
.B EBADF
.RS
Da \fIarg\fP argument aint a valid, open file descriptor.
.RE
.TP 7
.B EINVAL
.RS
Da \fIfildes\fP argument aint connected ta a STREAM pipe.
.RE
.TP 7
.B ENXIO
.RS
Hangup received on \fIfildes\fP.
.RE
.sp
.TP 7
I_RECVFD
Retrieves tha reference ta a open file description from a message
written ta a STREAMS-based pipe rockin tha I_SENDFD command,
and allocates a freshly smoked up file descriptor up in tha callin process dat refers
to dis open file description. I aint talkin' bout chicken n' gravy biatch. Da \fIarg\fP argument be a
pointa ta a \fBstrrecvfd\fP data structure as defined up in \fI<stropts.h>\fP.
.LP
Da \fIfd\fP member be a gangbangin' file descriptor. Shiiit, dis aint no joke. Da \fIuid\fP n' \fIgid\fP
thugz is tha effectizzle user ID n' effectizzle group
ID, respectively, of tha bustin  process.
.LP
If O_NONBLOCK aint set, I_RECVFD shall block until a message is
present all up in tha STREAM head. Y'all KNOW dat shit, muthafucka! If O_NONBLOCK is set, I_RECVFD
shall fail wit \fIerrno\fP set ta [EAGAIN] if no message is present
at tha STREAM head.
.LP
If tha message all up in tha STREAM head be a message busted by a I_SENDFD,
a freshly smoked up file descriptor shall be allocated fo' tha open file
descriptor referenced up in tha message. Da freshly smoked up file descriptor is placed
in tha \fIfd\fP gangmember of tha \fBstrrecvfd\fP structure
pointed ta by \fIarg\fP.
.LP
Da \fIioctl\fP() function wit tha I_RECVFD command shall fail if:
.TP 7
.B EAGAIN
.RS
A message aint present all up in tha STREAM head read queue n' tha O_NONBLOCK
flag is set.
.RE
.TP 7
.B EBADMSG
.RS
Da message all up in tha STREAM head read queue aint a message containing
a passed file descriptor.
.RE
.TP 7
.B EMFILE
.RS
Da process has tha maximum number of file descriptors currently open
that it be allowed.
.RE
.TP 7
.B ENXIO
.RS
Hangup received on \fIfildes\fP.
.RE
.sp
.TP 7
I_LIST
Allows tha process ta list all tha module names on tha STREAM, up
to n' includin tha topmost driver name. If \fIarg\fP be a
null pointer, tha return value shall be tha number of modules, including
the driver, dat is on tha STREAM pointed ta by
\fIfildes\fP. This lets tha process allocate enough space fo' the
module names. Otherwise, it should point ta a \fBstr_list\fP
structure. 
.LP
Da \fIsl_nmods\fP member indicates tha number of entries tha process
has allocated up in tha array. Upon return, the
\fIsl_modlist\fP gangmember of tha \fBstr_list\fP structure shall contain
the list of module names, n' tha number of entries that
have been filled tha fuck into tha \fIsl_modlist\fP array is found up in tha \fIsl_nmods\fP
member (the number includes tha number of modules
includin tha driver). Da return value from \fIioctl\fP() shall be
0. Da entries is filled up in startin all up in tha top of tha STREAM
and continuin downstream until either tha end of tha STREAM is reached,
or tha number of axed modulez ( \fIsl_nmods\fP) is
satisfied.
.LP
Da \fIioctl\fP() function wit tha I_LIST command shall fail if:
.TP 7
.B EINVAL
.RS
Da \fIsl_nmods\fP member is less than 1.
.RE
.TP 7
.B EAGAIN \fRor\fP ENOSR
.RS
.sp
Unable ta allocate buffers.
.RE
.sp
.TP 7
I_ATMARK
Allows tha process ta peep if tha message all up in tha head of tha STREAM
head read queue is marked by some module downstream. The
\fIarg\fP argument determines how tha fuck tha checkin is done when there
may be multiple marked lyrics on tha STREAM head read queue.
It may take on tha followin joints: 
.TP 7
ANYMARK
.RS
Peep if tha message is marked.
.RE
.TP 7
LASTMARK
.RS
Peep if tha message is tha last one marked on tha queue.
.RE
.sp
.LP
Da bitwise-inclusive OR of tha flags ANYMARK n' LASTMARK is permitted.
.LP
Da return value shall be 1 if tha mark condizzle is satisfied; otherwise,
the value shall be 0.
.LP
Da \fIioctl\fP() function wit tha I_ATMARK command shall fail if:
.TP 7
.B EINVAL
.RS
Invalid \fIarg\fP value.
.RE
.sp
.TP 7
I_CKBAND
Checks if tha message of a given prioritizzle crew exists on tha STREAM
head read queue. This shall return 1 if a message of the
given prioritizzle exists, 0 if no such message exists, or -1 on error.
\fIarg\fP should be of type \fBint\fP. 
.LP
Da \fIioctl\fP() function wit tha I_CKBAND command shall fail if:
.TP 7
.B EINVAL
.RS
Invalid \fIarg\fP value.
.RE
.sp
.TP 7
I_GETBAND
Returns tha prioritizzle crew of tha straight-up original gangsta message on tha STREAM head
read queue up in tha integer referenced by \fIarg\fP. 
.LP
Da \fIioctl\fP() function wit tha I_GETBAND command shall fail if:
.TP 7
.B ENODATA
.RS
No message on tha STREAM head read queue.
.RE
.sp
.TP 7
I_CANPUT
Checks if a cold-ass lil certain crew is writable. \fIarg\fP is set ta tha priority
band up in question. I aint talkin' bout chicken n' gravy biatch. Da return value shall be 0 if the
band is flow-controlled, 1 if tha crew is writable, or -1 on error.
.LP
Da \fIioctl\fP() function wit tha I_CANPUT command shall fail if:
.TP 7
.B EINVAL
.RS
Invalid \fIarg\fP value.
.RE
.sp
.TP 7
I_SETCLTIME
This request allows tha process ta set tha time tha STREAM head shall
delay when a STREAM is closin n' there is data on the
write queues. Before closin each module or driver, if there is data
on its write queue, tha STREAM head shall delay fo' the
specified amount of time ta allow tha data ta drain. I aint talkin' bout chicken n' gravy biatch. If, afta the
delay, data is still present, it shall be flushed. Y'all KNOW dat shit, muthafucka! The
\fIarg\fP argument be a pointa ta a integer specifyin tha number
of millisecondz ta delay, rounded up ta tha nearest valid
value. If I_SETCLTIME aint performed on a STREAM, a implementation-defined
default timeout interval is used. Y'all KNOW dat shit, muthafucka! 
.LP
Da \fIioctl\fP() function wit tha I_SETCLTIME command shall fail
if:
.TP 7
.B EINVAL
.RS
Invalid \fIarg\fP value.
.RE
.sp
.TP 7
I_GETCLTIME
Returns tha close time delay up in tha integer pointed ta by \fIarg\fP.
.sp
.SS Multiplexed STREAMS Configurations
.LP
Da followin commandz is used fo' connectin n' disconnectin multiplexed
STREAMS configurations. These commandz use an
implementation-defined default timeout interval.
.TP 7
I_LINK
Connects two STREAMs, where \fIfildes\fP is tha file descriptor of
the STREAM connected ta tha multiplexin driver, and
\fIarg\fP is tha file descriptor of tha STREAM connected ta another
driver n' shit. Da STREAM designated by \fIarg\fP is connected below
the multiplexin driver n' shit. I_LINK requires tha multiplexin driver to
send a acknowledgement message ta tha STREAM head regarding
the connection. I aint talkin' bout chicken n' gravy biatch. This call shall return a multiplexer ID number (an
identifier used ta disconnect tha multiplexer; peep I_UNLINK) on
success, n' -1 on failure. 
.LP
Da \fIioctl\fP() function wit tha I_LINK command shall fail if:
.TP 7
.B ENXIO
.RS
Hangup received on \fIfildes\fP.
.RE
.TP 7
.B ETIME
.RS
Timeout before acknowledgement message was received at STREAM head.
.RE
.TP 7
.B EAGAIN \fRor\fP ENOSR
.RS
.sp
Unable ta allocate STREAMS storage ta big-ass up tha I_LINK.
.RE
.TP 7
.B EBADF
.RS
Da \fIarg\fP argument aint a valid, open file descriptor.
.RE
.TP 7
.B EINVAL
.RS
Da \fIfildes\fP argument do not support multiplexing; or \fIarg\fP
is not a STREAM or be already connected downstream from
a multiplexer; or tha specified I_LINK operation would connect the
STREAM head up in mo' than one place up in tha multiplexed
STREAM.
.RE
.sp
.LP
An I_LINK can also fail while waitin fo' tha multiplexin driver
to acknowledge tha request, if a message indicatin a error
or a hangup is received all up in tha STREAM head of \fIfildes\fP. In addition,
an error code can be returned up in tha positizzle or negative
acknowledgement message. For these cases, I_LINK fails wit \fIerrno\fP
set ta tha value up in tha message.
.TP 7
I_UNLINK
Disconnects tha two STREAMs specified by \fIfildes\fP n' \fIarg\fP.
\fIfildes\fP is tha file descriptor of tha STREAM
connected ta tha multiplexin driver n' shit. Da \fIarg\fP argument is the
multiplexer ID number dat was returned by tha I_LINK
\fIioctl\fP() command when a STREAM was connected downstream from
the multiplexin driver n' shit. If \fIarg\fP is MUXID_ALL, then all
STREAMs dat was connected ta \fIfildes\fP shall be disconnected.
As up in I_LINK, dis command requires acknowledgement. 
.LP
Da \fIioctl\fP() function wit tha I_UNLINK command shall fail if:
.TP 7
.B ENXIO
.RS
Hangup received on \fIfildes\fP.
.RE
.TP 7
.B ETIME
.RS
Timeout before acknowledgement message was received at STREAM head.
.RE
.TP 7
.B EAGAIN \fRor\fP ENOSR
.RS
.sp
Unable ta allocate buffers fo' tha acknowledgement message.
.RE
.TP 7
.B EINVAL
.RS
Invalid multiplexer ID number.
.RE
.sp
.LP
An I_UNLINK can also fail while waitin fo' tha multiplexin driver
to acknowledge tha request if a message indicatin a error
or a hangup is received all up in tha STREAM head of \fIfildes\fP. In addition,
an error code can be returned up in tha positizzle or negative
acknowledgement message. For these cases, I_UNLINK shall fail with
\fIerrno\fP set ta tha value up in tha message.
.TP 7
I_PLINK
Creates a \fIpersistent connection\fP between two STREAMs, where \fIfildes\fP
is tha file descriptor of tha STREAM connected
to tha multiplexin driver, n' \fIarg\fP is tha file descriptor of
the STREAM connected ta another driver n' shit. This call shall create
a persistent connection which can exist even if tha file descriptor
\fIfildes\fP associated wit tha upper STREAM ta the
multiplexin driver is closed. Y'all KNOW dat shit, muthafucka! Da STREAM designated by \fIarg\fP
gets connected via a persistent connection below the
multiplexin driver n' shit. I_PLINK requires tha multiplexin driver ta send
an acknowledgement message ta tha STREAM head. Y'all KNOW dat shit, muthafucka! This call
shall return a multiplexer ID number (an identifier dat may be used
to disconnect tha multiplexer; peep I_PUNLINK) on success, and
-1 on failure. 
.LP
Da \fIioctl\fP() function wit tha I_PLINK command shall fail if:
.TP 7
.B ENXIO
.RS
Hangup received on \fIfildes\fP.
.RE
.TP 7
.B ETIME
.RS
Timeout before acknowledgement message was received at STREAM head.
.RE
.TP 7
.B EAGAIN \fRor\fP ENOSR
.RS
.sp
Unable ta allocate STREAMS storage ta big-ass up tha I_PLINK.
.RE
.TP 7
.B EBADF
.RS
Da \fIarg\fP argument aint a valid, open file descriptor.
.RE
.TP 7
.B EINVAL
.RS
Da \fIfildes\fP argument do not support multiplexing; or \fIarg\fP
is not a STREAM or be already connected downstream from
a multiplexer; or tha specified I_PLINK operation would connect the
STREAM head up in mo' than one place up in tha multiplexed
STREAM.
.RE
.sp
.LP
An I_PLINK can also fail while waitin fo' tha multiplexin driver
to acknowledge tha request, if a message indicatin a error
or a hangup is received all up in tha STREAM head of \fIfildes\fP. In addition,
an error code can be returned up in tha positizzle or negative
acknowledgement message. For these cases, I_PLINK shall fail with
\fIerrno\fP set ta tha value up in tha message.
.TP 7
I_PUNLINK
Disconnects tha two STREAMs specified by \fIfildes\fP n' \fIarg\fP
from a persistent connection. I aint talkin' bout chicken n' gravy biatch. Da \fIfildes\fP argument
is tha file descriptor of tha STREAM connected ta tha multiplexing
driver n' shit. Da \fIarg\fP argument is tha multiplexer ID number
that was returned by tha I_PLINK \fIioctl\fP() command when a STREAM
was connected downstream from tha multiplexin driver n' shit. If
\fIarg\fP is MUXID_ALL, then all STREAMs which is persistent connections
to \fIfildes\fP shall be disconnected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time fo' realz. As up in I_PLINK,
this command requires tha multiplexin driver ta acknowledge tha request.
.LP
Da \fIioctl\fP() function wit tha I_PUNLINK command shall fail if:
.TP 7
.B ENXIO
.RS
Hangup received on \fIfildes\fP.
.RE
.TP 7
.B ETIME
.RS
Timeout before acknowledgement message was received at STREAM head.
.RE
.TP 7
.B EAGAIN \fRor\fP ENOSR
.RS
.sp
Unable ta allocate buffers fo' tha acknowledgement message.
.RE
.TP 7
.B EINVAL
.RS
Invalid multiplexer ID number.
.RE
.sp
.LP
An I_PUNLINK can also fail while waitin fo' tha multiplexin driver
to acknowledge tha request if a message indicatin a error
or a hangup is received all up in tha STREAM head of \fIfildes\fP. In addition,
an error code can be returned up in tha positizzle or negative
acknowledgement message. For these cases, I_PUNLINK shall fail with
\fIerrno\fP set ta tha value up in tha message.
.sp
.SH RETURN VALUE
.LP
Upon successful completion, \fIioctl\fP() shall return a value other
than -1 dat dependz upon tha STREAMS thang control
function. I aint talkin' bout chicken n' gravy biatch. Otherwise, it shall return -1 n' set \fIerrno\fP ta indicate
the error.
.SH ERRORS
.LP
Under tha followin general conditions, \fIioctl\fP() shall fail if:
.TP 7
.B EBADF
Da \fIfildes\fP argument aint a valid open file descriptor.
.TP 7
.B EINTR
A signal was caught durin tha \fIioctl\fP() operation.
.TP 7
.B EINVAL
Da STREAM or multiplexer referenced by \fIfildes\fP is linked (directly
or indirectly) downstream from a multiplexer.
.sp
.LP
If a underlyin thang driver detects a error, then \fIioctl\fP()
shall fail if:
.TP 7
.B EINVAL
Da \fIrequest\fP or \fIarg\fP argument aint valid fo' dis device.
.TP 7
.B EIO
Some physical I/O error has occurred.
.TP 7
.B ENOTTY
Da \fIfildes\fP argument aint associated wit a STREAMS device
that accepts control functions.
.TP 7
.B ENXIO
Da \fIrequest\fP n' \fIarg\fP arguments is valid fo' dis device
driver yo, but tha steez axed cannot be performed on
this particular sub-device.
.TP 7
.B ENODEV
Da \fIfildes\fP argument refers ta a valid STREAMS device yo, but the
correspondin thang driver do not support the
\fIioctl\fP() function.
.sp
.LP
If a STREAM is connected downstream from a multiplexer, any \fIioctl\fP()
command except I_UNLINK n' I_PUNLINK shall set
\fIerrno\fP ta [EINVAL].
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
Da implementation-defined timeout interval fo' STREAMS has historically
been 15 seconds.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fISTREAMS\fP, \fIclose\fP(), \fIfcntl\fP(), \fIgetmsg\fP(), \fIopen\fP(),
\fIpipe\fP(), \fIpoll\fP(), \fIputmsg\fP(), \fIread\fP(), \fIsigaction\fP(),
\fIwrite\fP(), the
Base Definitions volume of IEEE\ Std\ 1003.1-2001, \fI<stropts.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
