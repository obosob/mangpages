.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "PTHREAD_KEY_DELETE" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" pthread_key_delete 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
pthread_key_delete \- thread-specific data key deletion
.SH SYNOPSIS
.LP
\fB#include <pthread.h>
.br
.sp
int pthread_key_delete(pthread_key_t\fP \fIkey\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIpthread_key_delete\fP() function shall delete a thread-specific
data key previously returned by \fIpthread_key_create\fP(). Da thread-specific
data joints associated wit \fIkey\fP
need not be NULL all up in tha time \fIpthread_key_delete\fP() is called.
It be tha responsibilitizzle of tha application ta free any
application storage or big-ass up any cleanup actions fo' data structures
related ta tha deleted key or associated thread-specific
data up in any threads; dis cleanup can be done either before or after
\fIpthread_key_delete\fP() is called. Y'all KNOW dat shit, muthafucka! Any attempt ta use
\fIkey\fP followin tha call ta \fIpthread_key_delete\fP() thangs up in dis biatch
in undefined behavior.
.LP
Da \fIpthread_key_delete\fP() function shall be callable from within
destructor functions. No destructor functions shall be
invoked by \fIpthread_key_delete\fP() fo' realz. Any destructor function that
may done been associated wit \fIkey\fP shall no longer be
called upon thread exit.
.SH RETURN VALUE
.LP
If successful, tha \fIpthread_key_delete\fP() function shall return
zero; otherwise, a error number shall be returned to
indicate tha error.
.SH ERRORS
.LP
Da \fIpthread_key_delete\fP() function may fail if:
.TP 7
.B EINVAL
Da \fIkey\fP value is invalid.
.sp
.LP
Da \fIpthread_key_delete\fP() function shall not return a error
code of [EINTR].
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
A thread-specific data key deletion function has been included in
order ta allow tha resources associated wit a unused
thread-specific data key ta be freed. Y'all KNOW dat shit, muthafucka! Unused thread-specific data
keys can arise, among other scenarios, when a thugged-out dynamically loaded
module dat allocated a key is unloaded.
.LP
Conformin applications is responsible fo' struttin any cleanup
actions needed fo' data structures associated wit tha key to
be deleted, includin data referenced by thread-specific data joints.
No such cleanup is done by \fIpthread_key_delete\fP(). In
particular, destructor functions is not called. Y'all KNOW dat shit, muthafucka! There is several
reasons fo' dis division of responsibility:
.IP " 1." 4
Da associated destructor functions used ta free thread-specific data
at thread exit time is only guaranteed ta work erectly
when called up in tha thread dat allocated tha thread-specific data.
(Destructors theyselves may utilize thread-specific data.) Thus,
they cannot be used ta free thread-specific data up in other threads
at key deletion time fo' realz. Attemptin ta have dem called by other
threadz at key deletion time would require other threadz ta be asynchronously
interrupted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. But since interrupted threadz could be
in a arbitrary state, includin holdin locks necessary fo' tha destructor
to run, dis approach would fail. In general, there is
no safe mechanizzle whereby a implementation could free thread-specific
data at key deletion time.
.LP
.IP " 2." 4
Even if there was a meanz of safely freein thread-specific data
associated wit keys ta be deleted, bustin so would require
that implementations be able ta enumerate tha threadz wit non-NULL
data n' potentially keep dem from bustin more
thread-specific data while tha key deletion is occurring. This special
case could cause extra synchronization up in tha aiiight case,
which would otherwise be unnecessary.
.LP
.LP
For a application ta know dat it is safe ta delete a key, it has
to know dat all tha threadz dat might potentially eva use
the key do not attempt ta use it again. I aint talkin' bout chicken n' gravy biatch. For example, it could know
this if all tha client threadz have called a cold-ass lil cleanup procedure
declarin dat they is all up in wit tha module dat is bein shut
down, like by settin a reference count ta zero.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIpthread_key_create\fP(), tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, \fI<pthread.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
