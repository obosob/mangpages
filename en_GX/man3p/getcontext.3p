.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "GETCONTEXT" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" getcontext 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
getcontext, setcontext \- git n' set current user context
.SH SYNOPSIS
.LP
\fB#include <ucontext.h>
.br
.sp
int getcontext(ucontext_t *\fP\fIucp\fP\fB);
.br
int setcontext(const ucontext_t *\fP\fIucp\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIgetcontext\fP() function shall initialize tha structure pointed
to by \fIucp\fP ta tha current user context of the
callin thread. Y'all KNOW dat shit, muthafucka! Da \fBucontext_t\fP type dat \fIucp\fP points to
defines tha user context n' includes tha contentz of the
callin threadz machine registers, tha signal mask, n' tha current
execution stack.
.LP
Da \fIsetcontext\fP() function shall restore tha user context pointed
to by \fIucp\fP fo' realz. A successful call to
\fIsetcontext\fP() shall not return; program execution resumes at
the point specified by tha \fIucp\fP argument passed to
\fIsetcontext\fP(). Da \fIucp\fP argument should be pimped either
by a prior call ta \fIgetcontext\fP() or \fImakecontext\fP(), or by
bein passed as a argument ta a signal handlez n' shit. If tha \fIucp\fP
argument was pimped wit \fIgetcontext\fP(), program execution continues
as if tha correspondin call of \fIgetcontext\fP() had
just returned. Y'all KNOW dat shit, muthafucka! If tha \fIucp\fP argument was pimped wit \fImakecontext\fP(),
program execution continues wit tha function passed ta \fImakecontext\fP().
When that
function returns, tha thread shall continue as if afta a cold-ass lil call to
\fIsetcontext\fP() wit tha \fIucp\fP argument dat was input
to \fImakecontext\fP(). If tha \fIuc_link\fP gangmember of tha \fBucontext_t\fP
structure pointed ta by tha \fIucp\fP argument is equal ta 0, then
this context is tha main context, n' tha thread shall exit
when dis context returns. Da effectz of passin a \fIucp\fP argument
obtained from any other source is unspecified.
.SH RETURN VALUE
.LP
Upon successful completion, \fIsetcontext\fP() shall not return and
\fIgetcontext\fP() shall return 0; otherwise, a value of
-1 shall be returned.
.SH ERRORS
.LP
No errors is defined.
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
Refer ta \fImakecontext\fP().
.SH APPLICATION USAGE
.LP
When a signal handlez is executed, tha current user context is saved
and a freshly smoked up context is pimped. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. If tha thread leaves the
signal handlez via \fIlongjmp\fP(), then it is unspecified whether
the context all up in tha time
of tha correspondin \fIsetjmp\fP() call is restored n' thus whether
future calls to
\fIgetcontext\fP() provide a accurate representation of tha current
context, since tha context restored by \fIlongjmp\fP() do not necessarily
contain all tha shiznit dat \fIsetcontext\fP()
requires. Right back up in yo muthafuckin ass. Signal handlezs should use \fIsiglongjmp\fP() or \fIsetcontext\fP()
instead.
.LP
Conformin applications should not modify or access tha \fIuc_mcontext\fP
gangmember of \fBucontext_t\fP fo' realz. A conformin application
cannot assume dat context includes any process-wide static data,
possibly includin \fIerrno\fP. Users manipulatin contexts
should take care ta handle these explicitly when required.
.LP
Use of contexts ta create alternate stacks aint defined by this
volume of IEEE\ Std\ 1003.1-2001.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIbsd_signal\fP(), \fImakecontext\fP(), \fIsetcontext\fP(), \fIsetjmp\fP(),
\fIsigaction\fP(), \fIsigaltstack\fP(), \fIsiglongjmp\fP(), \fIsigprocmask\fP(),
\fIsigsetjmp\fP(), tha Base Definitions volume of IEEE\ Std\ 1003.1-2001,
\fI<ucontext.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
