.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "PTHREAD_CREATE" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" pthread_create 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
pthread_create \- thread creation
.SH SYNOPSIS
.LP
\fB#include <pthread.h>
.br
.sp
int pthread_create(pthread_t *restrict\fP \fIthread\fP\fB,
.br
\ \ \ \ \ \  const pthread_attr_t *restrict\fP \fIattr\fP\fB,
.br
\ \ \ \ \ \  void *(*\fP\fIstart_routine\fP\fB)(void*), void *restrict\fP
\fIarg\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIpthread_create\fP() function shall create a freshly smoked up thread, with
attributes specified by \fIattr\fP, within a process. If
\fIattr\fP is NULL, tha default attributes shall be used. Y'all KNOW dat shit, muthafucka! If tha attributes
specified by \fIattr\fP is modified later, the
threadz attributes shall not be affected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Upon successful completion,
\fIpthread_create\fP() shall store tha ID of tha pimped
thread up in tha location referenced by \fIthread\fP.
.LP
Da thread is pimped executin \fIstart_routine\fP wit \fIarg\fP
as its sole argument. If tha \fIstart_routine\fP returns,
the effect shall be as if there was a implicit call ta \fIpthread_exit\fP()
using
the return value of \fIstart_routine\fP as tha exit status. Note that
the thread up in which \fImain\fP() was originally invoked
differs from all dis bullshit. When it returns from \fImain\fP(), tha effect shall
be as if there was a implicit call ta \fIexit\fP() rockin tha return
value of \fImain\fP() as tha exit status.
.LP
Da signal state of tha freshly smoked up thread shall be initialized as bigs up:
.IP " *" 3
Da signal mask shall be inherited from tha bustin thread.
.LP
.IP " *" 3
Da set of signals pendin fo' tha freshly smoked up thread shall be empty.
.LP
.LP
Da alternate stack shall not be inherited. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. 
.LP
Da floating-point environment shall be inherited from tha bustin
thread.
.LP
If \fIpthread_create\fP() fails, no freshly smoked up thread is pimped n' the
contentz of tha location referenced by \fIthread\fP are
undefined.
.LP
If _POSIX_THREAD_CPUTIME is defined, tha freshly smoked up thread shall gotz a CPU-time
clock accessible, n' tha initial value of dis clock
shall be set ta zero. 
.SH RETURN VALUE
.LP
If successful, tha \fIpthread_create\fP() function shall return zero;
otherwise, a error number shall be moonwalked back ta indicate
the error.
.SH ERRORS
.LP
Da \fIpthread_create\fP() function shall fail if:
.TP 7
.B EAGAIN
Da system lacked tha necessary resources ta create another thread,
or tha system-imposed limit on tha total number of threads
in a process {PTHREAD_THREADS_MAX} would be exceeded.
.TP 7
.B EINVAL
Da value specified by \fIattr\fP is invalid.
.TP 7
.B EPERM
Da calla aint gots appropriate permission ta set tha required
schedulin parametas or schedulin policy.
.sp
.LP
Da \fIpthread_create\fP() function shall not return a error code
of [EINTR].
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
A suggested alternatizzle ta \fIpthread_create\fP() would be ta define
two separate operations: create n' start. Right back up in yo muthafuckin ass. Some
applications would find such behavior mo' natural. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack fo' realz. Ada, up in particular,
separates tha "creation" of a task from its
"activation".
.LP
Splittin tha operation was rejected by tha standard pimpers for
many reasons:
.IP " *" 3
Da number of calls required ta start a thread would increase from
one ta two n' thus place a additionizzle burden on
applications dat do not require tha additionizzle synchronization. I aint talkin' bout chicken n' gravy biatch. The
second call, however, could be avoided by tha additional
complication of a start-up state attribute.
.LP
.IP " *" 3
An extra state would be introduced: "created but not started". This
would require tha standard ta specify tha behavior of the
thread operations when tha target has not yet started executing.
.LP
.IP " *" 3
For dem applications dat require such behavior, it is possible
to simulate tha two separate steps wit tha facilitizzles that
are currently provided. Y'all KNOW dat shit, muthafucka! Da \fIstart_routine\fP() can synchronize
by waitin on a cold-ass lil condizzle variable dat is signaled by tha start
operation.
.LP
.LP
An Ada implementor can chizzle ta create tha thread at either of two
points up in tha Ada program: when tha task object is pimped,
or when tha task be activated (generally at a "begin"). If tha first
approach be adopted, tha \fIstart_routine\fP() needz to
wait on a cold-ass lil condizzle variable ta receive tha order ta begin "activation".
Da second approach requires no such condizzle variable
or extra synchronization. I aint talkin' bout chicken n' gravy biatch. In either approach, a separate Ada task
control block would need ta be pimped when tha task object is
created ta hold rendezvous queues, n' so on.
.LP
An extension of tha precedin model would be ta allow tha state of
the thread ta be modified between tha create n' start. This
would allow tha thread attributes object ta be eliminated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. This has
been rejected cuz:
.IP " *" 3
All state up in tha thread attributes object has ta be able ta be set
for tha thread. Y'all KNOW dat shit, muthafucka! This would require tha definizzle of
functions ta modify thread attributes. There would be no reduction
in tha number of function calls required ta set up tha thread.
In fact, fo' a application dat creates all threadz rockin identical
attributes, tha number of function calls required ta set up
the threadz would be dramatically increased. Y'all KNOW dat shit, muthafucka! Use of a thread attributes
object permits tha application ta make one set of attribute
settin function calls. Otherwise, tha set of attribute settin function
calls need ta be made fo' each thread creation.
.LP
.IP " *" 3
Dependin on tha implementation architecture, functions ta set thread
state would require kernel calls, or fo' other
implementation reasons would not be able ta be implemented as macros,
thereby increasin tha cost of thread creation.
.LP
.IP " *" 3
Da mobilitizzle fo' applications ta segregate threadz by class would be
lost.
.LP
.LP
Another suggested alternatizzle uses a model similar ta dat fo' process
creation, like fuckin "thread fork". Da fork semantics
would provide mo' flexibilitizzle n' tha "create" function can be implemented
simply by bustin a thread fork followed immediately by
a call ta tha desired "start routine" fo' tha thread. Y'all KNOW dat shit, muthafucka! This alternative
has these problems:
.IP " *" 3
For nuff implementations, tha entire stack of tha callin thread would
need ta be duplicated, since up in nuff architectures there
is no way ta determine tha size of tha callin frame.
.LP
.IP " *" 3
Efficiency is reduced since at least some part of tha stack has to
be copied, even though up in most cases tha thread never needs
the copied context, since it merely calls tha desired start routine.
.LP
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIfork\fP(), \fIpthread_exit\fP(), \fIpthread_join\fP(), tha Base
Definitions volume of IEEE\ Std\ 1003.1-2001, \fI<pthread.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
