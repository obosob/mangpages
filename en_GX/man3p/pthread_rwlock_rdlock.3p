.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "PTHREAD_RWLOCK_RDLOCK" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" pthread_rwlock_rdlock 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
pthread_rwlock_rdlock, pthread_rwlock_tryrdlock \- lock a read-write
lock object fo' reading
.SH SYNOPSIS
.LP
\fB#include <pthread.h>
.br
.sp
int pthread_rwlock_rdlock(pthread_rwlock_t\fP \fI*rwlock\fP\fB);
.br
int pthread_rwlock_tryrdlock(pthread_rwlock_t\fP \fI*rwlock\fP\fB);
\fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIpthread_rwlock_rdlock\fP() function shall apply a read lock
to tha read-write lock referenced by \fIrwlock\fP. The
callin thread acquires tha read lock if a writa do not hold the
lock n' there be no writas blocked on tha lock.
.LP
If tha Thread Execution Schedulin option is supported, n' tha threads
involved up in tha lock is executin wit tha scheduling
policies SCHED_FIFO or SCHED_RR, tha callin thread shall not acquire
the lock if a writa holdz tha lock or if writaz of higher
or equal prioritizzle is blocked on tha lock; otherwise, tha calling
thread shall acquire tha lock. 
.LP
If tha Threadz Execution Schedulin option is supported, n' tha threads
involved up in tha lock is executin wit the
SCHED_SPORADIC schedulin policy, tha callin thread shall not acquire
the lock if a writa holdz tha lock or if writaz of higher
or equal prioritizzle is blocked on tha lock; otherwise, tha calling
thread shall acquire tha lock. 
.LP
If tha Thread Execution Schedulin option aint supported, it is
implementation-defined whether tha callin thread acquires the
lock when a writa do not hold tha lock n' there be writas blocked
on tha lock. If a writa holdz tha lock, tha callin thread
shall not acquire tha read lock. If tha read lock aint acquired,
the callin thread shall block until it can acquire tha lock.
Da callin thread may deadlock if all up in tha time tha call is made it
holdz a write lock.
.LP
A thread may hold multiple concurrent read locks on \fIrwlock\fP (that
is, successfully call tha \fIpthread_rwlock_rdlock\fP()
function \fIn\fP times). If so, tha application shall ensure that
the thread performs matchin unlocks (that is, it calls tha \fIpthread_rwlock_unlock\fP()
function \fIn\fP times).
.LP
Da maximum number of simultaneous read locks dat a implementation
guarantees can be applied ta a read-write lock shall be
implementation-defined. Y'all KNOW dat shit, muthafucka! Da \fIpthread_rwlock_rdlock\fP() function
may fail if dis maximum would be exceeded.
.LP
Da \fIpthread_rwlock_tryrdlock\fP() function shall apply a read lock
as up in tha \fIpthread_rwlock_rdlock\fP() function, with
the exception dat tha function shall fail if tha equivalent \fIpthread_rwlock_rdlock\fP()
call would have blocked tha calling
thread. Y'all KNOW dat shit, muthafucka! In no case shall tha \fIpthread_rwlock_tryrdlock\fP() function
ever block; it always either acquires tha lock or fails and
returns immediately.
.LP
Results is undefined if any of these functions is called wit an
uninitialized read-write lock.
.LP
If a signal is served up ta a thread waitin fo' a read-write lock
for reading, upon return from tha signal handlez tha thread
resumes waitin fo' tha read-write lock fo' readin as if dat shiznit was not
interrupted.
.SH RETURN VALUE
.LP
If successful, tha \fIpthread_rwlock_rdlock\fP() function shall return
zero; otherwise, a error number shall be returned to
indicate tha error.
.LP
Da \fIpthread_rwlock_tryrdlock\fP() function shall return zero if
the lock fo' readin on tha read-write lock object
referenced by \fIrwlock\fP be acquired. Y'all KNOW dat shit, muthafucka! Otherwise, a error number
shall be moonwalked back ta indicate tha error.
.SH ERRORS
.LP
Da \fIpthread_rwlock_tryrdlock\fP() function shall fail if:
.TP 7
.B EBUSY
Da read-write lock could not be acquired fo' readin cuz a writer
holdz tha lock or a writa wit tha appropriate priority
was blocked on dat shit.
.sp
.LP
Da \fIpthread_rwlock_rdlock\fP() n' \fIpthread_rwlock_tryrdlock\fP()
functions may fail if:
.TP 7
.B EINVAL
Da value specified by \fIrwlock\fP do not refer ta a initialized
read-write lock object.
.TP 7
.B EAGAIN
Da read lock could not be acquired cuz tha maximum number of
read locks fo' \fIrwlock\fP has been exceeded.
.sp
.LP
Da \fIpthread_rwlock_rdlock\fP() function may fail if:
.TP 7
.B EDEADLK
Da current thread already owns tha read-write lock fo' writing.
.sp
.LP
These functions shall not return a error code of [EINTR].
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
Applications rockin these functions may be subject ta prioritizzle inversion,
as discussed up in tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, Section 3.285, Prioritizzle Inversion.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIpthread_rwlock_destroy\fP(), \fIpthread_rwlock_timedrdlock\fP(),
\fIpthread_rwlock_timedwrlock\fP(), \fIpthread_rwlock_trywrlock\fP(),
\fIpthread_rwlock_unlock\fP(), \fIpthread_rwlock_wrlock\fP(),
the Base Definitions volume of IEEE\ Std\ 1003.1-2001, \fI<pthread.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
