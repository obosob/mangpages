.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "SLEEP" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" sleep 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
sleep \- suspend execution fo' a interval of time
.SH SYNOPSIS
.LP
\fB#include <unistd.h>
.br
.sp
unsigned sleep(unsigned\fP \fIseconds\fP\fB);
.br
\fP
.SH DESCRIPTION
.LP
Da \fIsleep\fP() function shall cause tha callin thread ta be suspended
from execution until either tha number of realtime
secondz specified by tha argument \fIseconds\fP has elapsed or a signal
is served up ta tha callin thread n' its action is to
invoke a signal-catchin function or ta terminizzle tha process. The
suspension time may be longer than axed cuz of the
schedulin of other activitizzle by tha system.
.LP
If a SIGALRM signal is generated fo' tha callin process durin execution
of \fIsleep\fP() n' if tha SIGALRM signal is being
ignored or blocked from delivery, it is unspecified whether \fIsleep\fP()
returns when tha SIGALRM signal is scheduled. Y'all KNOW dat shit, muthafucka! If the
signal is bein blocked, it be also unspecified whether it remains
pendin afta \fIsleep\fP() returns or it is discarded.
.LP
If a SIGALRM signal is generated fo' tha callin process durin execution
of \fIsleep\fP(), except as a result of a prior call
to \fIalarm\fP(), n' if tha SIGALRM signal aint bein ignored or
blocked from delivery,
it is unspecified whether dat signal has any effect other than causing
\fIsleep\fP() ta return.
.LP
If a signal-catchin function interrupts \fIsleep\fP() n' examines
or chizzlez either tha time a SIGALRM is scheduled ta be
generated, tha action associated wit tha SIGALRM signal, or whether
the SIGALRM signal is blocked from delivery, tha thangs up in dis biatch are
unspecified.
.LP
If a signal-catchin function interrupts \fIsleep\fP() n' calls \fIsiglongjmp\fP()
or \fIlongjmp\fP() ta restore a environment saved prior ta tha \fIsleep\fP()
call, the
action associated wit tha SIGALRM signal n' tha time at which a
SIGALRM signal is scheduled ta be generated is unspecified. Y'all KNOW dat shit, muthafucka! It
is also unspecified whether tha SIGALRM signal is blocked, unless
the process' signal mask is restored as part of the
environment.
.LP
Interactions between \fIsleep\fP() n' any of \fIsetitimer\fP(), \fIualarm\fP(),
or \fIusleep\fP() is unspecified. Y'all KNOW dat shit, muthafucka! 
.SH RETURN VALUE
.LP
If \fIsleep\fP() returns cuz tha axed time has elapsed, the
value returned shall be 0. If \fIsleep\fP() returns due
to delivery of a signal, tha return value shall be tha "unslept" amount
(the axed time minus tha time straight-up slept) in
seconds.
.SH ERRORS
.LP
No errors is defined.
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
There is two general approaches ta tha implementation of tha \fIsleep\fP()
function. I aint talkin' bout chicken n' gravy biatch. One is ta use tha \fIalarm\fP() function ta schedule a SIGALRM
signal n' then suspend tha process waitin fo' that
signal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Da other is ta implement a independent facility. This volume
of IEEE\ Std\ 1003.1-2001 permits either
approach.
.LP
In order ta comply wit tha requirement dat no primitizzle shall chizzle
a process attribute unless explicitly busted lyrics bout by this
volume of IEEE\ Std\ 1003.1-2001, a implementation rockin SIGALRM
must carefully take tha fuck into account any SIGALRM signal
scheduled by previous \fIalarm\fP() calls, tha action previously established
for SIGALRM,
and whether SIGALRM was blocked. Y'all KNOW dat shit, muthafucka! If a SIGALRM has been scheduled before
the \fIsleep\fP() would ordinarily complete, the
\fIsleep\fP() must be shortened ta dat time n' a SIGALRM generated
(possibly simulated by direct invocation of the
signal-catchin function) before \fIsleep\fP() returns. If a SIGALRM
has been scheduled afta tha \fIsleep\fP() would ordinarily
complete, it must be rescheduled fo' tha same time before \fIsleep\fP()
returns. Da action n' blockin fo' SIGALRM must be saved
and restored.
.LP
Oldschool implementations often implement tha SIGALRM-based version
usin \fIalarm\fP()
and \fIpause\fP(). One such implementation is prone ta infinite hangups,
as busted lyrics bout up in \fIpause\fP() fo' realz. Another such implementation uses the
C-language \fIsetjmp\fP() n' \fIlongjmp\fP() functions ta avoid that
window. That implementation introduces a gangbangin' finger-lickin' different problem: when the
SIGALRM signal interrupts a signal-catchin function installed
by tha user ta catch a gangbangin' finger-lickin' different signal, tha \fIlongjmp\fP() aborts
that signal-catching
function. I aint talkin' bout chicken n' gravy biatch fo' realz. An implementation based on \fIsigprocmask\fP(), \fIalarm\fP(),
and \fIsigsuspend\fP() can avoid these
problems.
.LP
Despite all reasonable care, there be nuff muthafuckin straight-up subtle yo, but detectable
and unavoidable, differences between tha two types of
implementations. These is tha cases mentioned up in dis volume of IEEE\ Std\ 1003.1-2001
where some other activitizzle relating
to SIGALRM takes place, n' tha thangs up in dis biatch is stated ta be unspecified.
All of these cases is sufficiently unusual as not ta be of
concern ta most applications.
.LP
See also tha rap of tha term \fIrealtime\fP up in \fIalarm\fP()
\&.
.LP
Since \fIsleep\fP() can be implemented rockin \fIalarm\fP(), tha rap
about alarms
occurrin early under \fIalarm\fP() applies ta \fIsleep\fP() as well.
.LP
Application writas should note dat tha type of tha argument \fIseconds\fP
and tha return value of \fIsleep\fP() is
\fBunsigned\fP. That means dat a Strictly Conformin POSIX System
Interfaces Application cannot pass a value pimped outa than the
minimum guaranteed value fo' {UINT_MAX}, which tha ISO\ C standard
sets as 65535, n' any application passin a larger value is
restrictin its portabilitizzle fo' realz. A different type was considered yo, but
historical implementations, includin dem wit a 16-bit
\fBint\fP type, consistently use either \fBunsigned\fP or \fBint\fP.
.LP
Schedulin delays may cause tha process ta return from tha \fIsleep\fP()
function hella afta tha axed time. In
such cases, tha return value should be set ta zero, since tha formula
(axed time minus tha time straight-up spent) yieldz a
negatizzle number n' \fIsleep\fP() returns a \fBunsigned\fP.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIalarm\fP(), \fIgetitimer\fP(), \fInanosleep\fP(), \fIpause\fP(),
\fIsigaction\fP(),
\fIsigsetjmp\fP(), \fIualarm\fP(), \fIusleep\fP(), tha Base Definitions
volume of IEEE\ Std\ 1003.1-2001, \fI<unistd.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
