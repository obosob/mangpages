.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "MQ_OPEN" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" mq_open 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
mq_open \- open a message queue (\fBREALTIME\fP)
.SH SYNOPSIS
.LP
\fB#include <mqueue.h>
.br
.sp
mqd_t mq_open(const char *\fP\fIname\fP\fB, int\fP \fIoflag\fP\fB,
\&...); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fImq_open\fP() function shall establish tha connection between
a process n' a message queue wit a message queue
descriptor. Shiiit, dis aint no joke. Well shiiiit, it shall create a open message queue description that
refers ta tha message queue, n' a message queue descriptor that
refers ta dat open message queue description. I aint talkin' bout chicken n' gravy biatch. Da message queue descriptor
is used by other functions ta refer ta dat message
queue. Da \fIname\fP argument points ta a strang namin a message
queue. Well shiiiit, it is unspecified whether tha name appears up in tha file
system n' is visible ta other functions dat take pathnames as arguments.
Da \fIname\fP argument shall conform ta the
construction rulez fo' a pathname. If \fIname\fP begins wit tha slash
character, then processes callin \fImq_open\fP() wit the
same value of \fIname\fP shall refer ta tha same message queue object,
as long as dat name has not been removed. Y'all KNOW dat shit, muthafucka! If \fIname\fP
does not begin wit tha slash character, tha effect is implementation-defined.
Da interpretation of slash charactas other than
the leadin slash characta up in \fIname\fP is implementation-defined.
If tha \fIname\fP argument aint tha name of a existing
message queue n' creation aint requested, \fImq_open\fP() shall
fail n' return a error.
.LP
A message queue descriptor may be implemented rockin a gangbangin' file descriptor,
in which case applications can open up ta at least
{OPEN_MAX} file n' message queues.
.LP
Da \fIoflag\fP argument requests tha desired receive and/or send
access ta tha message queue. Da axed access permission
to receive lyrics or bust lyrics shall be granted if tha calling
process would be granted read or write access, respectively,
to a equivalently protected file.
.LP
Da value of \fIoflag\fP is tha bitwise-inclusive OR of joints from
the followin list fo' realz. Applications shall specify exactly one
of tha straight-up original gangsta three joints (access modes) below up in tha value of \fIoflag\fP:
.TP 7
O_RDONLY
Open tha message queue fo' receivin lyrics. Da process can use
the returned message queue descriptor wit \fImq_receive\fP() yo, but
not \fImq_send\fP() fo' realz. A message
queue may be open multiple times up in tha same or different processes
for receivin lyrics.
.TP 7
O_WRONLY
Open tha queue fo' bustin  lyrics. Da process can use tha returned
message queue descriptor wit \fImq_send\fP() but not \fImq_receive\fP().
A message
queue may be open multiple times up in tha same or different processes
for bustin  lyrics.
.TP 7
O_RDWR
Open tha queue fo' both receivin n' bustin  lyrics. Da process
can use any of tha functions allowed fo' O_RDONLY and
O_WRONLY fo' realz. A message queue may be open multiple times up in tha same or
different processes fo' bustin  lyrics.
.sp
.LP
Any combination of tha remainin flags may be specified up in tha value
of \fIoflag\fP:
.TP 7
O_CREAT
Smoke a message queue. Well shiiiit, it requires two additionizzle arguments: \fImode\fP,
which shall be of type \fBmode_t\fP, and
\fIattr\fP, which shall be a pointa ta a \fBmq_attr\fP structure.
If tha pathname \fIname\fP has already been used ta create a
message queue dat still exists, then dis flag shall have no effect,
except as noted under O_EXCL. Otherwise, a message queue
shall be pimped without any lyrics up in dat shit. Da user ID of tha message
queue shall be set ta tha effectizzle user ID of tha process,
and tha crew ID of tha message queue shall be set ta tha effective
group ID of tha process. Da file permission bits shall be set
to tha value of \fImode\fP. When bits up in \fImode\fP other than file
permission bits is set, tha effect is
implementation-defined. Y'all KNOW dat shit, muthafucka! If \fIattr\fP is NULL, tha message queue shall
be pimped wit implementation-defined default message
queue attributes. If \fIattr\fP is non-NULL n' tha callin process
has tha appropriate privilege on \fIname\fP, tha message
queue \fImq_maxmsg\fP n' \fImq_msgsize\fP attributes shall be set
to tha jointz of tha correspondin thugz up in the
\fBmq_attr\fP structure referred ta by \fIattr\fP. If \fIattr\fP is
non-NULL yo, but tha callin process aint gots the
appropriate privilege on \fIname\fP, tha \fImq_open\fP() function
shall fail n' return a error without bustin tha message
queue.
.TP 7
O_EXCL
If O_EXCL n' O_CREAT is set, \fImq_open\fP() shall fail if tha message
queue \fIname\fP exists, n' you can put dat on yo' toast. Da check fo' tha existence
of tha message queue n' tha creation of tha message queue if it do
not exist shall be atomic wit respect ta other threads
executin \fImq_open\fP() namin tha same \fIname\fP wit O_EXCL and
O_CREAT set. If O_EXCL is set n' O_CREAT aint set, the
result is undefined.
.TP 7
O_NONBLOCK
Determines whether a \fImq_send\fP() or \fImq_receive\fP() waits
for resources or lyrics dat is not currently available, or fails
with \fIerrno\fP set ta [EAGAIN]; peep \fImq_send\fP() n' \fImq_receive\fP()
for details.
.sp
.LP
Da \fImq_open\fP() function do not add or remove lyrics from
the queue.
.SH RETURN VALUE
.LP
Upon successful completion, tha function shall return a message queue
descriptor; otherwise, tha function shall return
(\fBmqd_t\fP)-1 n' set \fIerrno\fP ta indicate tha error.
.SH ERRORS
.LP
Da \fImq_open\fP() function shall fail if:
.TP 7
.B EACCES
Da message queue exists n' tha permissions specified by \fIoflag\fP
are denied, or tha message queue do not exist and
permission ta create tha message queue is denied.
.TP 7
.B EEXIST
O_CREAT n' O_EXCL is set n' tha named message queue already exists.
.TP 7
.B EINTR
Da \fImq_open\fP() function was interrupted by a signal.
.TP 7
.B EINVAL
Da \fImq_open\fP() function aint supported fo' tha given name.
.TP 7
.B EINVAL
O_CREAT was specified up in \fIoflag\fP, tha value of \fIattr\fP is not
NULL, n' either \fImq_maxmsg\fP or \fImq_msgsize\fP
was less than or equal ta zero.
.TP 7
.B EMFILE
Too nuff message queue descriptors or file descriptors is currently
in use by dis process.
.TP 7
.B ENAMETOOLONG
Da length of tha \fIname\fP argument exceedz {PATH_MAX} or a pathname
component is longer than {NAME_MAX}.
.TP 7
.B ENFILE
Too nuff message queues is currently open up in tha system.
.TP 7
.B ENOENT
O_CREAT aint set n' tha named message queue do not exist.
.TP 7
.B ENOSPC
There is insufficient space fo' tha creation of tha freshly smoked up message queue.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fImq_close\fP(), \fImq_getattr\fP(), \fImq_receive\fP(), \fImq_send\fP(),
\fImq_setattr\fP(), \fImq_timedreceive\fP(), \fImq_timedsend\fP(),
\fImq_unlink\fP(), \fImsgctl\fP(), \fImsgget\fP(), \fImsgrcv\fP(),
\fImsgsnd\fP(), tha Base Definitions volume of IEEE\ Std\ 1003.1-2001,
\fI<mqueue.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
