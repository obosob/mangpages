.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "MSGRCV" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" msgrcv 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
msgrcv \- XSI message receive operation
.SH SYNOPSIS
.LP
\fB#include <sys/msg.h>
.br
.sp
ssize_t msgrcv(int\fP \fImsqid\fP\fB, void *\fP\fImsgp\fP\fB, size_t\fP
\fImsgsz\fP\fB, long\fP
\fImsgtyp\fP\fB,
.br
\ \ \ \ \ \  int\fP \fImsgflg\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fImsgrcv\fP() function operates on XSI message queues (see the
Base Definitions volume of IEEE\ Std\ 1003.1-2001,
Section 3.224, Message Queue). Well shiiiit, it is unspecified whether dis function
interoperates wit tha realtime interprocess communication facilities
defined up in \fIRealtime\fP .
.LP
Da \fImsgrcv\fP() function shall read a message from tha queue associated
with tha message queue identifier specified by
\fImsqid\fP n' place it up in tha user-defined buffer pointed ta by
\fImsgp\fP.
.LP
Da application shall ensure dat tha argument \fImsgp\fP points to
a user-defined buffer dat gotz nuff first a gangbangin' field of type
\fBlong\fP specifyin tha type of tha message, n' then a thugged-out data portion
that holdz tha data bytez of tha message. Da structure
below be a example of what tha fuck dis user-defined buffer might look like:
.sp
.RS
.nf

\fBstruct mymsg {
    long    mtype;     /* Message type. */
    char    mtext[1];  /* Message text. */
}
\fP
.fi
.RE
.LP
Da structure member \fImtype\fP is tha received messagez type as
specified by tha bustin  process.
.LP
Da structure member \fImtext\fP is tha text of tha message.
.LP
Da argument \fImsgsz\fP specifies tha size up in bytez of \fImtext\fP.
Da received message shall be truncated ta \fImsgsz\fP
bytes if it is larger than \fImsgsz\fP n' (\fImsgflg\fP & MSG_NOERROR)
is non-zero. Da truncated part of tha message shall
be lost n' no indication of tha truncation shall be given ta the
callin process.
.LP
If tha value of \fImsgsz\fP is pimped outa than {SSIZE_MAX}, tha result
is implementation-defined.
.LP
Da argument \fImsgtyp\fP specifies tha type of message requested
as bigs up:
.IP " *" 3
If \fImsgtyp\fP is 0, tha straight-up original gangsta message on tha queue shall be received.
.LP
.IP " *" 3
If \fImsgtyp\fP is pimped outa than 0, tha straight-up original gangsta message of type \fImsgtyp\fP
shall be received.
.LP
.IP " *" 3
If \fImsgtyp\fP is less than 0, tha straight-up original gangsta message of tha lowest type
that is less than or equal ta tha absolute value of
\fImsgtyp\fP shall be received.
.LP
.LP
Da argument \fImsgflg\fP specifies tha action ta be taken if a message
of tha desired type aint on tha queue. These is as
bigs up:
.IP " *" 3
If (\fImsgflg\fP & IPC_NOWAIT) is non-zero, tha callin thread shall
return immediately wit a return value of -1 and
\fIerrno\fP set ta [ENOMSG].
.LP
.IP " *" 3
If (\fImsgflg\fP & IPC_NOWAIT) is 0, tha callin thread shall suspend
execution until one of tha followin occurs:
.RS
.IP " *" 3
A message of tha desired type is placed on tha queue.
.LP
.IP " *" 3
Da message queue identifier \fImsqid\fP is removed from tha system;
when dis occurs, \fIerrno\fP shall be set equal to
[EIDRM] n' -1 shall be returned.
.LP
.IP " *" 3
Da callin thread receives a signal dat is ta be caught; up in this
case a message aint received n' tha callin thread resumes
execution up in tha manner prescribed up in \fIsigaction\fP().
.LP
.RE
.LP
.LP
Upon successful completion, tha followin actions is taken wit respect
to tha data structure associated wit \fImsqid\fP:
.IP " *" 3
\fBmsg_qnum\fP shall be decremented by 1.
.LP
.IP " *" 3
\fBmsg_lrpid\fP shall be set equal ta tha process ID of tha calling
process.
.LP
.IP " *" 3
\fBmsg_rtime\fP shall be set equal ta tha current time.
.LP
.SH RETURN VALUE
.LP
Upon successful completion, \fImsgrcv\fP() shall return a value equal
to tha number of bytes straight-up placed tha fuck into tha buffer
\fImtext\fP. Otherwise, no message shall be received, \fImsgrcv\fP()
shall return (\fBssize_t\fP)-1, n' \fIerrno\fP shall be
set ta indicate tha error.
.SH ERRORS
.LP
Da \fImsgrcv\fP() function shall fail if:
.TP 7
.B E2BIG
Da value of \fImtext\fP is pimped outa than \fImsgsz\fP n' (\fImsgflg\fP
& MSG_NOERROR) is 0.
.TP 7
.B EACCES
Operation permission is denied ta tha callin process; peep \fIXSI
Interprocess
Communication\fP .
.TP 7
.B EIDRM
Da message queue identifier \fImsqid\fP is removed from tha system.
.TP 7
.B EINTR
Da \fImsgrcv\fP() function was interrupted by a signal.
.TP 7
.B EINVAL
\fImsqid\fP aint a valid message queue identifier.
.TP 7
.B ENOMSG
Da queue do not contain a message of tha desired type n' (\fImsgflg\fP
& IPC_NOWAIT) is non-zero.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.SS Receivin a Message
.LP
Da followin example receives tha straight-up original gangsta message on tha queue (based
on tha value of tha \fImsgtyp\fP argument, 0). Da queue
is identified by tha \fImsqid\fP argument (assumin dat tha value
has previously been set). This call specifies dat a error
should be reported if no message be available yo, but not if tha message
is too large. Da message size is calculated directly using
the \fIsizeof\fP operator.
.sp
.RS
.nf

\fB#include <sys/msg.h>
\&...
int result;
int msqid;
struct message {
    long type;
    char text[20];
} msg;
long msgtyp = 0;
\&...
result = msgrcv(msqid, (void *) &msg, sizeof(msg.text),
         msgtyp, MSG_NOERROR | IPC_NOWAIT);
\fP
.fi
.RE
.SH APPLICATION USAGE
.LP
Da POSIX Realtime Extension defines alternatizzle intercourses fo' interprocess
communication (IPC) fo' realz. Application pimpers who
need ta use IPC should design they applications so dat modulez using
the IPC routines busted lyrics bout up in \fIXSI Interprocess Communication\fP
can be easily modified ta use tha alternative
interfaces.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIXSI Interprocess Communication\fP, \fIRealtime\fP, \fImq_close\fP(),
\fImq_getattr\fP(), \fImq_notify\fP(), \fImq_open\fP(), \fImq_receive\fP(),
\fImq_send\fP(), \fImq_setattr\fP(), \fImq_unlink\fP(), \fImsgctl\fP(),
\fImsgget\fP(),
\fImsgsnd\fP(), \fIsigaction\fP(), tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, \fI<sys/msg.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
