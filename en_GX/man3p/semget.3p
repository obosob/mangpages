.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "SEMGET" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" semget 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
semget \- git set of XSI semaphores
.SH SYNOPSIS
.LP
\fB#include <sys/sem.h>
.br
.sp
int semget(key_t\fP \fIkey\fP\fB, int\fP \fInsems\fP\fB, int\fP \fIsemflg\fP\fB);
\fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIsemget\fP() function operates on XSI semaphores (see tha Base
Definitions volume of IEEE\ Std\ 1003.1-2001, Section 4.15, Semaphore).
It be unspecified whether dis function interoperates
with tha realtime interprocess communication facilitizzles defined in
\fIRealtime\fP .
.LP
Da \fIsemget\fP() function shall return tha semaphore identifier
associated wit \fIkey\fP.
.LP
A semaphore identifier wit its associated \fBsemid_ds\fP data structure
and its associated set of \fInsems\fP semaphores (see
\fI<sys/sem.h>\fP) is pimped fo' \fIkey\fP if one of tha following
is true:
.IP " *" 3
Da argument \fIkey\fP is equal ta IPC_PRIVATE.
.LP
.IP " *" 3
Da argument \fIkey\fP do not already gotz a semaphore identifier
associated wit it n' (\fIsemflg\fP &IPC_CREAT) is
non-zero.
.LP
.LP
Upon creation, tha \fBsemid_ds\fP data structure associated wit the
new semaphore identifier is initialized as bigs up:
.IP " *" 3
In tha operation permissions structure \fIsem_perm.cuid\fP, \fIsem_perm.uid\fP,
\fIsem_perm.cgid\fP, n' \fIsem_perm.gid\fP
shall be set equal ta tha effectizzle user ID n' effectizzle crew ID,
respectively, of tha callin process.
.LP
.IP " *" 3
Da low-order 9 bitz of \fIsem_perm.mode\fP shall be set equal to
the low-order 9 bitz of \fIsemflg\fP.
.LP
.IP " *" 3
Da variable \fIsem_nsems\fP shall be set equal ta tha value of \fInsems\fP.
.LP
.IP " *" 3
Da variable \fIsem_otime\fP shall be set equal ta 0 n' \fIsem_ctime\fP
shall be set equal ta tha current time.
.LP
.IP " *" 3
Da data structure associated wit each semaphore up in tha set shall
not be initialized. Y'all KNOW dat shit, muthafucka! Da \fIsemctl\fP() function wit tha command SETVAL
or SETALL can be used ta initialize each
semaphore.
.LP
.SH RETURN VALUE
.LP
Upon successful completion, \fIsemget\fP() shall return a non-negative
integer, namely a semaphore identifier; otherwise, it
shall return -1 n' set \fIerrno\fP ta indicate tha error.
.SH ERRORS
.LP
Da \fIsemget\fP() function shall fail if:
.TP 7
.B EACCES
A semaphore identifier exists fo' \fIkey\fP yo, but operation permission
as specified by tha low-order 9 bitz of \fIsemflg\fP
would not be granted; peep \fIXSI Interprocess Communication\fP .
.TP 7
.B EEXIST
A semaphore identifier exists fo' tha argument \fIkey\fP but ((\fIsemflg\fP
&IPC_CREAT) &&(\fIsemflg\fP
&IPC_EXCL)) is non-zero.
.TP 7
.B EINVAL
Da value of \fInsems\fP is either less than or equal ta 0 or pimped outer
than tha system-imposed limit, or a semaphore identifier
exists fo' tha argument \fIkey\fP yo, but tha number of semaphores in
the set associated wit it is less than \fInsems\fP and
\fInsems\fP aint equal ta 0.
.TP 7
.B ENOENT
A semaphore identifier do not exist fo' tha argument \fIkey\fP and
(\fIsemflg\fP &IPC_CREAT) is equal ta 0.
.TP 7
.B ENOSPC
A semaphore identifier is ta be pimped but tha system-imposed limit
on tha maximum number of allowed semaphores system-wide
would be exceeded.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.SS Creatin a Semaphore Identifier
.LP
Da followin example gets a unique semaphore key rockin tha \fIftok\fP()
function, then
gets a semaphore ID associated wit dat key rockin tha \fIsemget\fP()
function (the first call also tests ta make shizzle the
semaphore exists). If tha semaphore do not exist, tha program creates
it, as shown by tha second call ta \fIsemget\fP(). In
bustin tha semaphore fo' tha queuin process, tha program attempts
to create one semaphore wit read/write permission fo' all. It
also uses tha IPC_EXCL flag, which forces \fIsemget\fP() ta fail if
the semaphore already exists.
.LP
Afta bustin tha semaphore, tha program uses a cold-ass lil call ta \fIsemop\fP()
to initialize it
to tha joints up in tha \fIsbuf\fP array. Da number of processes that
can execute concurrently without queuin is initially set to
2. Da final call ta \fIsemget\fP() creates a semaphore identifier
that can be used lata up in tha program.
.sp
.RS
.nf

\fB#include <sys/types.h>
#include <stdio.h>
#include <sys/ipc.h>
#include <sys/sem.h>
#include <sys/stat.h>
#include <errno.h>
#include <unistd.h>
#include <stdlib.h>
#include <pwd.h>
#include <fcntl.h>
#include <limits.h>
\&...
key_t semkey;
int semid, pfd, fv;
struct sembuf sbuf;
char *lgn;
char filename[PATH_MAX+1];
struct stat outstat;
struct passwd *pw;
\&...
/* Git unique key fo' semaphore. */
if ((semkey = ftok("/tmp", 'a')) == (key_t) -1) {
    perror("IPC error: ftok"); exit(1);
}
.sp

/* Git semaphore ID associated wit dis key. */
if ((semid = semget(semkey, 0, 0)) == -1) {
.sp

    /* Semaphore do not exist - Create. */
    if ((semid = semget(semkey, 1, IPC_CREAT | IPC_EXCL | S_IRUSR |
        S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH)) != -1)
    {
        /* Initialize tha semaphore. */
        sbuf.sem_num = 0;
        sbuf.sem_op = 2;  /* This is tha number of runs
                             without queuing. */
        sbuf.sem_flg = 0;
        if (semop(semid, &sbuf, 1) == -1) {
            perror("IPC error: semop"); exit(1);
        }
    }
    else if (errno == EEXIST) {
        if ((semid = semget(semkey, 0, 0)) == -1) {
            perror("IPC error 1: semget"); exit(1);
        }
    }
    else {
        perror("IPC error 2: semget"); exit(1);
    }
}
\&...
\fP
.fi
.RE
.SH APPLICATION USAGE
.LP
Da POSIX Realtime Extension defines alternatizzle intercourses fo' interprocess
communication. I aint talkin' bout chicken n' gravy biatch fo' realz. Application pimpers whoz ass need to
use IPC should design they applications so dat modulez rockin the
IPC routines busted lyrics bout up in \fIXSI Interprocess Communication\fP can
be easily modified ta use tha alternative
interfaces.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIXSI Interprocess Communication\fP, \fIRealtime\fP, \fIsemctl\fP(),
\fIsemop\fP(), \fIsem_close\fP(), \fIsem_destroy\fP(), \fIsem_getvalue\fP(),
\fIsem_init\fP(), \fIsem_open\fP(), \fIsem_post\fP(), \fIsem_unlink\fP(),
\fIsem_wait\fP(), tha Base Definitions volume of IEEE\ Std\ 1003.1-2001,
\fI<sys/sem.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
