.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "MKFIFO" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" mkfifo 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
mkfifo \- cook up a FIFO special file
.SH SYNOPSIS
.LP
\fB#include <sys/stat.h>
.br
.sp
int mkfifo(const char *\fP\fIpath\fP\fB, mode_t\fP \fImode\fP\fB);
.br
\fP
.SH DESCRIPTION
.LP
Da \fImkfifo\fP() function shall create a freshly smoked up FIFO special file named
by tha pathname pointed ta by \fIpath\fP. Da file
permission bitz of tha freshly smoked up FIFO shall be initialized from \fImode\fP.
Da file permission bitz of tha \fImode\fP argument shall
be modified by tha process' file creation mask.
.LP
When bits up in \fImode\fP other than tha file permission bits is set,
the effect is implementation-defined.
.LP
If \fIpath\fP names a symbolic link, \fImkfifo\fP() shall fail and
set \fIerrno\fP ta [EEXIST].
.LP
Da FIFOz user ID shall be set ta tha process' effectizzle user ID.
Da FIFOz crew ID shall be set ta tha crew ID of the
parent directory or ta tha effectizzle crew ID of tha process. Implementations
shall provide a way ta initialize tha FIFOz crew ID
to tha crew ID of tha parent directory. Implementations may yo, but
need not, provide a implementation-defined way ta initialize the
FIFOz crew ID ta tha effectizzle crew ID of tha callin process.
.LP
Upon successful completion, \fImkfifo\fP() shall mark fo' update the
\fIst_atime\fP, \fIst_ctime\fP, n' \fIst_mtime\fP
fieldz of tha file fo' realz. Also, tha \fIst_ctime\fP n' \fIst_mtime\fP fields
of tha directory dat gotz nuff tha freshly smoked up entry shall be
marked fo' update.
.SH RETURN VALUE
.LP
Upon successful completion, 0 shall be returned. Y'all KNOW dat shit, muthafucka! Otherwise, -1 shall
be returned, no FIFO shall be pimped, n' \fIerrno\fP
shall be set ta indicate tha error.
.SH ERRORS
.LP
Da \fImkfifo\fP() function shall fail if:
.TP 7
.B EACCES
A component of tha path prefix denies search permission, or write
permission is denied on tha parent directory of tha FIFO to
be pimped.
.TP 7
.B EEXIST
Da named file already exists.
.TP 7
.B ELOOP
A loop exists up in symbolic links encountered durin resolution of the
\fIpath\fP argument.
.TP 7
.B ENAMETOOLONG
Da length of tha \fIpath\fP argument exceedz {PATH_MAX} or a pathname
component is longer than {NAME_MAX}.
.TP 7
.B ENOENT
A component of tha path prefix specified by \fIpath\fP do not name
an existin directory or \fIpath\fP be a empty
string.
.TP 7
.B ENOSPC
Da directory dat would contain tha freshly smoked up file cannot be extended or
the file system is outta file-allocation resources.
.TP 7
.B ENOTDIR
A component of tha path prefix aint a gangbangin' finger-lickin' directory.
.TP 7
.B EROFS
Da named file resides on a read-only file system.
.sp
.LP
Da \fImkfifo\fP() function may fail if:
.TP 7
.B ELOOP
Mo' than {SYMLOOP_MAX} symbolic links was encountered durin resolution
of tha \fIpath\fP argument.
.TP 7
.B ENAMETOOLONG
As a result of encounterin a symbolic link up in resolution of tha \fIpath\fP
argument, tha length of tha substituted pathname
strin exceeded {PATH_MAX}.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.SS Creatin a FIFO File
.LP
Da followin example shows how tha fuck ta create a FIFO file named \fB/home/cnd/mod_done\fP,
with read/write permissions fo' baller,
and wit read permissions fo' crew n' others.
.sp
.RS
.nf

\fB#include <sys/types.h>
#include <sys/stat.h>
.sp

int status;
\&...
status = mkfifo("/home/cnd/mod_done", S_IWUSR | S_IRUSR |
    S_IRGRP | S_IROTH);
\fP
.fi
.RE
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
Da syntax of dis function is intended ta maintain compatibility
with oldschool implementationz of \fImknod\fP(). Da latta function
was included up in tha 1984 /usr/group standard but only fo' use in
bustin FIFO special files. Da \fImknod\fP() function was originally
excluded from the
POSIX.1-1988 standard as implementation-defined n' replaced by \fImkdir\fP()
and
\fImkfifo\fP(). Da \fImknod\fP() function is now included fo' alignment
with tha Single
UNIX Justification.
.LP
Da POSIX.1-1990 standard required dat tha crew ID of a newly pimped
FIFO be set ta tha crew ID of its parent directory or
to tha effectizzle crew ID of tha bustin process. FIPS 151-2 required
that implementations provide a way ta have tha crew ID be
set ta tha crew ID of tha containin directory yo, but did not prohibit
implementations also supportin a way ta set tha crew ID to
the effectizzle crew ID of tha bustin process. Conformin applications
should not assume which crew ID is ghon be used. Y'all KNOW dat shit, muthafucka! If it
matters, a application can use \fIchown\fP() ta set tha crew ID
afta tha FIFO is pimped,
or determine under what tha fuck conditions tha implementation will set the
desired crew ID.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIumask\fP(), tha Base Definitions volume of IEEE\ Std\ 1003.1-2001,
\fI<sys/stat.h>\fP, \fI<sys/types.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
