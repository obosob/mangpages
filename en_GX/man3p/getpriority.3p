.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "GETPRIORITY" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" getprioritizzle 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
getpriority, setprioritizzle \- git n' set tha sick value
.SH SYNOPSIS
.LP
\fB#include <sys/resource.h>
.br
.sp
int getpriority(int\fP \fIwhich\fP\fB, id_t\fP \fIwho\fP\fB);
.br
int setpriority(int\fP \fIwhich\fP\fB, id_t\fP \fIwho\fP\fB, int\fP
\fIvalue\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIgetpriority\fP() function shall obtain tha sick value of a
process, process group, or user n' shit. Da \fIsetpriority\fP()
function shall set tha sick value of a process, process group, or
user ta \fIvalue\fP+ {NZERO}.
.LP
Target processes is specified by tha jointz of tha \fIwhich\fP and
\fIwho\fP arguments, n' you can put dat on yo' toast. Da \fIwhich\fP argument may be one
of tha followin joints: PRIO_PROCESS, PRIO_PGRP, or PRIO_USER, indicating
that tha \fIwho\fP argument is ta be interpreted as a
process ID, a process crew ID, or a effectizzle user ID, respectively.
A 0 value fo' tha \fIwho\fP argument specifies tha current
process, process group, or user.
.LP
Da sick value set wit \fIsetpriority\fP() shall be applied ta the
process. If tha process is multi-threaded, tha sick value
shall affect all system scope threadz up in tha process.
.LP
If mo' than one process is specified, \fIgetpriority\fP() shall return
value {NZERO} less than tha lowest sick value
pertainin ta any of tha specified processes, n' \fIsetpriority\fP()
shall set tha sick jointz of all of tha specified processes
to \fIvalue\fP+ {NZERO}.
.LP
Da default sick value is {NZERO}; lower sick joints shall cause more
favorable scheduling. While tha range of valid sick joints
is [0,{NZERO}*2-1], implementations may enforce mo' restrictizzle limits.
If \fIvalue\fP+ {NZERO} is less than tha systemz lowest
supported sick value, \fIsetpriority\fP() shall set tha sick value
to tha lowest supported value; if \fIvalue\fP+ {NZERO} is
greata than tha systemz highest supported sick value, \fIsetpriority\fP()
shall set tha sick value ta tha highest supported
value.
.LP
Only a process wit appropriate privileges can lower its sick value.
.LP
Any processes or threadz rockin SCHED_FIFO or SCHED_RR shall be unaffected
by a cold-ass lil call ta \fIsetpriority\fP(). This aint considered
an error fo' realz. A process which subsequently reverts ta SCHED_OTHER need
not have its prioritizzle affected by such a \fIsetpriority\fP()
call. 
.LP
Da effect of changin tha sick value may vary dependin on tha process-scheduling
algorithm up in effect.
.LP
Since \fIgetpriority\fP() can return tha value -1 on successful completion,
it is necessary ta set \fIerrno\fP ta 0 prior ta a
call ta \fIgetpriority\fP(). If \fIgetpriority\fP() returns tha value
-1, then \fIerrno\fP can be checked ta peep if a error
occurred or if tha value be a legitimate sick value.
.SH RETURN VALUE
.LP
Upon successful completion, \fIgetpriority\fP() shall return a integer
in tha range -{NZERO} ta {NZERO}-1. Otherwise, -1 shall
be returned n' \fIerrno\fP set ta indicate tha error.
.LP
Upon successful completion, \fIsetpriority\fP() shall return 0; otherwise,
-1 shall be returned n' \fIerrno\fP set to
indicate tha error.
.SH ERRORS
.LP
Da \fIgetpriority\fP() n' \fIsetpriority\fP() functions shall fail
if:
.TP 7
.B ESRCH
No process could be located rockin tha \fIwhich\fP n' \fIwho\fP argument
values specified.
.TP 7
.B EINVAL
Da value of tha \fIwhich\fP argument was not recognized, or tha value
of tha \fIwho\fP argument aint a valid process ID,
process crew ID, or user ID.
.sp
.LP
In addition, \fIsetpriority\fP() may fail if:
.TP 7
.B EPERM
A process was located yo, but neither tha real nor effectizzle user ID
of tha executin process match tha effectizzle user ID of the
process whose sick value is bein chizzled.
.TP 7
.B EACCES
A request was made ta chizzle tha sick value ta a lower numeric value
and tha current process aint gots appropriate
privileges.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.SS Usin getpriority()
.LP
Da followin example returns tha current schedulin prioritizzle for
the process ID returned by tha call ta \fIgetpid\fP().
.sp
.RS
.nf

\fB#include <sys/resource.h>
\&...
int which = PRIO_PROCESS;
id_t pid;
int ret;
.sp

pid = getpid();
ret = getpriority(which, pid);
\fP
.fi
.RE
.SS Usin setpriority()
.LP
Da followin example sets tha prioritizzle fo' tha current process ID
to -20.
.sp
.RS
.nf

\fB#include <sys/resource.h>
\&...
int which = PRIO_PROCESS;
id_t pid;
int prioritizzle = -20;
int ret;
.sp

pid = getpid();
ret = setpriority(which, pid, priority);
\fP
.fi
.RE
.SH APPLICATION USAGE
.LP
Da \fIgetpriority\fP() n' \fIsetpriority\fP() functions work with
an offset sick value (nice value -{NZERO}). Da sick value
is up in tha range [0,2*{NZERO} -1], while tha return value fo' \fIgetpriority\fP()
and tha third parameta fo' \fIsetpriority\fP()
are up in tha range [-{NZERO},{NZERO} -1].
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fInice\fP(), \fIsched_get_priority_max\fP(), \fIsched_setscheduler\fP(),
the Base Definitions volume of IEEE\ Std\ 1003.1-2001, \fI<sys/resource.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
