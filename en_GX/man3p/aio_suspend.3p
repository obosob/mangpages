.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "AIO_SUSPEND" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" aio_suspend 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
aio_suspend \- wait fo' a asynchronous I/O request (\fBREALTIME\fP)
.SH SYNOPSIS
.LP
\fB#include <aio.h>
.br
.sp
int aio_suspend(const struct aiocb * const\fP \fIlist\fP\fB[], int\fP
\fInent\fP\fB,
.br
\ \ \ \ \ \  const struct timespec *\fP\fItimeout\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIaio_suspend\fP() function shall suspend tha callin thread
until at least one of tha asynchronous I/O operations
referenced by tha \fIlist\fP argument has completed, until a signal
interrupts tha function, or, if \fItimeout\fP aint NULL,
until tha time interval specified by \fItimeout\fP has passed. Y'all KNOW dat shit, muthafucka! If
any of tha \fBaiocb\fP structures up in tha list correspond to
completed asynchronous I/O operations (that is, tha error status for
the operation aint equal ta [EINPROGRESS]) all up in tha time of
the call, tha function shall return without suspendin tha calling
thread. Y'all KNOW dat shit, muthafucka! Da \fIlist\fP argument be a array of pointas to
asynchronous I/O control blocks. Da \fInent\fP argument indicates
the number of elements up in tha array. Each \fBaiocb\fP
structure pointed ta has been used up in initiatin a asynchronous I/O
request via \fIaio_read\fP(), \fIaio_write\fP(), or \fIlio_listio\fP().
This array may contain NULL pointers, which is ignored. Y'all KNOW dat shit, muthafucka! If dis array
gotz nuff pointas dat refer ta \fBaiocb\fP structures dat have not
been used up in submittin asynchronous I/O, tha effect is
undefined.
.LP
If tha time interval indicated up in tha \fBtimespec\fP structure pointed
to by \fItimeout\fP passes before any of tha I/O
operations referenced by \fIlist\fP is completed, then \fIaio_suspend\fP()
shall return wit a error. Shiiit, dis aint no joke.  If the
Monotonic Clock option is supported, tha clock dat shall be used
to measure dis time interval shall be tha CLOCK_MONOTONIC clock.
.SH RETURN VALUE
.LP
If tha \fIaio_suspend\fP() function returns afta one or mo' asynchronous
I/O operations have completed, tha function shall
return zero. Otherwise, tha function shall return a value of -1 and
set \fIerrno\fP ta indicate tha error.
.LP
Da application may determine which asynchronous I/O completed by
scannin tha associated error n' return status rockin \fIaio_error\fP()
and \fIaio_return\fP(),
respectively.
.SH ERRORS
.LP
Da \fIaio_suspend\fP() function shall fail if:
.TP 7
.B EAGAIN
No asynchronous I/O indicated up in tha list referenced by \fIlist\fP
completed up in tha time interval indicated by
\fItimeout\fP.
.TP 7
.B EINTR
A signal interrupted tha \fIaio_suspend\fP() function. I aint talkin' bout chicken n' gravy biatch. Note that,
since each asynchronous I/O operation may possibly provoke a
signal when it completes, dis error return may be caused by tha completion
of one (or more) of tha straight-up I/O operations being
awaited.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
Da \fIaio_suspend\fP() function is part of tha Asynchronous Input
and Output option n' need not be available on all
implementations.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIaio_read\fP(), \fIaio_write\fP(), \fIlio_listio\fP(), tha Base
Definitions volume of IEEE\ Std\ 1003.1-2001, \fI<aio.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
