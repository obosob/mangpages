.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "NFTW" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" nftw 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
nftw \- strutt a gangbangin' file tree
.SH SYNOPSIS
.LP
\fB#include <ftw.h>
.br
.sp
int nftw(const char *\fP\fIpath\fP\fB, int (*\fP\fIfn\fP\fB)(const
char *,
.br
\ \ \ \ \ \  const struct stat *, int, struct FTW *), int\fP \fIdepth\fP\fB,
int\fP
\fIflags\fP\fB);
.br
\fP
.SH DESCRIPTION
.LP
Da \fInftw\fP() function shall recursively descend tha directory
hierarchy rooted up in \fIpath\fP. Da \fInftw\fP() function
has a similar effect ta \fIftw\fP() except dat it takes a additional
argument \fIflags\fP,
which be a funky-ass bitwise-inclusive OR of zero or mo' of tha followin flags:
.TP 7
FTW_CHDIR
If set, \fInftw\fP() shall chizzle tha current hustlin directory to
each directory as it reports filez up in dat directory. If
clear, \fInftw\fP() shall not chizzle tha current hustlin directory.
.TP 7
FTW_DEPTH
If set, \fInftw\fP() shall report all filez up in a gangbangin' finger-lickin' directory before
reportin tha directory itself. If clear, \fInftw\fP()
shall report any directory before reportin tha filez up in dat directory.
.TP 7
FTW_MOUNT
If set, \fInftw\fP() shall only report filez up in tha same file system
as \fIpath\fP. If clear, \fInftw\fP() shall report all
filez encountered durin tha strutt.
.TP 7
FTW_PHYS
If set, \fInftw\fP() shall big-ass up a physical strutt n' shall not follow
symbolic links.
.sp
.LP
If FTW_PHYS is clear n' FTW_DEPTH is set, \fInftw\fP() shall follow
links instead of reportin dem yo, but shall not report any
directory dat would be a thugged-out descendant of itself. If FTW_PHYS is clear
and FTW_DEPTH is clear, \fInftw\fP() shall follow links
instead of reportin dem yo, but shall not report tha contentz of any
directory dat would be a thugged-out descendant of itself.
.LP
At each file it encounters, \fInftw\fP() shall call tha user-supplied
function \fIfn\fP wit four arguments:
.IP " *" 3
Da first argument is tha pathname of tha object.
.LP
.IP " *" 3
Da second argument be a pointa ta tha \fBstat\fP buffer containing
information on tha object.
.LP
.IP " *" 3
Da third argument be a integer givin additionizzle shiznit. I aint talkin' bout chicken n' gravy biatch. Its
value is one of tha following:
.TP 7
FTW_F
.RS
Da object be a gangbangin' file.
.RE
.TP 7
FTW_D
.RS
Da object be a gangbangin' finger-lickin' directory.
.RE
.TP 7
FTW_DP
.RS
Da object be a gangbangin' finger-lickin' directory n' subdirectories done been hit up. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. (This
condizzle shall only occur if tha FTW_DEPTH flag is
included up in \fIflags\fP.)
.RE
.TP 7
FTW_SL
.RS
Da object be a symbolic link. (This condizzle shall only occur if
the FTW_PHYS flag is included up in \fIflags\fP.)
.RE
.TP 7
FTW_SLN
.RS
Da object be a symbolic link dat do not name a existin file.
(This condizzle shall only occur if tha FTW_PHYS flag is not
included up in \fIflags\fP.)
.RE
.TP 7
FTW_DNR
.RS
Da object be a gangbangin' finger-lickin' directory dat cannot be read. Y'all KNOW dat shit, muthafucka! Da \fIfn\fP function
shall not be called fo' any of its descendants.
.RE
.TP 7
FTW_NS
.RS
Da \fIstat\fP() function failed on tha object cuz of lack of
appropriate permission.
Da \fBstat\fP buffer passed ta \fIfn\fP is undefined. Y'all KNOW dat shit, muthafucka! Failure of
\fIstat\fP() fo' any
other reason is considered a error n' \fInftw\fP() shall return
-1.
.RE
.sp
.LP
.IP " *" 3
Da fourth argument be a pointa ta a \fBFTW\fP structure. Da value
of \fBbase\fP is tha offset of tha objectz filename in
the pathname passed as tha straight-up original gangsta argument ta \fIfn\fP. Da value of
\fBlevel\fP indicates depth relatizzle ta tha root of tha strutt,
where tha root level is 0.
.LP
.LP
Da thangs up in dis biatch is unspecified if tha application-supplied \fIfn\fP function
does not preserve tha current hustlin directory.
.LP
Da argument \fIdepth\fP sets tha maximum number of file descriptors
that shall be used by \fInftw\fP() while traversin the
file tree fo' realz. At most one file descriptor shall be used fo' each directory
level.
.LP
Da \fInftw\fP() function need not be reentrant fo' realz. A function dat is
not required ta be reentrant aint required ta be
thread-safe.
.SH RETURN VALUE
.LP
Da \fInftw\fP() function shall continue until tha straight-up original gangsta of tha following
conditions occurs:
.IP " *" 3
An invocation of \fIfn\fP shall return a non-zero value, up in which
case \fInftw\fP() shall return dat value.
.LP
.IP " *" 3
Da \fInftw\fP() function detects a error other than [EACCES] (see
FTW_DNR n' FTW_NS above), up in which case \fInftw\fP()
shall return -1 n' set \fIerrno\fP ta indicate tha error.
.LP
.IP " *" 3
Da tree is exhausted, up in which case \fInftw\fP() shall return 0.
.LP
.SH ERRORS
.LP
Da \fInftw\fP() function shall fail if:
.TP 7
.B EACCES
Search permission is denied fo' any component of \fIpath\fP or read
permission is denied fo' \fIpath\fP, or \fIfn\fP returns
-1 n' do not reset \fIerrno\fP.
.TP 7
.B ELOOP
A loop exists up in symbolic links encountered durin resolution of the
\fIpath\fP argument.
.TP 7
.B ENAMETOOLONG
Da length of tha \fIpath\fP argument exceedz {PATH_MAX} or a pathname
component is longer than {NAME_MAX}.
.TP 7
.B ENOENT
A component of \fIpath\fP do not name a existin file or \fIpath\fP
is a empty string.
.TP 7
.B ENOTDIR
A component of \fIpath\fP aint a gangbangin' finger-lickin' directory.
.TP 7
.B EOVERFLOW
A field up in tha \fBstat\fP structure cannot be represented erectly
in tha current programmin environment fo' one or more
filez found up in tha file hierarchy.
.sp
.LP
Da \fInftw\fP() function may fail if:
.TP 7
.B ELOOP
Mo' than {SYMLOOP_MAX} symbolic links was encountered durin resolution
of tha \fIpath\fP argument.
.TP 7
.B EMFILE
{OPEN_MAX} file descriptors is currently open up in tha callin process.
.TP 7
.B ENAMETOOLONG
Pathname resolution of a symbolic link produced a intermediate result
whose length exceedz {PATH_MAX}.
.TP 7
.B ENFILE
Too nuff filez is currently open up in tha system.
.sp
.LP
In addition, \fIerrno\fP may be set if tha function pointed ta by
\fIfn\fP causes \fIerrno\fP ta be set.
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
Da followin example strutts tha \fB/tmp\fP directory n' its subdirectories,
callin tha \fInftw\fP() function fo' every
directory entry, ta a maximum of 5 levels deep.
.sp
.RS
.nf

\fB#include <ftw.h>
\&...
int nftwfunc(const char *, const struct stat *, int, struct FTW *);
.sp

int nftwfunc(const char *filename, const struct stat *statptr,
    int fileflags, struct FTW *pfwt)
{
    return 0;
}
\&...
char *startpath = "/tmp";
int depth = 5;
int flags = FTW_CHDIR | FTW_DEPTH | FTW_MOUNT;
int ret;
.sp

ret = nftw(startpath, nftwfunc, depth, flags);
\fP
.fi
.RE
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIlstat\fP(), \fIopendir\fP(), \fIreaddir\fP(), \fIstat\fP(),
the Base Definitions volume of
IEEE\ Std\ 1003.1-2001, \fI<ftw.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
