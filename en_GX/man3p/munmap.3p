.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "MUNMAP" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" munmap 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
munmap \- unmap pagez of memory
.SH SYNOPSIS
.LP
\fB#include <sys/mman.h>
.br
.sp
int munmap(void *\fP\fIaddr\fP\fB, size_t\fP \fIlen\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fImunmap\fP() function shall remove any mappings fo' dem entire
pages containin any part of tha address space of the
process startin at \fIaddr\fP n' continuin fo' \fIlen\fP bytes.
Further references ta these pages shall result up in the
generation of a SIGSEGV signal ta tha process. If there be no mappings
in tha specified address range, then \fImunmap\fP() has no
effect.
.LP
Da implementation shall require dat \fIaddr\fP be a multiple of
the page size {PAGESIZE}.
.LP
If a mappin ta be removed was private, any modifications made in
this address range shall be discarded.
.LP
Any memory locks (see \fImlock\fP() n' \fImlockall\fP()) associated
with
this address range shall be removed, as if by a appropriate call
to \fImunlock\fP(). 
.LP
If a mappin removed from a typed memory object causes tha corresponding
address range of tha memory pool ta be inaccessible by any
process up in tha system except all up in allocatable mappings (that is,
mappingz of typed memory objects opened wit the
POSIX_TYPED_MEM_MAP_ALLOCATABLE flag), then dat range of tha memory
pool shall become deallocated n' may become available to
satisfy future typed memory allocation requests.
.LP
A mappin removed from a typed memory object opened wit tha POSIX_TYPED_MEM_MAP_ALLOCATABLE
flag shall not affect up in any way
the availabilitizzle of dat typed memory fo' allocation. I aint talkin' bout chicken n' gravy biatch. 
.LP
Da behavior of dis function is unspecified if tha mappin was not
established by a cold-ass lil call ta \fImmap\fP().
.SH RETURN VALUE
.LP
Upon successful completion, \fImunmap\fP() shall return 0; otherwise,
it shall return -1 n' set \fIerrno\fP ta indicate the
error.
.SH ERRORS
.LP
Da \fImunmap\fP() function shall fail if:
.TP 7
.B EINVAL
Addresses up in tha range [\fIaddr\fP,\fIaddr\fP+\fIlen\fP) is outside
the valid range fo' tha address space of a
process.
.TP 7
.B EINVAL
Da \fIlen\fP argument is 0.
.TP 7
.B EINVAL
Da \fIaddr\fP argument aint a multiple of tha page size as returned
by \fIsysconf\fP().
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
Da \fImunmap\fP() function is only supported if tha Memory Mapped
Filez option or tha Shared Memory Objects option is
supported.
.SH RATIONALE
.LP
Da \fImunmap\fP() function correspondz ta SVR4, just as tha \fImmap\fP()
function
does.
.LP
It be possible dat a application has applied process memory locking
to a region dat gotz nuff shared memory. If dis has
occurred, tha \fImunmap\fP() call ignores dem locks and, if necessary,
causes dem locks ta be removed.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fImlock\fP(), \fImlockall\fP(), \fImmap\fP(),
\fIposix_typed_mem_open\fP(), \fIsysconf\fP(), tha Base
Definitions volume of IEEE\ Std\ 1003.1-2001, \fI<signal.h>\fP, \fI<sys/mman.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
