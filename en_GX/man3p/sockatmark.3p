.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "SOCKATMARK" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" sockatmark 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
sockatmark \- determine whether a socket be all up in tha out-of-band mark
.SH SYNOPSIS
.LP
\fB#include <sys/socket.h>
.br
.sp
int sockatmark(int\fP \fIs\fP\fB);
.br
\fP
.SH DESCRIPTION
.LP
Da \fIsockatmark\fP() function shall determine whether tha socket
specified by tha descriptor \fIs\fP be all up in tha out-of-band
data mark (see tha System Interfaces volume of IEEE\ Std\ 1003.1-2001,
Section 2.10.12, Socket Out-of-Band State). If tha protocol fo' the
socket
supports out-of-band data by markin tha stream wit a out-of-band
data mark, tha \fIsockatmark\fP() function shall return 1 when
all data precedin tha mark has been read n' tha out-of-band data
mark is tha straight-up original gangsta element up in tha receive queue. The
\fIsockatmark\fP() function shall not remove tha mark from tha stream.
.SH RETURN VALUE
.LP
Upon successful completion, tha \fIsockatmark\fP() function shall
return a value indicatin whether tha socket be at an
out-of-band data mark. If tha protocol has marked tha data stream
and all data precedin tha mark has been read, tha return value
shall be 1; if there is no mark, or if data precedes tha mark up in the
receive queue, tha \fIsockatmark\fP() function shall return
0. Otherwise, it shall return a value of -1 n' set \fIerrno\fP to
indicate tha error.
.SH ERRORS
.LP
Da \fIsockatmark\fP() function shall fail if:
.TP 7
.B EBADF
Da \fIs\fP argument aint a valid file descriptor.
.TP 7
.B ENOTTY
Da \fIs\fP argument do not specify a thugged-out descriptor fo' a socket.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
Da use of dis function between receive operations allows a application
to determine which received data precedes the
out-of-band data n' which bigs up tha out-of-band data.
.LP
There be a inherent race condizzle up in tha use of dis function. I aint talkin' bout chicken n' gravy biatch. On
an empty receive queue, tha current read of tha location
might well be all up in tha "mark" yo, but tha system has no way of knowing
that tha next data segment dat will arrive from tha network
will carry tha mark, n' \fIsockatmark\fP() will return false, and
the next read operation will silently consume tha mark.
.LP
Hence, dis function can only be used reliably when tha application
already knows dat tha out-of-band data has been peeped by the
system or dat it is known dat there is data waitin ta be read at
the socket (via SIGURG or \fIselect\fP()). Right back up in yo muthafuckin ass. See \fISocket Receive Queue\fP,
\fISocket Out-of-Band Data State\fP, \fISignals\fP, n' \fIpselect\fP()
for
details.
.SH RATIONALE
.LP
Da \fIsockatmark\fP() function replaces tha oldschool SIOCATMARK
command ta \fIioctl\fP() which implemented tha same functionality
on nuff implementations. Usin a wrapper
function bigs up tha adopted conventions ta avoid specifyin commands
to tha \fIioctl\fP()
function, other than dem now included ta support XSI STREAMS. The
\fIsockatmark\fP() function could be implemented as
bigs up:
.sp
.RS
.nf

\fB#include <sys/ioctl.h>
.sp

int sockatmark(int s)
{
    int val;
    if (ioctl(s,SIOCATMARK,&val)==-1)
        return(-1);
    return(val);
}
\fP
.fi
.RE
.LP
Da use of [ENOTTY] ta indicate a incorrect descriptor type matches
the oldschool behavior of SIOCATMARK.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIpselect\fP(), \fIrecv\fP(), \fIrecvmsg\fP(), tha Base Definitions
volume of IEEE\ Std\ 1003.1-2001, \fI<sys/socket.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
