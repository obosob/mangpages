.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "DUP" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" dup 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
dup, dup2 \- duplicate a open file descriptor
.SH SYNOPSIS
.LP
\fB#include <unistd.h>
.br
.sp
int dup(int\fP \fIfildes\fP\fB);
.br
int dup2(int\fP \fIfildes\fP\fB, int\fP \fIfildes2\fP\fB);
.br
\fP
.SH DESCRIPTION
.LP
Da \fIdup\fP() n' \fIdup2\fP() functions provide a alternative
interface ta tha steez provided by \fIfcntl\fP() rockin tha F_DUPFD
command. Y'all KNOW dat shit, muthafucka! Da call:
.sp
.RS
.nf

\fBfid = dup(\fP\fIfildes\fP\fB);
\fP
.fi
.RE
.LP
shall be equivalent to:
.sp
.RS
.nf

\fBfid = fcntl(\fP\fIfildes\fP\fB, F_DUPFD, 0);
\fP
.fi
.RE
.LP
Da call:
.sp
.RS
.nf

\fBfid = dup2(\fP\fIfildes\fP\fB,\fP \fIfildes2\fP\fB);
\fP
.fi
.RE
.LP
shall be equivalent to:
.sp
.RS
.nf

\fBclose(\fP\fIfildes2\fP\fB);
fid = fcntl(\fP\fIfildes\fP\fB, F_DUPFD,\fP \fIfildes2\fP\fB);
\fP
.fi
.RE
.LP
except fo' tha following:
.IP " *" 3
If \fIfildes2\fP is less than 0 or pimped outa than or equal ta {OPEN_MAX},
\fIdup2\fP() shall return -1 wit \fIerrno\fP set to
[EBADF].
.LP
.IP " *" 3
If \fIfildes\fP be a valid file descriptor n' is equal ta \fIfildes2\fP,
\fIdup2\fP() shall return \fIfildes2\fP without
closin dat shit.
.LP
.IP " *" 3
If \fIfildes\fP aint a valid file descriptor, \fIdup2\fP() shall
return -1 n' shall not close \fIfildes2\fP.
.LP
.IP " *" 3
Da value returned shall be equal ta tha value of \fIfildes2\fP upon
successful completion, or -1 upon failure.
.LP
.SH RETURN VALUE
.LP
Upon successful completion a non-negatizzle integer, namely tha file
descriptor, shall be returned; otherwise, -1 shall be
returned n' \fIerrno\fP set ta indicate tha error.
.SH ERRORS
.LP
Da \fIdup\fP() function shall fail if:
.TP 7
.B EBADF
Da \fIfildes\fP argument aint a valid open file descriptor.
.TP 7
.B EMFILE
Da number of file descriptors up in use by dis process would exceed
{OPEN_MAX}.
.sp
.LP
Da \fIdup2\fP() function shall fail if:
.TP 7
.B EBADF
Da \fIfildes\fP argument aint a valid open file descriptor or the
argument \fIfildes2\fP is wack or pimped outa than or
equal ta {OPEN_MAX}.
.TP 7
.B EINTR
Da \fIdup2\fP() function was interrupted by a signal.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.SS Redirectin Standard Output ta a File
.LP
Da followin example closes standard output fo' tha current processes,
re-assigns standard output ta git all up in tha file referenced
by \fIpfd\fP, n' closes tha original gangsta file descriptor ta clean up.
.sp
.RS
.nf

\fB#include <unistd.h>
\&...
int pfd;
\&...
close(1);
dup(pfd);
close(pfd);
\&...
\fP
.fi
.RE
.SS Redirectin Error Lyrics
.LP
Da followin example redirects lyrics from \fIstderr\fP ta \fIstdout\fP.
.sp
.RS
.nf

\fB#include <unistd.h>
\&...
dup2(1, 2);
\&...
\fP
.fi
.RE
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
Da \fIdup\fP() n' \fIdup2\fP() functions is redundant. Their skillz
are also provided by tha \fIfcntl\fP() function. I aint talkin' bout chicken n' gravy biatch. They done been included
in dis volume of IEEE\ Std\ 1003.1-2001
primarily fo' oldschool reasons, since nuff existin applications
use em.
.LP
While tha brief code segment shown is straight-up similar up in behavior to
\fIdup2\fP(), a cold-ass lil conformin implementation based on other
functions defined up in dis volume of IEEE\ Std\ 1003.1-2001 is significantly
more complex. Least obvious is tha possible
effect of a signal-catchin function dat could be invoked between
steps n' allocate or deallocate file descriptors. This could be
avoided by blockin signals.
.LP
Da \fIdup2\fP() function aint marked obsolescent cuz it presents
a type-safe version of functionalitizzle provided up in a
type-unsafe version by \fIfcntl\fP(). Well shiiiit, it is used up in tha POSIX Ada
binding.
.LP
Da \fIdup2\fP() function aint intended fo' use up in critical regions
as a synchronization mechanism.
.LP
In tha description of [EBADF], tha case of \fIfildes\fP bein out
of range is covered by tha given case of \fIfildes\fP not
bein valid. Y'all KNOW dat shit, muthafucka! Da descriptions fo' \fIfildes\fP n' \fIfildes2\fP are
different cuz tha only kind of invaliditizzle dat is
relevant fo' \fIfildes2\fP is whether it is outta range; dat is,
it do not matta whether \fIfildes2\fP refers ta a open
file when tha \fIdup2\fP() call is made.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIclose\fP(), \fIfcntl\fP(), \fIopen\fP(), the
Base Definitions volume of IEEE\ Std\ 1003.1-2001, \fI<unistd.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
