.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "POSIX_TYPED_MEM_OPEN" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" posix_typed_mem_open 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
posix_typed_mem_open \- open a typed memory object (\fBADVANCED REALTIME\fP)
.SH SYNOPSIS
.LP
\fB#include <sys/mman.h>
.br
.sp
int posix_typed_mem_open(const char *\fP\fIname\fP\fB, int\fP \fIoflag\fP\fB,
int\fP \fItflag\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIposix_typed_mem_open\fP() function shall establish a cold-ass lil connection
between tha typed memory object specified by tha string
pointed ta by \fIname\fP n' a gangbangin' file descriptor. Shiiit, dis aint no joke. Well shiiiit, it shall create an
open file description dat refers ta tha typed memory object
and a gangbangin' file descriptor dat refers ta dat open file description. I aint talkin' bout chicken n' gravy biatch. The
file descriptor is used by other functions ta refer ta that
typed memory object. Well shiiiit, it is unspecified whether tha name appears in
the file system n' is visible ta other functions dat take
pathnames as arguments, n' you can put dat on yo' toast. Da \fIname\fP argument shall conform ta the
construction rulez fo' a pathname. If \fIname\fP begins with
the slash character, then processes callin \fIposix_typed_mem_open\fP()
with tha same value of \fIname\fP shall refer ta the
same typed memory object. If \fIname\fP do not begin wit tha slash
character, tha effect is implementation-defined. Y'all KNOW dat shit, muthafucka! The
interpretation of slash charactas other than tha leadin slash character
in \fIname\fP is implementation-defined.
.LP
Each typed memory object supported up in a system shall be identified
by a name which specifies not only its associated typed
memory pool yo, but also tha path or port by which it be accessed. Y'all KNOW dat shit, muthafucka! That
is, tha same typed memory pool accessed via nuff muthafuckin different
ports shall have nuff muthafuckin different correspondin names. Da binding
between names n' typed memory objects is established up in an
implementation-defined manner n' shit. Unlike shared memory objects, there
is no way within IEEE\ Std\ 1003.1-2001 fo' a program to
create a typed memory object.
.LP
Da value of \fItflag\fP shall determine how tha fuck tha typed memory object
behaves when subsequently mapped by calls ta \fImmap\fP() fo' realz. At most,
one of tha followin flags defined up in \fI<sys/mman.h>\fP may be specified:
.TP 7
POSIX_TYPED_MEM_ALLOCATE
Allocate on \fImmap\fP().
.TP 7
POSIX_TYPED_MEM_ALLOCATE_CONTIG
Allocate contiguously on \fImmap\fP().
.TP 7
POSIX_TYPED_MEM_MAP_ALLOCATABLE
Map on \fImmap\fP(), without affectin allocatability.
.sp
.LP
If \fItflag\fP has tha flag POSIX_TYPED_MEM_ALLOCATE specified, any
subsequent call ta \fImmap\fP() rockin tha returned file descriptor
shall result up in allocation n' mappin of typed
memory from tha specified typed memory pool. Da allocated memory
may be a cold-ass lil contiguous previously unallocated area of tha typed
memory pool or nuff muthafuckin non-contiguous previously unallocated areas
(mapped ta a cold-ass lil contiguous portion of tha process address space).
If \fItflag\fP has tha flag POSIX_TYPED_MEM_ALLOCATE_CONTIG specified,
any subsequent call ta \fImmap\fP() rockin tha returned file descriptor
shall result up in allocation n' mappin of a single
contiguous previously unallocated area of tha typed memory pool (also
mapped ta a cold-ass lil contiguous portion of tha process address space).
If \fItflag\fP has none of tha flags POSIX_TYPED_MEM_ALLOCATE or POSIX_TYPED_MEM_ALLOCATE_CONTIG
specified, any subsequent call to
\fImmap\fP() rockin tha returned file descriptor shall map a application-chosen
area from the
specified typed memory pool such dat dis mapped area becomes unavailable
for allocation until unmapped by all processes. If
\fItflag\fP has tha flag POSIX_TYPED_MEM_MAP_ALLOCATABLE specified,
any subsequent call ta \fImmap\fP() rockin tha returned file descriptor
shall map a application-chosen area from the
specified typed memory pool without a effect on tha availability
of dat area fo' allocation; dat is, mappin such a object
leaves each byte of tha mapped area unallocated if dat shiznit was unallocated
prior ta tha mappin or allocated if dat shiznit was allocated prior
to tha mapping. Da appropriate privilege ta specify tha POSIX_TYPED_MEM_MAP_ALLOCATABLE
flag is implementation-defined.
.LP
If successful, \fIposix_typed_mem_open\fP() shall return a gangbangin' file descriptor
for tha typed memory object dat is tha lowest
numbered file descriptor not currently open fo' dat process. The
open file description is new, n' therefore tha file descriptor
shall not share it wit any other processes. Well shiiiit, it is unspecified whether
the file offset is set. Da FD_CLOEXEC file descriptor flag
associated wit tha freshly smoked up file descriptor shall be cleared.
.LP
Da behavior of \fImsync\fP(), \fIftruncate\fP(), n' all file operations
other than \fImmap\fP(), \fIposix_mem_offset\fP(), \fIposix_typed_mem_get_info\fP(),
\fIfstat\fP(), \fIdup\fP(), \fIdup2\fP(), n' \fIclose\fP(), is unspecified
when passed a
file descriptor connected ta a typed memory object by dis function.
.LP
Da file status flagz of tha open file description shall be set according
to tha value of \fIoflag\fP fo' realz. Applications shall
specify exactly one of tha three access mode joints busted lyrics bout below
and defined up in tha \fI<fcntl.h>\fP header, as tha value of \fIoflag\fP.
.TP 7
O_RDONLY
Open fo' read access only.
.TP 7
O_WRONLY
Open fo' write access only.
.TP 7
O_RDWR
Open fo' read or write access.
.sp
.SH RETURN VALUE
.LP
Upon successful completion, tha \fIposix_typed_mem_open\fP() function
shall return a non-negatizzle integer representin the
lowest numbered unused file descriptor. Shiiit, dis aint no joke. Otherwise, it shall return
-1 n' set \fIerrno\fP ta indicate tha error.
.SH ERRORS
.LP
Da \fIposix_typed_mem_open\fP() function shall fail if:
.TP 7
.B EACCES
Da typed memory object exists n' tha permissions specified by \fIoflag\fP
are denied.
.TP 7
.B EINTR
Da \fIposix_typed_mem_open\fP() operation was interrupted by a signal.
.TP 7
.B EINVAL
Da flags specified up in \fItflag\fP is invalid (more than one of POSIX_TYPED_MEM_ALLOCATE,
POSIX_TYPED_MEM_ALLOCATE_CONTIG, or
POSIX_TYPED_MEM_MAP_ALLOCATABLE is specified).
.TP 7
.B EMFILE
Too nuff file descriptors is currently up in use by dis process.
.TP 7
.B ENAMETOOLONG
Da length of tha \fIname\fP argument exceedz {PATH_MAX} or a pathname
component is longer than {NAME_MAX}.
.TP 7
.B ENFILE
Too nuff file descriptors is currently open up in tha system.
.TP 7
.B ENOENT
Da named typed memory object do not exist.
.TP 7
.B EPERM
Da calla lacks tha appropriate privilege ta specify tha flag POSIX_TYPED_MEM_MAP_ALLOCATABLE
in argument \fItflag\fP.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIclose\fP(), \fIdup\fP(), \fIexec\fP(), \fIfcntl\fP(), \fIfstat\fP()
,
\fIftruncate\fP(), \fImmap\fP(), \fImsync\fP(),
\fIposix_mem_offset\fP(), \fIposix_typed_mem_get_info\fP(), \fIumask\fP(),
the Base
Definitions volume of IEEE\ Std\ 1003.1-2001, \fI<fcntl.h>\fP, \fI<sys/mman.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
