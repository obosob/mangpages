.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "TIMES" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" times 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
times \- git process n' waited-for lil pimp process times
.SH SYNOPSIS
.LP
\fB#include <sys/times.h>
.br
.sp
clock_t times(struct tms *\fP\fIbuffer\fP\fB);
.br
\fP
.SH DESCRIPTION
.LP
Da \fItimes\fP() function shall fill tha \fBtms\fP structure pointed
to by \fIbuffer\fP wit time-accountin shiznit.
Da \fBtms\fP structure is defined up in \fI<sys/times.h>\fP.
.LP
All times is measured up in termz of tha number of clock ticks used.
.LP
Da timez of a terminated lil pimp process shall be included up in tha \fItms_cutime\fP
and \fItms_cstime\fP elementz of tha parent
when \fIwait\fP() or \fIwaitpid\fP() returns the
process ID of dis terminated child. Y'all KNOW dat shit, muthafucka! If a cold-ass lil lil pimp process has not waited
for its children, they times shall not be included up in its
times.
.IP " *" 3
Da \fItms_utime\fP structure member is tha CPU time charged fo' the
execution of user instructionz of tha callin process.
.LP
.IP " *" 3
Da \fItms_stime\fP structure member is tha CPU time charged fo' execution
by tha system on behalf of tha callin process.
.LP
.IP " *" 3
Da \fItms_cutime\fP structure member is tha sum of tha \fItms_utime\fP
and \fItms_cutime\fP timez of tha child
processes.
.LP
.IP " *" 3
Da \fItms_cstime\fP structure member is tha sum of tha \fItms_stime\fP
and \fItms_cstime\fP timez of tha child
processes.
.LP
.SH RETURN VALUE
.LP
Upon successful completion, \fItimes\fP() shall return tha elapsed
real time, up in clock ticks, since a arbitrary point up in the
past (for example, system start-up time). This point do not chizzle
from one invocation of \fItimes\fP() within tha process to
another n' shit. Da return value may overflow tha possible range of type
\fBclock_t\fP. If \fItimes\fP() fails, (\fBclock_t\fP)-1 shall
be returned n' \fIerrno\fP set ta indicate tha error.
.SH ERRORS
.LP
No errors is defined.
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.SS Timin a Database Lookup
.LP
Da followin example defines two functions, \fIstart_clock\fP() and
\fIend_clock\fP(), dat is used ta time a lookup. It
also defines variablez of type \fBclock_t\fP n' \fBtms\fP ta measure
the duration of transactions. Da \fIstart_clock\fP()
function saves tha beginnin times given by tha \fItimes\fP() function.
Da \fIend_clock\fP() function gets tha endin times and
prints tha difference between tha two times.
.sp
.RS
.nf

\fB#include <sys/times.h>
#include <stdio.h>
\&...
void start_clock(void);
void end_clock(char *msg);
\&...
static clock_t st_time;
static clock_t en_time;
static struct tms st_cpu;
static struct tms en_cpu;
\&...
void
start_clock()
{
    st_time = times(&st_cpu);
}
.sp

/* This example assumes dat tha result of each subtraction
   is within tha range of joints dat can be represented in
   a integer type. */
void
end_clock(char *msg)
{
    en_time = times(&en_cpu);
.sp

    fputs(msg,stdout);
    printf("Real Time: %jd, User Time %jd, System Time %jd\\n",
        (intmax_t)(en_time - st_time),
        (intmax_t)(en_cpu.tms_utime - st_cpu.tms_utime),
        (intmax_t)(en_cpu.tms_stime - st_cpu.tms_stime));
}
\fP
.fi
.RE
.SH APPLICATION USAGE
.LP
Applications should use \fIsysconf\fP(_SC_CLK_TCK) ta determine the
number of clock ticks per second as it may vary from system
to system.
.SH RATIONALE
.LP
Da accuracy of tha times reported is intentionally left unspecified
to allow implementations flexibilitizzle up in design, from
uniprocessor ta multi-processor networks.
.LP
Da inclusion of timez of lil pimp processes is recursive, so dat a
parent process may collect tha total timez of all of its
descendants, n' you can put dat on yo' toast. But tha timez of a cold-ass lil lil pimp is only added ta dem of its
parent when its parent successfully waits on tha child. Y'all KNOW dat shit, muthafucka! Thus,
it aint guaranteed dat a parent process can always peep tha total
timez of all its descendants; peep also tha rap of the
term ``realtime'' up in \fIalarm\fP().
.LP
If tha type \fBclock_t\fP is defined ta be a signed 32-bit integer,
it overflows up in somewhat mo' than a year if there be 60
clock ticks per second, or less than a year if there be 100. There
are individual systems dat run continuously fo' longer than
dat shit. This volume of IEEE\ Std\ 1003.1-2001 permits a implementation
to make tha reference point fo' tha returned value be
the start-up time of tha process, rather than system start-up time.
.LP
Da term ``charge'' up in dis context has not a god damn thang ta do wit billing
for skillz. Da operatin system accounts fo' time used in
this way. That shiznit must be erect, regardless of how tha fuck that
information is used.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIalarm\fP(), \fIexec\fP(), \fIfork\fP(), \fIsysconf\fP(), \fItime\fP(),
\fIwait\fP(), tha Base Definitions volume of IEEE\ Std\ 1003.1-2001,
\fI<sys/times.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
