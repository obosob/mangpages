.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "INSQUE" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" insque 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
insque, remque \- bang or remove a element up in a queue
.SH SYNOPSIS
.LP
\fB#include <search.h>
.br
.sp
void insque(void *\fP\fIelement\fP\fB, void *\fP\fIpred\fP\fB);
.br
void remque(void *\fP\fIelement\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIinsque\fP() n' \fIremque\fP() functions shall manipulate queues
built from doubly-linked lists, n' you can put dat on yo' toast. Da queue can be
either circular or linear fo' realz. An application rockin \fIinsque\fP() or
\fIremque\fP() shall ensure it defines a structure up in which the
first two thugz of tha structure is pointas ta tha same type of
structure, n' any further thugz is application-specific.
Da first gangmember of tha structure be a gangbangin' forward pointa ta tha next
entry up in tha queue. Da second member be a funky-ass backward pointa to
the previous entry up in tha queue. If tha queue is linear, tha queue
is terminated wit null pointers. Da namez of tha structure and
of tha pointa thugz is not subject ta any special restriction.
.LP
Da \fIinsque\fP() function shall bang tha element pointed ta by
\fIelement\fP tha fuck into a queue immediately afta tha element
pointed ta by \fIpred\fP.
.LP
Da \fIremque\fP() function shall remove tha element pointed ta by
\fIelement\fP from a queue.
.LP
If tha queue is ta be used as a linear list, invokin \fIinsque\fP(&\fIelement\fP,
NULL), where \fIelement\fP is the
initial element of tha queue, shall initialize tha forward n' backward
pointaz of \fIelement\fP ta null pointers.
.LP
If tha queue is ta be used as a cold-ass lil circular list, tha application shall
ensure it initializes tha forward pointa n' tha backward
pointa of tha initial element of tha queue ta tha elementz own address.
.SH RETURN VALUE
.LP
Da \fIinsque\fP() n' \fIremque\fP() functions do not return a value.
.SH ERRORS
.LP
No errors is defined.
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.SS Creatin a Linear Linked List
.LP
Da followin example creates a linear linked list.
.sp
.RS
.nf

\fB#include <search.h>
\&...
struct myque element1;
struct myque element2;
.sp

char *data1 = "DATA1";
char *data2 = "DATA2";
\&...
element1.data = data1;
element2.data = data2;
.sp

insque (&element1, NULL);
insque (&element2, &element1);
\fP
.fi
.RE
.SS Creatin a Circular Linked List
.LP
Da followin example creates a cold-ass lil circular linked list.
.sp
.RS
.nf

\fB#include <search.h>
\&...
struct myque element1;
struct myque element2;
.sp

char *data1 = "DATA1";
char *data2 = "DATA2";
\&...
element1.data = data1;
element2.data = data2;
.sp

element1.fwd = &element1;
element1.bck = &element1;
.sp

insque (&element2, &element1);
\fP
.fi
.RE
.SS Removin a Element
.LP
Da followin example removes tha element pointed ta by \fIelement1\fP.
.sp
.RS
.nf

\fB#include <search.h>
\&...
struct myque element1;
\&...
remque (&element1);
\fP
.fi
.RE
.SH APPLICATION USAGE
.LP
Da oldschool implementationz of these functions busted lyrics bout tha arguments
as bein of type \fBstruct qelem *\fP rather than as
bein of type \fBvoid *\fP as defined here, so peek-a-boo, clear tha way, I be comin' thru fo'sho. In dem implementations,
\fBstruct qelem\fP was commonly defined up in \fI<search.h>\fP as:
.sp
.RS
.nf

\fBstruct qelem {
    struct qelem  *q_forw;
    struct qelem  *q_back;
};
\fP
.fi
.RE
.LP
Applications rockin these functions, however, was never able ta use
this structure directly since it provided no room fo' the
actual data contained up in tha elements, n' you can put dat on yo' toast. Most applications defined structures
that contained tha two pointas as tha initial elements
and also provided space for, or pointas to, tha objectz data fo' realz. Applications
that used these functions ta update mo' than one type
of table also had tha problem of specifyin two or mo' different
structures wit tha same name, if they literally used \fBstruct
qelem\fP as specified.
.LP
As busted lyrics bout here, tha implementations was straight-up expectin a structure
type where tha straight-up original gangsta two thugz was forward and
backward pointas ta structures. With C compilaz dat didn't provide
function prototypes, applications used structures as
specified up in tha DESCRIPTION above n' tha compila did what tha fuck tha application
expected.
.LP
If dis method had been carried forward wit a ISO\ C standard compiler
and tha oldschool function prototype, most
applications would gotta be modified ta cast pointas ta tha structures
actually used ta be pointas ta \fBstruct qelem\fP to
avoid compilation warnings. By specifyin \fBvoid *\fP as tha argument
type, applications do not need ta chizzle (unless they
specifically referenced \fBstruct qelem\fP n' depended on it being
defined up in \fI<search.h>\fP).
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
Da Base Definitions volume of IEEE\ Std\ 1003.1-2001, \fI<search.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
