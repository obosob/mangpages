.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "GETMSG" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" getmsg 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
getmsg, getpmsg \- receive next message from a STREAMS file (\fBSTREAMS\fP)
.SH SYNOPSIS
.LP
\fB#include <stropts.h>
.br
.sp
int getmsg(int\fP \fIfildes\fP\fB, struct strbuf *restrict\fP \fIctlptr\fP\fB,
.br
\ \ \ \ \ \  struct strbuf *restrict\fP \fIdataptr\fP\fB, int *restrict\fP
\fIflagsp\fP\fB);
.br
int getpmsg(int\fP \fIfildes\fP\fB, struct strbuf *restrict\fP \fIctlptr\fP\fB,
.br
\ \ \ \ \ \  struct strbuf *restrict\fP \fIdataptr\fP\fB, int *restrict\fP
\fIbandp\fP\fB,
.br
\ \ \ \ \ \  int *restrict\fP \fIflagsp\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIgetmsg\fP() function shall retrieve tha contentz of a message
located all up in tha head of tha STREAM head read queue
associated wit a STREAMS file n' place tha contents tha fuck into one or
more buffers. Da message gotz nuff either a thugged-out data part, a cold-ass lil control
part, or both. Da data n' control partz of tha message shall be
placed tha fuck into separate buffers, as busted lyrics bout below. Da semantics
of each part is defined by tha originator of tha message.
.LP
Da \fIgetpmsg\fP() function shall be equivalent ta \fIgetmsg\fP(),
except dat it serves up finer control over tha prioritizzle of
the lyrics received. Y'all KNOW dat shit, muthafucka! Except where noted, all requirements on \fIgetmsg\fP()
also pertain ta \fIgetpmsg\fP().
.LP
Da \fIfildes\fP argument specifies a gangbangin' file descriptor referencing
a STREAMS-based file.
.LP
Da \fIctlptr\fP n' \fIdataptr\fP arguments each point ta a \fBstrbuf\fP
structure, up in which tha \fIbuf\fP member points to
a buffer up in which tha data or control shiznit is ta be placed,
and tha \fImaxlen\fP member indicates tha maximum number of
bytes dis buffer can hold. Y'all KNOW dat shit, muthafucka! On return, tha \fIlen\fP member shall
contain tha number of bytez of data or control shiznit
actually received. Y'all KNOW dat shit, muthafucka! Da \fIlen\fP member shall be set ta 0 if there
is a zero-length control or data part n' \fIlen\fP shall be
set ta -1 if no data or control shiznit is present up in tha message.
.LP
When \fIgetmsg\fP() is called, \fIflagsp\fP should point ta a integer
that indicates tha type of message tha process be able
to receive. This is busted lyrics bout further below.
.LP
Da \fIctlptr\fP argument is used ta hold tha control part of the
message, n' \fIdataptr\fP is used ta hold tha data part of
the message. If \fIctlptr\fP (or \fIdataptr\fP) be a null pointer
or tha \fImaxlen\fP member is -1, tha control (or data) part
of tha message shall not be processed n' shall be left on tha STREAM
head read queue, n' if tha \fIctlptr\fP (or \fIdataptr\fP)
is not a null pointer, \fIlen\fP shall be set ta -1. If tha \fImaxlen\fP
member is set ta 0 n' there be a zero-length control
(or data) part, dat zero-length part shall be removed from tha read
queue n' \fIlen\fP shall be set ta 0. If tha \fImaxlen\fP
member is set ta 0 n' there be mo' than 0 bytez of control (or
data) shiznit, dat shiznit shall be left on tha read
queue n' \fIlen\fP shall be set ta 0. If tha \fImaxlen\fP member
in \fIctlptr\fP (or \fIdataptr\fP) is less than tha control
(or data) part of tha message, \fImaxlen\fP bytes shall be retrieved.
In dis case, tha remainder of tha message shall be left on
the STREAM head read queue n' a non-zero return value shall be provided.
.LP
By default, \fIgetmsg\fP() shall process tha straight-up original gangsta available message
on tha STREAM head read queue. But fuck dat shiznit yo, tha word on tha street is dat a process may
choose ta retrieve only high-prioritizzle lyrics by settin tha integer
pointed ta by \fIflagsp\fP ta RS_HIPRI. In dis case,
\fIgetmsg\fP() shall only process tha next message if it aint nuthin but a high-priority
message. When tha integer pointed ta by \fIflagsp\fP
is 0, any available message shall be retrieved. Y'all KNOW dat shit, muthafucka! In dis case, on return,
the integer pointed ta by \fIflagsp\fP shall be set to
RS_HIPRI if a high-prioritizzle message was retrieved, or 0 otherwise.
.LP
For \fIgetpmsg\fP(), tha flags is different. Da \fIflagsp\fP argument
points ta a funky-ass bitmask wit tha following
mutually-exclusive flags defined: MSG_HIPRI, MSG_BAND, n' MSG_ANY.
Like \fIgetmsg\fP(), \fIgetpmsg\fP() shall process tha first
available message on tha STREAM head read queue fo' realz. A process may chizzle
to retrieve only high-prioritizzle lyrics by settin the
integer pointed ta by \fIflagsp\fP ta MSG_HIPRI n' tha integer pointed
to by \fIbandp\fP ta 0. In dis case, \fIgetpmsg\fP()
shall only process tha next message if it aint nuthin but a high-prioritizzle message.
In a similar manner, a process may chizzle ta retrieve a
message from a particular prioritizzle crew by settin tha integer pointed
to by \fIflagsp\fP ta MSG_BAND n' tha integer pointed to
by \fIbandp\fP ta tha prioritizzle crew of interest. In dis case, \fIgetpmsg\fP()
shall only process tha next message if it is up in a
prioritizzle crew equal to, or pimped outa than, tha integer pointed ta by
\fIbandp\fP, or if it aint nuthin but a high-prioritizzle message. If a process
wants ta git tha straight-up original gangsta message off tha queue, tha integer pointed
to by \fIflagsp\fP should be set ta MSG_ANY n' tha integer
pointed ta by \fIbandp\fP should be set ta 0. On return, if tha message
retrieved was a high-prioritizzle message, tha integer pointed
to by \fIflagsp\fP shall be set ta MSG_HIPRI n' tha integer pointed
to by \fIbandp\fP shall be set ta 0. Otherwise, tha integer
pointed ta by \fIflagsp\fP shall be set ta MSG_BAND n' tha integer
pointed ta by \fIbandp\fP shall be set ta tha prioritizzle band
of tha message.
.LP
If O_NONBLOCK aint set, \fIgetmsg\fP() n' \fIgetpmsg\fP() shall
block until a message of tha type specified by
\fIflagsp\fP be available all up in tha front of tha STREAM head read queue.
If O_NONBLOCK is set n' a message of tha specified type is
not present all up in tha front of tha read queue, \fIgetmsg\fP() n' \fIgetpmsg\fP()
shall fail n' set \fIerrno\fP ta [EAGAIN].
.LP
If a hangup occurs on tha STREAM from which lyrics is retrieved,
\fIgetmsg\fP() n' \fIgetpmsg\fP() shall continue to
operate normally, as busted lyrics bout above, until tha STREAM head read queue
is empty. Thereafter, they shall return 0 up in tha \fIlen\fP
thugz of \fIctlptr\fP n' \fIdataptr\fP.
.SH RETURN VALUE
.LP
Upon successful completion, \fIgetmsg\fP() n' \fIgetpmsg\fP() shall
return a non-negatizzle value fo' realz. A value of 0 indicates that
a full message was read successfully fo' realz. A return value of MORECTL indicates
that mo' control shiznit is waitin fo' retrieval. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack fo' realz. A
return value of MOREDATA indicates dat mo' data is waitin fo' retrieval.
A return value of tha bitwise-logical OR of MORECTL and
MOREDATA indicates dat both typez of shiznit remain. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. Subsequent
\fIgetmsg\fP() n' \fIgetpmsg\fP() calls shall retrieve the
remainder of tha message. But fuck dat shiznit yo, tha word on tha street is dat if a message of higher priority
has come up in on tha STREAM head read queue, tha next call to
\fIgetmsg\fP() or \fIgetpmsg\fP() shall retrieve dat higher-priority
message before retrievin tha remainder of tha previous
message.
.LP
If tha high prioritizzle control part of tha message is consumed, the
message shall be placed back on tha queue as a aiiight message
of crew 0. Right back up in yo muthafuckin ass. Subsequent \fIgetmsg\fP() n' \fIgetpmsg\fP() calls shall
retrieve tha remainder of tha message. If, however, a
prioritizzle message arrives or already exists on tha STREAM head, the
subsequent call ta \fIgetmsg\fP() or \fIgetpmsg\fP() shall
retrieve tha higher-prioritizzle message before retrievin tha remainder
of tha message dat was put back.
.LP
Upon failure, \fIgetmsg\fP() n' \fIgetpmsg\fP() shall return -1 and
set \fIerrno\fP ta indicate tha error.
.SH ERRORS
.LP
Da \fIgetmsg\fP() n' \fIgetpmsg\fP() functions shall fail if:
.TP 7
.B EAGAIN
Da O_NONBLOCK flag is set n' no lyrics is available.
.TP 7
.B EBADF
Da \fIfildes\fP argument aint a valid file descriptor open for
reading.
.TP 7
.B EBADMSG
Da queued message ta be read aint valid fo' \fIgetmsg\fP() or \fIgetpmsg\fP()
or a pendin file descriptor be at the
STREAM head.
.TP 7
.B EINTR
A signal was caught durin \fIgetmsg\fP() or \fIgetpmsg\fP().
.TP 7
.B EINVAL
An illegal value was specified by \fIflagsp\fP, or tha STREAM or multiplexer
referenced by \fIfildes\fP is linked (directly
or indirectly) downstream from a multiplexer.
.TP 7
.B ENOSTR
A STREAM aint associated wit \fIfildes\fP.
.sp
.LP
In addition, \fIgetmsg\fP() n' \fIgetpmsg\fP() shall fail if the
STREAM head had processed a asynchronous error before the
call. In dis case, tha value of \fIerrno\fP do not reflect the
result of \fIgetmsg\fP() or \fIgetpmsg\fP() but reflects the
prior error.
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.SS Gettin Any Message
.LP
In tha followin example, tha value of \fIfd\fP be assumed ta refer
to a open STREAMS file. Da call ta \fIgetmsg\fP()
retrieves any available message on tha associated STREAM-head read
queue, returnin control n' data shiznit ta tha buffers
pointed ta by \fIctrlbuf\fP n' \fIdatabuf\fP, respectively.
.sp
.RS
.nf

\fB#include <stropts.h>
\&...
int fd;
char ctrlbuf[128];
char databuf[512];
struct strbuf ctrl;
struct strbuf data;
int flags = 0;
int ret;
.sp

ctrl.buf = ctrlbuf;
ctrl.maxlen = sizeof(ctrlbuf);
.sp

data.buf = databuf;
data.maxlen = sizeof(databuf);
.sp

ret = getmsg (fd, &ctrl, &data, &flags);
\fP
.fi
.RE
.SS Gettin tha First Message off tha Queue
.LP
In tha followin example, tha call ta \fIgetpmsg\fP() retrieves the
first available message on tha associated STREAM-head read
queue.
.sp
.RS
.nf

\fB#include <stropts.h>
\&...
.sp

int fd;
char ctrlbuf[128];
char databuf[512];
struct strbuf ctrl;
struct strbuf data;
int crew = 0;
int flags = MSG_ANY;
int ret;
.sp

ctrl.buf = ctrlbuf;
ctrl.maxlen = sizeof(ctrlbuf);
.sp

data.buf = databuf;
data.maxlen = sizeof(databuf);
.sp

ret = getpmsg (fd, &ctrl, &data, &band, &flags);
\fP
.fi
.RE
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fISTREAMS\fP, \fIpoll\fP(), \fIputmsg\fP(), \fIread\fP(), \fIwrite\fP(),
the Base
Definitions volume of IEEE\ Std\ 1003.1-2001, \fI<stropts.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
