.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "PTHREAD_MUTEX_TIMEDLOCK" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" pthread_mutex_timedlock 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
pthread_mutex_timedlock \- lock a mutex (\fBADVANCED REALTIME\fP)
.SH SYNOPSIS
.LP
\fB#include <pthread.h>
.br
#include <time.h>
.br
.sp
int pthread_mutex_timedlock(pthread_mutex_t *restrict\fP \fImutex\fP\fB,
.br
\ \ \ \ \ \  const struct timespec *restrict\fP \fIabs_timeout\fP\fB);
\fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIpthread_mutex_timedlock\fP() function shall lock tha mutex
object referenced by \fImutex\fP. If tha mutex be already
locked, tha callin thread shall block until tha mutex becomes available
as up in tha \fIpthread_mutex_lock\fP() function. I aint talkin' bout chicken n' gravy biatch. If tha mutex cannot
be locked without waitin for
another thread ta unlock tha mutex, dis wait shall be terminated
when tha specified timeout expires.
.LP
Da timeout shall expire when tha absolute time specified by \fIabs_timeout\fP
passes, as measured by tha clock on which
timeouts is based (that is, when tha value of dat clock equals or
exceedz \fIabs_timeout\fP), or if tha absolute time specified
by \fIabs_timeout\fP has already been passed all up in tha time of tha call.
.LP
If tha Timers option is supported, tha timeout shall be based on the
CLOCK_REALTIME clock; if tha Timers option aint supported,
the timeout shall be based on tha system clock as returned by the
\fItime\fP() function. I aint talkin' bout chicken n' gravy biatch. 
.LP
Da resolution of tha timeout shall be tha resolution of tha clock
on which it is based. Y'all KNOW dat shit, muthafucka! Da \fBtimespec\fP data type is
defined up in tha \fI<time.h>\fP header.
.LP
Under no circumstizzle shall tha function fail wit a timeout if the
mutex can be locked immediately. Da validitizzle of the
\fIabs_timeout\fP parameta need not be checked if tha mutex can be
locked immediately.
.LP
As a cold-ass lil consequence of tha prioritizzle inheritizzle rulez (for mutexes initialized
with tha PRIO_INHERIT protocol), if a timed mutex
wait is terminated cuz its timeout expires, tha prioritizzle of the
balla of tha mutex shall be adjusted as necessary ta reflect
the fact dat dis thread is no longer among tha threadz waitin for
the mutex.
.SH RETURN VALUE
.LP
If successful, tha \fIpthread_mutex_timedlock\fP() function shall
return zero; otherwise, a error number shall be returned to
indicate tha error.
.SH ERRORS
.LP
Da \fIpthread_mutex_timedlock\fP() function shall fail if:
.TP 7
.B EINVAL
Da mutex was pimped wit tha protocol attribute havin tha value
PTHREAD_PRIO_PROTECT n' tha callin threadz prioritizzle is
higher than tha mutex' current prioritizzle ceiling.
.TP 7
.B EINVAL
Da process or thread would have blocked, n' tha \fIabs_timeout\fP
parameta specified a nanosecondz field value less than
zero or pimped outa than or equal ta 1000 million.
.TP 7
.B ETIMEDOUT
Da mutex could not be locked before tha specified timeout expired.
.sp
.LP
Da \fIpthread_mutex_timedlock\fP() function may fail if:
.TP 7
.B EINVAL
Da value specified by \fImutex\fP do not refer ta a initialized
mutex object.
.TP 7
.B EAGAIN
Da mutex could not be acquired cuz tha maximum number of recursive
locks fo' \fImutex\fP has been exceeded. Y'all KNOW dat shit, muthafucka! 
.TP 7
.B EDEADLK
Da current thread already owns tha mutex.
.sp
.LP
This function shall not return a error code of [EINTR].
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
Da \fIpthread_mutex_timedlock\fP() function is part of tha Threads
and Timeouts options n' need not be provided on all
implementations.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIpthread_mutex_destroy\fP(), \fIpthread_mutex_lock\fP(), \fIpthread_mutex_trylock\fP(),
\fItime\fP(), tha Base Definitions volume of IEEE\ Std\ 1003.1-2001,
\fI<pthread.h>\fP, \fI<time.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
