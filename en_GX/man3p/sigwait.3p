.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "SIGWAIT" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" sigwait 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
sigwait \- wait fo' queued signals
.SH SYNOPSIS
.LP
\fB#include <signal.h>
.br
.sp
int sigwait(const sigset_t *restrict\fP \fIset\fP\fB, int *restrict\fP
\fIsig\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIsigwait\fP() function shall select a pendin signal from \fIset\fP,
atomically clear it from tha systemz set of
pendin signals, n' return dat signal number up in tha location referenced
by \fIsig\fP. If prior ta tha call ta \fIsigwait\fP()
there is multiple pendin instancez of a single signal number, it
is implementation-defined whether upon successful return there
are any remainin pendin signals fo' dat signal number n' shit.  If the
implementation supports queued signals n' there are
multiple signals queued fo' tha signal number selected, tha first
such queued signal shall cause a return from \fIsigwait\fP() and
the remainder shall remain queued. Y'all KNOW dat shit, muthafucka!  If no signal up in \fIset\fP is
pendin all up in tha time of tha call, tha thread shall be suspended until
one or mo' becomes pending. Da signals defined by \fIset\fP
shall done been blocked all up in tha time of tha call ta \fIsigwait\fP();
otherwise, tha behavior is undefined. Y'all KNOW dat shit, muthafucka! Da effect of
\fIsigwait\fP() on tha signal actions fo' tha signals up in \fIset\fP
is unspecified.
.LP
If mo' than one thread is rockin \fIsigwait\fP() ta wait fo' tha same
signal, no mo' than one of these threadz shall return
from \fIsigwait\fP() wit tha signal number n' shit. Which thread returns
from \fIsigwait\fP() if mo' than a single thread is waitin is
unspecified.
.LP
Should any of tha multiple pendin signals up in tha range SIGRTMIN to
SIGRTMAX be selected, it shall be tha lowest numbered one. The
selection order between realtime n' non-realtime signals, or between
multiple pendin non-realtime signals, is unspecified. Y'all KNOW dat shit, muthafucka! 
.SH RETURN VALUE
.LP
Upon successful completion, \fIsigwait\fP() shall store tha signal
number of tha received signal all up in tha location referenced by
\fIsig\fP n' return zero. Otherwise, a error number shall be returned
to indicate tha error.
.SH ERRORS
.LP
Da \fIsigwait\fP() function may fail if:
.TP 7
.B EINVAL
Da \fIset\fP argument gotz nuff a invalid or unsupported signal number.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
To provide a cold-ass lil convenient way fo' a thread ta wait fo' a signal, this
volume of IEEE\ Std\ 1003.1-2001 serves up the
\fIsigwait\fP() function. I aint talkin' bout chicken n' gravy biatch. For most cases where a thread has ta wait
for a signal, tha \fIsigwait\fP() function should be quite
convenient, efficient, n' adequate.
.LP
But fuck dat shiznit yo, tha word on tha street is dat requests was made fo' a lower-level primitizzle than \fIsigwait\fP()
and fo' semaphores dat could be used by threads.
Afta some consideration, threadz was allowed ta use semaphores and
\fIsem_post\fP() was
defined ta be async-signal n' async-cancel-safe.
.LP
In summary, when it is necessary fo' code run up in response ta a asynchronous
signal ta notify a thread, \fIsigwait\fP() should
be used ta handle tha signal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack fo' realz. Alternatively, if tha implementation
provides semaphores, they also can be used, either following
\fIsigwait\fP() or from within a signal handlin routine previously
registered wit \fIsigaction\fP().
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fISignal Concepts\fP, \fIRealtime
Signals\fP, \fIpause\fP(), \fIpthread_sigmask\fP(), \fIsigaction\fP(),
\fIsigpending\fP(), \fIsigsuspend\fP(), \fIsigwaitinfo\fP(),
the Base Definitions volume of
IEEE\ Std\ 1003.1-2001, \fI<signal.h>\fP, \fI<time.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
