.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "TIMER_CREATE" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" timer_create 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
timer_create \- create a per-process timer (\fBREALTIME\fP)
.SH SYNOPSIS
.LP
\fB#include <signal.h>
.br
#include <time.h>
.br
.sp
int timer_create(clockid_t\fP \fIclockid\fP\fB, struct sigevent *restrict\fP
\fIevp\fP\fB,
.br
\ \ \ \ \ \  timer_t *restrict\fP \fItimerid\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fItimer_create\fP() function shall create a per-process timer
usin tha specified clock, \fIclock_id\fP, as tha timing
base. Da \fItimer_create\fP() function shall return, up in tha location
referenced by \fItimerid\fP, a timer ID of type
\fBtimer_t\fP used ta identify tha timer up in timer requests, n' you can put dat on yo' toast. This timer
ID shall be unique within tha callin process until the
timer is deleted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da particular clock, \fIclock_id\fP, is defined
in \fI<time.h>\fP.
Da timer whose ID is returned shall be up in a gangbangin' finger-lickin' disarmed state upon return
from \fItimer_create\fP().
.LP
Da \fIevp\fP argument, if non-NULL, points ta a \fBsigevent\fP structure.
This structure, allocated by tha application,
defines tha asynchronous notification ta occur as specified up in \fISignal
Generation and
Delivery\fP when tha timer expires. If tha \fIevp\fP argument is NULL,
the effect be as if tha \fIevp\fP argument pointed to
a \fBsigevent\fP structure wit tha \fIsigev_notify\fP member having
the value SIGEV_SIGNAL, tha \fIsigev_signo\fP havin a
default signal number, n' tha \fIsigev_value\fP member havin the
value of tha timer ID.
.LP
Each implementation shall define a set of clocks dat can be used
as timin bases fo' per-process timers fo' realz. All implementations
shall support a \fIclock_id\fP of CLOCK_REALTIME.  If tha Monotonic
Clock option is supported, implementations shall
support a \fIclock_id\fP of CLOCK_MONOTONIC. 
.LP
Per-process timers shall not be inherited by a cold-ass lil lil pimp process across
a \fIfork\fP() and
shall be disarmed n' deleted by a \fIexec\fP.
.LP
If _POSIX_CPUTIME is defined, implementations shall support \fIclock_id\fP
values representin tha CPU-time clock of tha calling
process. 
.LP
If _POSIX_THREAD_CPUTIME is defined, implementations shall support
\fIclock_id\fP joints representin tha CPU-time clock of the
callin thread. Y'all KNOW dat shit, muthafucka! 
.LP
It be implementation-defined whether a \fItimer_create\fP() function
will succeed if tha value defined by \fIclock_id\fP
correspondz ta tha CPU-time clock of a process or thread different
from tha process or thread invokin tha function. I aint talkin' bout chicken n' gravy biatch. 
.SH RETURN VALUE
.LP
If tha call succeeds, \fItimer_create\fP() shall return zero n' update
the location referenced by \fItimerid\fP ta a
\fBtimer_t\fP, which can be passed ta tha per-process timer calls.
If a error occurs, tha function shall return a value of -1 and
set \fIerrno\fP ta indicate tha error. Shiiit, dis aint no joke. Da value of \fItimerid\fP
is undefined if a error occurs.
.SH ERRORS
.LP
Da \fItimer_create\fP() function shall fail if:
.TP 7
.B EAGAIN
Da system lacks sufficient signal queuin resources ta honor the
request.
.TP 7
.B EAGAIN
Da callin process has already pimped all of tha timers it be allowed
by dis implementation.
.TP 7
.B EINVAL
Da specified clock ID aint defined.
.TP 7
.B ENOTSUP
Da implementation do not support tha creation of a timer attached
to tha CPU-time clock dat is specified by
\fIclock_id\fP n' associated wit a process or thread different from
the process or thread invokin \fItimer_create\fP(). 
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
None.
.br
.SH RATIONALE
.LP
.SS Periodic Timer Overrun n' Resource Allocation
.LP
Da specified timer facilitizzles may serve up realtime signals (that
is, queued signals) on implementations dat support this
option. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. Since realtime applications cannot afford ta lose notifications
of asynchronous events, like timer expirations or
asynchronous I/O completions, it must be possible ta ensure dat sufficient
resources exist ta serve up tha signal when tha event
occurs. In general, dis aint a gangbangin' finger-lickin' hang-up cuz there be a one-to-one
correspondence between a request n' a subsequent signal
generation. I aint talkin' bout chicken n' gravy biatch. If tha request cannot allocate tha signal delivery resources,
it can fail tha call wit a [EAGAIN] error.
.LP
Periodic timers is a special case fo' realz. A single request can generate
an unspecified number of signals. This aint a problem if the
requestin process can steez tha signals as fast as they is generated,
thus makin tha signal delivery resources available for
delivery of subsequent periodic timer expiration signals. But, in
general, dis cannot be assured-processin of periodic timer
signals may "overrun''; dat is, subsequent periodic timer expirations
may occur before tha currently pendin signal has been
delivered.
.LP
Also, fo' signals, accordin ta tha POSIX.1-1990 standard, if subsequent
occurrencez of a pendin signal is generated, it is
implementation-defined whether a signal is served up fo' each occurrence.
This aint adequate fo' some realtime applications. Right back up in yo muthafuckin ass. So a
mechanizzle is required ta allow applications ta detect how tha fuck nuff timer
expirations was delayed without requirin a indefinite
amount of system resources ta store tha delayed expirations.
.LP
Da specified facilitizzles provide fo' a overrun count. Da overrun
count is defined as tha number of extra timer expirations
that occurred between tha time a timer expiration signal is generated
and tha time tha signal is delivered. Y'all KNOW dat shit, muthafucka! Da signal-catching
function, if it is concerned wit overruns, can retrieve dis count
on entry. With dis method, a periodic timer only needz one
"signal queuin resource" dat can be allocated all up in tha time of the
\fItimer_create\fP() function call.
.LP
A function is defined ta retrieve tha overrun count so dat a application
need not allocate static storage ta contain the
count, n' a implementation need not update dis storage asynchronously
on timer expirations. But, fo' some high-frequency
periodic applications, tha overhead of a additionizzle system call on
each timer expiration may be prohibitive. Da functions, as
defined, permit a implementation ta maintain tha overrun count in
user space, associated wit tha \fItimerid\fP. Da \fItimer_getoverrun\fP()
function can then be implemented as a macro dat uses the
\fItimerid\fP argument (which may just be a pointa ta a user space
structure containin tha counter) ta locate tha overrun count
with no system call overhead. Y'all KNOW dat shit, muthafucka! Other implementations, less concerned
with dis class of applications, can avoid tha asynchronous
update of user space by maintainin tha count up in a system structure
at tha cost of tha extra system call ta obtain dat shit.
.SS Timer Expiration Signal Parameters
.LP
Da Realtime Signals Extension option supports a application-specific
datum dat is served up ta tha extended signal handlez.
This value is explicitly specified by tha application, along with
the signal number ta be delivered, up in a \fBsigevent\fP
structure. Da type of tha application-defined value can be either
an integer constant or a pointer n' shit. This explicit justification of
the value, as opposed ta always bustin  tha timer ID, was selected
based on existin practice.
.LP
It be common practice fo' realtime applications (on non-POSIX systems
or realtime extended POSIX systems) ta use tha parameters
of event handlezs as tha case label of a switch statement or as a
pointa ta a application-defined data structure. Right back up in yo muthafuckin ass. Since
\fItimer_id\fPs is dynamically allocated by tha \fItimer_create\fP()
function, they can be used fo' neither of these functions
without additionizzle application overhead up in tha signal handlez; for
example, ta search a array of saved timer IDs ta associate the
ID wit a cold-ass lil constant or application data structure.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIclock_getres\fP(), \fItimer_delete\fP(), \fItimer_getoverrun\fP(),
the Base Definitions volume of IEEE\ Std\ 1003.1-2001, \fI<time.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
