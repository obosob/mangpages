.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "LROUND" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" lround 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
lround, lroundf, lroundl \- round ta nearest integer value
.SH SYNOPSIS
.LP
\fB#include <math.h>
.br
.sp
long lround(double\fP \fIx\fP\fB);
.br
long lroundf(float\fP \fIx\fP\fB);
.br
long lroundl(long double\fP \fIx\fP\fB);
.br
\fP
.SH DESCRIPTION
.LP
These functions shall round they argument ta tha nearest integer
value, roundin halfway cases away from zero, regardless of
the current roundin direction.
.LP
An application wishin ta check fo' error thangs should set \fIerrno\fP
to zero n' call
\fIfeclearexcept\fP(FE_ALL_EXCEPT) before callin these functions.
On return, if \fIerrno\fP is non-zero or
\fIfetestexcept\fP(FE_INVALID | FE_DIVBYZERO | FE_OVERFLOW | FE_UNDERFLOW)
is non-zero, a error has occurred.
.SH RETURN VALUE
.LP
Upon successful completion, these functions shall return tha rounded
integer value.
.LP
If
\fIx\fP is NaN, a thugged-out domain error shall occur n' a unspecified value
is returned.
.LP
If \fIx\fP is +Inf, a thugged-out domain error shall occur n' a unspecified
value is returned.
.LP
If \fIx\fP is -Inf, a thugged-out domain error shall occur n' a unspecified
value is returned.
.LP
If tha erect value is positizzle n' too big-ass ta represent as a \fBlong\fP,
a domain error shall occur n' a unspecified
value is returned.
.LP
If tha erect value is wack n' too big-ass ta represent as a \fBlong\fP,
a domain error shall occur n' a unspecified
value is returned. Y'all KNOW dat shit, muthafucka! 
.SH ERRORS
.LP
These functions shall fail if:
.TP 7
Domain\ Error
Da \fIx\fP argument is NaN or \(+-Inf, or tha erect value is not
representable as a integer n' shit. 
.LP
If tha integer expression (math_errhandlin & MATH_ERRNO) is non-zero,
then \fIerrno\fP shall be set ta [EDOM]. If the
integer expression (math_errhandlin & MATH_ERREXCEPT) is non-zero,
then tha invalid floating-point exception shall be raised.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
On error, tha expressions (math_errhandlin & MATH_ERRNO) n' (math_errhandling
& MATH_ERREXCEPT) is independent of
each other yo, but at least one of dem must be non-zero.
.SH RATIONALE
.LP
These functions differ from tha \fIlrint\fP() functions up in tha default
rounding
direction, wit tha \fIlround\fP() functions roundin halfway cases
away from zero n' needin not ta raise tha inexact
floating-point exception fo' non-integer arguments dat round ta within
the range of tha return type.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIfeclearexcept\fP(), \fIfetestexcept\fP(), \fIllround\fP(), the
Base Definitions volume of IEEE\ Std\ 1003.1-2001, Section 4.18, Treatment
of Error Conditions fo' Mathematical Functions, \fI<math.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
