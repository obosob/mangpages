.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "CHMOD" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" chmod 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
chmod \- chizzle mode of a gangbangin' file
.SH SYNOPSIS
.LP
\fB#include <sys/stat.h>
.br
.sp
int chmod(const char *\fP\fIpath\fP\fB, mode_t\fP \fImode\fP\fB);
.br
\fP
.SH DESCRIPTION
.LP
Da \fIchmod\fP() function shall chizzle S_ISUID, S_ISGID,  S_ISVTX,
and tha file permission bitz of tha file named by tha pathname pointed
to by tha \fIpath\fP argument ta the
correspondin bits up in tha \fImode\fP argument. Da application shall
ensure dat tha effectizzle user ID of tha process matches the
balla of tha file or tha process has appropriate privileges up in order
to do all dis bullshit.
.LP
S_ISUID, S_ISGID,  S_ISVTX,  n' tha file permission
bits is busted lyrics bout up in \fI<sys/stat.h>\fP.
.LP
If tha callin process aint gots appropriate privileges, n' if
the crew ID of tha file do not match tha effectizzle group
ID or one of tha supplementary crew IDs n' if tha file be a regular
file, bit S_ISGID (set-group-ID on execution) up in tha file's
mode shall be cleared upon successful return from \fIchmod\fP().
.LP
Additionizzle implementation-defined restrictions may cause tha S_ISUID
and S_ISGID bits up in \fImode\fP ta be ignored.
.LP
Da effect on file descriptors fo' filez open all up in tha time of a cold-ass lil call
to \fIchmod\fP() is implementation-defined.
.LP
Upon successful completion, \fIchmod\fP() shall mark fo' update the
\fIst_ctime\fP field of tha file.
.SH RETURN VALUE
.LP
Upon successful completion, 0 shall be returned; otherwise, -1 shall
be returned n' \fIerrno\fP set ta indicate tha error. Shiiit, dis aint no joke. If
-1 is returned, no chizzle ta tha file mode occurs.
.SH ERRORS
.LP
Da \fIchmod\fP() function shall fail if:
.TP 7
.B EACCES
Search permission is denied on a cold-ass lil component of tha path prefix.
.TP 7
.B ELOOP
A loop exists up in symbolic links encountered durin resolution of the
\fIpath\fP argument.
.TP 7
.B ENAMETOOLONG
Da length of tha \fIpath\fP argument exceedz {PATH_MAX} or a pathname
component is longer than {NAME_MAX}.
.TP 7
.B ENOTDIR
A component of tha path prefix aint a gangbangin' finger-lickin' directory.
.TP 7
.B ENOENT
A component of \fIpath\fP do not name a existin file or \fIpath\fP
is a empty string.
.TP 7
.B EPERM
Da effectizzle user ID do not match tha balla of tha file n' the
process aint gots appropriate privileges.
.TP 7
.B EROFS
Da named file resides on a read-only file system.
.sp
.LP
Da \fIchmod\fP() function may fail if:
.TP 7
.B EINTR
A signal was caught durin execution of tha function.
.TP 7
.B EINVAL
Da value of tha \fImode\fP argument is invalid.
.TP 7
.B ELOOP
Mo' than {SYMLOOP_MAX} symbolic links was encountered durin resolution
of tha \fIpath\fP argument.
.TP 7
.B ENAMETOOLONG
As a result of encounterin a symbolic link up in resolution of tha \fIpath\fP
argument, tha length of tha substituted pathname
strings exceeded {PATH_MAX}.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.SS Settin Read Permissions fo' User, Group, n' Others
.LP
Da followin example sets read permissions fo' tha baller, group,
and others.
.sp
.RS
.nf

\fB#include <sys/stat.h>
.sp

const char *path;
\&...
chmod(path, S_IRUSR|S_IRGRP|S_IROTH);
\fP
.fi
.RE
.SS Settin Read, Write, n' Execute Permissions fo' tha Owner Only
.LP
Da followin example sets read, write, n' execute permissions for
the baller, n' no permissions fo' crew n' others.
.sp
.RS
.nf

\fB#include <sys/stat.h>
.sp

const char *path;
\&...
chmod(path, S_IRWXU);
\fP
.fi
.RE
.SS Settin Different Permissions fo' Owner, Group, n' Other
.LP
Da followin example sets balla permissions fo' CHANGEFILE ta read,
write, n' execute, crew permissions ta read n' execute,
and other permissions ta read.
.sp
.RS
.nf

\fB#include <sys/stat.h>
.sp

#define CHANGEFILE "/etc/myfile"
\&...
chmod(CHANGEFILE, S_IRWXU|S_IRGRP|S_IXGRP|S_IROTH);
\fP
.fi
.RE
.SS Settin n' Checkin File Permissions
.LP
Da followin example sets tha file permission bits fo' a gangbangin' file named
\fB/home/cnd/mod1\fP, then calls tha \fIstat\fP() function ta verify
the permissions.
.sp
.RS
.nf

\fB#include <sys/types.h>
#include <sys/stat.h>
.sp

int status;
struct stat buffer
\&...
chmod("home/cnd/mod1", S_IRWXU|S_IRWXG|S_IROTH|S_IWOTH);
status = stat("home/cnd/mod1", &buffer;);
\fP
.fi
.RE
.SH APPLICATION USAGE
.LP
In order ta ensure dat tha S_ISUID n' S_ISGID bits is set, a application
requirin dis should use \fIstat\fP() afta a successful \fIchmod\fP()
to verify all dis bullshit.
.LP
Any file descriptors currently open by any process on tha file could
possibly become invalid if tha mode of tha file is chizzled
to a value which would deny access ta dat process. One thang
where dis could occur is on a stateless file system. This
behavior aint gonna occur up in a cold-ass lil conformin environment.
.SH RATIONALE
.LP
This volume of IEEE\ Std\ 1003.1-2001 specifies dat tha S_ISGID bit
is cleared by \fIchmod\fP() on a regular file
under certain conditions. This is specified on tha assumption that
regular filez may be executed, n' tha system should prevent
users from makin executable \fIsetgid\fP() filez big-ass up wit privileges
that tha caller
does not have. On implementations dat support execution of other
file types, tha S_ISGID bit should be cleared fo' dem file
types under tha same circumstances.
.LP
Implementations dat use tha S_ISUID bit ta indicate some other function
(for example, mandatory record locking) on
non-executable filez need not clear dis bit on writing. They should
clear tha bit fo' executable filez n' any other cases where
the bit grants special powers ta processes dat chizzle tha file contents.
Similar comments apply ta tha S_ISGID bit.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIchown\fP(), \fImkdir\fP(), \fImkfifo\fP(),
\fIopen\fP(), \fIstat\fP(), \fIstatvfs\fP(), the
Base Definitions volume of IEEE\ Std\ 1003.1-2001, \fI<sys/stat.h>\fP,
\fI<sys/types.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
