.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "PTHREAD_MUTEXATTR_GETTYPE" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" pthread_mutexattr_gettype 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
pthread_mutexattr_gettype, pthread_mutexattr_settype \- git n' set
the mutex type attribute
.SH SYNOPSIS
.LP
\fB#include <pthread.h>
.br
.sp
int pthread_mutexattr_gettype(const pthread_mutexattr_t *restrict\fP
\fIattr\fP\fB,
.br
\ \ \ \ \ \  int *restrict\fP \fItype\fP\fB);
.br
int pthread_mutexattr_settype(pthread_mutexattr_t\fP \fI*attr\fP\fB,
int\fP \fItype\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIpthread_mutexattr_gettype\fP() n' \fIpthread_mutexattr_settype\fP()
functions, respectively, shall git n' set the
mutex \fItype\fP attribute. This attribute is set up in tha \fItype\fP
parameta ta these functions. Da default value of the
\fItype\fP attribute is PTHREAD_MUTEX_DEFAULT.
.LP
Da type of mutex is contained up in tha \fItype\fP attribute of the
mutex attributes. Valid mutex types include:
.TP 7
PTHREAD_MUTEX_NORMAL
.sp
This type of mutex do not detect deadlock fo' realz. A thread attemptin to
relock dis mutex without first unlockin it shall deadlock.
Attemptin ta unlock a mutex locked by a gangbangin' finger-lickin' different thread thangs up in dis biatch
in undefined behavior fo' realz. Attemptin ta unlock a unlocked mutex
results up in undefined behavior.
.TP 7
PTHREAD_MUTEX_ERRORCHECK
.sp
This type of mutex serves up error checkin fo' realz. A thread attemptin to
relock dis mutex without first unlockin it shall return with
an error fo' realz. A thread attemptin ta unlock a mutex which another thread
has locked shall return wit a error fo' realz. A thread attemptin to
unlock a unlocked mutex shall return wit a error.
.TP 7
PTHREAD_MUTEX_RECURSIVE
.sp
A thread attemptin ta relock dis mutex without first unlockin it
shall succeed up in lockin tha mutex. Da relockin deadlock
which can occur wit mutexez of type PTHREAD_MUTEX_NORMAL cannot occur
with dis type of mutex. Multiple lockz of dis mutex shall
require tha same number of unlocks ta release tha mutex before another
thread can acquire tha mutex fo' realz. A thread attemptin ta unlock
a mutex which another thread has locked shall return wit a error.
A thread attemptin ta unlock a unlocked mutex shall return
with a error.
.TP 7
PTHREAD_MUTEX_DEFAULT
.sp
Attemptin ta recursively lock a mutex of dis type thangs up in dis biatch up in undefined
behavior fo' realz. Attemptin ta unlock a mutex of dis type which
was not locked by tha callin thread thangs up in dis biatch up in undefined behavior.
Attemptin ta unlock a mutex of dis type which aint locked
results up in undefined behavior fo' realz. An implementation may map dis mutex
to one of tha other mutex types.
.sp
.SH RETURN VALUE
.LP
Upon successful completion, tha \fIpthread_mutexattr_gettype\fP()
function shall return zero n' store tha value of the
\fItype\fP attribute of \fIattr\fP tha fuck into tha object referenced by the
\fItype\fP parameter n' shit. Otherwise, a error shall be returned
to indicate tha error.
.LP
If successful, tha \fIpthread_mutexattr_settype\fP() function shall
return zero; otherwise, a error number shall be returned
to indicate tha error.
.SH ERRORS
.LP
Da \fIpthread_mutexattr_settype\fP() function shall fail if:
.TP 7
.B EINVAL
Da value \fItype\fP is invalid.
.sp
.LP
Da \fIpthread_mutexattr_gettype\fP() n' \fIpthread_mutexattr_settype\fP()
functions may fail if:
.TP 7
.B EINVAL
Da value specified by \fIattr\fP is invalid.
.sp
.LP
These functions shall not return a error code of [EINTR].
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
It be advised dat a application should not bust a PTHREAD_MUTEX_RECURSIVE
mutex wit condizzle variablez cuz tha implicit
unlock performed fo' a \fIpthread_cond_timedwait\fP() or \fIpthread_cond_wait\fP()
may not straight-up release tha mutex (if it had been locked
multiple times). If dis happens, no other thread can satisfy the
condizzle of tha predicate.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIpthread_cond_timedwait\fP(), tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, \fI<pthread.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
