.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "STAT" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" stat 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
stat \- git file status
.SH SYNOPSIS
.LP
\fB#include <sys/stat.h>
.br
.sp
int stat(const char *restrict\fP \fIpath\fP\fB, struct stat *restrict\fP
\fIbuf\fP\fB);
.br
\fP
.SH DESCRIPTION
.LP
Da \fIstat\fP() function shall obtain shiznit bout tha named
file n' write it ta tha area pointed ta by tha \fIbuf\fP
argument. Da \fIpath\fP argument points ta a pathname namin a gangbangin' file.
Read, write, or execute permission of tha named file is not
required. Y'all KNOW dat shit, muthafucka! An implementation dat serves up additionizzle or alternate
file access control mechanizzlez may, under implementation-defined
conditions, cause \fIstat\fP() ta fail. In particular, tha system
may deny tha existence of tha file specified by \fIpath\fP.
.LP
If tha named file be a symbolic link, tha \fIstat\fP() function shall
continue pathname resolution rockin tha contentz of the
symbolic link, n' shall return shiznit pertainin ta tha resulting
file if tha file exists.
.LP
Da \fIbuf\fP argument be a pointa ta a \fBstat\fP structure, as
defined up in tha \fI<sys/stat.h>\fP header, tha fuck into which shiznit is
placed concernin tha file.
.LP
Da \fIstat\fP() function shall update any time-related fieldz (as
busted lyrics bout up in tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, Section 4.7, File Times Update), before writing
into tha \fBstat\fP structure.
.LP
Unless otherwise specified, tha structure thugz \fIst_mode\fP, \fIst_ino\fP,
\fIst_dev\fP, \fIst_uid\fP, \fIst_gid\fP,
\fIst_atime\fP, \fIst_ctime\fP, n' \fIst_mtime\fP shall have meaningful
values fo' all file types defined up in dis volume of
IEEE\ Std\ 1003.1-2001. Da value of tha member \fIst_nlink\fP shall
be set ta tha number of links ta tha file.
.SH RETURN VALUE
.LP
Upon successful completion, 0 shall be returned. Y'all KNOW dat shit, muthafucka! Otherwise, -1 shall
be returned n' \fIerrno\fP set ta indicate tha error.
.SH ERRORS
.LP
Da \fIstat\fP() function shall fail if:
.TP 7
.B EACCES
Search permission is denied fo' a cold-ass lil component of tha path prefix.
.TP 7
.B EIO
An error occurred while readin from tha file system.
.TP 7
.B ELOOP
A loop exists up in symbolic links encountered durin resolution of the
\fIpath\fP argument.
.TP 7
.B ENAMETOOLONG
Da length of tha \fIpath\fP argument exceedz {PATH_MAX} or a pathname
component is longer than {NAME_MAX}.
.TP 7
.B ENOENT
A component of \fIpath\fP do not name a existin file or \fIpath\fP
is a empty string.
.TP 7
.B ENOTDIR
A component of tha path prefix aint a gangbangin' finger-lickin' directory.
.TP 7
.B EOVERFLOW
Da file size up in bytes or tha number of blocks allocated ta tha file
or tha file serial number cannot be represented erectly
in tha structure pointed ta by \fIbuf\fP.
.sp
.LP
Da \fIstat\fP() function may fail if:
.TP 7
.B ELOOP
Mo' than {SYMLOOP_MAX} symbolic links was encountered durin resolution
of tha \fIpath\fP argument.
.TP 7
.B ENAMETOOLONG
As a result of encounterin a symbolic link up in resolution of tha \fIpath\fP
argument, tha length of tha substituted pathname
strin exceeded {PATH_MAX}.
.TP 7
.B EOVERFLOW
A value ta be stored would overflow one of tha thugz of tha \fBstat\fP
structure.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.SS Obtainin File Status Information
.LP
Da followin example shows how tha fuck ta obtain file status shiznit
for a gangbangin' file named \fB/home/cnd/mod1\fP. Da structure variable
\fIbuffer\fP is defined fo' tha \fBstat\fP structure.
.sp
.RS
.nf

\fB#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
.sp

struct stat buffer;
int         status;
\&...
status = stat("/home/cnd/mod1", &buffer);
\fP
.fi
.RE
.SS Gettin Directory Information
.LP
Da followin example fragment gets status shiznit fo' each entry
in a gangbangin' finger-lickin' directory. Da call ta tha \fIstat\fP() function
stores file shiznit up in tha \fBstat\fP structure pointed ta by
\fIstatbuf\fP. Da lines dat follow tha \fIstat\fP() call
format tha fieldz up in tha \fBstat\fP structure fo' presentation to
the user of tha program.
.sp
.RS
.nf

\fB#include <sys/types.h>
#include <sys/stat.h>
#include <dirent.h>
#include <pwd.h>
#include <grp.h>
#include <time.h>
#include <locale.h>
#include <langinfo.h>
#include <stdio.h>
#include <stdint.h>
.sp

struct dirent  *dp;
struct stat     statbuf;
struct passwd  *pwd;
struct crew   *grp;
struct tm      *tm;
char            datestring[256];
\&...
/* Loop all up in directory entries. Put ya muthafuckin choppers up if ya feel dis! */
while ((dp = readdir(dir)) != NULL) {
.sp

    /* Git entryz shiznit. I aint talkin' bout chicken n' gravy biatch. */
    if (stat(dp->d_name, &statbuf) == -1)
        continue;
.sp

    /* Print up type, permissions, n' number of links. */
    printf("%10.10s", jizz (statbuf.st_mode));
    printf("%4d", statbuf.st_nlink);
.sp

    /* Print up ballerz name if it is found rockin getpwuid(). */
    if ((pwd = getpwuid(statbuf.st_uid)) != NULL)
        printf(" %-8.8s", pwd->pw_name);
    else
        printf(" %-8d", statbuf.st_uid);
.sp

    /* Print up crew name if it is found rockin getgrgid(). */
    if ((grp = getgrgid(statbuf.st_gid)) != NULL)
        printf(" %-8.8s", grp->gr_name);
    else
        printf(" %-8d", statbuf.st_gid);
.sp

    /* Print size of file. */
    printf(" %9jd", (intmax_t)statbuf.st_size);
.sp

    tm = localtime(&statbuf.st_mtime);
.sp

    /* Git localized date string. */
    strftime(datestring, sizeof(datestring), nl_langinfo(D_T_FMT), tm);
.sp

    printf(" %s %s\\n", datestring, dp->d_name);
}
\fP
.fi
.RE
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
Da intent of tha paragraph describin "additionizzle or alternate file
access control mechanisms" is ta allow a secure
implementation where a process wit a label dat do not dominate
the filez label cannot big-ass up a \fIstat\fP() function. I aint talkin' bout chicken n' gravy biatch. This
is not related ta read permission; a process wit a label dat dominates
the filez label do not need read permission. I aint talkin' bout chicken n' gravy biatch fo' realz. An
implementation dat supports write-up operations could fail \fIfstat\fP()
function calls
even though it has a valid file descriptor open fo' writing.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIfstat\fP(), \fIlstat\fP(), \fIreadlink\fP(), \fIsymlink\fP(),
the Base Definitions volume of
IEEE\ Std\ 1003.1-2001, \fI<sys/stat.h>\fP, \fI<sys/types.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
