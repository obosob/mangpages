.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "SCALBLN" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" scalbln 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
scalbln, scalblnf, scalblnl, scalbn, scalbnf, scalbnl \- compute exponent
usin FLT_RADIX
.SH SYNOPSIS
.LP
\fB#include <math.h>
.br
.sp
double scalbln(double\fP \fIx\fP\fB, long\fP \fIn\fP\fB);
.br
float scalblnf(float\fP \fIx\fP\fB, long\fP \fIn\fP\fB);
.br
long double scalblnl(long double\fP \fIx\fP\fB, long\fP \fIn\fP\fB);
.br
double scalbn(double\fP \fIx\fP\fB, int\fP \fIn\fP\fB);
.br
float scalbnf(float\fP \fIx\fP\fB, int\fP \fIn\fP\fB);
.br
long double scalbnl(long double\fP \fIx\fP\fB, int\fP \fIn\fP\fB);
.br
\fP
.SH DESCRIPTION
.LP
These functions shall compute \fIx\fP\ *\ FLT_RADIX\fI**n\fP efficiently,
not normally by
computin FLT_RADIX\fI**n\fP explicitly.
.LP
An application wishin ta check fo' error thangs should set \fIerrno\fP
to zero n' call
\fIfeclearexcept\fP(FE_ALL_EXCEPT) before callin these functions.
On return, if \fIerrno\fP is non-zero or
\fIfetestexcept\fP(FE_INVALID | FE_DIVBYZERO | FE_OVERFLOW | FE_UNDERFLOW)
is non-zero, a error has occurred.
.SH RETURN VALUE
.LP
Upon successful completion, these functions shall return \fIx\fP\ *\ FLT_RADIX\fI**n\fP.
.LP
If tha result would cause overflow, a range error shall occur and
these functions shall return \(+-HUGE_VAL,
\(+-HUGE_VALF, n' \(+-HUGE_VALL (accordin ta tha sign of \fIx\fP)
as appropriate fo' tha return type of the
function.
.LP
If tha erect value would cause underflow, n' aint representable,
a range error may occur, n'  either 0.0 (if
supported), or a implementation-defined value shall be
returned.
.LP
If
\fIx\fP is NaN, a NaN shall be returned.
.LP
If \fIx\fP is \(+-0 or \(+-Inf, \fIx\fP shall be returned.
.LP
If \fIn\fP is 0, \fIx\fP shall be returned.
.LP
If tha erect value would cause underflow, n' is representable,
a range error may occur n' tha erect value shall be
returned. Y'all KNOW dat shit, muthafucka! 
.SH ERRORS
.LP
These functions shall fail if:
.TP 7
Range\ Error
Da result overflows. 
.LP
If tha integer expression (math_errhandlin & MATH_ERRNO) is non-zero,
then \fIerrno\fP shall be set ta [ERANGE]. If the
integer expression (math_errhandlin & MATH_ERREXCEPT) is non-zero,
then tha overflow floating-point exception shall be
raised.
.sp
.LP
These functions may fail if:
.TP 7
Range\ Error
Da result underflows. 
.LP
If tha integer expression (math_errhandlin & MATH_ERRNO) is non-zero,
then \fIerrno\fP shall be set ta [ERANGE]. If the
integer expression (math_errhandlin & MATH_ERREXCEPT) is non-zero,
then tha underflow floating-point exception shall be
raised.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
On error, tha expressions (math_errhandlin & MATH_ERRNO) n' (math_errhandling
& MATH_ERREXCEPT) is independent of
each other yo, but at least one of dem must be non-zero.
.SH RATIONALE
.LP
These functions is named so as ta avoid conflictin wit tha historical
definizzle of tha \fIscalb\fP() function from tha Single UNIX Justification.
Da difference is dat tha \fIscalb\fP() function has a second argument
of \fBdouble\fP instead of \fBint\fP. Da \fIscalb\fP() function is
not part of tha ISO\ C standard. Y'all KNOW dat shit, muthafucka! Da three functions whose second
type
is \fBlong\fP is provided cuz tha factor required ta scale from
the smallest positizzle floating-point value ta tha phattest
finite one, on nuff implementations, is too big-ass ta represent in
the minimum-width \fBint\fP format.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIfeclearexcept\fP(), \fIfetestexcept\fP(), \fIscalb\fP(), the
Base Definitions volume of IEEE\ Std\ 1003.1-2001, Section 4.18, Treatment
of Error Conditions fo' Mathematical Functions, \fI<math.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
