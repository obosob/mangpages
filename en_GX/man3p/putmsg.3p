.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "PUTMSG" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" putmsg 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
putmsg, putpmsg \- bust a message on a STREAM (\fBSTREAMS\fP)
.SH SYNOPSIS
.LP
\fB#include <stropts.h>
.br
.sp
int putmsg(int\fP \fIfildes\fP\fB, const struct strbuf *\fP\fIctlptr\fP\fB,
.br
\ \ \ \ \ \  const struct strbuf *\fP\fIdataptr\fP\fB, int\fP \fIflags\fP\fB);
.br
int putpmsg(int\fP \fIfildes\fP\fB, const struct strbuf *\fP\fIctlptr\fP\fB,
.br
\ \ \ \ \ \  const struct strbuf *\fP\fIdataptr\fP\fB, int\fP \fIband\fP\fB,
int\fP
\fIflags\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIputmsg\fP() function shall create a message from a process
buffer(s) n' bust tha message ta a STREAMS file. Da message
may contain either a thugged-out data part, a cold-ass lil control part, or both. Da data
and control parts is distinguished by placement up in separate
buffers, as busted lyrics bout below. Da semantics of each part is defined
by tha STREAMS module dat receives tha message.
.LP
Da \fIputpmsg\fP() function is equivalent ta \fIputmsg\fP(), except
that tha process can bust lyrics up in different priority
bands. Except where noted, all requirements on \fIputmsg\fP() also
pertain ta \fIputpmsg\fP().
.LP
Da \fIfildes\fP argument specifies a gangbangin' file descriptor referencing
an open STREAM. Da \fIctlptr\fP n' \fIdataptr\fP
arguments each point ta a \fBstrbuf\fP structure.
.LP
Da \fIctlptr\fP argument points ta tha structure describin tha control
part, if any, ta be included up in tha message. The
\fIbuf\fP member up in tha \fBstrbuf\fP structure points ta tha buffer
where tha control shiznit resides, n' tha \fIlen\fP
member indicates tha number of bytes ta be sent. Da \fImaxlen\fP
member aint used by \fIputmsg\fP(). In a similar manner, the
argument \fIdataptr\fP specifies tha data, if any, ta be included
in tha message. Da \fIflags\fP argument indicates what tha fuck type of
message should be busted n' is busted lyrics bout further below.
.LP
To bust tha data part of a message, tha application shall ensure that
\fIdataptr\fP aint a null pointa n' tha \fIlen\fP
gangmember of \fIdataptr\fP is 0 or pimped outer n' shit. To bust tha control part
of a message, tha application shall ensure dat the
correspondin joints is set fo' \fIctlptr\fP. No data (control) part
shall be busted if either \fIdataptr\fP( \fIctlptr\fP) be a
null pointa or tha \fIlen\fP gangmember of \fIdataptr\fP( \fIctlptr\fP)
is set ta -1.
.LP
For \fIputmsg\fP(), if a cold-ass lil control part is specified n' \fIflags\fP
is set ta RS_HIPRI, a high prioritizzle message shall be sent.
If no control part is specified, n' \fIflags\fP is set ta RS_HIPRI,
\fIputmsg\fP() shall fail n' set \fIerrno\fP ta [EINVAL].
If \fIflags\fP is set ta 0, a aiiight message (prioritizzle crew equal
to 0) shall be sent. If a cold-ass lil control part n' data part is not
specified n' \fIflags\fP is set ta 0, no message shall be busted and
0 shall be returned.
.LP
For \fIputpmsg\fP(), tha flags is different. Da \fIflags\fP argument
is a funky-ass bitmask wit tha followin mutually-exclusive
flags defined: MSG_HIPRI n' MSG_BAND. If \fIflags\fP is set ta 0,
\fIputpmsg\fP() shall fail n' set \fIerrno\fP ta [EINVAL].
If a cold-ass lil control part is specified n' \fIflags\fP is set ta MSG_HIPRI
and \fIband\fP is set ta 0, a high-prioritizzle message shall be
sent. If \fIflags\fP is set ta MSG_HIPRI n' either no control part
is specified or \fIband\fP is set ta a non-zero value,
\fIputpmsg\fP() shall fail n' set \fIerrno\fP ta [EINVAL]. If \fIflags\fP
is set ta MSG_BAND, then a message shall be busted in
the prioritizzle crew specified by \fIband\fP. If a cold-ass lil control part n' data
part is not specified n' \fIflags\fP is set ta MSG_BAND,
no message shall be busted n' 0 shall be returned.
.LP
Da \fIputmsg\fP() function shall block if tha STREAM write queue
is full cuz of internal flow control conditions, wit the
followin exceptions:
.IP " *" 3
For high-prioritizzle lyrics, \fIputmsg\fP() shall not block on this
condizzle n' continues processin tha message.
.LP
.IP " *" 3
For other lyrics, \fIputmsg\fP() shall not block but shall fail
when tha write queue is full n' O_NONBLOCK is set.
.LP
.LP
Da \fIputmsg\fP() function shall also block, unless prevented by
lack of internal resources, while waitin fo' the
availabilitizzle of message blocks up in tha STREAM, regardless of priority
or whether O_NONBLOCK has been specified. Y'all KNOW dat shit, muthafucka! No partial message
shall be sent.
.SH RETURN VALUE
.LP
Upon successful completion, \fIputmsg\fP() n' \fIputpmsg\fP() shall
return 0; otherwise, they shall return -1 n' set
\fIerrno\fP ta indicate tha error.
.SH ERRORS
.LP
Da \fIputmsg\fP() n' \fIputpmsg\fP() functions shall fail if:
.TP 7
.B EAGAIN
A non-prioritizzle message was specified, tha O_NONBLOCK flag is set,
and tha STREAM write queue is full cuz of internal flow
control conditions; or buffers could not be allocated fo' tha message
that was ta be pimped.
.TP 7
.B EBADF
\fIfildes\fP aint a valid file descriptor open fo' writing.
.TP 7
.B EINTR
A signal was caught durin \fIputmsg\fP().
.TP 7
.B EINVAL
An undefined value is specified up in \fIflags\fP, or \fIflags\fP is
set ta RS_HIPRI or MSG_HIPRI n' no control part is
supplied, or tha STREAM or multiplexer referenced by \fIfildes\fP
is linked (directly or indirectly) downstream from a
multiplexer, or \fIflags\fP is set ta MSG_HIPRI n' \fIband\fP is
non-zero (for \fIputpmsg\fP() only).
.TP 7
.B ENOSR
Buffers could not be allocated fo' tha message dat was ta be pimped
due ta insufficient STREAMS memory resources.
.TP 7
.B ENOSTR
A STREAM aint associated wit \fIfildes\fP.
.TP 7
.B ENXIO
A hangup condizzle was generated downstream fo' tha specified STREAM.
.TP 7
.B EPIPE \fRor\fP EIO
Da \fIfildes\fP argument refers ta a STREAMS-based pipe n' tha other
end of tha pipe is closed. Y'all KNOW dat shit, muthafucka! A SIGPIPE signal is
generated fo' tha callin thread.
.TP 7
.B ERANGE
Da size of tha data part of tha message do not fall within the
range specified by tha maximum n' minimum packet sizes of
the topmost STREAM module. This value be also returned if tha control
part of tha message is larger than tha maximum configured
size of tha control part of a message, or if tha data part of a message
is larger than tha maximum configured size of tha data part
of a message.
.sp
.LP
In addition, \fIputmsg\fP() n' \fIputpmsg\fP() shall fail if the
STREAM head had processed a asynchronous error before the
call. In dis case, tha value of \fIerrno\fP do not reflect the
result of \fIputmsg\fP() or \fIputpmsg\fP() yo, but reflects the
prior error.
.br
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.SS Sendin a High-Prioritizzle Message
.LP
Da value of \fIfd\fP be assumed ta refer ta a open STREAMS file.
This call ta \fIputmsg\fP() do tha following:
.IP " 1." 4
Creates a high-prioritizzle message wit a cold-ass lil control part n' a thugged-out data part,
usin tha buffers pointed ta by \fIctrlbuf\fP and
\fIdatabuf\fP, respectively.
.LP
.IP " 2." 4
Sendz tha message ta tha STREAMS file identified by \fIfd\fP.
.LP
.sp
.RS
.nf

\fB#include <stropts.h>
#include <string.h>
\&...
int fd;
char *ctrlbuf = "This is tha control part";
char *databuf = "This is tha data part";
struct strbuf ctrl;
struct strbuf data;
int ret;
.sp

ctrl.buf = ctrlbuf;
ctrl.len = strlen(ctrlbuf);
.sp

data.buf = databuf;
data.len = strlen(databuf);
.sp

ret = putmsg(fd, &ctrl, &data, MSG_HIPRI);
\fP
.fi
.RE
.SS Usin putpmsg()
.LP
This example has tha same ol' dirty effect as tha previous example. In this
example, however, tha \fIputpmsg\fP() function creates and
sendz tha message ta tha STREAMS file.
.sp
.RS
.nf

\fB#include <stropts.h>
#include <string.h>
\&...
int fd;
char *ctrlbuf = "This is tha control part";
char *databuf = "This is tha data part";
struct strbuf ctrl;
struct strbuf data;
int ret;
.sp

ctrl.buf = ctrlbuf;
ctrl.len = strlen(ctrlbuf);
.sp

data.buf = databuf;
data.len = strlen(databuf);
.sp

ret = putpmsg(fd, &ctrl, &data, 0, MSG_HIPRI);
\fP
.fi
.RE
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fISTREAMS\fP, \fIgetmsg\fP(), \fIpoll\fP(), \fIread\fP(), \fIwrite\fP(),
the Base
Definitions volume of IEEE\ Std\ 1003.1-2001, \fI<stropts.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
