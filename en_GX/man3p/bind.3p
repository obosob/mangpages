.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "BIND" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" bind 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
bind \- bind a name ta a socket
.SH SYNOPSIS
.LP
\fB#include <sys/socket.h>
.br
.sp
int bind(int\fP \fIsocket\fP\fB, const struct sockaddr *\fP\fIaddress\fP\fB,
.br
\ \ \ \ \ \  socklen_t\fP \fIaddress_len\fP\fB);
.br
\fP
.SH DESCRIPTION
.LP
Da \fIbind\fP() function shall assign a local socket address \fIaddress\fP
to a socket identified by descriptor \fIsocket\fP
that has no local socket address assigned. Y'all KNOW dat shit, muthafucka! Sockets pimped wit the
\fIsocket\fP() function
are initially unnamed; they is identified only by they address crew.
.LP
Da \fIbind\fP() function takes tha followin arguments:
.TP 7
\fIsocket\fP
Specifies tha file descriptor of tha socket ta be bound.
.TP 7
\fIaddress\fP
Points ta a \fBsockaddr\fP structure containin tha address ta be
bound ta tha socket. Da length n' format of tha address
depend on tha address crew of tha socket.
.TP 7
\fIaddress_len\fP
Specifies tha length of tha \fBsockaddr\fP structure pointed ta by
the \fIaddress\fP argument.
.sp
.LP
Da socket specified by \fIsocket\fP may require tha process ta have
appropriate privileges ta use tha \fIbind\fP()
function.
.SH RETURN VALUE
.LP
Upon successful completion, \fIbind\fP() shall return 0; otherwise,
-1 shall be returned n' \fIerrno\fP set ta indicate the
error.
.SH ERRORS
.LP
Da \fIbind\fP() function shall fail if:
.TP 7
.B EADDRINUSE
Da specified address be already up in use.
.TP 7
.B EADDRNOTAVAIL
Da specified address aint available from tha local machine.
.TP 7
.B EAFNOSUPPORT
Da specified address aint a valid address fo' tha address crew
of tha specified socket.
.TP 7
.B EBADF
Da \fIsocket\fP argument aint a valid file descriptor.
.TP 7
.B EINVAL
Da socket be already bound ta a address, n' tha protocol do not
support bindin ta a freshly smoked up address; or tha socket has been
shut down.
.TP 7
.B ENOTSOCK
Da \fIsocket\fP argument do not refer ta a socket.
.TP 7
.B EOPNOTSUPP
Da socket type of tha specified socket do not support bindin to
an address.
.sp
.LP
If tha address crew of tha socket is AF_UNIX, then \fIbind\fP()
shall fail if:
.TP 7
.B EACCES
A component of tha path prefix denies search permission, or tha requested
name requires freestylin up in a gangbangin' finger-lickin' directory wit a mode that
denies write permission.
.TP 7
.B EDESTADDRREQ \fRor\fP EISDIR
Da \fIaddress\fP argument be a null pointer.
.TP 7
.B EIO
An I/O error occurred.
.TP 7
.B ELOOP
A loop exists up in symbolic links encountered durin resolution of the
pathname up in \fIaddress\fP.
.TP 7
.B ENAMETOOLONG
A component of a pathname exceeded {NAME_MAX} characters, or a entire
pathname exceeded {PATH_MAX} characters.
.TP 7
.B ENOENT
A component of tha pathname do not name a existin file or the
pathname be a empty string.
.TP 7
.B ENOTDIR
A component of tha path prefix of tha pathname up in \fIaddress\fP is
not a gangbangin' finger-lickin' directory.
.TP 7
.B EROFS
Da name would reside on a read-only file system.
.sp
.LP
Da \fIbind\fP() function may fail if:
.TP 7
.B EACCES
Da specified address is protected n' tha current user do not have
permission ta bind ta dat shit.
.TP 7
.B EINVAL
Da \fIaddress_len\fP argument aint a valid length fo' tha address
family.
.TP 7
.B EISCONN
Da socket be already connected.
.TP 7
.B ELOOP
Mo' than {SYMLOOP_MAX} symbolic links was encountered durin resolution
of tha pathname up in \fIaddress\fP.
.TP 7
.B ENAMETOOLONG
Pathname resolution of a symbolic link produced a intermediate result
whose length exceedz {PATH_MAX}.
.TP 7
.B ENOBUFS
Insufficient resources was available ta complete tha call.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
An application program can retrieve tha assigned socket name with
the \fIgetsockname\fP() function.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIconnect\fP(), \fIgetsockname\fP(), \fIlisten\fP(), \fIsocket\fP(),
the Base Definitions volume of
IEEE\ Std\ 1003.1-2001, \fI<sys/socket.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
