.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "PTHREAD_SPIN_DESTROY" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" pthread_spin_destroy 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
pthread_spin_destroy, pthread_spin_init \- destroy or initialize a
spin lock object (\fBADVANCED REALTIME
THREADS\fP)
.SH SYNOPSIS
.LP
\fB#include <pthread.h>
.br
.sp
int pthread_spin_destroy(pthread_spinlock_t *\fP\fIlock\fP\fB);
.br
int pthread_spin_init(pthread_spinlock_t *\fP\fIlock\fP\fB, int\fP
\fIpshared\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIpthread_spin_destroy\fP() function shall destroy tha spin lock
referenced by \fIlock\fP n' release any resources used
by tha lock. Da effect of subsequent use of tha lock is undefined
until tha lock is reinitialized by another call to
\fIpthread_spin_init\fP(). Da thangs up in dis biatch is undefined if \fIpthread_spin_destroy\fP()
is called when a thread holdz tha lock, or
if dis function is called wit a uninitialized thread spin lock.
.LP
Da \fIpthread_spin_init\fP() function shall allocate any resources
required ta use tha spin lock referenced by \fIlock\fP and
initialize tha lock ta a unlocked state.
.LP
If tha Thread Process-Shared Synchronization option is supported and
the value of \fIpshared\fP is PTHREAD_PROCESS_SHARED, the
implementation shall permit tha spin lock ta be operated upon by any
thread dat has access ta tha memory where tha spin lock is
allocated, even if it be allocated up in memory dat is shared by multiple
processes.
.LP
If tha Thread Process-Shared Synchronization option is supported and
the value of \fIpshared\fP is PTHREAD_PROCESS_PRIVATE,
or if tha option aint supported, tha spin lock shall only be
operated upon by threadz pimped within tha same process as tha thread
that initialized tha spin lock. If threadz of differing
processes attempt ta operate on such a spin lock, tha behavior is
undefined.
.LP
Da thangs up in dis biatch is undefined if \fIpthread_spin_init\fP() is called specifying
an already initialized spin lock. Da thangs up in dis biatch are
undefined if a spin lock is used without first bein initialized.
.LP
If tha \fIpthread_spin_init\fP() function fails, tha lock aint initialized
and tha contentz of \fIlock\fP is undefined.
.LP
Only tha object referenced by \fIlock\fP may be used fo' struttin
synchronization.
.LP
Da result of referrin ta copiez of dat object up in calls ta \fIpthread_spin_destroy\fP(),
\fIpthread_spin_lock\fP(), \fIpthread_spin_trylock\fP(), or \fIpthread_spin_unlock\fP()
is undefined.
.SH RETURN VALUE
.LP
Upon successful completion, these functions shall return zero; otherwise,
an error number shall be moonwalked back ta indicate the
error.
.SH ERRORS
.LP
These functions may fail if:
.TP 7
.B EBUSY
Da implementation has detected a attempt ta initialize or destroy
a spin lock while it is up in use (for example, while being
used up in a \fIpthread_spin_lock\fP() call) by another thread.
.TP 7
.B EINVAL
Da value specified by \fIlock\fP is invalid.
.sp
.LP
Da \fIpthread_spin_init\fP() function shall fail if:
.TP 7
.B EAGAIN
Da system lacks tha necessary resources ta initialize another spin
lock.
.TP 7
.B ENOMEM
Insufficient memory exists ta initialize tha lock.
.sp
.LP
These functions shall not return a error code of [EINTR].
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
Da \fIpthread_spin_destroy\fP() n' \fIpthread_spin_init\fP() functions
are part of tha Spin Locks option n' need not be
provided on all implementations.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIpthread_spin_lock\fP(), \fIpthread_spin_unlock\fP(), tha Base
Definitions volume of IEEE\ Std\ 1003.1-2001, \fI<pthread.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
