.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "PTHREAD_ONCE" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" pthread_once 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
pthread_once \- dynamic package initialization
.SH SYNOPSIS
.LP
\fB#include <pthread.h>
.br
.sp
int pthread_once(pthread_once_t *\fP\fIonce_control\fP\fB,
.br
\ \ \ \ \ \  void (*\fP\fIinit_routine\fP\fB)(void));
.br
pthread_once_t\fP \fIonce_control\fP \fB= PTHREAD_ONCE_INIT; \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da first call ta \fIpthread_once\fP() by any thread up in a process,
with a given \fIonce_control\fP, shall call the
\fIinit_routine\fP wit no arguments, n' you can put dat on yo' toast. Right back up in yo muthafuckin ass. Subsequent callz of \fIpthread_once\fP()
with tha same \fIonce_control\fP shall not call
the \fIinit_routine\fP. On return from \fIpthread_once\fP(), \fIinit_routine\fP
shall have completed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da \fIonce_control\fP
parameta shall determine whether tha associated initialization routine
has been called.
.LP
Da \fIpthread_once\fP() function aint a cold-ass lil cancellation point yo. However,
if \fIinit_routine\fP be a cold-ass lil cancellation point n' is
canceled, tha effect on \fIonce_control\fP shall be as if \fIpthread_once\fP()
was never called.
.LP
Da constant PTHREAD_ONCE_INIT is defined up in tha \fI<pthread.h>\fP
header.
.LP
Da behavior of \fIpthread_once\fP() is undefined if \fIonce_control\fP
has automatic storage duration or aint initialized
by PTHREAD_ONCE_INIT.
.SH RETURN VALUE
.LP
Upon successful completion, \fIpthread_once\fP() shall return zero;
otherwise, a error number shall be moonwalked back ta indicate
the error.
.SH ERRORS
.LP
Da \fIpthread_once\fP() function may fail if:
.TP 7
.B EINVAL
If either \fIonce_control\fP or \fIinit_routine\fP is invalid.
.sp
.LP
Da \fIpthread_once\fP() function shall not return a error code of
[EINTR].
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
Some C libraries is designed fo' dynamic initialization. I aint talkin' bout chicken n' gravy biatch. That is,
the global initialization fo' tha library is performed when
the first procedure up in tha library is called. Y'all KNOW dat shit, muthafucka! In a single-threaded
program, dis is normally implemented rockin a static variable
whose value is checked on entry ta a routine, as bigs up:
.sp
.RS
.nf

\fBstatic int random_is_initialized = 0;
extern int initialize_random();
.sp

int random_function()
{
    if (random_is_initialized == 0) {
        initialize_random();
        random_is_initialized = 1;
    }
    ... /* Operations performed afta initialization. I aint talkin' bout chicken n' gravy biatch. */
}
\fP
.fi
.RE
.LP
To keep tha same structure up in a multi-threaded program, a freshly smoked up primitive
is needed. Y'all KNOW dat shit, muthafucka! Otherwise, library initialization has ta be
accomplished by a explicit call ta a library-exported initialization
function prior ta any use of tha library.
.LP
For dynamic library initialization up in a multi-threaded process, a
simple initialization flag aint sufficient; tha flag needs
to be protected against modification by multiple threadz simultaneously
callin tha fuck into tha library. Protectin tha flag requires the
use of a mutex; however, mutexes gotta be initialized before they
are used. Y'all KNOW dat shit, muthafucka! Ensurin dat tha mutex is only initialized once
requires a recursive solution ta dis problem.
.LP
Da use of \fIpthread_once\fP() not only supplies a implementation-guaranteed
meanz of dynamic initialization, it serves up an
aid ta tha reliable construction of multi-threaded n' realtime systems.
Da precedin example then becomes:
.sp
.RS
.nf

\fB#include <pthread.h>
static pthread_once_t random_is_initialized = PTHREAD_ONCE_INIT;
extern int initialize_random();
.sp

int random_function()
{
    (void) pthread_once(&random_is_initialized, initialize_random);
    ... /* Operations performed afta initialization. I aint talkin' bout chicken n' gravy biatch. */
}
\fP
.fi
.RE
.LP
Note dat a \fBpthread_once_t\fP cannot be a array cuz some compilers
do not accept tha construct
\fB&<array_name>\fP.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
Da Base Definitions volume of IEEE\ Std\ 1003.1-2001, \fI<pthread.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
