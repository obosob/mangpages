.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "DLOPEN" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" dlopen 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
dlopen \- bust access ta a executable object file
.SH SYNOPSIS
.LP
\fB#include <dlfcn.h>
.br
.sp
void *dlopen(const char *\fP\fIfile\fP\fB, int\fP \fImode\fP\fB);
\fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIdlopen\fP() function shall cook up a executable object file specified
by \fIfile\fP available ta tha callin program. The
class of filez eligible fo' dis operation n' tha manner of their
construction is implementation-defined, though typically such
filez is executable objects like fuckin shared libraries, relocatable
files, or programs. Note dat some implementations permit the
construction of dependencies between such objects dat is embedded
within files. In such cases, a \fIdlopen\fP() operation shall
load such dependencies up in addizzle ta tha object referenced by \fIfile\fP.
Implementations may also impose specific constraints on
the construction of programs dat can employ \fIdlopen\fP() n' its
related skillz.
.LP
A successful \fIdlopen\fP() shall return a \fIhandle\fP which the
calla may use on subsequent calls ta \fIdlsym\fP() n' \fIdlclose\fP().
Da value of this
\fIhandle\fP should not be interpreted up in any way by tha caller.
.LP
Da \fIfile\fP argument is used ta construct a pathname ta tha object
file. If \fIfile\fP gotz nuff a slash character, the
\fIfile\fP argument is used as tha pathname fo' tha file. Otherwise,
\fIfile\fP is used up in a implementation-defined manner to
yield a pathname.
.LP
If tha value of \fIfile\fP is 0, \fIdlopen\fP() shall provide a \fIhandle\fP
on a global symbol object. This object shall
provide access ta tha symbols from a ordered set of objects consisting
of tha original gangsta program image file, together wit any
objects loaded at program start-up as specified by dat process image
file (for example, shared libraries), n' tha set of objects
loaded rockin a \fIdlopen\fP() operation together wit tha RTLD_GLOBAL
flag fo' realz. As tha latta set of objects can chizzle during
execution, tha set identified by \fIhandle\fP can also chizzle dynamically.
.LP
Only a single copy of a object file is brought tha fuck into tha address space,
even if \fIdlopen\fP() is invoked multiple times in
reference ta tha file, n' even if different pathnames is used to
reference tha file.
.LP
Da \fImode\fP parameta raps bout how tha fuck \fIdlopen\fP() shall operate
upon \fIfile\fP wit respect ta tha processin of
relocations n' tha scope of visibilitizzle of tha symbols provided within
\fIfile\fP. When a object is brought tha fuck into tha address
space of a process, it may contain references ta symbols whose addresses
are not known until tha object is loaded. Y'all KNOW dat shit, muthafucka! These references
shall be relocated before tha symbols can be accessed. Y'all KNOW dat shit, muthafucka! Da \fImode\fP
parameta governs when these relocations take place n' may
have tha followin joints:
.TP 7
RTLD_LAZY
Relocations shall be performed at a implementation-defined time,
rangin from tha time of tha \fIdlopen\fP() call until the
first reference ta a given symbol occurs. Right back up in yo muthafuckin ass. Specifyin RTLD_LAZY should
improve performizzle on implementations supportin dynamic
symbol bindin as a process may not reference all of tha functions
in any given object fo' realz. And, fo' systems supportin dynamic symbol
resolution fo' aiiight process execution, dis behavior mimics the
normal handlin of process execution.
.TP 7
RTLD_NOW
All necessary relocations shall be performed when tha object is first
loaded. Y'all KNOW dat shit, muthafucka! This may waste some processin if relocations are
performed fo' functions dat is never referenced. Y'all KNOW dat shit, muthafucka! This behavior may
be useful fo' applications dat need ta know as soon as an
object is loaded dat all symbols referenced durin execution are
available.
.sp
.LP
Any object loaded by \fIdlopen\fP() dat requires relocations against
global symbols can reference tha symbols up in tha original
process image file, any objects loaded at program start-up, from the
object itself as well as any other object included up in tha same
\fIdlopen\fP() invocation, n' any objects dat was loaded up in any
\fIdlopen\fP() invocation n' which specified tha RTLD_GLOBAL
flag. To determine tha scope of visibilitizzle fo' tha symbols loaded
with a \fIdlopen\fP() invocation, tha \fImode\fP parameter
should be a funky-ass bitwise-inclusive OR wit one of tha followin joints:
.TP 7
RTLD_GLOBAL
Da objectz symbols shall be made available fo' tha relocation processing
of any other object. In addition, symbol lookup
usin \fIdlopen\fP(\fI0, mode\fP) n' a associated \fIdlsym\fP()
allows objects loaded
with dis \fImode\fP ta be searched.
.TP 7
RTLD_LOCAL
Da objectz symbols shall not be made available fo' tha relocation
processin of any other object.
.sp
.LP
If neither RTLD_GLOBAL nor RTLD_LOCAL is specified, then a implementation-defined
default behavior shall be applied.
.LP
If a \fIfile\fP is specified up in multiple \fIdlopen\fP() invocations,
\fImode\fP is interpreted at each invocation. I aint talkin' bout chicken n' gravy biatch. Note,
however, dat once RTLD_NOW has been specified all relocations shall
have been completed renderin further RTLD_NOW operations
redundant n' any further RTLD_LAZY operations irrelevant. Right back up in yo muthafuckin ass. Similarly,
note dat once RTLD_GLOBAL has been specified tha object
shall maintain tha RTLD_GLOBAL status regardless of any previous or
future justification of RTLD_LOCAL, as long as tha object
remains up in tha address space (see \fIdlclose\fP()).
.LP
Symbols introduced tha fuck into a program all up in calls ta \fIdlopen\fP()
may be used up in relocation activities. Put ya muthafuckin choppers up if ya feel dis! Right back up in yo muthafuckin ass. Symbols so introduced
may duplicate symbols already defined by tha program or previous \fIdlopen\fP()
operations. To resolve tha ambiguitizzles such a
situation might present, tha resolution of a symbol reference ta symbol
definizzle is based on a symbol resolution order n' shit. Two such
resolution ordaz is defined: \fIload\fP or \fIdependency\fP ordering.
Load order establishes a orderin among symbol
definitions, such dat tha definizzle first loaded (includin definitions
from tha image file n' any dependent objects loaded with
it) has prioritizzle over objects added lata (via \fIdlopen\fP()). Load
orderin is used up in relocation processing. Dependency
orderin uses a funky-ass breadth-first order startin wit a given object,
then all of its dependencies, then any dependentz of them,
iteratin until all dependencies is satisfied. Y'all KNOW dat shit, muthafucka! With tha exception
of tha global symbol object obtained via a \fIdlopen\fP()
operation on a \fIfile\fP of 0, dependency orderin is used by the
\fIdlsym\fP() function.
Load orderin is used up in \fIdlsym\fP() operations upon tha global
symbol object.
.LP
When a object is first made accessible via \fIdlopen\fP() it and
its dependent objects is added up in dependency order n' shit. Once all
the objects is added, relocations is performed rockin load order.
Note dat if a object or its dependencies had been previously
loaded, tha load n' dependency ordaz may yield different resolutions.
.LP
Da symbols introduced by \fIdlopen\fP() operations n' available
all up in \fIdlsym\fP()
are at a minimum dem which is exported as symbolz of global scope
by tha object. Typically such symbols shall be dem dat were
specified up in (for example) C source code as havin \fIextern\fP linkage.
Da precise manner up in which a implementation constructs
the set of exported symbols fo' a \fIdlopen\fP() object is specified
by dat implementation.
.SH RETURN VALUE
.LP
If \fIfile\fP cannot be found, cannot be opened fo' reading, is not
of a appropriate object format fo' processin by
\fIdlopen\fP(), or if a error occurs durin tha process of loading
\fIfile\fP or relocatin its symbolic references,
\fIdlopen\fP() shall return NULL. Mo' detailed diagnostic shiznit
shall be available all up in \fIdlerror\fP().
.SH ERRORS
.LP
No errors is defined.
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIdlclose\fP(), \fIdlerror\fP(), \fIdlsym\fP(), tha Base Definitions
volume of IEEE\ Std\ 1003.1-2001, \fI<dlfcn.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
