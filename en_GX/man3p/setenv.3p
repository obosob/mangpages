.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "SETENV" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" setenv 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
setenv \- add or chizzle environment variable
.SH SYNOPSIS
.LP
\fB#include <stdlib.h>
.br
.sp
int setenv(const char *\fP\fIenvname\fP\fB, const char *\fP\fIenvval\fP\fB,
int\fP \fIoverwrite\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIsetenv\fP() function shall update or add a variable up in the
environment of tha callin process. Da \fIenvname\fP
argument points ta a strang containin tha name of a environment
variable ta be added or altered. Y'all KNOW dat shit, muthafucka! Da environment variable shall
be set ta tha value ta which \fIenvval\fP points, n' you can put dat on yo' toast. Da function shall
fail if \fIenvname\fP points ta a strang which gotz nuff an
\fB'='\fP character n' shit. If tha environment variable named by \fIenvname\fP
already exists n' tha value of \fIoverwrite\fP is
non-zero, tha function shall return success n' tha environment shall
be updated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. If tha environment variable named by
\fIenvname\fP already exists n' tha value of \fIoverwrite\fP is zero,
the function shall return success n' tha environment
shall remain unchanged.
.LP
If tha application modifies \fIenviron\fP or tha pointas ta which
it points, tha behavior of \fIsetenv\fP() is undefined. Y'all KNOW dat shit, muthafucka! The
\fIsetenv\fP() function shall update tha list of pointas ta which
\fIenviron\fP points.
.LP
Da strings busted lyrics bout by \fIenvname\fP n' \fIenvval\fP is copied
by dis function.
.LP
Da \fIsetenv\fP() function need not be reentrant fo' realz. A function that
is not required ta be reentrant aint required ta be
thread-safe.
.SH RETURN VALUE
.LP
Upon successful completion, zero shall be returned. Y'all KNOW dat shit, muthafucka! Otherwise, -1
shall be returned, \fIerrno\fP set ta indicate tha error, and
the environment shall be unchanged.
.SH ERRORS
.LP
Da \fIsetenv\fP() function shall fail if:
.TP 7
.B EINVAL
Da \fIname\fP argument be a null pointer, points ta a empty string,
or points ta a strang containin a \fB'='\fP
character.
.TP 7
.B ENOMEM
Insufficient memory was available ta add a variable or its value to
the environment.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
See \fIexec\fP(), fo' restrictions on changin tha environment in
multi-threaded applications.
.SH RATIONALE
.LP
Unanticipated thangs up in dis biatch may occur if \fIsetenv\fP() chizzlez tha external
variable \fIenviron\fP. In particular, if tha optional
\fIenvp\fP argument ta \fImain\fP() is present, it aint chizzled,
and thus may point ta a obsolete copy of tha environment (as
may any other copy of \fIenviron\fP). But fuck dat shiznit yo, tha word on tha street is dat other than tha aforementioned
restriction, tha pimpers of
IEEE\ Std\ 1003.1-2001 intended dat tha traditionizzle method of strutting
all up in tha environment by way of tha \fIenviron\fP
pointa must be supported.
.LP
Dat shiznit was decided dat \fIsetenv\fP() should be required by dis revision
because it addresses a piece of missin functionality,
and do not impose a thugged-out dope burden on tha implementor.
.LP
There was considerable rap battle as ta whether tha System V \fIputenv\fP()
function or the
BSD \fIsetenv\fP() function should be required as a mandatory function.
Da \fIsetenv\fP() function was chosen cuz it
permitted tha implementation of tha \fIunsetenv\fP() function ta delete
environmental
variables, without specifyin a additionizzle intercourse. Da \fIputenv\fP()
function is
available as a XSI extension.
.LP
Da standard pimpers considered requirin dat \fIsetenv\fP() indicate
an error when a cold-ass lil call ta it would result up in exceeding
{ARG_MAX}. Da requirement was rejected since tha condizzle might
be temporary, wit tha application eventually reducin the
environment size. Da illest success or failure dependz on tha size
at tha time of a cold-ass lil call ta \fIexec\fP, which returns a indication of
this error condition.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIexec\fP(), \fIgetenv\fP(), \fIunsetenv\fP(), tha Base Definitions
volume of IEEE\ Std\ 1003.1-2001, \fI<stdlib.h>\fP, \fI<sys/types.h>\fP,
\fI<unistd.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
