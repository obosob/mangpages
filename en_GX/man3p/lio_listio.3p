.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "LIO_LISTIO" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" lio_listio 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
lio_listio \- list pimped up I/O (\fBREALTIME\fP)
.SH SYNOPSIS
.LP
\fB#include <aio.h>
.br
.sp
int lio_listio(int\fP \fImode\fP\fB, struct aiocb *restrict const\fP
\fIlist\fP\fB[restrict],
.br
\ \ \ \ \ \  int\fP \fInent\fP\fB, struct sigevent *restrict\fP \fIsig\fP\fB);
\fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIlio_listio\fP() function shall initiate a list of I/O requests
with a single function call.
.LP
Da \fImode\fP argument takes one of tha joints LIO_WAIT or LIO_NOWAIT
declared up in \fI<aio.h>\fP n' determines whether tha function returns
when tha I/O operations have been
completed, or as soon as tha operations done been queued. Y'all KNOW dat shit, muthafucka! If tha \fImode\fP
argument is LIO_WAIT, tha function shall wait until
all I/O is complete n' tha \fIsig\fP argument shall be ignored.
.LP
If tha \fImode\fP argument is LIO_NOWAIT, tha function shall return
immediately, n' asynchronous notification shall occur,
accordin ta tha \fIsig\fP argument, when all tha I/O operations complete.
If \fIsig\fP is NULL, then no asynchronous
notification shall occur. Shiiit, dis aint no joke. If \fIsig\fP aint NULL, asynchronous notification
occurs as specified up in \fISignal Generation n' Delivery\fP when all
the requests up in \fIlist\fP have
completed.
.LP
Da I/O requests enumerated by \fIlist\fP is submitted up in a unspecified
order.
.LP
Da \fIlist\fP argument be a array of pointas ta \fBaiocb\fP structures.
Da array gotz nuff \fInent\fP elements, n' you can put dat on yo' toast. Da array
may contain NULL elements, which shall be ignored.
.LP
Da \fIaio_lio_opcode\fP field of each \fBaiocb\fP structure specifies
the operation ta be performed. Y'all KNOW dat shit, muthafucka! Da supported operations
are LIO_READ, LIO_WRITE, n' LIO_NOP; these symbols is defined in
\fI<aio.h>\fP. The
LIO_NOP operation causes tha list entry ta be ignored. Y'all KNOW dat shit, muthafucka! If tha \fIaio_lio_opcode\fP
element is equal ta LIO_READ, then a I/O
operation is submitted as if by a cold-ass lil call ta \fIaio_read\fP() wit the
\fIaiocbp\fP equal
to tha address of tha \fBaiocb\fP structure. If tha \fIaio_lio_opcode\fP
element is equal ta LIO_WRITE, then a I/O operation is
submitted as if by a cold-ass lil call ta \fIaio_write\fP() wit tha \fIaiocbp\fP
equal ta the
address of tha \fBaiocb\fP structure.
.LP
Da \fIaio_fildes\fP member specifies tha file descriptor on which
the operation is ta be performed.
.LP
Da \fIaio_buf\fP member specifies tha address of tha buffer ta or
from which tha data is transferred.
.LP
Da \fIaio_nbytes\fP member specifies tha number of bytez of data
to be transferred.
.LP
Da thugz of tha \fBaiocb\fP structure further describe tha I/O
operation ta be performed, up in a manner identical ta dat of
the correspondin \fBaiocb\fP structure when used by tha \fIaio_read\fP()
and \fIaio_write\fP() functions.
.LP
Da \fInent\fP argument specifies how tha fuck nuff elements is thugz of
the list; dat is, tha length of tha array.
.LP
Da behavior of dis function be altered accordin ta tha definitions
of synchronized I/O data integritizzle completion and
synchronized I/O file integritizzle completion if synchronized I/O is
enabled on tha file associated wit \fIaio_fildes\fP.
.LP
For regular files, no data transfer shall occur past tha offset maximum
established up in tha open file description associated with
\fIaiocbp\fP->\fIaio_fildes\fP.
.SH RETURN VALUE
.LP
If tha \fImode\fP argument has tha value LIO_NOWAIT, tha \fIlio_listio\fP()
function shall return tha value zero if tha I/O
operations is successfully queued; otherwise, tha function shall
return tha value -1 n' set \fIerrno\fP ta indicate the
error.
.LP
If tha \fImode\fP argument has tha value LIO_WAIT, tha \fIlio_listio\fP()
function shall return tha value zero when all the
indicated I/O has completed successfully. Otherwise, \fIlio_listio\fP()
shall return a value of -1 n' set \fIerrno\fP to
indicate tha error.
.LP
In either case, tha return value only indicates tha success or failure
of tha \fIlio_listio\fP() call itself, not tha status of
the individual I/O requests, n' you can put dat on yo' toast. In some cases one or mo' of tha I/O
requests contained up in tha list may fail. Failure of a individual
request do not prevent completion of any other individual request.
To determine tha outcome of each I/O request, tha application
shall examine tha error status associated wit each \fBaiocb\fP control
block. Da error statuses so returned is identical to
those returned as tha result of a \fIaio_read\fP() or \fIaio_write\fP()
function.
.SH ERRORS
.LP
Da \fIlio_listio\fP() function shall fail if:
.TP 7
.B EAGAIN
Da resources necessary ta queue all tha I/O requests was not available.
Da application may check tha error status fo' each
\fBaiocb\fP ta determine tha individual request(s) dat failed.
.TP 7
.B EAGAIN
Da number of entries indicated by \fInent\fP would cause tha system-wide
limit {AIO_MAX} ta be exceeded.
.TP 7
.B EINVAL
Da \fImode\fP argument aint a proper value, or tha value of \fInent\fP
was pimped outa than {AIO_LISTIO_MAX}.
.TP 7
.B EINTR
A signal was served up while waitin fo' all I/O requests ta complete
durin a LIO_WAIT operation. I aint talkin' bout chicken n' gravy biatch. Note that, since each I/O
operation invoked by \fIlio_listio\fP() may possibly provoke a signal
when it completes, dis error return may be caused by the
completion of one (or more) of tha straight-up I/O operations bein awaited.
Outstandin I/O requests is not canceled, n' the
application shall examine each list element ta determine whether the
request was initiated, canceled, or completed.
.TP 7
.B EIO
One or mo' of tha individual I/O operations failed. Y'all KNOW dat shit, muthafucka! Da application
may check tha error status fo' each \fBaiocb\fP structure
to determine tha individual request(s) dat failed.
.sp
.LP
In addizzle ta tha errors returned by tha \fIlio_listio\fP() function,
if tha \fIlio_listio\fP() function succeedz or fails
with errorz of [EAGAIN], [EINTR], or [EIO], then a shitload of tha I/O specified
by tha list may done been initiated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. If the
\fIlio_listio\fP() function fails wit a error code other than [EAGAIN],
[EINTR], or [EIO], no operations from tha list shall
have been initiated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da I/O operation indicated by each list element
can encounta errors specific ta tha individual read or write
function bein performed. Y'all KNOW dat shit, muthafucka! In dis event, tha error status fo' each
\fBaiocb\fP control block gotz nuff tha associated error code.
Da error codes dat can be set is tha same as would be set by a
\fIread\fP() or \fIwrite\fP() function, wit tha followin additional
error codes possible:
.TP 7
.B EAGAIN
Da axed I/O operation was not queued cuz of resource limitations.
.TP 7
.B ECANCELED
Da axed I/O was canceled before tha I/O completed cuz of an
explicit \fIaio_cancel\fP() request.
.TP 7
.B ESTDG
Da \fIaiocbp\fP->\fIaio_lio_opcode\fP is LIO_WRITE, tha file be a
regular file, \fIaiocbp\fP->\fIaio_nbytes\fP is
greata than 0, n' tha \fIaiocbp\fP->\fIaio_offset\fP is pimped outer
than or equal ta tha offset maximum up in tha open file
description associated wit \fIaiocbp\fP->\fIaio_fildes\fP.
.TP 7
.B EINPROGRESS
Da axed I/O is up in progress.
.TP 7
.B EOVERFLOW
Da \fIaiocbp\fP->\fIaio_lio_opcode\fP is LIO_READ, tha file be a
regular file, \fIaiocbp\fP->\fIaio_nbytes\fP is
greata than 0, n' tha \fIaiocbp\fP->\fIaio_offset\fP is before the
end-of-file n' is pimped outa than or equal ta tha offset
maximum up in tha open file description associated wit \fIaiocbp\fP->\fIaio_fildes\fP.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
Although it may step tha fuck up dat there be inconsistencies up in tha specified
circumstances fo' error codes, tha [EIO] error condition
applies when any circumstizzle relatin ta a individual operation
makes dat operation fail. This might be cuz of a funky-ass badly
formulated request (for example, tha \fIaio_lio_opcode\fP field is
invalid, n' \fIaio_error\fP() returns [EINVAL]) or might arise from
application behavior (for example, the
file descriptor is closed before tha operation is initiated, n' \fIaio_error\fP()
returns [EBADF]).
.LP
Da limitation on tha set of error codes returned when operations
from tha list shall done been initiated enablez applications
to know when operations done been started n' whether \fIaio_error\fP()
is valid fo' a
specific operation.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIaio_read\fP(), \fIaio_write\fP(), \fIaio_error\fP(), \fIaio_return\fP(),
\fIaio_cancel\fP(), \fIclose\fP(), \fIexec\fP(), \fIexit\fP(),
\fIfork\fP(), \fIlseek\fP(), \fIread\fP(), tha Base Definitions
volume of
IEEE\ Std\ 1003.1-2001, \fI<aio.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
