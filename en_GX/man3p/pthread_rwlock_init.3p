.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "PTHREAD_RWLOCK_DESTROY" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" pthread_rwlock_destroy 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
pthread_rwlock_destroy, pthread_rwlock_init \- destroy n' initialize
a read\-write lock object
.SH SYNOPSIS
.LP
\fB#include <pthread.h>
.br
.sp
int pthread_rwlock_destroy(pthread_rwlock_t *\fP\fIrwlock\fP\fB);
.br
int pthread_rwlock_init(pthread_rwlock_t *restrict\fP \fIrwlock\fP\fB,
.br
\ \ \ \ \ \  const pthread_rwlockattr_t *restrict\fP \fIattr\fP\fB);
\fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIpthread_rwlock_destroy\fP() function shall destroy tha read-write
lock object referenced by \fIrwlock\fP n' release
any resources used by tha lock. Da effect of subsequent use of the
lock is undefined until tha lock is reinitialized by another
call ta \fIpthread_rwlock_init\fP() fo' realz. An implementation may cause \fIpthread_rwlock_destroy\fP()
to set tha object referenced by
\fIrwlock\fP ta a invalid value. Results is undefined if \fIpthread_rwlock_destroy\fP()
is called when any thread holds
\fIrwlock\fP fo' realz. Attemptin ta destroy a uninitialized read-write lock
results up in undefined behavior.
.LP
Da \fIpthread_rwlock_init\fP() function shall allocate any resources
required ta use tha read-write lock referenced by
\fIrwlock\fP n' initializes tha lock ta a unlocked state wit attributes
referenced by \fIattr\fP. If \fIattr\fP is NULL, the
default read-write lock attributes shall be used; tha effect is the
same as passin tha address of a thugged-out default read-write lock
attributes object. Once initialized, tha lock can be used any number
of times without bein reinitialized. Y'all KNOW dat shit, muthafucka! Results is undefined if
\fIpthread_rwlock_init\fP() is called specifyin a already initialized
read-write lock. Results is undefined if a read-write
lock is used without first bein initialized.
.LP
If tha \fIpthread_rwlock_init\fP() function fails, \fIrwlock\fP shall
not be initialized n' tha contentz of \fIrwlock\fP are
undefined.
.LP
Only tha object referenced by \fIrwlock\fP may be used fo' struttin
synchronization. I aint talkin' bout chicken n' gravy biatch. Da result of referrin ta copies of
that object up in calls ta \fIpthread_rwlock_destroy\fP(), \fIpthread_rwlock_rdlock\fP(),
\fIpthread_rwlock_timedrdlock\fP(), \fIpthread_rwlock_timedwrlock\fP(),
\fIpthread_rwlock_tryrdlock\fP(), \fIpthread_rwlock_trywrlock\fP(),
\fIpthread_rwlock_unlock\fP(), or \fIpthread_rwlock_wrlock\fP() is
undefined.
.SH RETURN VALUE
.LP
If successful, tha \fIpthread_rwlock_destroy\fP() n' \fIpthread_rwlock_init\fP()
functions shall return zero; otherwise, an
error number shall be moonwalked back ta indicate tha error.
.LP
Da [EBUSY] n' [EINVAL] error checks, if implemented, act as if they
were performed immediately all up in tha beginnin of processing
for tha function n' caused a error return prior ta modifyin the
state of tha read-write lock specified by \fIrwlock\fP.
.SH ERRORS
.LP
Da \fIpthread_rwlock_destroy\fP() function may fail if:
.TP 7
.B EBUSY
Da implementation has detected a attempt ta destroy tha object referenced
by \fIrwlock\fP while it is locked.
.TP 7
.B EINVAL
Da value specified by \fIrwlock\fP is invalid.
.sp
.LP
Da \fIpthread_rwlock_init\fP() function shall fail if:
.TP 7
.B EAGAIN
Da system lacked tha necessary resources (other than memory) ta initialize
another read-write lock.
.TP 7
.B ENOMEM
Insufficient memory exists ta initialize tha read-write lock.
.TP 7
.B EPERM
Da calla aint gots tha privilege ta big-ass up tha operation.
.sp
.LP
Da \fIpthread_rwlock_init\fP() function may fail if:
.TP 7
.B EBUSY
Da implementation has detected a attempt ta reinitialize tha object
referenced by \fIrwlock\fP, a previously initialized but
not yet destroyed read-write lock.
.TP 7
.B EINVAL
Da value specified by \fIattr\fP is invalid.
.sp
.LP
These functions shall not return a error code of [EINTR].
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
Applications rockin these n' related read-write lock functions may
be subject ta prioritizzle inversion, as discussed up in tha Base
Definitions volume of IEEE\ Std\ 1003.1-2001, Section 3.285, Priority
Inversion.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIpthread_rwlock_rdlock\fP(), \fIpthread_rwlock_timedrdlock\fP(),
\fIpthread_rwlock_timedwrlock\fP(), \fIpthread_rwlock_tryrdlock\fP(),
\fIpthread_rwlock_trywrlock\fP(), \fIpthread_rwlock_unlock\fP(),
\fIpthread_rwlock_wrlock\fP(), tha Base Definitions volume of IEEE\ Std\ 1003.1-2001,
\fI<pthread.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
