.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "POSIX_TRACE_ATTR_GETINHERITED" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" posix_trace_attr_getinherited 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
posix_trace_attr_getinherited, posix_trace_attr_getlogfullpolicy,
posix_trace_attr_getstreamfullpolicy,
posix_trace_attr_setinherited, posix_trace_attr_setlogfullpolicy,
posix_trace_attr_setstreamfullpolicy \- retrieve n' set the
behavior of a trace stream (\fBTRACING\fP)
.SH SYNOPSIS
.LP
\fB#include <trace.h>
.br
.sp
\fP
.LP
\fBint posix_trace_attr_getinherited(const trace_attr_t *restrict\fP
\fIattr\fP\fB,
.br
\ \ \ \ \ \  int *restrict\fP \fIinheritancepolicy\fP\fB);
.br
\fP
.LP
\fBint posix_trace_attr_getlogfullpolicy(const trace_attr_t *restrict\fP
\fIattr\fP\fB,
.br
\ \ \ \ \ \  int *restrict\fP \fIlogpolicy\fP\fB);
.br
\fP
.LP
\fBint posix_trace_attr_getstreamfullpolicy(const trace_attr_t *\fP\fIattr\fP\fB,
.br
\ \ \ \ \ \  int *\fP\fIstreampolicy\fP\fB);
.br
\fP
.LP
\fBint posix_trace_attr_setinherited(trace_attr_t *\fP\fIattr\fP\fB,
.br
\ \ \ \ \ \  int\fP \fIinheritancepolicy\fP\fB);
.br
\fP
.LP
\fBint posix_trace_attr_setlogfullpolicy(trace_attr_t *\fP\fIattr\fP\fB,
.br
\ \ \ \ \ \  int\fP \fIlogpolicy\fP\fB);
.br
\fP
.LP
\fBint posix_trace_attr_setstreamfullpolicy(trace_attr_t *\fP\fIattr\fP\fB,
.br
\ \ \ \ \ \  int\fP \fIstreampolicy\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIposix_trace_attr_getinherited\fP() n' \fIposix_trace_attr_setinherited\fP()
functions, respectively, shall git n' set
the inheritizzle policy stored up in tha \fIinheritance\fP attribute for
traced processes across tha \fIfork\fP() n' \fIspawn\fP() operations.
Da \fIinheritance\fP attribute of tha attributes object
pointed ta by tha \fIattr\fP argument shall be set ta one of tha following
values defined by manifest constants up in tha \fI<trace.h>\fP header:
.TP 7
POSIX_TRACE_CLOSE_FOR_CHILD
.sp
Afta a \fIfork\fP() or \fIspawn\fP() operation, tha lil pimp shall not
be traced, n' tracing
of tha parent shall continue.
.TP 7
POSIX_TRACE_INHERITED
.sp
Afta a \fIfork\fP() or \fIspawn\fP() operation, if tha parent is
bein traced, its child
shall be concurrently traced rockin tha same trace stream.
.sp
.LP
Da default value fo' tha \fIinheritance\fP attribute is POSIX_TRACE_CLOSE_FOR_CHILD.
.LP
Da \fIposix_trace_attr_getlogfullpolicy\fP() n' \fIposix_trace_attr_setlogfullpolicy\fP()
functions, respectively, shall get
and set tha trace log full policy stored up in tha \fIlog-full-policy\fP
attribute of tha attributes object pointed ta by the
\fIattr\fP argument.
.LP
Da \fIlog-full-policy\fP attribute shall be set ta one of tha following
values defined by manifest constants up in tha \fI<trace.h>\fP header:
.TP 7
POSIX_TRACE_LOOP
.sp
Da trace log shall loop until tha associated trace stream is stopped.
This policy means dat when tha trace log gets full, the
file system shall reuse tha resources allocated ta tha crazy oldschool trace
events dat was recorded. Y'all KNOW dat shit, muthafucka! In dis way, tha trace log will
always contain da most thugged-out recent trace events flushed.
.TP 7
POSIX_TRACE_UNTIL_FULL
.sp
Da trace stream shall be flushed ta tha trace log until tha trace
log is full. This condizzle can be deduced from the
\fIposix_log_full_status\fP member status (see tha \fBposix_trace_status_info\fP
structure defined up in \fI<trace.h>\fP). Da last recorded trace event
shall be tha POSIX_TRACE_STOP trace
event.
.TP 7
POSIX_TRACE_APPEND
.sp
Da associated trace stream shall be flushed ta tha trace log without
log size limitation. I aint talkin' bout chicken n' gravy biatch. If tha application specifies
POSIX_TRACE_APPEND, tha implementation shall ignore tha \fIlog-max-size\fP
attribute.
.sp
.LP
Da default value fo' tha \fIlog-full-policy\fP attribute is POSIX_TRACE_LOOP.
.LP
Da \fIposix_trace_attr_getstreamfullpolicy\fP() n' \fIposix_trace_attr_setstreamfullpolicy\fP()
functions, respectively,
shall git n' set tha trace stream full policy stored up in tha \fIstream-full-policy\fP
attribute of tha attributes object pointed
to by tha \fIattr\fP argument.
.LP
Da \fIstream-full-policy\fP attribute shall be set ta one of the
followin joints defined by manifest constants up in tha \fI<trace.h>\fP
header:
.TP 7
POSIX_TRACE_LOOP
.sp
Da trace stream shall loop until explicitly stopped by tha \fIposix_trace_stop\fP()
function. I aint talkin' bout chicken n' gravy biatch. This policy means dat when tha trace stream is full,
the trace system shall reuse tha resources allocated ta tha oldest
trace events recorded. Y'all KNOW dat shit, muthafucka! In dis way, tha trace stream will always
contain da most thugged-out recent trace events recorded.
.TP 7
POSIX_TRACE_UNTIL_FULL
.sp
Da trace stream will run until tha trace stream resources is exhausted.
Then tha trace stream will stop. This condizzle can be
deduced from \fIposix_stream_status\fP n' \fIposix_stream_full_status\fP
(see tha \fBposix_trace_status_info\fP structure
defined up in \fI<trace.h>\fP). When dis trace stream is read, a POSIX_TRACE_STOP
trace
event shall be reported afta reportin tha last recorded trace event.
Da trace system shall reuse tha resources allocated ta any
trace events already reported-see tha \fIposix_trace_getnext_event\fP(),
\fIposix_trace_trygetnext_event\fP(), n' \fIposix_trace_timedgetnext_event\fP()
functions-or already flushed fo' an
actizzle trace stream wit log if tha Trace Log option is supported;
see tha \fIposix_trace_flush\fP() function. I aint talkin' bout chicken n' gravy biatch. Da trace system shall
restart tha trace stream when
it is empty n' may restart it sooner n' shiznit fo' realz. A POSIX_TRACE_START trace event
shall be reported before reportin tha next recorded trace
event.
.TP 7
POSIX_TRACE_FLUSH
.sp
If tha Trace Log option is supported, dis policy is identical to
the POSIX_TRACE_UNTIL_FULL trace stream full policy except that
the trace stream shall be flushed regularly as if \fIposix_trace_flush\fP()
had
been explicitly called. Y'all KNOW dat shit, muthafucka! Definin dis policy fo' a actizzle trace stream
without log shall be invalid. Y'all KNOW dat shit, muthafucka! 
.sp
.LP
Da default value fo' tha \fIstream-full-policy\fP attribute shall
be POSIX_TRACE_LOOP fo' a actizzle trace stream without
log.
.LP
If tha Trace Log option is supported, tha default value fo' tha \fIstream-full-policy\fP
attribute shall be POSIX_TRACE_FLUSH for
an actizzle trace stream wit log. 
.SH RETURN VALUE
.LP
Upon successful completion, these functions shall return a value of
zero. Otherwise, they shall return tha correspondin error
number.
.LP
If successful, tha \fIposix_trace_attr_getinherited\fP() function
shall store tha \fIinheritance\fP attribute value up in tha object
pointed ta by \fIinheritancepolicy\fP. Otherwise, tha content of this
object is undefined. Y'all KNOW dat shit, muthafucka! 
.LP
If successful, tha \fIposix_trace_attr_getlogfullpolicy\fP() function
shall store tha \fIlog-full-policy\fP attribute value in
the object pointed ta by \fIlogpolicy\fP. Otherwise, tha content of
this object is undefined. Y'all KNOW dat shit, muthafucka! 
.LP
If successful, tha \fIposix_trace_attr_getstreamfullpolicy\fP() function
shall store tha \fIstream-full-policy\fP attribute
value up in tha object pointed ta by \fIstreampolicy\fP. Otherwise, the
content of dis object is undefined.
.SH ERRORS
.LP
These functions may fail if:
.TP 7
.B EINVAL
Da value specified by at least one of tha arguments is invalid.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIfork\fP(), \fIposix_trace_attr_init\fP(), \fIposix_trace_create\fP(),
\fIposix_trace_flush\fP(), \fIposix_trace_get_attr\fP(), \fIposix_trace_getnext_event\fP(),
\fIposix_trace_start\fP(), \fIposix_trace_timedgetnext_event\fP(),
the Base Definitions volume of
IEEE\ Std\ 1003.1-2001, \fI<trace.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
