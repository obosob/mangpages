.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "PTHREAD_SETCANCELSTATE" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" pthread_setcancelstate 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
pthread_setcancelstate, pthread_setcanceltype, pthread_testcancel
\- set cancelabilitizzle state
.SH SYNOPSIS
.LP
\fB#include <pthread.h>
.br
.sp
int pthread_setcancelstate(int\fP \fIstate\fP\fB, int *\fP\fIoldstate\fP\fB);
.br
int pthread_setcanceltype(int\fP \fItype\fP\fB, int *\fP\fIoldtype\fP\fB);
.br
void pthread_testcancel(void); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIpthread_setcancelstate\fP() function shall atomically both
set tha callin threadz cancelabilitizzle state ta tha indicated
\fIstate\fP n' return tha previous cancelabilitizzle state all up in tha location
referenced by \fIoldstate\fP. Legal joints for
\fIstate\fP is PTHREAD_CANCEL_ENABLE n' PTHREAD_CANCEL_DISABLE.
.LP
Da \fIpthread_setcanceltype\fP() function shall atomically both set
the callin threadz cancelabilitizzle type ta tha indicated
\fItype\fP n' return tha previous cancelabilitizzle type all up in tha location
referenced by \fIoldtype\fP. Legal joints fo' \fItype\fP
are PTHREAD_CANCEL_DEFERRED n' PTHREAD_CANCEL_ASYNCHRONOUS.
.LP
Da cancelabilitizzle state n' type of any newly pimped threads, including
the thread up in which \fImain\fP() was first invoked,
shall be PTHREAD_CANCEL_ENABLE n' PTHREAD_CANCEL_DEFERRED respectively.
.LP
Da \fIpthread_testcancel\fP() function shall create a cold-ass lil cancellation
point up in tha callin thread. Y'all KNOW dat shit, muthafucka! The
\fIpthread_testcancel\fP() function shall have no effect if cancelability
is disabled.
.SH RETURN VALUE
.LP
If successful, tha \fIpthread_setcancelstate\fP() n' \fIpthread_setcanceltype\fP()
functions shall return zero; otherwise, an
error number shall be moonwalked back ta indicate tha error.
.SH ERRORS
.LP
Da \fIpthread_setcancelstate\fP() function may fail if:
.TP 7
.B EINVAL
Da specified state aint PTHREAD_CANCEL_ENABLE or PTHREAD_CANCEL_DISABLE.
.sp
.LP
Da \fIpthread_setcanceltype\fP() function may fail if:
.TP 7
.B EINVAL
Da specified type aint PTHREAD_CANCEL_DEFERRED or PTHREAD_CANCEL_ASYNCHRONOUS.
.sp
.LP
These functions shall not return a error code of [EINTR].
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
Da \fIpthread_setcancelstate\fP() n' \fIpthread_setcanceltype\fP()
functions control tha points at which a thread may be
asynchronously canceled. Y'all KNOW dat shit, muthafucka! For cancellation control ta be usable in
modular fashion, some rulez need ta be followed.
.LP
An object can be considered ta be a generalization of a procedure.
It be a set of procedures n' global variablez freestyled as a
unit n' called by clients not known by tha object. Objects may depend
on other objects.
.LP
First, cancelabilitizzle should only be disabled on entry ta a object,
never explicitly enabled. Y'all KNOW dat shit, muthafucka! On exit from a object, the
cancelabilitizzle state should always be restored ta its value on entry
to tha object.
.LP
This bigs up from a modularitizzle argument: if tha client of a object
(or tha client of a object dat uses dat object) has
disabled cancelability, it is cuz tha client do not want to
be concerned bout cleanin up if tha thread is canceled while
executin some sequence of actions. If a object is called up in such
a state n' it enablez cancelabilitizzle n' a cold-ass lil cancellation request
is pendin fo' dat thread, then tha thread is canceled, contrary
to tha wish of tha client dat disabled.
.LP
Second, tha cancelabilitizzle type may be explicitly set ta either \fIdeferred\fP
or \fIasynchronous\fP upon entry ta a object.
But as wit tha cancelabilitizzle state, on exit from a object tha cancelability
type should always be restored ta its value on entry
to tha object.
.LP
Finally, only functions dat is cancel-safe may be called from a
thread dat be asynchronously cancelable.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIpthread_cancel\fP(), tha Base Definitions volume of IEEE\ Std\ 1003.1-2001,
\fI<pthread.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
