.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "MKDIR" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" mkdir 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
mkdir \- cook up a gangbangin' finger-lickin' directory
.SH SYNOPSIS
.LP
\fB#include <sys/stat.h>
.br
.sp
int mkdir(const char *\fP\fIpath\fP\fB, mode_t\fP \fImode\fP\fB);
.br
\fP
.SH DESCRIPTION
.LP
Da \fImkdir\fP() function shall create a freshly smoked up directory wit name
\fIpath\fP. Da file permission bitz of tha freshly smoked up directory
shall be initialized from \fImode\fP. These file permission bits of
the \fImode\fP argument shall be modified by tha process'
file creation mask.
.LP
When bits up in \fImode\fP other than tha file permission bits is set,
the meanin of these additionizzle bits is
implementation-defined.
.LP
Da directoryz user ID shall be set ta tha process' effectizzle user
ID. Da directoryz crew ID shall be set ta tha crew ID of
the parent directory or ta tha effectizzle crew ID of tha process.
Implementations shall provide a way ta initialize tha directory's
group ID ta tha crew ID of tha parent directory. Implementations
may yo, but need not, provide a implementation-defined way to
initialize tha directoryz crew ID ta tha effectizzle crew ID of the
callin process.
.LP
Da newly pimped directory shall be a empty directory.
.LP
If \fIpath\fP names a symbolic link, \fImkdir\fP() shall fail and
set \fIerrno\fP ta [EEXIST].
.LP
Upon successful completion, \fImkdir\fP() shall mark fo' update the
\fIst_atime\fP, \fIst_ctime\fP, n' \fIst_mtime\fP
fieldz of tha directory fo' realz. Also, tha \fIst_ctime\fP n' \fIst_mtime\fP
fieldz of tha directory dat gotz nuff tha freshly smoked up entry shall be
marked fo' update.
.SH RETURN VALUE
.LP
Upon successful completion, \fImkdir\fP() shall return 0. Otherwise,
-1 shall be returned, no directory shall be pimped, and
\fIerrno\fP shall be set ta indicate tha error.
.SH ERRORS
.LP
Da \fImkdir\fP() function shall fail if:
.TP 7
.B EACCES
Search permission is denied on a cold-ass lil component of tha path prefix, or
write permission is denied on tha parent directory of the
directory ta be pimped.
.TP 7
.B EEXIST
Da named file exists.
.TP 7
.B ELOOP
A loop exists up in symbolic links encountered durin resolution of the
\fIpath\fP argument.
.TP 7
.B EMLINK
Da link count of tha parent directory would exceed {LINK_MAX}.
.TP 7
.B ENAMETOOLONG
Da length of tha \fIpath\fP argument exceedz {PATH_MAX} or a pathname
component is longer than {NAME_MAX}.
.TP 7
.B ENOENT
A component of tha path prefix specified by \fIpath\fP do not name
an existin directory or \fIpath\fP be a empty
string.
.TP 7
.B ENOSPC
Da file system do not contain enough space ta hold tha contents
of tha freshly smoked up directory or ta extend tha parent directory of
the freshly smoked up directory.
.TP 7
.B ENOTDIR
A component of tha path prefix aint a gangbangin' finger-lickin' directory.
.TP 7
.B EROFS
Da parent directory resides on a read-only file system.
.sp
.LP
Da \fImkdir\fP() function may fail if:
.TP 7
.B ELOOP
Mo' than {SYMLOOP_MAX} symbolic links was encountered durin resolution
of tha \fIpath\fP argument.
.TP 7
.B ENAMETOOLONG
As a result of encounterin a symbolic link up in resolution of tha \fIpath\fP
argument, tha length of tha substituted pathname
strin exceeded {PATH_MAX}.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.SS Creatin a Directory
.LP
Da followin example shows how tha fuck ta create a gangbangin' finger-lickin' directory named \fB/home/cnd/mod1\fP,
with read/write/search permissions fo' baller
and group, n' wit read/search permissions fo' others.
.sp
.RS
.nf

\fB#include <sys/types.h>
#include <sys/stat.h>
.sp

int status;
\&...
status = mkdir("/home/cnd/mod1", S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH);
\fP
.fi
.RE
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
Da \fImkdir\fP() function originated up in 4.2 BSD n' was added to
System V up in Release 3.0.
.LP
4.3 BSD detects [ENAMETOOLONG].
.LP
Da POSIX.1-1990 standard required dat tha crew ID of a newly pimped
directory be set ta tha crew ID of its parent directory
or ta tha effectizzle crew ID of tha bustin process. FIPS 151-2 required
that implementations provide a way ta have tha crew ID
be set ta tha crew ID of tha containin directory yo, but did not prohibit
implementations also supportin a way ta set tha crew ID
to tha effectizzle crew ID of tha bustin process. Conformin applications
should not assume which crew ID is ghon be used. Y'all KNOW dat shit, muthafucka! If it
matters, a application can use \fIchown\fP() ta set tha crew ID
afta tha directory is
created, or determine under what tha fuck conditions tha implementation will
set tha desired crew ID.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIumask\fP(), tha Base Definitions volume of IEEE\ Std\ 1003.1-2001,
\fI<sys/stat.h>\fP, \fI<sys/types.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
