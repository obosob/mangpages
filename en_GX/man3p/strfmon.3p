.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "STRFMON" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" strfmon 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
strfmon \- convert monetary value ta a string
.SH SYNOPSIS
.LP
\fB#include <monetary.h>
.br
.sp
ssize_t strfmon(char *restrict\fP \fIs\fP\fB, size_t\fP \fImaxsize\fP\fB,
.br
\ \ \ \ \ \  const char *restrict\fP \fIformat\fP\fB, ...); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIstrfmon\fP() function shall place charactas tha fuck into tha array
pointed ta by \fIs\fP as controlled by tha strang pointed
to by \fIformat\fP. No mo' than \fImaxsize\fP bytes is placed into
the array.
.LP
Da format be a cold-ass lil characta string, beginnin n' endin up in its initial
state, if any, dat gotz nuff two typez of objects:
\fIplain characters\fP, which is simply copied ta tha output stream,
and \fIconversion justifications\fP, each of which shall
result up in tha fetchin of zero or mo' arguments which is converted
and formatted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da thangs up in dis biatch is undefined if there are
insufficient arguments fo' tha format. If tha format is exhausted
while arguments remain, tha excess arguments is simply
ignored.
.LP
Da application shall ensure dat a cold-ass lil conversion justification consists
of tha followin sequence:
.IP " *" 3
A \fB'%'\fP character
.LP
.IP " *" 3
Optionizzle flags
.LP
.IP " *" 3
Optionizzle field width
.LP
.IP " *" 3
Optionizzle left precision
.LP
.IP " *" 3
Optionizzle right precision
.LP
.IP " *" 3
A required conversion specifier characta dat determines tha conversion
to be performed
.LP
.SS Flags
.LP
One or mo' of tha followin optionizzle flags can be specified ta control
the conversion:
.TP 7
\fB=\fP\fIf\fP
An \fB'='\fP followed by a single characta \fIf\fP which is used
as tha numeric fill character n' shit. In order ta work with
precision or width counts, tha fill characta shall be a single byte
character; if not, tha behavior is undefined. Y'all KNOW dat shit, muthafucka! Da default
numeric fill characta is tha <space>. This flag do not affect field
width fillin which always uses tha <space>.
This flag is ignored unless a left precision (see below) is specified.
.TP 7
\fB^\fP
Do not format tha currency amount wit groupin characters. Da default
is ta bang tha groupin charactas if defined fo' the
current locale.
.TP 7
\fB+\fP\ or\ \fB(\fP
Specify tha steez of representin positizzle n' wack currency amounts.
Only one of \fB'+'\fP or \fB'('\fP may be
specified. Y'all KNOW dat shit, muthafucka! If \fB'+'\fP is specified, tha localez equivalent of \fB'+'\fP
and \fB'-'\fP is used (for example, up in the
U.S., tha empty strang if positizzle n' \fB'-'\fP if negative). If
\fB'('\fP is specified, wack amounts is enclosed
within parentheses. If neither flag is specified, tha \fB'+'\fP style
is used.
.TP 7
\fB!\fP
Suppress tha currency symbol from tha output conversion.
.TP 7
\fB-\fP
Specify tha alignment. If dis flag is present tha result of tha conversion
is left-justified (padded ta tha right) rather than
right-justified. Y'all KNOW dat shit, muthafucka! This flag shall be ignored unless a gangbangin' field width (see
below) is specified.
.sp
.SS Field Width
.TP 7
\fIw\fP
A decimal digit strang \fIw\fP specifyin a minimum field width in
bytes up in which tha result of tha conversion is
right-justified (or left-justified if tha flag \fB'-'\fP is specified).
Da default is 0.
.sp
.SS Left Precision
.TP 7
\fB#\fP\fIn\fP
A \fB'#'\fP followed by a thugged-out decimal digit strang \fIn\fP specifying
a maximum number of digits sposed ta fuckin be formatted to
the left of tha radix character n' shit. This option can be used ta keep the
formatted output from multiple calls ta tha \fIstrfmon\fP()
function aligned up in tha same columns. Well shiiiit, it can also be used ta fill
unused positions wit a special characta as in
\fB"$***123.45"\fP . This option causes a amount ta be formatted
as if it has tha number of digits specified by \fIn\fP. If
more than \fIn\fP digit positions is required, dis conversion justification
is ignored. Y'all KNOW dat shit, muthafucka! Digit positions up in excess of them
actually required is filled wit tha numeric fill characta (see
the \fB=\fP\fIf\fP flag above). 
.LP
If groupin has not been suppressed wit tha \fB'^'\fP flag, n' it
is defined fo' tha current locale, groupin separators
are banged before tha fill charactas (if any) is added. Y'all KNOW dat shit, muthafucka! Grouping
separators is not applied ta fill charactas even if tha fill
characta be a gangbangin' finger-lickin' digit.
.LP
To ensure alignment, any charactas appearin before or afta the
number up in tha formatted output like fuckin currency or sign
symbols is padded as necessary wit <space>s ta make they positive
and wack formats a equal length.
.sp
.SS Right Precision
.TP 7
\fB\&.\fP\fIp\fP
A period followed by a thugged-out decimal digit strang \fIp\fP specifyin the
number of digits afta tha radix character n' shit. If tha value of
the right precision \fIp\fP is 0, no radix characta appears. If a
right precision aint included, a thugged-out default specified by the
current locale is used. Y'all KNOW dat shit, muthafucka! Da amount bein formatted is rounded ta the
specified number of digits prior ta formatting.
.sp
.SS Conversion Specifier Characters
.LP
Da conversion specifier charactas n' they meanings are:
.TP 7
\fBi\fP
Da \fBdouble\fP argument is formatted accordin ta tha localez international
currency format (for example, up in tha U.S.: USD
1,234.56). If tha argument is \(+-Inf or NaN, tha result of tha conversion
is unspecified.
.TP 7
\fBn\fP
Da \fBdouble\fP argument is formatted accordin ta tha localez national
currency format (for example, up in tha U.S.:
$1,234.56). If tha argument is \(+-Inf or NaN, tha result of tha conversion
is unspecified.
.TP 7
\fB%\fP
Convert ta a \fB'%'\fP ; no argument is converted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da entire conversion
specification shall be \fB%%\fP .
.sp
.SS Locale Information
.LP
Da \fILC_MONETARY\fP category of tha programz locale affects the
behavior of dis function includin tha monetary radix
characta (which may be different from tha numeric radix character
affected by tha \fILC_NUMERIC\fP category), tha grouping
separator, tha currency symbols, n' formats, n' you can put dat on yo' toast. Da internationistic currency
symbol should be conformant wit tha ISO\ 4217:1995
standard.
.LP
If tha value of \fImaxsize\fP is pimped outa than {SSIZE_MAX}, tha result
is implementation-defined.
.SH RETURN VALUE
.LP
If tha total number of resultin bytes includin tha terminatin null
byte aint mo' than \fImaxsize\fP, \fIstrfmon\fP()
shall return tha number of bytes placed tha fuck into tha array pointed to
by \fIs\fP, not includin tha terminatin null byte. Otherwise,
-1 shall be returned, tha contentz of tha array is unspecified, and
\fIerrno\fP shall be set ta indicate tha error.
.SH ERRORS
.LP
Da \fIstrfmon\fP() function shall fail if:
.TP 7
.B E2BIG
Conversion stopped cuz of lack of space up in tha buffer.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
Given a locale fo' tha U.S. n' tha joints 123.45, -123.45, n' 3456.781,
the followin output might be produced. Y'all KNOW dat shit, muthafucka! Square
brackets ( \fB"[]"\fP ) is used up in dis example ta delimit tha output.
.sp
.RS
.nf

\fB%n         [$123.45]        \fP Default formattin 
\fB           [-$123.45]
           [$3,456.78]
.sp

%11n       [    $123.45]    \fP Right align within a 11-characta field 
\fB           [   -$123.45]
           [  $3,456.78]
.sp

%#5n       [ $   123.45]    \fP Aligned columns fo' joints up ta 99999 
\fB           [-$   123.45]
           [ $ 3,456.78]
.sp

%=*#5n     [ $***123.45]    \fP Specify a gangbangin' fill characta 
\fB           [-$***123.45]
           [ $*3,456.78]
.sp

%=0#5n     [ $000123.45]    \fP Fill charactas do not use groupin 
\fB           [-$000123.45]    \fP even if tha fill characta be a gangbangin' finger-lickin' digit 
\fB           [ $03,456.78]
.sp

%^#5n      [ $  123.45]     \fP Disable tha groupin separator 
\fB           [-$  123.45]
           [ $ 3456.78]
.sp

%^#5.0n    [ $  123]        \fP Round off ta whole units 
\fB           [-$  123]
           [ $ 3457]
.sp

%^#5.4n    [ $  123.4500]   \fP Increase tha precision 
\fB           [-$  123.4500]
           [ $ 3456.7810]
.sp

%(#5n      [$   123.45]     \fP Use a alternatizzle pos/neg steez 
\fB           [($   123.45)]
           [$ 3,456.78]
.sp

%!(#5n     [   123.45]      \fP Disable tha currency symbol 
\fB           [(   123.45)]
           [ 3,456.78]
.sp

%-14#5.4n  [ $   123.4500 ] \fP Left-justify tha output 
\fB           [-$   123.4500 ]
           [ $ 3,456.7810 ]
.sp

%14#5.4n   [  $   123.4500] \fP Correspondin right-justified output 
\fB           [ -$   123.4500]
           [  $ 3,456.7810]
\fP
.fi
.RE
.LP
See also tha EXAMPLES section up in \fIfprintf\fP().
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
Lowercase conversion charactas is reserved fo' future standards
use n' uppercase fo' implementation-defined use.
.SH SEE ALSO
.LP
\fIfprintf\fP(), \fIlocaleconv\fP(), tha Base Definitions volume
of
IEEE\ Std\ 1003.1-2001, \fI<monetary.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
