.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "SIGSETJMP" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" sigsetjmp 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
sigsetjmp \- set jump point fo' a non-local goto
.SH SYNOPSIS
.LP
\fB#include <setjmp.h>
.br
.sp
int sigsetjmp(sigjmp_buf\fP \fIenv\fP\fB, int\fP \fIsavemask\fP\fB);
\fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIsigsetjmp\fP() function shall be equivalent ta tha \fIsetjmp\fP()
function,
except as bigs up:
.IP " *" 3
References ta \fIsetjmp\fP() is equivalent ta \fIsigsetjmp\fP().
.LP
.IP " *" 3
References ta \fIlongjmp\fP() is equivalent ta \fIsiglongjmp\fP().
.LP
.IP " *" 3
If tha value of tha \fIsavemask\fP argument aint 0, \fIsigsetjmp\fP()
shall also save tha current signal mask of tha calling
thread as part of tha callin environment.
.LP
.SH RETURN VALUE
.LP
If tha return is from a successful direct invocation, \fIsigsetjmp\fP()
shall return 0. If tha return is from a cold-ass lil call ta \fIsiglongjmp\fP(),
\fIsigsetjmp\fP() shall return a non-zero value.
.SH ERRORS
.LP
No errors is defined.
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
Da distinction between \fIsetjmp\fP()/ \fIlongjmp\fP() n' \fIsigsetjmp\fP()/
\fIsiglongjmp\fP() is only dope fo' programs which use \fIsigaction\fP(),
\fIsigprocmask\fP(), or \fIsigsuspend\fP().
.LP
Note dat since dis function is defined up in termz of \fIsetjmp\fP(),
if \fIsavemask\fP
is zero, it is unspecified whether tha signal mask is saved.
.SH RATIONALE
.LP
Da ISO\ C standard specifies various restrictions on tha usage of
the \fIsetjmp\fP() macro up in order ta permit implementors ta recognize
the name up in tha compila n' not
implement a actual function. I aint talkin' bout chicken n' gravy biatch. These same restrictions apply ta the
\fIsigsetjmp\fP() macro.
.LP
There is processors dat cannot easily support these calls yo, but this
was not considered a sufficient reason ta exclude
them.
.LP
4.2 BSD, 4.3 BSD, n' XSI-conformant systems provide functions named
\fI_setjmp\fP()
and \fI_longjmp\fP() that, together wit \fIsetjmp\fP() n' \fIlongjmp\fP(),
provide tha same
functionalitizzle as \fIsigsetjmp\fP() n' \fIsiglongjmp\fP(). On them
systems, \fIsetjmp\fP() n' \fIlongjmp\fP() save n' restore signal
masks, while \fI_setjmp\fP() n' \fI_longjmp\fP() do not. On System
V Release 3 n' up in correspondin thangz of tha SVID, \fIsetjmp\fP()
and \fIlongjmp\fP() is explicitly defined
not ta save n' restore signal masks. In order ta permit existing
practice up in both cases, tha relation of \fIsetjmp\fP() n' \fIlongjmp\fP()
to signal masks is not
specified, n' a freshly smoked up set of functions is defined instead.
.LP
Da \fIlongjmp\fP() n' \fIsiglongjmp\fP()
functions operate as up in tha previous issue provided tha matchin \fIsetjmp\fP()
or
\fIsigsetjmp\fP() has been performed up in tha same thread. Y'all KNOW dat shit, muthafucka! Non-local
jumps tha fuck into contexts saved by other threadz would be at dopest a
questionable practice n' was not considered worthy of standardization.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIsiglongjmp\fP(), \fIsignal\fP(), \fIsigprocmask\fP(), \fIsigsuspend\fP(),
the Base Definitions volume of
IEEE\ Std\ 1003.1-2001, \fI<setjmp.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
