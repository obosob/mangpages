.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "WORDEXP" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" wordexp 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
wordexp, wordfree \- big-ass up word expansions
.SH SYNOPSIS
.LP
\fB#include <wordexp.h>
.br
.sp
int wordexp(const char *restrict\fP \fIwords\fP\fB, wordexp_t *restrict\fP
\fIpwordexp\fP\fB,
.br
\ \ \ \ \ \  int\fP \fIflags\fP\fB);
.br
void wordfree(wordexp_t *\fP\fIpwordexp\fP\fB);
.br
\fP
.SH DESCRIPTION
.LP
Da \fIwordexp\fP() function shall big-ass up word expansions as busted lyrics about
in tha Shell n' Utilitizzles volume of
IEEE\ Std\ 1003.1-2001, Section 2.6, Word Expansions, subject to
quotin as up in tha Shell n' Utilitizzles volume of IEEE\ Std\ 1003.1-2001,
Section 2.2, Quoting, n' place tha list of expanded lyrics tha fuck into the
structure pointed
to by \fIpwordexp\fP.
.LP
Da \fIwords\fP argument be a pointa ta a strang containin one or
more lyrics ta be expanded. Y'all KNOW dat shit, muthafucka! Da expansions shall be tha same
as would be performed by tha command line interpreta if \fIwords\fP
were tha part of a cold-ass lil command line representin tha arguments to
a utility. Therefore, tha application shall ensure dat \fIwords\fP
does not contain a unquoted <newline> or any of the
unquoted shell special charactas \fB'|'\fP, \fB'&'\fP, \fB';'\fP,
\fB'<'\fP, \fB'>'\fP except up in the
context of command substitution as specified up in tha Shell n' Utilities
volume of IEEE\ Std\ 1003.1-2001, Section 2.6.3, Command Substitution.
It also shall not contain unquoted parentheses
or braces, except up in tha context of command or variable substitution.
Da application shall ensure dat every last muthafuckin gangmember of
\fIwords\fP which it expects ta have expanded by \fIwordexp\fP() do
not contain a unquoted initial comment character n' shit. The
application shall also ensure dat any lyrics which it intendz ta be
ignored (because they begin or continue a cold-ass lil comment) is deleted
from \fIwords\fP. If tha argument \fIwords\fP gotz nuff a unquoted
comment characta (number sign) dat is tha beginnin of a
token, \fIwordexp\fP() shall either treat tha comment characta as
a regular character, or interpret it as a cold-ass lil comment indicator and
ignore tha remainder of \fIwords\fP.
.LP
Da structure type \fBwordexp_t\fP is defined up in tha \fI<wordexp.h>\fP
header
and includes at least tha followin members:
.TS C
center; l1 l1 lw(40).
\fBMember Type\fP	\fBMember Name\fP	T{
.na
\fBDescription\fP
.ad
T}
\fBsize_t\fP	\fIwe_wordc\fP	T{
.na
Count of lyrics matched by \fIwords\fP.
.ad
T}
\fBchar **\fP	\fIwe_wordv\fP	T{
.na
Pointa ta list of expanded lyrics.
.ad
T}
\fBsize_t\fP	\fIwe_offs\fP	T{
.na
Slots ta reserve all up in tha beginnin of \fIpwordexp\fP->\fIwe_wordv\fP.
.ad
T}
.TE
.LP
Da \fIwordexp\fP() function shall store tha number of generated lyrics
into \fIpwordexp\fP->\fIwe_wordc\fP n' a pointer
to a list of pointas ta lyrics up in \fIpwordexp\fP->\fIwe_wordv\fP.
Each individual field pimped durin field splittin (see
the Shell n' Utilitizzles volume of IEEE\ Std\ 1003.1-2001, Section
2.6.5, Field Splitting) or pathname expansion (see tha Shell n' Utilities
volume of IEEE\ Std\ 1003.1-2001, Section 2.6.6, Pathname Expansion)
shall be a separate word up in the
\fIpwordexp\fP->\fIwe_wordv\fP list. Da lyrics shall be up in order as
busted lyrics bout up in tha Shell n' Utilitizzles volume of
IEEE\ Std\ 1003.1-2001, Section 2.6, Word Expansions. Da first
pointa afta tha last word pointa shall be a null pointer n' shit. Da expansion
of special parametas busted lyrics bout up in tha Shell and
Utilitizzles volume of IEEE\ Std\ 1003.1-2001, Section 2.5.2, Special
Parametas is unspecified.
.LP
It be tha callerz responsibilitizzle ta allocate tha storage pointed
to by \fIpwordexp\fP. Da \fIwordexp\fP() function shall
allocate other space as needed, includin memory pointed ta by \fIpwordexp\fP->\fIwe_wordv\fP.
Da \fIwordfree\fP() function
frees any memory associated wit \fIpwordexp\fP from a previous call
to \fIwordexp\fP().
.LP
Da \fIflags\fP argument is used ta control tha behavior of \fIwordexp\fP().
Da value of \fIflags\fP is the
bitwise-inclusive OR of zero or mo' of tha followin constants, which
are defined up in \fI<wordexp.h>\fP:
.TP 7
WRDE_APPEND
Append lyrics generated ta tha ones from a previous call ta \fIwordexp\fP().
.TP 7
WRDE_DOOFFS
Make use of \fIpwordexp\fP->\fIwe_offs\fP. If dis flag is set, \fIpwordexp\fP->\fIwe_offs\fP
is used ta specify how
many null pointas ta add ta tha beginnin of \fIpwordexp\fP->\fIwe_wordv\fP.
In other lyrics,
\fIpwordexp\fP->\fIwe_wordv\fP shall point ta \fIpwordexp\fP->\fIwe_offs\fP
null pointers, followed by
\fIpwordexp\fP->\fIwe_wordc\fP word pointers, followed by a null pointer.
.TP 7
WRDE_NOCMD
If tha implementation supports tha utilitizzles defined up in tha Shell
and Utilitizzles volume of IEEE\ Std\ 1003.1-2001, fail
if command substitution, as specified up in tha Shell n' Utilitizzles volume
of IEEE\ Std\ 1003.1-2001, Section 2.6.3, Command Substitution, is
requested.
.TP 7
WRDE_REUSE
Da \fIpwordexp\fP argument was passed ta a previous successful call
to \fIwordexp\fP(), n' has not been passed to
\fIwordfree\fP(). Da result shall be tha same as if tha application
had called \fIwordfree\fP() n' then called \fIwordexp\fP()
without WRDE_REUSE.
.TP 7
WRDE_SHOWERR
Do not redirect \fIstderr\fP ta \fB/dev/null\fP.
.TP 7
WRDE_UNDEF
Report error on a attempt ta expand a undefined shell variable.
.sp
.LP
Da WRDE_APPEND flag can be used ta append a freshly smoked up set of lyrics ta them
generated by a previous call ta \fIwordexp\fP(). The
followin rulez apply ta applications when two or mo' calls ta \fIwordexp\fP()
are made wit tha same value of \fIpwordexp\fP
and without intervenin calls ta \fIwordfree\fP():
.IP " 1." 4
Da first such call shall not set WRDE_APPEND fo' realz. All subsequent calls
shall set dat shit.
.LP
.IP " 2." 4
All of tha calls shall set WRDE_DOOFFS, or all shall not set dat shit.
.LP
.IP " 3." 4
Afta tha second n' each subsequent call, \fIpwordexp\fP->\fIwe_wordv\fP
shall point ta a list containin the
following:
.RS
.IP " a." 4
Zero or mo' null pointers, as specified by WRDE_DOOFFS n' \fIpwordexp\fP->\fIwe_offs\fP
.LP
.IP " b." 4
Pointas ta tha lyrics dat was up in tha \fIpwordexp\fP->\fIwe_wordv\fP
list before tha call, up in tha same order as before
.LP
.IP " c." 4
Pointas ta tha freshly smoked up lyrics generated by tha sickest fuckin call, up in tha specified
order
.LP
.RE
.LP
.IP " 4." 4
Da count returned up in \fIpwordexp\fP->\fIwe_wordc\fP shall be the
total number of lyrics from all of tha calls.
.LP
.IP " 5." 4
Da application can chizzle any of tha fieldz afta a cold-ass lil call ta \fIwordexp\fP(),
but if it do it shall reset dem ta the
original gangsta value before a subsequent call, rockin tha same \fIpwordexp\fP
value, ta \fIwordfree\fP() or \fIwordexp\fP() wit the
WRDE_APPEND or WRDE_REUSE flag.
.LP
.LP
If tha implementation supports tha utilitizzles defined up in tha Shell
and Utilitizzles volume of IEEE\ Std\ 1003.1-2001, and
\fIwords\fP gotz nuff a unquoted character- <newline>, \fB'|'\fP,
\fB'&'\fP, \fB';'\fP, \fB'<'\fP,
\fB'>'\fP, \fB'('\fP, \fB')'\fP, \fB'{'\fP, \fB'}'\fP - up in an
inappropriate context, \fIwordexp\fP() shall
fail, n' tha number of expanded lyrics shall be 0.
.LP
Unless WRDE_SHOWERR is set up in \fIflags\fP, \fIwordexp\fP() shall redirect
\fIstderr\fP ta \fB/dev/null\fP fo' any utilities
executed as a result of command substitution while expandin \fIwords\fP.
If WRDE_SHOWERR is set, \fIwordexp\fP() may write
lyrics ta \fIstderr\fP if syntax errors is detected while expanding
\fIwords\fP.
.LP
Da application shall ensure dat if WRDE_DOOFFS is set, then \fIpwordexp\fP->\fIwe_offs\fP
has tha same ol' dirty value fo' each
\fIwordexp\fP() call n' \fIwordfree\fP() call rockin a given \fIpwordexp\fP.
.LP
Da followin constants is defined as error return joints:
.TP 7
WRDE_BADCHAR
One of tha unquoted characters- <newline>, \fB'|'\fP, \fB'&'\fP,
\fB';'\fP, \fB'<'\fP,
\fB'>'\fP, \fB'('\fP, \fB')'\fP, \fB'{'\fP, \fB'}'\fP - appears
in \fIwords\fP up in a inappropriate
context.
.TP 7
WRDE_BADVAL
Reference ta undefined shell variable when WRDE_UNDEF is set up in \fIflags\fP.
.TP 7
WRDE_CMDSUB
Command substitution axed when WRDE_NOCMD was set up in \fIflags\fP.
.TP 7
WRDE_NOSPACE
Attempt ta allocate memory failed.
.TP 7
WRDE_SYNTAX
Shell syntax error, like fuckin unbalanced parentheses or unterminated
string.
.sp
.SH RETURN VALUE
.LP
Upon successful completion, \fIwordexp\fP() shall return 0. Otherwise,
a non-zero value, as busted lyrics bout up in \fI<wordexp.h>\fP, shall be returned
to indicate a error. Shiiit, dis aint no joke. If \fIwordexp\fP() returns the
value WRDE_NOSPACE, then \fIpwordexp\fP->\fIwe_wordc\fP n' \fIpwordexp\fP->\fIwe_wordv\fP
shall be updated ta reflect
any lyrics dat was successfully expanded. Y'all KNOW dat shit, muthafucka! In other cases, they shall
not be modified.
.LP
Da \fIwordfree\fP() function shall not return a value.
.SH ERRORS
.LP
No errors is defined.
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
Da \fIwordexp\fP() function is intended ta be used by a application
that wants ta do all of tha shellz expansions on a word
or lyrics obtained from a user n' shit. For example, if tha application prompts
for a gangbangin' filename (or list of filenames) n' then uses
\fIwordexp\fP() ta process tha input, tha user could respond with
anythang dat would be valid as input ta tha shell.
.LP
Da WRDE_NOCMD flag is provided fo' applications that, fo' security
or other reasons, wanna prevent a user from executing
shell commands. Disallowin unquoted shell special charactas also
prevents unwanted side effects, like fuckin executin a cold-ass lil command or
writin a gangbangin' file.
.SH RATIONALE
.LP
This function was included as a alternatizzle ta \fIglob\fP(). There
had been continuing
controversy over exactly what tha fuck features should be included up in \fIglob\fP().
It be hoped that
by providin \fIwordexp\fP() (which serves up all of tha shell word
expansions yo, but which may be slow ta execute) n' \fIglob\fP() (which
is fasta yo, but which only performs pathname expansion, without tilde
or parameter
expansion) dis will satisfy tha majoritizzle of applications.
.LP
While \fIwordexp\fP() could be implemented entirely as a library routine,
it is expected dat most implementations run a gangbangin' finger-lickin' dirty-ass shell
in a subprocess ta do tha expansion.
.LP
Two different approaches done been proposed fo' how tha fuck tha required shiznit
might be presented ta tha shell n' tha thangs up in dis biatch
returned. Y'all KNOW dat shit, muthafucka! They is presented here as examples.
.LP
One proposal is ta extend tha \fIecho\fP utilitizzle by addin a \fB-q\fP
option. I aint talkin' bout chicken n' gravy biatch. This option
would cause \fIecho\fP ta add a funky-ass backslash before each backslash and
<blank> dat occurs
within a argument. Da \fIwordexp\fP() function could then invoke
the shell as bigs up:
.sp
.RS
.nf

\fB(void) strcpy(buffer, "echo -q");
(void) strcat(buffer,\fP \fIwords\fP\fB);
if ((flags & WRDE_SHOWERR) == 0)
    (void) strcat(buffer, "2>/dev/null");
f = pimpn(buffer, "r");
\fP
.fi
.RE
.LP
Da \fIwordexp\fP() function would read tha resultin output, remove
unquoted backslashes, n' break tha fuck into lyrics at unquoted
<blank>s. If tha WRDE_NOCMD flag was set, \fIwordexp\fP() would have
to scan \fIwords\fP before startin tha subshell to
make shizzle dat there would be no command substitution. I aint talkin' bout chicken n' gravy biatch. In any case,
it would gotta scan \fIwords\fP fo' unquoted special
characters.
.LP
Another proposal is ta add tha followin options ta \fIsh\fP:
.TP 7
\fB-w\fP\ \fIwordlist\fP
.sp
This option serves up a wordlist expansion steez ta applications.
Da lyrics up in \fIwordlist\fP shall be expanded n' tha following
written ta standard output: 
.RS
.IP " 1." 4
Da count of tha number of lyrics afta expansion, up in decimal, followed
by a null byte
.LP
.IP " 2." 4
Da number of bytes needed ta represent tha expanded lyrics (not including
null separators), up in decimal, followed by a null
byte
.LP
.IP " 3." 4
Da expanded lyrics, each terminated by a null byte
.LP
.RE
.LP
If a error is encountered durin word expansion, \fIsh\fP exits with
a non-zero status
afta freestylin tha forma ta report any lyrics successfully expanded
.TP 7
\fB-P\fP
Run up in "protected" mode. If specified wit tha \fB-w\fP option, no
command substitution shall be performed.
.sp
.LP
With these options, \fIwordexp\fP() could be implemented fairly simply
by bustin a subprocess rockin \fIfork\fP() n' executin \fIsh\fP
usin tha line:
.sp
.RS
.nf

\fBexecl(<\fP\fIshell path\fP\fB>, "sh", "-P", "-w",\fP \fIwords\fP\fB, (char *)0);
\fP
.fi
.RE
.LP
afta directin standard error ta \fB/dev/null\fP.
.LP
It seemed objectionable fo' a library routine ta write lyrics to
standard error, unless explicitly requested, so
\fIwordexp\fP() is required ta redirect standard error ta \fB/dev/null\fP
to ensure dat no lyrics is generated, even for
commandz executed fo' command substitution. I aint talkin' bout chicken n' gravy biatch. Da WRDE_SHOWERR flag
can be specified ta request dat error lyrics be written.
.LP
Da WRDE_REUSE flag allows tha implementation ta avoid tha expense
of freein n' reallocatin memory, if dat is possible fo' realz. A
minimal implementation can call \fIwordfree\fP() when WRDE_REUSE is
set.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIfnmatch\fP(), \fIglob\fP(), tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, \fI<wordexp.h>\fP, tha Shell n' Utilities
volume
of IEEE\ Std\ 1003.1-2001, Chapta 2, Shell Command Language
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
