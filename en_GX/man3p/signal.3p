.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "SIGNAL" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" signal 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
signal \- signal pimpment
.SH SYNOPSIS
.LP
\fB#include <signal.h>
.br
.sp
void (*signal(int\fP \fIsig\fP\fB, void (*\fP\fIfunc\fP\fB)(int)))(int);
.br
\fP
.SH DESCRIPTION
.LP
Use
of dis function is unspecified up in a multi-threaded process. 
.LP
Da \fIsignal\fP() function chizzlez one of three ways up in which receipt
of tha signal number \fIsig\fP is ta be subsequently
handled. Y'all KNOW dat shit, muthafucka! If tha value of \fIfunc\fP is SIG_DFL, default handlin for
that signal shall occur. Shiiit, dis aint no joke. If tha value of \fIfunc\fP is
SIG_IGN, tha signal shall be ignored. Y'all KNOW dat shit, muthafucka! Otherwise, tha application shall
ensure dat \fIfunc\fP points ta a gangbangin' function ta be called
when dat signal occurs fo' realz. An invocation of such a gangbangin' function cuz
of a signal, or (recursively) of any further functions called by
that invocation (other than functions up in tha standard library), is
called a "signal handlez".
.LP
When a signal occurs, n' \fIfunc\fP points ta a gangbangin' function, it is implementation-defined
whether tha equivalent of a:
.sp
.RS
.nf

\fBsignal(\fP\fIsig\fP\fB, SIG_DFL);
\fP
.fi
.RE
.LP
is executed or tha implementation prevents some implementation-defined
set of signals (at least includin \fIsig\fP) from
occurrin until tha current signal handlin has completed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. (If the
value of \fIsig\fP is SIGILL, tha implementation may
alternatively define dat no action is taken.) Next tha equivalent
of:
.sp
.RS
.nf

\fB(*func)(sig);
\fP
.fi
.RE
.LP
is executed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. If n' when tha function returns, if tha value of \fIsig\fP
was SIGFPE, SIGILL, or SIGSEGV or any other
implementation-defined value correspondin ta a cold-ass lil computationizzle exception,
the behavior is undefined. Y'all KNOW dat shit, muthafucka! Otherwise, tha program shall
resume execution all up in tha point dat shiznit was interrupted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. If tha signal occurs
as tha result of callin tha \fIabort\fP(), \fIraise\fP(),   \fIkill\fP(),
\fIpthread_kill\fP(), or \fIsigqueue\fP()  function, the
signal handlez shall not call tha \fIraise\fP() function.
.LP
If tha signal occurs other than as tha result of callin \fIabort\fP(),
\fIraise\fP(),   \fIkill\fP(), \fIpthread_kill\fP(), or \fIsigqueue\fP(),
\ tha behavior is undefined if tha signal handlez refers ta any
object wit static storage duration other than by assignin a value
to a object declared as volatile \fBsig_atomic_t\fP, or if
the signal handlez calls any function up in tha standard library other
than one of tha functions listed up in \fISignal Concepts\fP . Furthermore,
if such a cold-ass lil call fails, tha value of \fIerrno\fP is
unspecified.
.LP
At program start-up, tha equivalent of:
.sp
.RS
.nf

\fBsignal(\fP\fIsig\fP\fB, SIG_IGN);
\fP
.fi
.RE
.LP
is executed fo' some signals, n' tha equivalent of:
.sp
.RS
.nf

\fBsignal(\fP\fIsig\fP\fB, SIG_DFL);
\fP
.fi
.RE
.LP
is executed fo' all other signals  (see \fIexec\fP). 
.SH RETURN VALUE
.LP
If tha request can be honored, \fIsignal\fP() shall return tha value
of \fIfunc\fP fo' da most thugged-out recent call ta \fIsignal\fP()
for tha specified signal \fIsig\fP. Otherwise, SIG_ERR shall be returned
and a positizzle value shall be stored up in \fIerrno\fP.
.SH ERRORS
.LP
Da \fIsignal\fP() function shall fail if:
.TP 7
.B EINVAL
Da \fIsig\fP argument aint a valid signal number or a attempt
is made ta catch a signal dat cannot be caught or ignore a
signal dat cannot be ignored. Y'all KNOW dat shit, muthafucka! 
.sp
.LP
Da \fIsignal\fP() function may fail if:
.TP 7
.B EINVAL
An
attempt was made ta set tha action ta SIG_DFL fo' a signal dat cannot
be caught or ignored (or both). 
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
Da \fIsigaction\fP() function serves up a mo' comprehensive n' reliable
mechanism
for controllin signals; freshly smoked up applications should use \fIsigaction\fP()
rather than
\fIsignal\fP().
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fISignal Concepts\fP, \fIexec\fP(), \fIpause\fP(), \fIsigaction\fP(),
\fIsigsuspend\fP(), \fIwaitid\fP(), tha Base Definitions volume
of IEEE\ Std\ 1003.1-2001, \fI<signal.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
