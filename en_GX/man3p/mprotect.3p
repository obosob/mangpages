.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "MPROTECT" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" mprotect 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
mprotect \- set protection of memory mapping
.SH SYNOPSIS
.LP
\fB#include <sys/mman.h>
.br
.sp
int mprotect(void *\fP\fIaddr\fP\fB, size_t\fP \fIlen\fP\fB, int\fP
\fIprot\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fImprotect\fP() function shall chizzle tha access protections
to be dat specified by \fIprot\fP fo' dem whole pages
containin any part of tha address space of tha process startin at
address \fIaddr\fP n' continuin fo' \fIlen\fP bytes. The
parameta \fIprot\fP determines whether read, write, execute, or some
combination of accesses is permitted ta tha data being
mapped. Y'all KNOW dat shit, muthafucka! Da \fIprot\fP argument should be either PROT_NONE or the
bitwise-inclusive OR of one or mo' of PROT_READ, PROT_WRITE,
and PROT_EXEC.
.LP
If a implementation cannot support tha combination of access types
specified by \fIprot\fP, tha call ta \fImprotect\fP()
shall fail.
.LP
An implementation may permit accesses other than dem specified by
\fIprot\fP; however, no implementation shall permit a write
to succeed where PROT_WRITE has not been set or shall permit any access
where PROT_NONE ridin' solo has been set. Implementations shall
support at least tha followin jointz of \fIprot\fP: PROT_NONE, PROT_READ,
PROT_WRITE, n' tha bitwise-inclusive OR of PROT_READ
and PROT_WRITE. If PROT_WRITE is specified, tha application shall
ensure dat it has opened tha mapped objects up in tha specified
address range wit write permission, unless MAP_PRIVATE was specified
in tha original gangsta mapping, regardless of whether tha file
descriptors used ta map tha objects have since been closed.
.LP
Da implementation shall require dat \fIaddr\fP be a multiple of
the page size as returned by \fIsysconf\fP().
.LP
Da behavior of dis function is unspecified if tha mappin was not
established by a cold-ass lil call ta \fImmap\fP().
.LP
When \fImprotect\fP() fails fo' reasons other than [EINVAL], tha protections
on a shitload of tha pages up in tha range
[\fIaddr\fP,\fIaddr\fP+\fIlen\fP) may done been chizzled.
.SH RETURN VALUE
.LP
Upon successful completion, \fImprotect\fP() shall return 0; otherwise,
it shall return -1 n' set \fIerrno\fP ta indicate the
error.
.SH ERRORS
.LP
Da \fImprotect\fP() function shall fail if:
.TP 7
.B EACCES
Da \fIprot\fP argument specifies a protection dat violates tha access
permission tha process has ta tha underlyin memory
object.
.TP 7
.B EAGAIN
Da \fIprot\fP argument specifies PROT_WRITE over a MAP_PRIVATE mapping
and there be insufficient memory resources ta reserve
for lockin tha private page.
.TP 7
.B EINVAL
Da \fIaddr\fP argument aint a multiple of tha page size as returned
by \fIsysconf\fP().
.TP 7
.B ENOMEM
Addresses up in tha range [\fIaddr\fP,\fIaddr\fP+\fIlen\fP) is invalid
for tha address space of a process, or specify one or
more pages which is not mapped.
.TP 7
.B ENOMEM
Da \fIprot\fP argument specifies PROT_WRITE on a MAP_PRIVATE mapping,
and it would require mo' space than tha system be able
to supply fo' lockin tha private pages, if required.
.TP 7
.B ENOTSUP
Da implementation do not support tha combination of accesses requested
in tha \fIprot\fP argument.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
Da [EINVAL] error above is marked EX cuz it is defined as an
optionizzle error up in tha POSIX Realtime Extension.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fImmap\fP(), \fIsysconf\fP(), tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, \fI<sys/mman.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
