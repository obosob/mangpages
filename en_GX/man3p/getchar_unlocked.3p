.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "GETC_UNLOCKED" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" getc_unlocked 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
getc_unlocked, getchar_unlocked, putc_unlocked, putchar_unlocked \-
stdio wit explicit client locking
.SH SYNOPSIS
.LP
\fB#include <stdio.h>
.br
.sp
int getc_unlocked(FILE *\fP\fIstream\fP\fB);
.br
int getchar_unlocked(void);
.br
int putc_unlocked(int\fP \fIc\fP\fB, FILE *\fP\fIstream\fP\fB);
.br
int putchar_unlocked(int\fP \fIc\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Versionz of tha functions \fIgetc\fP(), \fIgetchar\fP(), \fIputc\fP(),
and \fIputchar\fP() respectively named \fIgetc_unlocked\fP(), \fIgetchar_unlocked\fP(),
\fIputc_unlocked\fP(), n' \fIputchar_unlocked\fP() shall be provided
which is functionally equivalent ta tha original gangsta versions,
with tha exception dat they is not required ta be implemented in
a thread-safe manner n' shit. They may only safely be used within a
scope protected by \fIflockfile\fP() (or \fIftrylockfile\fP()) and
\fIfunlockfile\fP().
These functions may safely be used up in a multi-threaded program if
and only if they is called while tha invokin thread owns tha (
\fBFILE *\fP) object, as is tha case afta a successful call ta the
\fIflockfile\fP()
or \fIftrylockfile\fP() functions.
.SH RETURN VALUE
.LP
See \fIgetc\fP(), \fIgetchar\fP(), \fIputc\fP(),
and \fIputchar\fP().
.SH ERRORS
.LP
See \fIgetc\fP(), \fIgetchar\fP(), \fIputc\fP(),
and \fIputchar\fP().
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
Since they may be implemented as macros, \fIgetc_unlocked\fP() and
\fIputc_unlocked\fP() may treat incorrectly a \fIstream\fP
argument wit side effects, n' you can put dat on yo' toast. In particular, \fIgetc_unlocked\fP(*f++)
and \fIputc_unlocked\fP(*f++) do not necessarily work as
expected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Therefore, use of these functions up in such thangs should
be preceded by tha followin statement as appropriate:
.sp
.RS
.nf

\fB#undef getc_unlocked
#undef putc_unlocked
\fP
.fi
.RE
.SH RATIONALE
.LP
Some I/O functions is typically implemented as macros fo' performance
reasons (for example, \fIputc\fP() n' \fIgetc\fP()). For safety,
they need ta be
synchronized yo, but it is often too high-rollin' ta synchronize on every
character n' shit. Nevertheless, dat shiznit was felt dat tha safety concerns
were mo' blingin; consequently, tha \fIgetc\fP(), \fIgetchar\fP(),
\fIputc\fP(), n' \fIputchar\fP() functions is required ta be thread-safe.
But fuck dat shiznit yo, tha word on tha street is dat unlocked versions is also
provided wit names dat clearly indicate tha unsafe nature of their
operation but can be used ta exploit they higher performance.
These unlocked versions can be safely used only within explicitly
locked program regions, rockin exported lockin primitives. In
particular, a sequence such as:
.sp
.RS
.nf

\fBflockfile(fileptr);
putc_unlocked('1', fileptr);
putc_unlocked('\\n', fileptr);
fprintf(fileptr, "Line 2\\n");
funlockfile(fileptr);
\fP
.fi
.RE
.LP
is permissible, n' thangs up in dis biatch up in tha text sequence:
.sp
.RS
.nf

\fB1
Line 2
\fP
.fi
.RE
.LP
bein printed without bein interspersed wit output from other threads.
.LP
It would be wack ta have tha standard names like fuckin \fIgetc\fP(),
\fIputc\fP(), n' so on, map ta tha "fasta yo, but unsafe" rather than
the "slower yo, but safe''
versions. In either case, you would still wanna inspect all uses
of \fIgetc\fP(), \fIputc\fP(), n' so on, by hand when converting
existin code. Choosin tha safe bindings as the
default, at least, thangs up in dis biatch up in erect code n' maintains tha "atomicity
at tha function" invariant. To do otherwise would
introduce gratuitous synchronization errors tha fuck into converted code. Other
routines dat modify tha \fIstdio\fP ( \fBFILE *\fP)
structures or buffers is also safely synchronized.
.LP
Note dat there is no need fo' functionz of tha form \fIgetc_locked\fP(),
\fIputc_locked\fP(), n' so on, since dis is the
functionalitizzle of \fIgetc\fP(), \fIputc\fP(), \fIet
al\fP. Well shiiiit, it would be inappropriate ta bust a gangbangin' feature test macro ta switch
a macro definizzle of \fIgetc\fP() between \fIgetc_locked\fP() and
\fIgetc_unlocked\fP(), since tha ISO\ C standard
requires a actual function ta exist, a gangbangin' function whose behavior could
not be chizzled by tha feature test macro fo' realz. Also, providing
both tha \fIxxx_locked\fP() n' \fIxxx_unlocked\fP() forms leadz to
the mad drama of whether tha suffix raps bout tha behavior of
the function or tha circumstances under which it should be used.
.LP
Three additionizzle routines, \fIflockfile\fP(), \fIftrylockfile\fP(),
and \fIfunlockfile\fP()
(which may be macros), is provided ta allow tha user ta delineate
a sequence of I/O statements dat is executed
synchronously.
.LP
Da \fIungetc\fP() function is infrequently called relatizzle ta the
other
functions/macros so no unlocked variation is needed.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIgetc\fP(), \fIgetchar\fP(), \fIputc\fP(), \fIputchar\fP(),
the Base Definitions volume of IEEE\ Std\ 1003.1-2001, \fI<stdio.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
