.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "SEM_POST" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" sem_post 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
sem_post \- unlock a semaphore (\fBREALTIME\fP)
.SH SYNOPSIS
.LP
\fB#include <semaphore.h>
.br
.sp
int sem_post(sem_t *\fP\fIsem\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIsem_post\fP() function shall unlock tha semaphore referenced
by \fIsem\fP by struttin a semaphore unlock operation on
that semaphore.
.LP
If tha semaphore value resultin from dis operation is positive,
then no threadz was blocked waitin fo' tha semaphore to
become unlocked; tha semaphore value is simply incremented.
.LP
If tha value of tha semaphore resultin from dis operation is zero,
then one of tha threadz blocked waitin fo' tha semaphore
shall be allowed ta return successfully from its call ta \fIsem_wait\fP().
\ If tha Process
Schedulin option is supported, tha thread ta be unblocked shall be
chosen up in a manner appropriate ta tha schedulin policies and
parametas up in effect fo' tha blocked threads. In tha case of tha schedulers
SCHED_FIFO n' SCHED_RR, tha highest prioritizzle waiting
thread shall be unblocked, n' if there is mo' than one highest priority
thread blocked waitin fo' tha semaphore, then the
highest prioritizzle thread dat has been waitin tha longest shall be
unblocked. Y'all KNOW dat shit, muthafucka! If tha Process Schedulin option aint defined, the
choice of a thread ta unblock is unspecified. Y'all KNOW dat shit, muthafucka! 
.LP
If
the Process Sporadic Server option is supported, n' tha scheduling
policy is SCHED_SPORADIC, tha semantics is as per SCHED_FIFO
above. 
.LP
Da \fIsem_post\fP() function shall be reentrant wit respect ta signals
and may be invoked from a signal-catching
function.
.SH RETURN VALUE
.LP
If successful, tha \fIsem_post\fP() function shall return zero; otherwise,
the function shall return -1 n' set \fIerrno\fP to
indicate tha error.
.SH ERRORS
.LP
Da \fIsem_post\fP() function shall fail if:
.TP 7
.B EINVAL
Da \fIsem\fP argument do not refer ta a valid semaphore.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
Da \fIsem_post\fP() function is part of tha Semaphores option and
need not be available on all implementations.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIsemctl\fP(), \fIsemget\fP(), \fIsemop\fP(),
\fIsem_timedwait\fP(), \fIsem_trywait\fP(), \fIsem_wait\fP(),
the Base Definitions volume of IEEE\ Std\ 1003.1-2001, \fI<semaphore.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
