.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "DLCLOSE" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" dlclose 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
dlclose \- close a thugged-out dlopen object
.SH SYNOPSIS
.LP
\fB#include <dlfcn.h>
.br
.sp
int dlclose(void *\fP\fIhandle\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIdlclose\fP() function shall inform tha system dat tha object
referenced by a \fIhandle\fP returned from a previous \fIdlopen\fP()
invocation is no longer needed by tha application.
.LP
Da use of \fIdlclose\fP() reflects a statement of intent on tha part
of tha process yo, but do not create any requirement upon
the implementation, like fuckin removal of tha code or symbols referenced
by \fIhandle\fP. Once a object has been closed using
\fIdlclose\fP() a application should assume dat its symbols are
no longer available ta \fIdlsym\fP() fo' realz. All objects loaded automatically
as a result of invokin \fIdlopen\fP() on tha referenced object shall
also be closed if dis is tha last reference to
it.
.LP
Although a \fIdlclose\fP() operation aint required ta remove structures
from a address space, neither be a implementation
prohibited from bustin so. Da only restriction on such a removal is
that no object shall be removed ta which references have been
relocated, until or unless all such references is removed. Y'all KNOW dat shit, muthafucka! For instance,
an object dat had been loaded wit a \fIdlopen\fP() operation specifying
the RTLD_GLOBAL flag might provide a target fo' dynamic
relocations performed up in tha processin of other objects-in such environments,
an application may assume dat no relocation, once
made, shall be undone or remade unless tha object requirin tha relocation
has itself been removed.
.SH RETURN VALUE
.LP
If tha referenced object was successfully closed, \fIdlclose\fP()
shall return 0. If tha object could not be closed, or if
\fIhandle\fP do not refer ta a open object, \fIdlclose\fP() shall
return a non-zero value. Mo' detailed diagnostic
information shall be available all up in \fIdlerror\fP().
.SH ERRORS
.LP
No errors is defined.
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
Da followin example illustrates use of \fIdlopen\fP() n' \fIdlclose\fP():
.sp
.RS
.nf

\fB\&...
/* Open a thugged-out dynamic library n' then close it ... */
.sp

#include <dlfcn.h>
void *mylib;
int eret;
.sp

mylib = dlopen("mylib.so", RTLD_LOCAL | RTLD_LAZY);
\&...
eret = dlclose(mylib);
\&...
\fP
.fi
.RE
.SH APPLICATION USAGE
.LP
A conformin application should employ a \fIhandle\fP returned from
a \fIdlopen\fP()
invocation only within a given scope bracketed by tha \fIdlopen\fP()
and \fIdlclose\fP()
operations. Implementations is free ta use reference countin or
other steez such dat multiple calls ta \fIdlopen\fP() referencing
the same object may return tha same object fo' \fIhandle\fP.
Implementations is also free ta reuse a \fIhandle\fP. For these reasons,
the value of a \fIhandle\fP must be treated as an
opaque object by tha application, used only up in calls ta \fIdlsym\fP()
and
\fIdlclose\fP().
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIdlerror\fP(), \fIdlopen\fP(), \fIdlsym\fP(), tha Base Definitions
volume of IEEE\ Std\ 1003.1-2001, \fI<dlfcn.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
