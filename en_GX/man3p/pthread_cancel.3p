.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "PTHREAD_CANCEL" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" pthread_cancel 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
pthread_cancel \- quit execution of a thread
.SH SYNOPSIS
.LP
\fB#include <pthread.h>
.br
.sp
int pthread_cancel(pthread_t\fP \fIthread\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIpthread_cancel\fP() function shall request dat \fIthread\fP
be canceled. Y'all KNOW dat shit, muthafucka! Da target threadz cancelabilitizzle state and
type determines when tha cancellation takes effect. When tha cancellation
is acted on, tha cancellation cleanup handlezs for
\fIthread\fP shall be called. Y'all KNOW dat shit, muthafucka! When tha last cancellation cleanup handlez
returns, tha thread-specific data destructor functions
shall be called fo' \fIthread\fP. When tha last destructor function
returns, \fIthread\fP shall be terminated.
.LP
Da cancellation processin up in tha target thread shall run asynchronously
with respect ta tha callin thread returnin from
\fIpthread_cancel\fP().
.SH RETURN VALUE
.LP
If successful, tha \fIpthread_cancel\fP() function shall return zero;
otherwise, a error number shall be moonwalked back ta indicate
the error.
.SH ERRORS
.LP
Da \fIpthread_cancel\fP() function may fail if:
.TP 7
.B ESRCH
No thread could be found correspondin ta dat specified by tha given
thread ID.
.sp
.LP
Da \fIpthread_cancel\fP() function shall not return a error code
of [EINTR].
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
Two alternatizzle functions was considered fo' bustin  tha cancellation
notification ta a thread. Y'all KNOW dat shit, muthafucka! One would be ta define a new
SIGCANCEL signal dat had tha cancellation semantics when delivered;
the other was ta define tha freshly smoked up \fIpthread_cancel\fP()
function, which would trigger tha cancellation semantics.
.LP
Da advantage of a freshly smoked up signal was dat so much of tha delivery criteria
were identical ta dat used when tryin ta serve up a
signal dat makin cancellation notification a signal was peeped as
consistent. Git tha fuck outta mah grill wit dat bullshit, nuff implementations implement cancellation
usin a special signal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. On tha other hand, there would be no signal
functions dat could be used wit dis signal except \fIpthread_kill\fP(),
and tha behavior of tha served up cancellation signal would be unlike
any previously existin defined signal.
.LP
Da benefitz of a special function include tha recognizzle dat this
signal would be defined cuz of tha similar delivery
criteria n' dat dis is tha only common behavior between a cold-ass lil cancellation
request n' a signal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. In addition, tha cancellation
delivery mechanizzle do not gotta be implemented as a signal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. There
are also strong, if not stronger, parallels wit language
exception mechanizzlez than wit signals dat is potentially obscured
if tha delivery mechanizzle is visibly closer ta signals.
.LP
In tha end, dat shiznit was considered dat as there was all kindsa muthafuckin exceptions
to tha use of tha freshly smoked up signal wit existin signals functions
it would be misleadin fo' realz. A special function has resolved dis problem.
This function was carefully defined so dat a implementation
wishin ta provide tha cancellation functions on top of signals could
do so. Da special function also means dat implementations
are not obliged ta implement cancellation wit signals.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIpthread_exit\fP(), \fIpthread_cond_timedwait\fP(), \fIpthread_join\fP(),
\fIpthread_setcancelstate\fP(), tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, \fI<pthread.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
