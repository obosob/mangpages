.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "LOCKF" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" lockf 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
lockf \- record lockin on files
.SH SYNOPSIS
.LP
\fB#include <unistd.h>
.br
.sp
int lockf(int\fP \fIfildes\fP\fB, int\fP \fIfunction\fP\fB, off_t\fP
\fIsize\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIlockf\fP() function shall lock sectionz of a gangbangin' file wit advisory-mode
locks. Calls ta \fIlockf\fP() from other threads
which attempt ta lock tha locked file section shall either return
an error value or block until tha section becomes unlocked. Y'all KNOW dat shit, muthafucka! All
the locks fo' a process is removed when tha process terminates. Record
lockin wit \fIlockf\fP() shall be supported fo' regular
filez n' may be supported fo' other files.
.LP
Da \fIfildes\fP argument be a open file descriptor. Shiiit, dis aint no joke. To establish
a lock wit dis function, tha file descriptor shall be
opened wit write-only permission (O_WRONLY) or wit read/write permission
(O_RDWR).
.LP
Da \fIfunction\fP argument be a cold-ass lil control value which specifies the
action ta be taken. I aint talkin' bout chicken n' gravy biatch. Da permissible joints for
\fIfunction\fP is defined up in \fI<unistd.h>\fP as bigs up:
.TS C
center; l2 l.
\fBFunction\fP	\fBDescription\fP
F_ULOCK	Unlock locked sections.
F_LOCK	Lock a section fo' exclusive use.
F_TLOCK	Test n' lock a section fo' exclusive use.
F_TEST	Test a section fo' locks by other processes.
.TE
.LP
F_TEST shall detect if a lock by another process is present on the
specified section.
.LP
F_LOCK n' F_TLOCK shall both lock a section of a gangbangin' file if tha section
is available.
.LP
F_ULOCK shall remove locks from a section of tha file.
.LP
Da \fIsize\fP argument is tha number of contiguous bytes ta be locked
or unlocked. Y'all KNOW dat shit, muthafucka! Da section ta be locked or unlocked starts
at tha current offset up in tha file n' extendz forward fo' a positive
size or backward fo' a wack size (the precedin bytes up
to but not includin tha current offset). If \fIsize\fP is 0, the
section from tha current offset all up in tha phattest possible
file offset shall be locked (that is, from tha current offset through
the present or any future end-of-file) fo' realz. An area need not be
allocated ta tha file ta be locked cuz locks may exist past the
end-of-file.
.LP
Da sections locked wit F_LOCK or F_TLOCK may, up in whole or up in part,
contain or be contained by a previously locked section for
the same process. When dis occurs, or if adjacent locked sections
would occur, tha sections shall be combined tha fuck into a single locked
section. I aint talkin' bout chicken n' gravy biatch. If tha request would cause tha number of locks ta exceed
a system-imposed limit, tha request shall fail.
.LP
F_LOCK n' F_TLOCK requests differ only by tha action taken if the
section aint available. F_LOCK shall block tha calling
thread until tha section be available. F_TLOCK shall cause tha function
to fail if tha section be already locked by another
process.
.LP
File locks shall be busted out on first close by tha lockin process
of any file descriptor fo' tha file.
.LP
F_ULOCK requests may release (wholly or up in part) one or mo' locked
sections controlled by tha process. Locked sections shall be
unlocked startin all up in tha current file offset all up in \fIsize\fP bytes
or ta tha end-of-file if \fIsize\fP is (\fBoff_t\fP)0.
When all of a locked section aint busted out (that is, when tha beginning
or end of tha area ta be unlocked falls within a locked
section), tha remainin portionz of dat section shall remain locked
by tha process. Releasin tha centa portion of a locked
section shall cause tha remainin locked beginnin n' end portions
to become two separate locked sections. If tha request would
cause tha number of locks up in tha system ta exceed a system-imposed
limit, tha request shall fail.
.LP
A potential fo' deadlock occurs if tha threadz of a process controlling
a locked section is blocked by accessin another
process' locked section. I aint talkin' bout chicken n' gravy biatch. If tha system detects dat deadlock would
occur, \fIlockf\fP() shall fail wit a [EDEADLK] error.
.LP
Da interaction between \fIfcntl\fP() n' \fIlockf\fP() locks is unspecified.
.LP
Blockin on a section shall be interrupted by any signal.
.LP
An F_ULOCK request up in which \fIsize\fP is non-zero n' tha offset
of tha last byte of tha axed section is tha maximum
value fo' a object of type \fBoff_t\fP, when tha process has a existing
lock up in which \fIsize\fP is 0 n' which includes the
last byte of tha axed section, shall be treated as a request
to unlock from tha start of tha axed section wit a size
equal ta 0. Otherwise, a F_ULOCK request shall attempt ta unlock
only tha axed section.
.LP
Attemptin ta lock a section of a gangbangin' file dat be associated wit a funky-ass buffered
stream produces unspecified thangs up in dis biatch.
.SH RETURN VALUE
.LP
Upon successful completion, \fIlockf\fP() shall return 0. Otherwise,
it shall return -1, set \fIerrno\fP ta indicate a error,
and existin locks shall not be chizzled.
.SH ERRORS
.LP
Da \fIlockf\fP() function shall fail if:
.TP 7
.B EBADF
Da \fIfildes\fP argument aint a valid open file descriptor; or
\fIfunction\fP is F_LOCK or F_TLOCK n' \fIfildes\fP is
not a valid file descriptor open fo' writing.
.TP 7
.B EACCES \fRor\fP EAGAIN
.sp
Da \fIfunction\fP argument is F_TLOCK or F_TEST n' tha section is
already locked by another process.
.TP 7
.B EDEADLK
Da \fIfunction\fP argument is F_LOCK n' a thugged-out deadlock is detected.
.TP 7
.B EINTR
A signal was caught durin execution of tha function.
.TP 7
.B EINVAL
Da \fIfunction\fP argument aint one of F_LOCK, F_TLOCK, F_TEST,
or F_ULOCK; or \fIsize\fP plus tha current file offset is
less than 0.
.TP 7
.B EOVERFLOW
Da offset of tha first, or if \fIsize\fP aint 0 then tha last,
byte up in tha axed section cannot be represented
correctly up in a object of type \fBoff_t\fP.
.sp
.LP
Da \fIlockf\fP() function may fail if:
.TP 7
.B EAGAIN
Da \fIfunction\fP argument is F_LOCK or F_TLOCK n' tha file is mapped
with \fImmap\fP().
.TP 7
.B EDEADLK \fRor\fP ENOLCK
.sp
Da \fIfunction\fP argument is F_LOCK, F_TLOCK, or F_ULOCK, n' the
request would cause tha number of locks ta exceed a
system-imposed limit.
.TP 7
.B EOPNOTSUPP \fRor\fP EINVAL
.sp
Da implementation do not support tha lockin of filez of tha type
indicated by tha \fIfildes\fP argument.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.SS Lockin a Portion of a File
.LP
In tha followin example, a gangbangin' file named \fB/home/cnd/mod1\fP is being
modified. Y'all KNOW dat shit, muthafucka! Other processes dat use lockin is prevented
from changin it durin dis process. Only tha straight-up original gangsta 10000 bytes are
locked, n' tha lock call fails if another process has any
part of dis area locked already.
.sp
.RS
.nf

\fB#include <fcntl.h>
#include <unistd.h>
.sp

int fildes;
int status;
\&...
fildes = open("/home/cnd/mod1", O_RDWR);
status = lockf(fildes, F_TLOCK, (off_t)10000);
\fP
.fi
.RE
.SH APPLICATION USAGE
.LP
Record-lockin should not be used up in combination wit tha \fIfopen\fP(),
\fIfread\fP(), \fIfwrite\fP(), n' other \fIstdio\fP
functions. Instead, tha mo' primitive, non-buffered functions (such
as \fIopen\fP()) should
be used. Y'all KNOW dat shit, muthafucka! Unexpected thangs up in dis biatch may occur up in processes dat do buffering
in tha user address space. Da process may lata read/write
data which is/was locked. Y'all KNOW dat shit, muthafucka! Da \fIstdio\fP functions is da most thugged-out common
source of unexpected buffering.
.LP
Da \fIalarm\fP() function may be used ta provide a timeout facility
in applications
requirin dat shit.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIalarm\fP(), \fIchmod\fP(), \fIclose\fP(), \fIcreat\fP(), \fIfcntl\fP(),
\fIfopen\fP(), \fImmap\fP(), \fIopen\fP(), \fIread\fP(), \fIwrite\fP(),
the Base Definitions volume of IEEE\ Std\ 1003.1-2001, \fI<unistd.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
