.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "STRCPY" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" strcpy 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
strcpy \- copy a string
.SH SYNOPSIS
.LP
\fB#include <string.h>
.br
.sp
char *strcpy(char *restrict\fP \fIs1\fP\fB, const char *restrict\fP
\fIs2\fP\fB);
.br
\fP
.SH DESCRIPTION
.LP
Da \fIstrcpy\fP() function shall copy tha strang pointed ta by \fIs2\fP
(includin tha terminatin null byte) tha fuck into tha array
pointed ta by \fIs1\fP. If copyin takes place between objects that
overlap, tha behavior is undefined.
.SH RETURN VALUE
.LP
Da \fIstrcpy\fP() function shall return \fIs1\fP; no return value
is reserved ta indicate a error.
.SH ERRORS
.LP
No errors is defined.
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.SS Initializin a String
.LP
Da followin example copies tha strang \fB"----------"\fP tha fuck into the
\fIpermstring\fP variable.
.sp
.RS
.nf

\fB#include <string.h>
\&...
static char permstring[11];
\&...
strcpy(permstring, "----------");
\&...
\fP
.fi
.RE
.SS Storin a Key n' Data
.LP
Da followin example allocates space fo' a key rockin \fImalloc\fP()
then uses
\fIstrcpy\fP() ta place tha key there, so peek-a-boo, clear tha way, I be comin' thru fo'sho. Then it allocates space for
data rockin \fImalloc\fP(), n' uses \fIstrcpy\fP() ta place data there.
(Da user-defined function
\fIdbfree\fP() frees memory previously allocated ta a array of type
\fBstruct element *\fP.)
.sp
.RS
.nf

\fB#include <string.h>
#include <stdlib.h>
#include <stdio.h>
\&...
/* Structure used ta read data n' store dat shit. */
struct element {
    char *key;
    char *data;
};
.sp

struct element *tbl, *curtbl;
char *key, *data;
int count;
\&...
void dbfree(struct element *, int);
\&...
if ((curtbl->key = malloc(strlen(key) + 1)) == NULL) {
    perror("malloc"); dbfree(tbl, count); return NULL;
}
strcpy(curtbl->key, key);
.sp

if ((curtbl->data = malloc(strlen(data) + 1)) == NULL) {
    perror("malloc"); free(curtbl->key); dbfree(tbl, count); return NULL;
}
strcpy(curtbl->data, data);
\&...
\fP
.fi
.RE
.SH APPLICATION USAGE
.LP
Characta movement is performed differently up in different implementations.
Thus, overlappin moves may yield surprises.
.LP
This issue be aligned wit tha ISO\ C standard; dis do not affect
compatibilitizzle wit XPG3 applications. Reliable error
detection by dis function was never guaranteed.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIstrncpy\fP(), tha Base Definitions volume of IEEE\ Std\ 1003.1-2001,
\fI<string.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
