.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "MQ_SEND" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" mq_send 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
mq_send, mq_timedsend \- bust a message ta a message queue (\fBREALTIME\fP)
.SH SYNOPSIS
.LP
\fB#include <mqueue.h>
.br
.sp
int mq_send(mqd_t\fP \fImqdes\fP\fB, const char *\fP\fImsg_ptr\fP\fB,
size_t\fP \fImsg_len\fP\fB,
.br
\ \ \ \ \ \  unsigned\fP \fImsg_prio\fP\fB); \fP
\fB
.br
.sp
\fP 
.LP
\fB
.br
#include <mqueue.h>
.br
#include <time.h>
.br
int mq_timedsend(mqd_t\fP \fImqdes\fP\fB, const char *\fP\fImsg_ptr\fP\fB,
size_t\fP \fImsg_len\fP\fB,
.br
\ \ \ \ \ \  unsigned\fP \fImsg_prio\fP\fB, const struct timespec
*\fP\fIabs_timeout\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fImq_send\fP() function shall add tha message pointed ta by the
argument \fImsg_ptr\fP ta tha message queue specified by
\fImqdes\fP. Da \fImsg_len\fP argument specifies tha length of the
message, up in bytes, pointed ta by \fImsg_ptr\fP. Da value of
\fImsg_len\fP shall be less than or equal ta tha \fImq_msgsize\fP
attribute of tha message queue, or \fImq_send\fP() shall
fail.
.LP
If tha specified message queue aint full, \fImq_send\fP() shall
behave as if tha message is banged tha fuck into tha message queue
at tha posizzle indicated by tha \fImsg_prio\fP argument fo' realz. A message
with a larger numeric value of \fImsg_prio\fP shall be
inserted before lyrics wit lower jointz of \fImsg_prio\fP fo' realz. A message
shall be banged afta other lyrics up in tha queue, if
any, wit equal \fImsg_prio\fP. Da value of \fImsg_prio\fP shall
be less than {MQ_PRIO_MAX}.
.LP
If tha specified message queue is full n' O_NONBLOCK aint set in
the message queue description associated wit \fImqdes\fP,
\fImq_send\fP() shall block until space becomes available ta enqueue
the message, or until \fImq_send\fP() is interrupted by a
signal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. If mo' than one thread is waitin ta bust when space becomes
available up in tha message queue n' tha Prioritizzle Scheduling
option is supported, then tha thread of tha highest prioritizzle that
has been waitin tha longest shall be unblocked ta bust its
message. Otherwise, it is unspecified which waitin thread is unblocked.
If tha specified message queue is full n' O_NONBLOCK is
set up in tha message queue description associated wit \fImqdes\fP,
the message shall not be queued n' \fImq_send\fP() shall
return a error.
.LP
Da \fImq_timedsend\fP() function shall add a message ta tha message
queue specified by \fImqdes\fP up in tha manner defined fo' the
\fImq_send\fP() function. I aint talkin' bout chicken n' gravy biatch. But fuck dat shiznit yo, tha word on tha street is dat if tha specified message queue
is full n' O_NONBLOCK aint set up in tha message queue
description associated wit \fImqdes\fP, tha wait fo' sufficient room
in tha queue shall be terminated when tha specified timeout
expires. If O_NONBLOCK is set up in tha message queue description, this
function shall be equivalent ta \fImq_send\fP().
.LP
Da timeout shall expire when tha absolute time specified by \fIabs_timeout\fP
passes, as measured by tha clock on which
timeouts is based (that is, when tha value of dat clock equals or
exceedz \fIabs_timeout\fP), or if tha absolute time specified
by \fIabs_timeout\fP has already been passed all up in tha time of tha call.
.LP
If tha Timers option is supported, tha timeout shall be based on the
CLOCK_REALTIME clock; if tha Timers option is not
supported, tha timeout shall be based on tha system clock as returned
by tha \fItime\fP()
function. I aint talkin' bout chicken n' gravy biatch. 
.LP
Da resolution of tha timeout shall be tha resolution of tha clock
on which it is based. Y'all KNOW dat shit, muthafucka! Da \fItimespec\fP argument is defined in
the \fI<time.h>\fP header.
.LP
Under no circumstizzle shall tha operation fail wit a timeout if there
is sufficient room up in tha queue ta add tha message
immediately. Da validitizzle of tha \fIabs_timeout\fP parameta need
not be checked when there is sufficient room up in tha queue. 
.SH RETURN VALUE
.LP
Upon successful completion, tha \fImq_send\fP()  n' \fImq_timedsend\fP()
functions shall return a value of zero. Otherwise, no message shall
be enqueued, tha functions shall
return -1, n' \fIerrno\fP shall be set ta indicate tha error.
.SH ERRORS
.LP
Da \fImq_send\fP()  n' \fImq_timedsend\fP() 
functions shall fail if:
.TP 7
.B EAGAIN
Da O_NONBLOCK flag is set up in tha message queue description associated
with \fImqdes\fP, n' tha specified message queue is
full.
.TP 7
.B EBADF
Da \fImqdes\fP argument aint a valid message queue descriptor open
for writing.
.TP 7
.B EINTR
A signal interrupted tha call ta \fImq_send\fP()  or \fImq_timedsend\fP().
.TP 7
.B EINVAL
Da value of \fImsg_prio\fP was outside tha valid range.
.TP 7
.B EINVAL
Da process or thread would have blocked, n' tha \fIabs_timeout\fP
parameta specified a nanosecondz field value less than zero
or pimped outa than or equal ta 1000 million. I aint talkin' bout chicken n' gravy biatch. 
.TP 7
.B EMSGSIZE
Da specified message length, \fImsg_len\fP, exceedz tha message size
attribute of tha message queue.
.TP 7
.B ETIMEDOUT
Da O_NONBLOCK flag was not set when tha message queue was opened,
but tha timeout expired before tha message could be added ta the
queue. 
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
Da value of tha symbol {MQ_PRIO_MAX} limits tha number of priority
levels supported by tha application. I aint talkin' bout chicken n' gravy biatch. Message priorities
range from 0 ta {MQ_PRIO_MAX}-1.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fImq_open\fP(), \fImq_receive\fP(), \fImq_setattr\fP(), \fImq_timedreceive\fP(),
\fItime\fP(), tha Base Definitions volume of IEEE\ Std\ 1003.1-2001,
\fI<mqueue.h>\fP, \fI<time.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
