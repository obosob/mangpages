.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "POLL" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" poll 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
poll \- input/output multiplexing
.SH SYNOPSIS
.LP
\fB#include <poll.h>
.br
.sp
int poll(struct pollfd\fP \fIfds\fP\fB[], nfds_t\fP \fInfds\fP\fB,
int\fP \fItimeout\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIpoll\fP() function serves up applications wit a mechanizzle for
multiplexin input/output over a set of file descriptors.
For each gangmember of tha array pointed ta by \fIfds\fP, \fIpoll\fP()
shall examine tha given file descriptor fo' tha event(s)
specified up in \fIevents\fP. Da number of \fBpollfd\fP structures in
the \fIfds\fP array is specified by \fInfds\fP. The
\fIpoll\fP() function shall identify dem file descriptors on which
an application can read or write data, or on which certain
events have occurred.
.LP
Da \fIfds\fP argument specifies tha file descriptors ta be examined
and tha eventz of interest fo' each file descriptor. Shiiit, dis aint no joke. Well shiiiit, it is
a pointa ta a array wit one member fo' each open file descriptor
of interest. Da arrayz thugz is \fBpollfd\fP structures
within which \fIfd\fP specifies a open file descriptor n' \fIevents\fP
and \fIrevents\fP is bitmasks constructed by OR'in a
combination of tha followin event flags:
.TP 7
POLLIN
Data other than high-prioritizzle data may be read without blocking. 
.LP
For STREAMS, dis flag is set up in \fIrevents\fP even if tha message
iz of zero length. This flag shall be equivalent ta POLLRDNORM
| POLLRDBAND. 
.TP 7
POLLRDNORM
Normal data may be read without blocking. 
.LP
For STREAMS, data on prioritizzle crew 0 may be read without blocking.
This flag is set up in \fIrevents\fP even if tha message is of
zero length. 
.TP 7
POLLRDBAND
Prioritizzle data may be read without blocking. 
.LP
For STREAMS, data on prioritizzle bandz pimped outa than 0 may be read without
blocking. This flag is set up in \fIrevents\fP even if the
message iz of zero length. 
.TP 7
POLLPRI
High-prioritizzle data may be read without blocking. 
.LP
For STREAMS, dis flag is set up in \fIrevents\fP even if tha message
iz of zero length. 
.TP 7
POLLOUT
Normal data may be freestyled without blocking. 
.LP
For STREAMS, data on prioritizzle crew 0 may be freestyled without blocking.
.TP 7
POLLWRNORM
Equivalent ta POLLOUT.
.TP 7
POLLWRBAND
Prioritizzle data may be written. I aint talkin' bout chicken n' gravy biatch. 
.LP
For STREAMS, data on prioritizzle bandz pimped outa than 0 may be written
without blocking. If any prioritizzle crew has been freestyled ta on
this STREAM, dis event only examines bandz dat done been written
to at least once. 
.TP 7
POLLERR
An error has occurred on tha thang or stream. This flag is only valid
in tha \fIrevents\fP bitmask; it shall be ignored in
the \fIevents\fP member.
.TP 7
POLLHUP
Da thang has been disconnected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. This event n' POLLOUT is mutually-exclusive;
a stream can never be writable if a hangup has
occurred. Y'all KNOW dat shit, muthafucka! But fuck dat shiznit yo, tha word on tha street is dat dis event n' POLLIN, POLLRDNORM, POLLRDBAND,
or POLLPRI is not mutually-exclusive. This flag is only valid in
the \fIrevents\fP bitmask; it shall be ignored up in tha \fIevents\fP
member.
.TP 7
POLLNVAL
Da specified \fIfd\fP value is invalid. Y'all KNOW dat shit, muthafucka! This flag is only valid in
the \fIrevents\fP member; it shall ignored up in the
\fIevents\fP member.
.sp
.LP
Da significizzle n' semantics of normal, priority, n' high-priority
data is file n' device-specific.
.LP
If tha value of \fIfd\fP is less than 0, \fIevents\fP shall be ignored,
and \fIrevents\fP shall be set ta 0 up in dat entry on
return from \fIpoll\fP().
.LP
In each \fBpollfd\fP structure, \fIpoll\fP() shall clear tha \fIrevents\fP
member, except dat where tha application
axed a report on a cold-ass lil condizzle by settin one of tha bitz of \fIevents\fP
listed above, \fIpoll\fP() shall set the
correspondin bit up in \fIrevents\fP if tha axed condizzle is true.
In addition, \fIpoll\fP() shall set tha POLLHUP, POLLERR,
and POLLNVAL flag up in \fIrevents\fP if tha condizzle is true, even
if tha application did not set tha correspondin bit in
\fIevents\fP.
.LP
If none of tha defined events have occurred on any selected file descriptor,
\fIpoll\fP() shall wait at least \fItimeout\fP
millisecondz fo' a event ta occur on any of tha selected file descriptors.
If tha value of \fItimeout\fP is 0, \fIpoll\fP()
shall return immediately. If tha value of \fItimeout\fP is -1, \fIpoll\fP()
shall block until a axed event occurs or until
the call is interrupted.
.LP
Implementations may place limitations on tha granularitizzle of timeout
intervals. If tha axed timeout interval requires a
finer granularitizzle than tha implementation supports, tha actual timeout
interval shall be rounded up ta tha next supported
value.
.LP
Da \fIpoll\fP() function shall not be affected by tha O_NONBLOCK
flag.
.LP
Da \fIpoll\fP() function shall support regular files, terminal and
pseudo-terminal devices, FIFOs, pipes, sockets n'  
\ STREAMS-based files.  Da behavior of \fIpoll\fP() on
elementz of \fIfds\fP dat refer ta other typez of file is unspecified.
.LP
Regular filez shall always poll TRUE fo' readin n' writing.
.LP
A file descriptor fo' a socket dat is listenin fo' connections shall
indicate dat it is locked n loaded fo' reading, once connections
are available fo' realz. A file descriptor fo' a socket dat is connectin asynchronously
shall indicate dat it is locked n loaded fo' writing, once a
connection has been established.
.SH RETURN VALUE
.LP
Upon successful completion, \fIpoll\fP() shall return a non-negative
value fo' realz. A positizzle value indicates tha total number of file
descriptors dat done been selected (that is, file descriptors for
which tha \fIrevents\fP member is non-zero) fo' realz. A value of 0
indicates dat tha call timed up n' no file descriptors have been
selected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Upon failure, \fIpoll\fP() shall return -1 n' set
\fIerrno\fP ta indicate tha error.
.SH ERRORS
.LP
Da \fIpoll\fP() function shall fail if:
.TP 7
.B EAGAIN
Da allocation of internal data structures failed but a subsequent
request may succeed.
.TP 7
.B EINTR
A signal was caught durin \fIpoll\fP().
.TP 7
.B EINVAL
Da \fInfds\fP argument is pimped outa than {OPEN_MAX},  or one of
the \fIfd\fP thugz refers ta a STREAM or multiplexer
that is linked (directly or indirectly) downstream from a multiplexer.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.SS Checkin fo' Events on a Stream
.LP
Da followin example opens a pair of STREAMS devices n' then waits
for either one ta become writable. This example proceedz as
bigs up:
.IP " 1." 4
Sets tha \fItimeout\fP parameta ta 500 milliseconds.
.LP
.IP " 2." 4
Opens tha STREAMS devices \fB/dev/dev0\fP n' \fB/dev/dev1\fP, and
then polls them, specifyin POLLOUT n' POLLWRBAND as the
eventz of interest.
.LP
Da STREAMS thang names \fB/dev/dev0\fP n' \fB/dev/dev1\fP is only
examplez of how tha fuck STREAMS devices can be named; STREAMS
namin conventions may vary among systems conformin ta tha IEEE\ Std\ 1003.1-2001.
.LP
.IP " 3." 4
Uses tha \fIret\fP variable ta determine whether a event has occurred
on either of tha two STREAMS. Da \fIpoll\fP() function
is given 500 millisecondz ta wait fo' a event ta occur (if it has
not occurred prior ta tha \fIpoll\fP() call).
.LP
.IP " 4." 4
Checks tha returned value of \fIret\fP. If a positizzle value is returned,
one of tha followin can be done:
.RS
.IP " a." 4
Prioritizzle data can be freestyled ta tha open STREAM on prioritizzle bands
greata than 0, cuz tha POLLWRBAND event occurred on the
open STREAM ( \fIfds\fP[0] or \fIfds\fP[1]).
.LP
.IP " b." 4
Data can be freestyled ta tha open STREAM on priority-band 0, cuz
the POLLOUT event occurred on tha open STREAM ( \fIfds\fP[0]
or \fIfds\fP[1]).
.LP
.RE
.LP
.IP " 5." 4
If tha returned value aint a positizzle value, permission ta write
data ta tha open STREAM (on any prioritizzle band) is denied.
.LP
.IP " 6." 4
If tha POLLHUP event occurs on tha open STREAM ( \fIfds\fP[0] or \fIfds\fP[1]),
the thang on tha open STREAM has
disconnected.
.LP
.sp
.RS
.nf

\fB#include <stropts.h>
#include <poll.h>
\&...
struct pollfd fds[2];
int timeout_msecs = 500;
int ret;
    int i;
.sp

/* Open STREAMS device. */
fds[0].fd = open("/dev/dev0", ...);
fds[1].fd = open("/dev/dev1", ...);
    fds[0].events = POLLOUT | POLLWRBAND;
    fds[1].events = POLLOUT | POLLWRBAND;
.sp

ret = poll(fds, 2, timeout_msecs);
.sp

if (ret > 0) {
    /* An event on one of tha fdz has occurred. Y'all KNOW dat shit, muthafucka! */
    fo' (i=0; i<2; i++) {
        if (fds[i].revents & POLLWRBAND) {
        /* Prioritizzle data may be freestyled on thang number i. */
\&...
        }
        if (fds[i].revents & POLLOUT) {
        /* Data may be freestyled on thang number i. */
\&...
        }
        if (fds[i].revents & POLLHUP) {
        /* A hangup has occurred on thang number i. */
\&...
        }
    }
}
\fP
.fi
.RE
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fISTREAMS\fP, \fIgetmsg\fP(), \fIputmsg\fP(), \fIread\fP(), \fIselect\fP(),
\fIwrite\fP(), tha Base Definitions volume of IEEE\ Std\ 1003.1-2001,
\fI<poll.h>\fP, \fI<stropts.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
