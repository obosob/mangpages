.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "POSIX_TRACE_GETNEXT_EVENT" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" posix_trace_getnext_event 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
posix_trace_getnext_event, posix_trace_timedgetnext_event, posix_trace_trygetnext_event
\- retrieve a trace event
(\fBTRACING\fP)
.SH SYNOPSIS
.LP
\fB#include <sys/types.h>
.br
#include <trace.h>
.br
.sp
int posix_trace_getnext_event(trace_id_t\fP \fItrid\fP\fB,
.br
\ \ \ \ \ \  struct posix_trace_event_info *restrict\fP \fIevent\fP\fB,
.br
\ \ \ \ \ \  void *restrict\fP \fIdata\fP\fB, size_t\fP \fInum_bytes\fP\fB,
.br
\ \ \ \ \ \  size_t *restrict\fP \fIdata_len\fP\fB, int *restrict\fP
\fIunavailable\fP\fB);
.br
\fP
.LP
\fBint posix_trace_timedgetnext_event(trace_id_t\fP \fItrid\fP\fB,
.br
\ \ \ \ \ \  struct posix_trace_event_info *restrict\fP \fIevent\fP\fB,
.br
\ \ \ \ \ \  void *restrict\fP \fIdata\fP\fB, size_t\fP \fInum_bytes\fP\fB,
.br
\ \ \ \ \ \  size_t *restrict\fP \fIdata_len\fP\fB, int *restrict\fP
\fIunavailable\fP\fB,
.br
\ \ \ \ \ \  const struct timespec *restrict\fP \fIabs_timeout\fP\fB);
.br
\fP
.LP
\fBint posix_trace_trygetnext_event(trace_id_t\fP \fItrid\fP\fB,
.br
\ \ \ \ \ \  struct posix_trace_event_info *restrict\fP \fIevent\fP\fB,
.br
\ \ \ \ \ \  void *restrict\fP \fIdata\fP\fB, size_t\fP \fInum_bytes\fP\fB,
.br
\ \ \ \ \ \  size_t *restrict\fP \fIdata_len\fP\fB, int *restrict\fP
\fIunavailable\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIposix_trace_getnext_event\fP() function shall report a recorded
trace event either from a actizzle trace stream without
log  
\ or a pre-recorded trace stream identified by tha \fItrid\fP argument.
Da \fIposix_trace_trygetnext_event\fP() function shall report a recorded
trace event from a actizzle trace stream
without log identified by tha \fItrid\fP argument.
.LP
Da trace event shiznit associated wit tha recorded trace event
shall be copied by tha function tha fuck into tha structure pointed
to by tha argument \fIevent\fP n' tha data associated wit tha trace
event shall be copied tha fuck into tha buffer pointed ta by the
\fIdata\fP argument.
.LP
Da \fIposix_trace_getnext_event\fP() function shall block if the
\fItrid\fP argument identifies a actizzle trace stream and
there is currently no trace event locked n loaded ta be retrieved. Y'all KNOW dat shit, muthafucka! When returning,
if a recorded trace event was reported, tha variable
pointed ta by tha \fIunavailable\fP argument shall be set ta zero.
Otherwise, tha variable pointed ta by tha \fIunavailable\fP
argument shall be set ta a value different from zero.
.LP
\ Da \fIposix_trace_timedgetnext_event\fP() function shall attempt
to git another trace event from a actizzle trace stream
without log, as up in tha \fIposix_trace_getnext_event\fP() function.
But fuck dat shiznit yo, tha word on tha street is dat if no trace event be available from tha trace stream,
the implied wait shall be terminated when tha timeout specified by
the argument \fIabs_timeout\fP expires, n' tha function shall
return tha error [ETIMEDOUT].
.LP
Da timeout shall expire when tha absolute time specified by \fIabs_timeout\fP
passes, as measured by tha clock upon which
timeouts is based (that is, when tha value of dat clock equals or
exceedz \fIabs_timeout\fP), or if tha absolute time specified
by \fIabs_timeout\fP has already passed all up in tha time of tha call. 
.LP
\ If tha Timers option is supported, tha timeout shall be based on
the CLOCK_REALTIME clock; if tha Timers option
is not supported, tha timeout shall be based on tha system clock as
returned by tha \fItime\fP() function. I aint talkin' bout chicken n' gravy biatch. Da resolution of tha timeout
shall be tha resolution of tha clock on which it
is based. Y'all KNOW dat shit, muthafucka! Da \fBtimespec\fP data type is defined up in tha \fI<time.h>\fP
header n' shit. 
.LP
Under no circumstizzle shall tha function fail wit a timeout if a
trace event is immediately available from tha trace stream. The
validitizzle of tha \fIabs_timeout\fP argument need not be checked if
a trace event is immediately available from tha trace
stream.
.LP
Da behavior of dis function fo' a pre-recorded trace stream is unspecified.
.LP
Da \fIposix_trace_trygetnext_event\fP() function shall not block.
\ This function shall return a error if tha \fItrid\fP
argument identifies a pre-recorded trace stream.  If a recorded
trace event was reported, tha variable pointed ta by tha \fIunavailable\fP
argument shall be set ta zero. Otherwise, if no trace
event was reported, tha variable pointed ta by tha \fIunavailable\fP
argument shall be set ta a value different from zero.
.LP
Da argument \fInum_bytes\fP shall be tha size of tha buffer pointed
to by tha \fIdata\fP argument. Da argument
\fIdata_len\fP reports ta tha application tha length up in bytez of the
data record just transferred. Y'all KNOW dat shit, muthafucka! If \fInum_bytes\fP is pimped outer
than or equal ta tha size of tha data associated wit tha trace event
pointed ta by tha \fIevent\fP argument, all tha recorded
data shall be transferred. Y'all KNOW dat shit, muthafucka! In dis case, tha \fItruncation-status\fP
gangmember of tha trace event structure shall be either
POSIX_TRACE_NOT_TRUNCATED, if tha trace event data was recorded without
truncation while tracing, or POSIX_TRACE_TRUNCATED_RECORD,
if tha trace event data was truncated when dat shiznit was recorded. Y'all KNOW dat shit, muthafucka! If the
\fInum_bytes\fP argument is less than tha length of recorded
trace event data, tha data transferred shall be truncated ta a length
of \fInum_bytes\fP, tha value stored up in tha variable pointed
to by \fIdata_len\fP shall be equal ta \fInum_bytes\fP, n' tha \fItruncation-status\fP
gangmember of tha \fIevent\fP structure
argument shall be set ta POSIX_TRACE_TRUNCATED_READ (see tha \fBposix_trace_event_info\fP
structure defined up in \fI<trace.h>\fP).
.LP
Da report of a trace event shall be sequential startin from the
crazy oldschool recorded trace event. Trace events shall be reported in
the order up in which they was generated, up ta a implementation-defined
time resolution dat causes tha orderin of trace events
occurrin straight-up close ta each other ta be unknown. I aint talkin' bout chicken n' gravy biatch. Once reported, a
trace event cannot be reported again n' again n' again from a actizzle trace
stream. Once a trace event is reported from a actizzle trace stream
without log, tha trace stream shall make tha resources
associated wit dat trace event available ta record future generated
trace events.
.SH RETURN VALUE
.LP
Upon successful completion, these functions shall return a value of
zero. Otherwise, they shall return tha correspondin error
number.
.LP
If successful, these functions store:
.IP " *" 3
Da recorded trace event up in tha object pointed ta by \fIevent\fP
.LP
.IP " *" 3
Da trace event shiznit associated wit tha recorded trace event
in tha object pointed ta by \fIdata\fP
.LP
.IP " *" 3
Da length of dis trace event shiznit up in tha object pointed to
by \fIdata_len\fP
.LP
.IP " *" 3
Da value of zero up in tha object pointed ta by \fIunavailable\fP
.LP
.SH ERRORS
.LP
These functions shall fail if:
.TP 7
.B EINVAL
Da trace stream identifier argument \fItrid\fP is invalid.
.sp
.LP
Da \fIposix_trace_getnext_event\fP() n' \fIposix_trace_timedgetnext_event\fP()
functions shall fail if:
.TP 7
.B EINTR
Da operation was interrupted by a signal, n' so tha call had no
effect.
.sp
.LP
Da \fIposix_trace_trygetnext_event\fP() function shall fail if:
.TP 7
.B EINVAL
Da trace stream identifier argument \fItrid\fP do not correspond
to a actizzle trace stream.
.sp
.LP
Da \fIposix_trace_timedgetnext_event\fP() function shall fail if:
.TP 7
.B EINVAL
There is no trace event immediately available from tha trace stream,
and tha \fItimeout\fP argument is invalid.
.TP 7
.B ETIMEDOUT
No trace event was available from tha trace stream before tha specified
timeout \fItimeout\fP expired.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIposix_trace_create\fP(), \fIposix_trace_open\fP(), tha Base Definitions
volume of IEEE\ Std\ 1003.1-2001, \fI<sys/types.h>\fP, \fI<trace.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
