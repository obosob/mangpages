.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "SETSOCKOPT" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" setsockopt 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
setsockopt \- set tha socket options
.SH SYNOPSIS
.LP
\fB#include <sys/socket.h>
.br
.sp
int setsockopt(int\fP \fIsocket\fP\fB, int\fP \fIlevel\fP\fB, int\fP
\fIoption_name\fP\fB,
.br
\ \ \ \ \ \  const void *\fP\fIoption_value\fP\fB, socklen_t\fP \fIoption_len\fP\fB);
.br
\fP
.SH DESCRIPTION
.LP
Da \fIsetsockopt\fP() function shall set tha option specified by
the \fIoption_name\fP argument, all up in tha protocol level
specified by tha \fIlevel\fP argument, ta tha value pointed ta by
the \fIoption_value\fP argument fo' tha socket associated with
the file descriptor specified by tha \fIsocket\fP argument.
.LP
Da \fIlevel\fP argument specifies tha protocol level at which the
option resides. To set options all up in tha socket level, specify
the \fIlevel\fP argument as SOL_SOCKET. To set options at other levels,
supply tha appropriate \fIlevel\fP identifier fo' the
protocol controllin tha option. I aint talkin' bout chicken n' gravy biatch. For example, ta indicate dat an
option is interpreted by tha TCP (Transhiznit Control Protocol),
set \fIlevel\fP ta IPPROTO_TCP as defined up in tha \fI<netinet/in.h>\fP
header.
.LP
Da \fIoption_name\fP argument specifies a single option ta set. The
\fIoption_name\fP argument n' any specified options are
passed uninterpreted ta tha appropriate protocol module fo' interpretations.
Da \fI<sys/socket.h>\fP header defines tha socket-level options.
Da options is as
bigs up:
.TP 7
SO_DEBUG
Turns on recordin of debuggin shiznit. I aint talkin' bout chicken n' gravy biatch. This option enablez or
disablez debuggin up in tha underlyin protocol modules. This
option takes a \fBint\fP value. This be a Boolean option.
.TP 7
SO_BROADCAST
Permits bustin  of broadcast lyrics, if dis is supported by the
protocol. This option takes a \fBint\fP value. This be a
Boolean option.
.TP 7
SO_REUSEADDR
Specifies dat tha rulez used up in valipimpin addresses supplied to
\fIbind\fP() should
allow reuse of local addresses, if dis is supported by tha protocol.
This option takes a \fBint\fP value. This be a Boolean
option.
.TP 7
SO_KEEPALIVE
Keeps connections actizzle by enablin tha periodic transmission of
lyrics, if dis is supported by tha protocol. This option
takes a \fBint\fP value. 
.LP
If tha connected socket fails ta respond ta these lyrics, tha connection
is fucked up n' threadz freestylin ta dat socket are
notified wit a SIGPIPE signal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. This be a Boolean option.
.TP 7
SO_LINGER
Lingers on a \fIclose\fP() if data is present. This option controls
the action taken
when unsent lyrics queue on a socket n' \fIclose\fP() is performed.
If SO_LINGER is set,
the system shall block tha process durin \fIclose\fP() until it can
transmit tha data or
until tha time expires. If SO_LINGER aint specified, n' \fIclose\fP()
is issued, the
system handlez tha call up in a way dat allows tha process ta continue
as quickly as possible. This option takes a \fBlinger\fP
structure, as defined up in tha \fI<sys/socket.h>\fP header, ta specify
the state
of tha option n' linger interval.
.TP 7
SO_OOBINLINE
Leaves received out-of-band data (data marked urgent) inline. This
option takes a \fBint\fP value. This be a Boolean
option.
.TP 7
SO_SNDBUF
Sets bust buffer size. This option takes a \fBint\fP value.
.TP 7
SO_RCVBUF
Sets receive buffer size. This option takes a \fBint\fP value.
.TP 7
SO_DONTROUTE
Requests dat outgoin lyrics bypass tha standard routin facilities.
Da destination shall be on a gangbangin' finger-lickin' directly-connected
network, n' lyrics is pimped up ta tha appropriate network intercourse
accordin ta tha destination address. Da effect, if any,
of dis option dependz on what tha fuck protocol is up in use. This option takes
an \fBint\fP value. This be a Boolean option.
.TP 7
SO_RCVLOWAT
Sets tha minimum number of bytes ta process fo' socket input operations.
Da default value fo' SO_RCVLOWAT is 1. If SO_RCVLOWAT
is set ta a larger value, blockin receive calls normally wait until
they have received tha smalla of tha low wata mark value or
the axed amount. (They may return less than tha low wata mark
if a error occurs, a signal is caught, or tha type of data
next up in tha receive queue is different from dat returned; fo' example,
out-of-band data.) This option takes a \fBint\fP value.
Note dat not all implementations allow dis option ta be set.
.TP 7
SO_RCVTIMEO
Sets tha timeout value dat specifies tha maximum amount of time an
input function waits until it completes. Well shiiiit, it accepts a
\fBtimeval\fP structure wit tha number of secondz n' microseconds
specifyin tha limit on how tha fuck long ta wait fo' a input
operation ta complete. If a receive operation has blocked fo' this
much time without receivin additionizzle data, it shall return
with a partial count or \fIerrno\fP set ta [EAGAIN] or [EWOULDBLOCK]
if no data is received. Y'all KNOW dat shit, muthafucka! Da default fo' dis option is zero,
which indicates dat a receive operation shall not time out. This
option takes a \fBtimeval\fP structure. Note dat not all
implementations allow dis option ta be set.
.TP 7
SO_SNDLOWAT
Sets tha minimum number of bytes ta process fo' socket output operations.
Non-blockin output operations shall process no data
if flow control do not allow tha smalla of tha bust low wata mark
value or tha entire request ta be processed. Y'all KNOW dat shit, muthafucka! This option
takes a \fBint\fP value. Note dat not all implementations allow
this option ta be set.
.TP 7
SO_SNDTIMEO
Sets tha timeout value specifyin tha amount of time dat a output
function blocks cuz flow control prevents data from
bein sent. If a bust operation has blocked fo' dis time, it shall
return wit a partial count or wit \fIerrno\fP set to
[EAGAIN] or [EWOULDBLOCK] if no data is sent. Da default fo' this
option is zero, which indicates dat a bust operation shall not
time out. This option stores a \fBtimeval\fP structure. Note that
not all implementations allow dis option ta be set.
.sp
.LP
For Boolean options, 0 indicates dat tha option is disabled n' 1
indicates dat tha option is enabled.
.LP
Options at other protocol levels vary up in format n' name.
.SH RETURN VALUE
.LP
Upon successful completion, \fIsetsockopt\fP() shall return 0. Otherwise,
-1 shall be returned n' \fIerrno\fP set ta indicate
the error.
.SH ERRORS
.LP
Da \fIsetsockopt\fP() function shall fail if:
.TP 7
.B EBADF
Da \fIsocket\fP argument aint a valid file descriptor.
.TP 7
.B EDOM
Da bust n' receive timeout joints is too big-ass ta fit tha fuck into tha timeout
fieldz up in tha socket structure.
.TP 7
.B EINVAL
Da specified option is invalid all up in tha specified socket level or the
socket has been shut down.
.TP 7
.B EISCONN
Da socket be already connected, n' a specified option cannot be
set while tha socket is connected.
.TP 7
.B ENOPROTOOPT
.sp
Da option aint supported by tha protocol.
.TP 7
.B ENOTSOCK
Da \fIsocket\fP argument do not refer ta a socket.
.sp
.LP
Da \fIsetsockopt\fP() function may fail if:
.TP 7
.B ENOMEM
There was insufficient memory available fo' tha operation ta complete.
.TP 7
.B ENOBUFS
Insufficient resources is available up in tha system ta complete the
call.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
Da \fIsetsockopt\fP() function serves up a application program with
the means ta control socket behavior fo' realz. An application
program can use \fIsetsockopt\fP() ta allocate buffer space, control
timeouts, or permit socket data broadcasts, n' you can put dat on yo' toast. Da \fI<sys/socket.h>\fP
header defines tha socket-level options available to
\fIsetsockopt\fP().
.LP
Options may exist at multiple protocol levels. Da SO_ options are
always present all up in tha uppermost socket level.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fISockets\fP, \fIbind\fP(), \fIendprotoent\fP(), \fIgetsockopt\fP(),
\fIsocket\fP(), tha Base Definitions volume of IEEE\ Std\ 1003.1-2001,
\fI<netinet/in.h>\fP, \fI<sys/socket.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
