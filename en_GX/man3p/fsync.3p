.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "FSYNC" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" fsync 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
fsync \- synchronize chizzlez ta a gangbangin' file
.SH SYNOPSIS
.LP
\fB#include <unistd.h>
.br
.sp
int fsync(int\fP \fIfildes\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIfsync\fP() function shall request dat all data fo' tha open
file descriptor named by \fIfildes\fP is ta be transferred
to tha storage thang associated wit tha file busted lyrics bout by \fIfildes\fP
in a implementation-defined manner n' shit. Da \fIfsync\fP()
function shall not return until tha system has completed dat action
or until a error is detected.
.LP
If _POSIX_SYNCHRONIZED_IO is defined, tha \fIfsync\fP() function shall
force all currently queued I/O operations associated with
the file indicated by file descriptor \fIfildes\fP ta tha synchronized
I/O completion state fo' realz. All I/O operations shall be completed
as defined fo' synchronized I/O file integritizzle completion. I aint talkin' bout chicken n' gravy biatch. 
.SH RETURN VALUE
.LP
Upon successful completion, \fIfsync\fP() shall return 0. Otherwise,
-1 shall be returned n' \fIerrno\fP set ta indicate the
error. Shiiit, dis aint no joke. If tha \fIfsync\fP() function fails, outstandin I/O operations
are not guaranteed ta done been completed.
.SH ERRORS
.LP
Da \fIfsync\fP() function shall fail if:
.TP 7
.B EBADF
Da \fIfildes\fP argument aint a valid descriptor.
.TP 7
.B EINTR
Da \fIfsync\fP() function was interrupted by a signal.
.TP 7
.B EINVAL
Da \fIfildes\fP argument do not refer ta a gangbangin' file on which dis operation
is possible.
.TP 7
.B EIO
An I/O error occurred while readin from or freestylin ta tha file system.
.sp
.LP
In tha event dat any of tha queued I/O operations fail, \fIfsync\fP()
shall return tha error conditions defined fo' \fIread\fP() n' \fIwrite\fP().
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
Da \fIfsync\fP() function should be used by programs which require
modifications ta a gangbangin' file ta be completed before continuing;
for example, a program which gotz nuff a simple transaction facility
might use it ta ensure dat all modifications ta a gangbangin' file or
filez caused by a transaction is recorded.
.SH RATIONALE
.LP
Da \fIfsync\fP() function is intended ta force a physical write of
data from tha buffer cache, n' ta assure dat afta a
system crash or other failure dat all data up ta tha time of the
\fIfsync\fP() call is recorded on tha disk. Right back up in yo muthafuckin ass. Since tha concepts
of "buffer cache", "system crash", "physical write", n' "non-volatile
storage" is not defined here, tha wordin has ta be
more abstract.
.LP
If _POSIX_SYNCHRONIZED_IO aint defined, tha wordin relies heavily
on tha conformizzle document ta tell tha user what tha fuck can be
expected from tha system. Well shiiiit, it is explicitly intended dat a null implementation
is permitted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. This could be valid up in tha case where
the system cannot assure non-volatile storage under any circumstances
or when tha system is highly fault-tolerant n' the
functionalitizzle aint required. Y'all KNOW dat shit, muthafucka! In tha middle ground between these
extremes, \fIfsync\fP() might or might not straight-up cause data
to be freestyled where it is safe from a juice failure. Da conformance
document should identify at least dat one configuration
exists (and how tha fuck ta obtain dat configuration) where dis can be assured
for at least some filez dat tha user can select ta use for
critical data. Well shiiiit, it aint intended dat a exhaustizzle list is required,
but rather sufficient shiznit is provided so dat if
critical data need ta be saved, tha user can determine how tha fuck tha system
is ta be configured ta allow tha data ta be freestyled to
non-volatile storage.
.LP
It be reasonable ta assert dat tha key aspectz of \fIfsync\fP() are
unreasonable ta test up in a test suite. That do not make
the function any less valuable, just mo' hard as fuck ta test fo' realz. A formal
conformizzle test should probably force a system crash (power
shutdown) durin tha test fo' dis condizzle yo, but it need ta be done
in such a way dat automated testin do not require dis to
be done except when a gangbangin' formal record of tha thangs up in dis biatch is bein made.
It would also not be unreasonable ta omit testin for
\fIfsync\fP(), allowin it ta be treated as a quality-of-implementation
issue.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIsync\fP(), tha Base Definitions volume of IEEE\ Std\ 1003.1-2001,
\fI<unistd.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
