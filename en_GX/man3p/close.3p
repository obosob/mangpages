.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "CLOSE" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" close 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
close \- close a gangbangin' file descriptor
.SH SYNOPSIS
.LP
\fB#include <unistd.h>
.br
.sp
int close(int\fP \fIfildes\fP\fB);
.br
\fP
.SH DESCRIPTION
.LP
Da \fIclose\fP() function shall deallocate tha file descriptor indicated
by \fIfildes\fP. To deallocate means ta make the
file descriptor available fo' return by subsequent calls ta \fIopen\fP()
or other functions
that allocate file descriptors fo' realz. All outstandin record locks owned
by tha process on tha file associated wit tha file descriptor
shall be removed (that is, unlocked).
.LP
If \fIclose\fP() is interrupted by a signal dat is ta be caught,
it shall return -1 wit \fIerrno\fP set ta [EINTR] n' the
state of \fIfildes\fP is unspecified. Y'all KNOW dat shit, muthafucka! If a I/O error occurred while
readin from or freestylin ta tha file system during
\fIclose\fP(), it may return -1 wit \fIerrno\fP set ta [EIO]; if
this error is returned, tha state of \fIfildes\fP is
unspecified.
.LP
When all file descriptors associated wit a pipe or FIFO special file
are closed, any data remainin up in tha pipe or FIFO shall
be discarded.
.LP
When all file descriptors associated wit a open file description
have been closed, tha open file description shall be
freed.
.LP
If tha link count of tha file is 0, when all file descriptors associated
with tha file is closed, tha space occupied by the
file shall be freed n' tha file shall no longer be accessible.
.LP
If a STREAMS-based \fIfildes\fP is closed n' tha callin process
was previously registered ta receive a SIGPOLL signal fo' events
associated wit dat STREAM, tha callin process shall be unregistered
for events associated wit tha STREAM. Da last
\fIclose\fP() fo' a STREAM shall cause tha STREAM associated with
\fIfildes\fP ta be dismantled. Y'all KNOW dat shit, muthafucka! If O_NONBLOCK aint set and
there done been no signals posted fo' tha STREAM, n' if there is
data on tha modulez write queue, \fIclose\fP() shall wait for
an unspecified time (for each module n' driver) fo' any output to
drain before dismantlin tha STREAM. Da time delay can be
changed via a I_SETCLTIME \fIioctl\fP() request. If tha O_NONBLOCK
flag is set, or if there
are any pendin signals, \fIclose\fP() shall not wait fo' output to
drain, n' shall dismantle tha STREAM immediately.
.LP
If tha implementation supports STREAMS-based pipes, n' \fIfildes\fP
is associated wit one end of a pipe, tha last
\fIclose\fP() shall cause a hangup ta occur on tha other end of the
pipe. In addition, if tha other end of tha pipe has been named
by \fIfattach\fP(), then tha last \fIclose\fP() shall force tha named
end ta be detached
by \fIfdetach\fP(). If tha named end has no open file descriptors
associated wit it and
gets detached, tha STREAM associated wit dat end shall also be dismantled.
.LP
If \fIfildes\fP refers ta tha masta side of a pseudo-terminal, and
this is tha last close, a SIGHUP signal shall be busted ta the
controllin process, if any, fo' which tha slave side of tha pseudo-terminal
is tha controllin terminal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Well shiiiit, it is unspecified whether
closin tha masta side of tha pseudo-terminal flushes all queued
input n' output. 
.LP
If \fIfildes\fP refers ta tha slave side of a STREAMS-based pseudo-terminal,
a zero-length message may be busted ta tha masta n' shit. 
.LP
When there be a outstandin cancelable asynchronous I/O operation
against \fIfildes\fP when \fIclose\fP() is called, dat I/O
operation may be canceled. Y'all KNOW dat shit, muthafucka! An I/O operation dat aint canceled completes
as if tha \fIclose\fP() operation had not yet occurred.
All operations dat is not canceled shall complete as if tha \fIclose\fP()
blocked until tha operations completed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. The
\fIclose\fP() operation itself need not block awaitin such I/O completion.
Whether any I/O operation is canceled, n' which I/O
operation may be canceled upon \fIclose\fP(), is implementation-defined.
.LP
If a gangbangin' finger-lickin' dirty-ass shared memory object or a memory mapped file remains referenced
at tha last close (that is, a process has it mapped), then the
entire contentz of tha memory object shall persist until tha memory
object becomes unreferenced. Y'all KNOW dat shit, muthafucka! If dis is tha last close of a
shared memory object or a memory mapped file n' tha close thangs up in dis biatch
in tha memory object becomin unreferenced, n' tha memory
object has been unlinked, then tha memory object shall be removed.
.LP
If \fIfildes\fP refers ta a socket, \fIclose\fP() shall cause the
socket ta be destroyed. Y'all KNOW dat shit, muthafucka! If tha socket is up in connection-mode,
and tha SO_LINGER option is set fo' tha socket wit non-zero linger
time, n' tha socket has untransmitted data, then
\fIclose\fP() shall block fo' up ta tha current linger interval until
all data is transmitted.
.SH RETURN VALUE
.LP
Upon successful completion, 0 shall be returned; otherwise, -1 shall
be returned n' \fIerrno\fP set ta indicate tha error.
.SH ERRORS
.LP
Da \fIclose\fP() function shall fail if:
.TP 7
.B EBADF
Da \fIfildes\fP argument aint a valid file descriptor.
.TP 7
.B EINTR
Da \fIclose\fP() function was interrupted by a signal.
.sp
.LP
Da \fIclose\fP() function may fail if:
.TP 7
.B EIO
An I/O error occurred while readin from or freestylin ta tha file system.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.SS Reassignin a File Descriptor
.LP
Da followin example closes tha file descriptor associated wit standard
output fo' tha current process, re-assigns standard
output ta a freshly smoked up file descriptor, n' closes tha original gangsta file descriptor
to clean up. This example assumes dat tha file descriptor
0 (which is tha descriptor fo' standard input) aint closed.
.sp
.RS
.nf

\fB#include <unistd.h>
\&...
int pfd;
\&...
close(1);
dup(pfd);
close(pfd);
\&...
\fP
.fi
.RE
.LP
Incidentally, dis is exactly what tha fuck could be  bigged up  using:
.sp
.RS
.nf

\fBdup2(pfd, 1);
close(pfd);
\fP
.fi
.RE
.SS Closin a File Descriptor
.LP
In tha followin example, \fIclose\fP() is used ta close a gangbangin' file descriptor
afta a unsuccessful attempt is made ta associate
that file descriptor wit a stream.
.sp
.RS
.nf

\fB#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
.sp

#define LOCKFILE "/etc/ptmp"
\&...
int pfd;
FILE *fpfd;
\&...
if ((fpfd = fdopen (pfd, "w")) == NULL) {
    close(pfd);
    unlink(LOCKFILE);
    exit(1);
}
\&...
\fP
.fi
.RE
.SH APPLICATION USAGE
.LP
An application dat had used tha \fIstdio\fP routine \fIfopen\fP()
to open a gangbangin' file should
use tha correspondin \fIfclose\fP() routine rather than \fIclose\fP().
Once a gangbangin' file is
closed, tha file descriptor no longer exists, since tha integer corresponding
to it no longer refers ta a gangbangin' file.
.SH RATIONALE
.LP
Da use of interruptible thang close routines should be discouraged
to avoid problems wit tha implicit closez of file
descriptors by \fIexec\fP n' \fIexit\fP(). This volume
of IEEE\ Std\ 1003.1-2001 only intendz ta permit such behavior by
specifyin tha [EINTR] error condition.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fISTREAMS\fP, \fIfattach\fP(), \fIfclose\fP(), \fIfdetach\fP(),
\fIfopen\fP(), \fIioctl\fP(), \fIopen\fP(), tha Base Definitions
volume of
IEEE\ Std\ 1003.1-2001, \fI<unistd.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
