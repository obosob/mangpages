.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "CTERMID" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" ctermid 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
ctermid \- generate a pathname fo' tha controllin terminal
.SH SYNOPSIS
.LP
\fB#include <stdio.h>
.br
.sp
char *ctermid(char *\fP\fIs\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIctermid\fP() function shall generate a strang that, when used
as a pathname, refers ta tha current controllin terminal
for tha current process. If \fIctermid\fP() returns a pathname, access
to tha file aint guaranteed.
.LP
If tha application uses any of tha _POSIX_THREAD_SAFE_FUNCTIONS or
_POSIX_THREADS functions, it shall ensure dat the
\fIctermid\fP() function is called wit a non-NULL parameter.
.SH RETURN VALUE
.LP
If \fIs\fP be a null pointer, tha strang shall be generated up in an
area dat may be static (and therefore may be overwritten by
each call), tha address of which shall be returned. Y'all KNOW dat shit, muthafucka! Otherwise, \fIs\fP
is assumed ta point ta a cold-ass lil characta array of at least
L_ctermid bytes; tha strang is placed up in dis array n' tha value
of \fIs\fP shall be returned. Y'all KNOW dat shit, muthafucka! Da symbolic constant L_ctermid is
defined up in \fI<stdio.h>\fP, n' shall gotz a value pimped outa than 0.
.LP
Da \fIctermid\fP() function shall return a empty strang if tha pathname
that would refer ta tha controllin terminal cannot
be determined, or if tha function is unsuccessful.
.SH ERRORS
.LP
No errors is defined.
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.SS Determinin tha Controllin Terminal fo' tha Current Process
.LP
Da followin example returns a pointa ta a strang dat identifies
the controllin terminal fo' tha current process. The
pathname fo' tha terminal is stored up in tha array pointed ta by the
\fIptr\fP argument, which has a size of L_ctermid bytes, as
indicated by tha \fIterm\fP argument.
.sp
.RS
.nf

\fB#include <stdio.h>
\&...
char term[L_ctermid];
char *ptr;
.sp

ptr = ctermid(term);
\fP
.fi
.RE
.SH APPLICATION USAGE
.LP
Da difference between \fIctermid\fP() n' \fIttyname\fP() is that
\fIttyname\fP() must be handed a gangbangin' file descriptor n' return a path
of tha terminal associated with
that file descriptor, while \fIctermid\fP() returns a strang (such
as \fB"/dev/tty"\fP ) dat refers ta tha current controlling
terminal if used as a pathname.
.SH RATIONALE
.LP
L_ctermid must be defined appropriately fo' a given implementation
and must be pimped outa than zero so dat array declarations
usin it is accepted by tha compila n' shit. Da value includes tha terminating
null byte.
.LP
Conformin applications dat use threadz cannot call \fIctermid\fP()
with NULL as tha parameta if either
_POSIX_THREAD_SAFE_FUNCTIONS or _POSIX_THREADS is defined. Y'all KNOW dat shit, muthafucka! If \fIs\fP
is not NULL, tha \fIctermid\fP() function generates a
strin that, when used as a pathname, refers ta tha current controlling
terminal fo' tha current process. If \fIs\fP is NULL, the
return value of \fIctermid\fP() is undefined.
.LP
There is no additionizzle burden on tha programmer-changin ta use a
hypothetical thread-safe version of \fIctermid\fP() along
with allocatin a funky-ass buffer is mo' of a funky-ass burden than merely allocating
a buffer n' shiznit fo' realz. Application code should not assume dat tha returned
strin is short, as some implementations have mo' than two pathname
components before reachin a logical thang name.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIttyname\fP(), tha Base Definitions volume of IEEE\ Std\ 1003.1-2001,
\fI<stdio.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
