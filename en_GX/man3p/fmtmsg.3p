.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "FMTMSG" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" fmtmsg 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
fmtmsg \- display a message up in tha specified format on standard error
and/or a system console
.SH SYNOPSIS
.LP
\fB#include <fmtmsg.h>
.br
.sp
int fmtmsg(long\fP \fIclassification\fP\fB, const char *\fP\fIlabel\fP\fB,
int\fP \fIseverity\fP\fB,
.br
\ \ \ \ \ \  const char *\fP\fItext\fP\fB, const char *\fP\fIaction\fP\fB,
const char
*\fP\fItag\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIfmtmsg\fP() function shall display lyrics up in a specified
format instead of tha traditionizzle \fIprintf\fP() function.
.LP
Based on a messagez classification component, \fIfmtmsg\fP() shall
write a gangbangin' formatted message either ta standard error, ta the
console, or ta both.
.LP
A formatted message consistz of up ta five components as defined below.
Da component \fIclassification\fP aint part of a
message displayed ta tha user yo, but defines tha source of tha message
and directs tha display of tha formatted message.
.TP 7
\fIclassification\fP
Gotz Nuff tha sum of identifyin joints constructed from tha constants
defined below fo' realz. Any one identifier from a subclass may be
used up in combination wit a single identifier from a gangbangin' finger-lickin' different subclass.
Two or mo' identifiers from tha same subclass should not
be used together, wit tha exception of identifiers from tha display
subclass. (Both display subclass identifiers may be used so
that lyrics can be displayed ta both standard error n' tha system
console.) 
.TP 7
\fBMajor Classifications\fP
.RS
.sp
Identifies tha source of tha condition. I aint talkin' bout chicken n' gravy biatch. Identifiers are: MM_HARD (hardware),
MM_SOFT (software), n' MM_FIRM (firmware).
.RE
.TP 7
\fBMessage Source Subclassifications\fP
.RS
.sp
Identifies tha type of software up in which tha problem is detected.
Identifiers are: MM_APPL (application), MM_UTIL (utility), and
MM_OPSYS (operatin system).
.RE
.TP 7
\fBDisplay Subclassifications\fP
.RS
.sp
Indicates where tha message is ta be displayed. Y'all KNOW dat shit, muthafucka! Identifiers are: MM_PRINT
to display tha message on tha standard error stream,
MM_CONSOLE ta display tha message on tha system console. One or both
identifiers may be used.
.RE
.TP 7
\fBStatus Subclassifications\fP
.RS
.sp
Indicates whether tha application can recover from tha condition.
Identifiers are: MM_RECOVER (recoverable) n' MM_NRECOV
(non-recoverable).
.RE
.sp
.LP
An additionizzle identifier, MM_NULLMC, indicates dat no classification
component is supplied fo' tha message.
.TP 7
\fIlabel\fP
Identifies tha source of tha message. Da format is two fieldz separated
by a cold-ass lil colon. I aint talkin' bout chicken n' gravy biatch. Da first field is up ta 10 bytes, the
second is up ta 14 bytes.
.TP 7
\fIseverity\fP
Indicates tha seriousnizz of tha condition. I aint talkin' bout chicken n' gravy biatch. Identifiers fo' tha levels
of \fIseverity\fP are: 
.TP 7
MM_HALT
.RS
Indicates dat tha application has encountered a severe fault and
is halting. Produces tha strang \fB"HALT"\fP .
.RE
.TP 7
MM_ERROR
.RS
Indicates dat tha application has detected a gangbangin' fault. Produces the
strin \fB"ERROR"\fP .
.RE
.TP 7
MM_WARNING
.RS
Indicates a cold-ass lil condizzle dat is outta tha ordinary, dat might be a
problem, n' should be watched. Y'all KNOW dat shit, muthafucka! Produces tha string
\fB"WARNING"\fP .
.RE
.TP 7
MM_INFO
.RS
Provides shiznit on some cold-ass lil condizzle dat aint up in error. Shiiit, dis aint no joke. Produces
the strang \fB"INFO"\fP .
.RE
.TP 7
MM_NOSEV
.RS
Indicates dat no severitizzle level is supplied fo' tha message.
.RE
.sp
.TP 7
\fItext\fP
Describes tha error condizzle dat produced tha message. Da character
strin aint limited ta a specific size. If the
characta strang is empty, then tha text produced is unspecified.
.TP 7
\fIaction\fP
Describes tha straight-up original gangsta step ta be taken up in tha error-recovery process.
Da \fIfmtmsg\fP() function precedes tha action string
with tha prefix: \fB"TO FIX:"\fP . Da \fIaction\fP strang is not
limited ta a specific size.
.TP 7
\fItag\fP
An identifier dat references on-line documentation fo' tha message.
Suggested usage is dat \fItag\fP includes the
\fIlabel\fP n' a unique identifyin number n' shiznit fo' realz. A sample \fItag\fP is
\fB"XSI:cat:146"\fP .
.sp
.LP
Da \fIMSGVERB\fP environment variable (for message verbosity) shall
determine fo' \fIfmtmsg\fP() which message components it
is ta select when freestylin lyrics ta standard error. Shiiit, dis aint no joke. Da value of
\fIMSGVERB\fP shall be a cold-ass lil colon-separated list of optional
keywords. Valid keywordz are: \fIlabel\fP, \fIseverity\fP, \fItext\fP,
\fIaction\fP, n' \fItag\fP. If \fIMSGVERB\fP gotz nuff
a keyword fo' a cold-ass lil component n' tha componentz value aint tha component's
null value, \fIfmtmsg\fP() shall include dat component
in tha message when freestylin tha message ta standard error. Shiiit, dis aint no joke. If \fIMSGVERB\fP
does not include a keyword fo' a message component,
that component shall not be included up in tha display of tha message.
Da keywordz may step tha fuck up in any order n' shit. If \fIMSGVERB\fP is not
defined, if its value is tha null string, if its value aint of the
correct format, or if it gotz nuff keywordz other than the
valid ones listed above, \fIfmtmsg\fP() shall select all components.
.LP
\fIMSGVERB\fP shall determine which components is selected fo' display
to standard error fo' realz. All message components shall be
included up in console lyrics.
.SH RETURN VALUE
.LP
Da \fIfmtmsg\fP() function shall return one of tha followin joints:
.TP 7
MM_OK
Da function succeeded.
.TP 7
MM_NOTOK
Da function failed straight-up.
.TP 7
MM_NOMSG
Da function was unable ta generate a message on standard error yo, but
otherwise succeeded.
.TP 7
MM_NOCON
Da function was unable ta generate a cold-ass lil console message yo, but otherwise
succeeded.
.sp
.SH ERRORS
.LP
None.
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.IP " 1." 4
Da followin example of \fIfmtmsg\fP():
.sp
.RS
.nf

\fBfmtmsg(MM_PRINT, "XSI:cat", MM_ERROR, "illegal option",
"refer ta pussaaaaay up in userz reference manual", "XSI:cat:001")
\fP
.fi
.RE
.LP
produces a cold-ass lil complete message up in tha specified message format:
.sp
.RS
.nf

\fBXSI:cat: ERROR: illegal option
TO FIX: refer ta pussaaaaay up in userz reference manual XSI:cat:001
\fP
.fi
.RE
.LP
.IP " 2." 4
When tha environment variable \fIMSGVERB\fP is set as bigs up:
.sp
.RS
.nf

\fBMSGVERB=severity:text:action
\fP
.fi
.RE
.LP
and Example 1 is used, \fIfmtmsg\fP() produces:
.sp
.RS
.nf

\fBERROR: illegal option
TO FIX: refer ta pussaaaaay up in userz reference manual
\fP
.fi
.RE
.LP
.SH APPLICATION USAGE
.LP
One or mo' message components may be systematically omitted from
lyrics generated by a application by rockin tha null value
of tha argument fo' dat component.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIprintf\fP(), tha Base Definitions volume of IEEE\ Std\ 1003.1-2001,
\fI<fmtmsg.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
