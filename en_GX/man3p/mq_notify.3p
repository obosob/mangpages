.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "MQ_NOTIFY" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" mq_notify 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
mq_notify \- notify process dat a message be available (\fBREALTIME\fP)
.SH SYNOPSIS
.LP
\fB#include <mqueue.h>
.br
.sp
int mq_notify(mqd_t\fP \fImqdes\fP\fB, const struct sigevent *\fP\fInotification\fP\fB);
\fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
If tha argument \fInotification\fP aint NULL, dis function shall
regista tha callin process ta be notified of message
arrival at a empty message queue associated wit tha specified message
queue descriptor, \fImqdes\fP. Da notification specified
by tha \fInotification\fP argument shall be busted ta tha process when
the message queue transitions from empty ta non-empty fo' realz. At any
time, only one process may be registered fo' notification by a message
queue. If tha callin process or any other process has
already registered fo' notification of message arrival all up in tha specified
message queue, subsequent attempts ta regista fo' that
message queue shall fail.
.LP
If \fInotification\fP is NULL n' tha process is currently registered
for notification by tha specified message queue, the
existin registration shall be removed.
.LP
When tha notification is busted ta tha registered process, its registration
shall be removed. Y'all KNOW dat shit, muthafucka! Da message queue shall then be
available fo' registration.
.LP
If a process has registered fo' notification of message arrival at
a message queue n' some thread is blocked up in \fImq_receive\fP() waiting
to receive a message when a message arrives all up in tha queue, the
arrivin message shall satisfy tha appropriate \fImq_receive\fP().
Da resulting
behavior be as if tha message queue remains empty, n' no notification
shall be sent.
.SH RETURN VALUE
.LP
Upon successful completion, tha \fImq_notify\fP() function shall return
a value of zero; otherwise, tha function shall return a
value of -1 n' set \fIerrno\fP ta indicate tha error.
.SH ERRORS
.LP
Da \fImq_notify\fP() function shall fail if:
.TP 7
.B EBADF
Da \fImqdes\fP argument aint a valid message queue descriptor.
.TP 7
.B EBUSY
A process be already registered fo' notification by tha message queue.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fImq_open\fP(), \fImq_send\fP(), \fImq_timedsend\fP(), \fImsgctl\fP(),
\fImsgget\fP(), \fImsgrcv\fP(), \fImsgsnd\fP(), the
Base Definitions volume of IEEE\ Std\ 1003.1-2001, \fI<mqueue.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
