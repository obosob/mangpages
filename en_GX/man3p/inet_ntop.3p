.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "INET_NTOP" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" inet_ntop 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
inet_ntop, inet_pton \- convert IPv4 n' IPv6 addresses between binary
and text form
.SH SYNOPSIS
.LP
\fB#include <arpa/inet.h>
.br
.sp
const char *inet_ntop(int\fP \fIaf\fP\fB, const void *restrict\fP
\fIsrc\fP\fB,
.br
\ \ \ \ \ \  char *restrict\fP \fIdst\fP\fB, socklen_t\fP \fIsize\fP\fB);
.br
int inet_pton(int\fP \fIaf\fP\fB, const char *restrict\fP \fIsrc\fP\fB,
void *restrict\fP \fIdst\fP\fB);
.br
\fP
.SH DESCRIPTION
.LP
Da \fIinet_ntop\fP() function shall convert a numeric address into
a text strang suitable fo' presentation. I aint talkin' bout chicken n' gravy biatch. Da \fIaf\fP
argument shall specify tha crew of tha address. This can be AF_INET
\ or AF_INET6.  Da \fIsrc\fP argument points ta a funky-ass buffer holding
an IPv4 address if tha \fIaf\fP argument is AF_INET,
\ or a IPv6 address if tha \fIaf\fP argument is AF_INET6;  the
address must be up in network byte order n' shit. Da \fIdst\fP argument points
to a funky-ass buffer where tha function stores tha resultin text
string; it shall not be NULL. Da \fIsize\fP argument specifies the
size of dis buffer, which shall be big-ass enough ta hold the
text strang (INET_ADDRSTRLEN charactas fo' IPv4,  INET6_ADDRSTRLEN
charactas fo' IPv6). 
.LP
Da \fIinet_pton\fP() function shall convert a address up in its standard
text presentation form tha fuck into its numeric binary form.
Da \fIaf\fP argument shall specify tha crew of tha address. The
AF_INET  n' AF_INET6
address crews shall be supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da \fIsrc\fP argument points
to tha strang bein passed in. I aint talkin' bout chicken n' gravy biatch. Da \fIdst\fP argument points ta a
buffer tha fuck into which tha function stores tha numeric address; this
shall be big-ass enough ta hold tha numeric address (32 bits fo' AF_INET,
\ 128 bits fo' AF_INET6). 
.LP
If tha \fIaf\fP argument of \fIinet_pton\fP() is AF_INET, tha \fIsrc\fP
strin shall be up in tha standard IPv4 dotted-decimal
form:
.sp
.RS
.nf

\fBddd.ddd.ddd.ddd
\fP
.fi
.RE
.LP
where \fB"ddd"\fP be a one ta three digit decimal number between 0
and 255 (see \fIinet_addr\fP()). Da \fIinet_pton\fP() function do
not accept other formats (like fuckin tha octal
numbers, hexadecimal numbers, n' fewer than four numbers dat \fIinet_addr\fP()
accepts).
.LP
If tha \fIaf\fP argument of \fIinet_pton\fP() is AF_INET6, tha \fIsrc\fP
strin shall be up in one of tha followin standard IPv6
text forms:
.IP " 1." 4
Da preferred form is \fB"x:x:x:x:x:x:x:x"\fP, where tha \fB'x'\fP
s is tha hexadecimal jointz of tha eight 16-bit
piecez of tha address. Leadin zeros up in individual fieldz can be omitted,
but there shall be at least one numeral up in every
field.
.LP
.IP " 2." 4
A strang of contiguous zero fieldz up in tha preferred form can be shown
as \fB"::"\fP . Da \fB"::"\fP can only step tha fuck up once
in a address. Unspecified addresses ( \fB"0:0:0:0:0:0:0:0"\fP ) may
be represented simply as \fB"::"\fP .
.LP
.IP " 3." 4
A third form dat is sometimes mo' convenient when dealin wit a
mixed environment of IPv4 n' IPv6 nodes is
\fB"x:x:x:x:x:x:d.d.d.d"\fP, where tha \fB'x'\fP s is tha hexadecimal
valuez of tha six high-order 16-bit piecez of the
address, n' tha \fB'd'\fP s is tha decimal jointz of tha four low-order
8-bit piecez of tha address (standard IPv4
representation).
.LP
.TP 7
\fBNote:\fP
A mo' extensive description of tha standard representationz of IPv6
addresses can be found up in RFC\ 2373.
.sp
.SH RETURN VALUE
.LP
Da \fIinet_ntop\fP() function shall return a pointa ta tha buffer
containin tha text strang if tha conversion succeeds, and
NULL otherwise, n' set \fIerrno\fP ta indicate tha error.
.LP
Da \fIinet_pton\fP() function shall return 1 if tha conversion succeeds,
with tha address pointed ta by \fIdst\fP up in network
byte order n' shit. Well shiiiit, it shall return 0 if tha input aint a valid IPv4 dotted-decimal
strin  or a valid
IPv6 address string,  or -1 wit \fIerrno\fP set ta [EAFNOSUPPORT]
if tha \fIaf\fP argument is unknown.
.SH ERRORS
.LP
Da \fIinet_ntop\fP() n' \fIinet_pton\fP() functions shall fail if:
.TP 7
.B EAFNOSUPPORT
.sp
Da \fIaf\fP argument is invalid.
.TP 7
.B ENOSPC
Da size of tha \fIinet_ntop\fP() result buffer is inadequate.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
Da Base Definitions volume of IEEE\ Std\ 1003.1-2001, \fI<arpa/inet.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
