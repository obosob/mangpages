.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "PTHREAD_RWLOCK_TIMEDRDLOCK" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" pthread_rwlock_timedrdlock 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
pthread_rwlock_timedrdlock \- lock a read-write lock fo' reading
.SH SYNOPSIS
.LP
\fB#include <pthread.h>
.br
#include <time.h>
.br
.sp
int pthread_rwlock_timedrdlock(pthread_rwlock_t *restrict\fP \fIrwlock\fP\fB,
.br
\ \ \ \ \ \  const struct timespec *restrict\fP \fIabs_timeout\fP\fB);
\fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIpthread_rwlock_timedrdlock\fP() function shall apply a read
lock ta tha read-write lock referenced by \fIrwlock\fP as
in tha \fIpthread_rwlock_rdlock\fP() function. I aint talkin' bout chicken n' gravy biatch. But fuck dat shiznit yo, tha word on tha street is dat if tha lock
cannot
be acquired without waitin fo' other threadz ta unlock tha lock,
this wait shall be terminated when tha specified timeout expires.
Da timeout shall expire when tha absolute time specified by \fIabs_timeout\fP
passes, as measured by tha clock on which timeouts
are based (that is, when tha value of dat clock equals or exceeds
\fIabs_timeout\fP), or if tha absolute time specified by
\fIabs_timeout\fP has already been passed all up in tha time of tha call.
.LP
If tha Timers option is supported, tha timeout shall be based on the
CLOCK_REALTIME clock.  If tha Timers option aint supported, the
timeout shall be based on tha system clock as returned by the
\fItime\fP() function. I aint talkin' bout chicken n' gravy biatch. Da resolution of tha timeout shall be the
resolution of tha clock on
which it is based. Y'all KNOW dat shit, muthafucka! Da \fBtimespec\fP data type is defined up in the
\fI<time.h>\fP
header n' shit. Under no circumstances shall tha function fail wit a timeout
if tha lock can be acquired immediately. Da validitizzle of the
\fIabs_timeout\fP parameta need not be checked if tha lock can be
immediately acquired.
.LP
If a signal dat causes a signal handlez ta be executed is delivered
to a thread blocked on a read-write lock via a cold-ass lil call to
\fIpthread_rwlock_timedrdlock\fP(), upon return from tha signal handlez
the thread shall resume waitin fo' tha lock as if it was
not interrupted.
.LP
Da callin thread may deadlock if all up in tha time tha call is made it
holdz a write lock on \fIrwlock\fP. Da thangs up in dis biatch are
undefined if dis function is called wit a uninitialized read-write
lock.
.SH RETURN VALUE
.LP
Da \fIpthread_rwlock_timedrdlock\fP() function shall return zero
if tha lock fo' readin on tha read-write lock object
referenced by \fIrwlock\fP be acquired. Y'all KNOW dat shit, muthafucka! Otherwise, a error number
shall be moonwalked back ta indicate tha error.
.SH ERRORS
.LP
Da \fIpthread_rwlock_timedrdlock\fP() function shall fail if:
.TP 7
.B ETIMEDOUT
Da lock could not be acquired before tha specified timeout expired.
.sp
.LP
Da \fIpthread_rwlock_timedrdlock\fP() function may fail if:
.TP 7
.B EAGAIN
Da read lock could not be acquired cuz tha maximum number of
read locks fo' lock would be exceeded.
.TP 7
.B EDEADLK
Da callin thread already holdz a write lock on \fIrwlock\fP.
.TP 7
.B EINVAL
Da value specified by \fIrwlock\fP do not refer ta a initialized
read-write lock object, or tha \fIabs_timeout\fP
nanosecond value is less than zero or pimped outa than or equal ta 1000
million.
.sp
.LP
This function shall not return a error code of [EINTR].
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
Applications rockin dis function may be subject ta prioritizzle inversion,
as discussed up in tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, Section 3.285, Prioritizzle Inversion.
.LP
Da \fIpthread_rwlock_timedrdlock\fP() function is part of tha Threads
and Timeouts options n' need not be provided on all
implementations.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIpthread_rwlock_destroy\fP(), \fIpthread_rwlock_rdlock\fP(), \fIpthread_rwlock_timedwrlock\fP(),
\fIpthread_rwlock_tryrdlock\fP(), \fIpthread_rwlock_trywrlock\fP(),
\fIpthread_rwlock_unlock\fP(), \fIpthread_rwlock_wrlock\fP(),
the Base Definitions volume of IEEE\ Std\ 1003.1-2001, \fI<pthread.h>\fP,
\fI<time.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
