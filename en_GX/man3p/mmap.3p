.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "MMAP" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" mmap 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
mmap \- map pagez of memory
.SH SYNOPSIS
.LP
\fB#include <sys/mman.h>
.br
.sp
void *mmap(void *\fP\fIaddr\fP\fB, size_t\fP \fIlen\fP\fB, int\fP
\fIprot\fP\fB, int\fP \fIflags\fP\fB,
.br
\ \ \ \ \ \  int\fP \fIfildes\fP\fB, off_t\fP \fIoff\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fImmap\fP() function shall establish a mappin between a process'
address space n' a gangbangin' file, shared memory object, or
\ typed memory object.  Da format of tha call be as
bigs up:
.sp
.RS
.nf

\fIpa\fP\fB=\fP\fImmap\fP\fB(\fP\fIaddr\fP\fB,\fP \fIlen\fP\fB,\fP \fIprot\fP\fB,\fP \fIflags\fP\fB,\fP \fIfildes\fP\fB,\fP \fIoff\fP\fB);
\fP
.fi
.RE
.LP
Da \fImmap\fP() function shall establish a mappin between tha address
space of tha process at a address \fIpa\fP for
\fIlen\fP bytes ta tha memory object represented by tha file descriptor
\fIfildes\fP at offset \fIoff\fP fo' \fIlen\fP bytes.
Da value of \fIpa\fP be a implementation-defined function of the
parameta \fIaddr\fP n' tha jointz of \fIflags\fP, further
busted lyrics bout below fo' realz. A successful \fImmap\fP() call shall return \fIpa\fP
as its result. Da address range startin at \fIpa\fP and
continuin fo' \fIlen\fP bytes shall be legitimate fo' tha possible
(not necessarily current) address space of tha process. The
range of bytes startin at \fIoff\fP n' continuin fo' \fIlen\fP
bytes shall be legitimate fo' tha possible (not necessarily
current) offsets up in tha file, shared memory object, or  typed memory
object represented by \fIfildes\fP.
.LP
If \fIfildes\fP represents a typed memory object opened wit either
the POSIX_TYPED_MEM_ALLOCATE flag or the
POSIX_TYPED_MEM_ALLOCATE_CONTIG flag, tha memory object ta be mapped
shall be dat portion of tha typed memory object allocated by
the implementation as specified below. In dis case, if \fIoff\fP
is non-zero, tha behavior of \fImmap\fP() is undefined. Y'all KNOW dat shit, muthafucka! If
\fIfildes\fP refers ta a valid typed memory object dat aint accessible
from tha callin process, \fImmap\fP() shall fail. 
.LP
Da mappin established by \fImmap\fP() shall replace any previous
mappings fo' dem whole pages containin any part of the
address space of tha process startin at \fIpa\fP n' continuin for
\fIlen\fP bytes.
.LP
If tha size of tha mapped file chizzlez afta tha call ta \fImmap\fP()
as a result of some other operation on tha mapped file,
the effect of references ta portionz of tha mapped region dat correspond
to added or removed portionz of tha file is
unspecified.
.LP
Da \fImmap\fP() function shall be supported fo' regular files, shared
memory objects, n'  typed memory
objects, n' you can put dat on yo' toast.  Support fo' any other type of file is unspecified.
.LP
Da parameta \fIprot\fP determines whether read, write, execute,
or some combination of accesses is permitted ta tha data
bein mapped. Y'all KNOW dat shit, muthafucka! Da \fIprot\fP shall be either PROT_NONE or tha bitwise-inclusive
OR of one or mo' of tha other flags up in the
followin table, defined up in tha \fI<sys/mman.h>\fP header.
.TS C
center; l l.
\fBSymbolic Constant\fP	\fBDescription\fP
PROT_READ	Data can be read.
PROT_WRITE	Data can be written.
PROT_EXEC	Data can be executed.
PROT_NONE	Data cannot be accessed.
.TE
.LP
If a implementation cannot support tha combination of access types
specified by \fIprot\fP, tha call ta \fImmap\fP() shall
fail.
.LP
An implementation may permit accesses other than dem specified by
\fIprot\fP;  however, if
the Memory Protection option is supported, tha implementation shall
not permit a write ta succeed where PROT_WRITE has not been set
or shall not permit any access where PROT_NONE ridin' solo has been set.
Da implementation shall support at least tha followin joints
of \fIprot\fP: PROT_NONE, PROT_READ, PROT_WRITE, n' tha bitwise-inclusive
OR of PROT_READ n' PROT_WRITE.  If tha Memory Protection option is
not supported, tha result of any access
that conflicts wit tha specified protection is undefined. Y'all KNOW dat shit, muthafucka! Da file
descriptor \fIfildes\fP shall done been opened wit read
permission, regardless of tha protection options specified. Y'all KNOW dat shit, muthafucka! If PROT_WRITE
is specified, tha application shall ensure dat it has
opened tha file descriptor \fIfildes\fP wit write permission unless
MAP_PRIVATE is specified up in tha \fIflags\fP parameta as
busted lyrics bout below.
.LP
Da parameta \fIflags\fP serves up other shiznit bout tha handling
of tha mapped data. Da value of \fIflags\fP is the
bitwise-inclusive OR of these options, defined up in \fI<sys/mman.h>\fP:
.TS C
center; l l.
\fBSymbolic Constant\fP	\fBDescription\fP
MAP_SHARED	Changes is shared.
MAP_PRIVATE	Changes is private.
MAP_FIXED	Interpret \fIaddr\fP exactly.
.TE
.LP
Implementations dat do not support tha Memory Mapped Filez option
are not required ta support MAP_PRIVATE.
.LP
It be implementation-defined whether MAP_FIXED shall be supported.
\ MAP_FIXED shall be supported on XSI-conformant systems.
.LP
MAP_SHARED n' MAP_PRIVATE describe tha disposizzle of write references
to tha memory object. If MAP_SHARED is specified, write
references shall chizzle tha underlyin object. If MAP_PRIVATE is specified,
modifications ta tha mapped data by tha callin process
shall be visible only ta tha callin process n' shall not chizzle
the underlyin object. Well shiiiit, it is unspecified whether modifications to
the underlyin object done afta tha MAP_PRIVATE mappin is established
are visible all up in tha MAP_PRIVATE mapping. Either
MAP_SHARED or MAP_PRIVATE can be specified yo, but not both. Da mapping
type is retained across \fIfork\fP().
.LP
When \fIfildes\fP represents a typed memory object opened wit either
the POSIX_TYPED_MEM_ALLOCATE flag or the
POSIX_TYPED_MEM_ALLOCATE_CONTIG flag, \fImmap\fP() shall, if there
are enough resources available, map \fIlen\fP bytes allocated
from tha correspondin typed memory object which was not previously
allocated ta any process up in any processor dat may access that
typed memory object. If there be not enough resources available,
the function shall fail. If \fIfildes\fP represents a typed
memory object opened wit tha POSIX_TYPED_MEM_ALLOCATE_CONTIG flag,
these allocated bytes shall be contiguous within tha typed
memory object. If \fIfildes\fP represents a typed memory object opened
with tha POSIX_TYPED_MEM_ALLOCATE flag, these allocated
bytes may be composed of non-contiguous fragments within tha typed
memory object. If \fIfildes\fP represents a typed memory object
opened wit neither tha POSIX_TYPED_MEM_ALLOCATE_CONTIG flag nor the
POSIX_TYPED_MEM_ALLOCATE flag, \fIlen\fP bytes startin at
offset \fIoff\fP within tha typed memory object is mapped, exactly
as when mappin a gangbangin' file or shared memory object. In dis case,
if two processes map a area of typed memory rockin tha same \fIoff\fP
and \fIlen\fP joints n' rockin file descriptors dat refer
to tha same memory pool (either from tha same port or from a gangbangin' finger-lickin' different
port), both processes shall map tha same region of storage.
.LP
When MAP_FIXED is set up in tha \fIflags\fP argument, tha implementation
is informed dat tha value of \fIpa\fP shall be
\fIaddr\fP, exactly. If MAP_FIXED is set, \fImmap\fP() may return
MAP_FAILED n' set \fIerrno\fP ta [EINVAL]. If a MAP_FIXED
request is successful, tha mappin established by \fImmap\fP() replaces
any previous mappings fo' tha process' pages up in tha range
[\fIpa\fP,\fIpa\fP+\fIlen\fP).
.LP
When MAP_FIXED aint set, tha implementation uses \fIaddr\fP up in an
implementation-defined manner ta arrive at \fIpa\fP. The
\fIpa\fP so chosen shall be a area of tha address space dat the
implementation deems suitable fo' a mappin of \fIlen\fP bytes
to tha file fo' realz. All implementations interpret a \fIaddr\fP value of
0 as grantin tha implementation complete freedom up in selecting
\fIpa\fP, subject ta constraints busted lyrics bout below fo' realz. A non-zero value
of \fIaddr\fP is taken ta be a suggestion of a process address
near which tha mappin should be placed. Y'all KNOW dat shit, muthafucka! When tha implementation selects
a value fo' \fIpa\fP, it never places a mappin at
address 0, nor do it replace any extant mapping.
.LP
Da \fIoff\fP argument is constrained ta be aligned n' sized according
to tha value returned by \fIsysconf\fP() when passed _SC_PAGESIZE
or _SC_PAGE_SIZE. When MAP_FIXED is specified, the
application shall ensure dat tha argument \fIaddr\fP also meets these
constraints, n' you can put dat on yo' toast. Da implementation performs mappin operations
over whole pages. Thus, while tha argument \fIlen\fP need not meet
a size or alignment constraint, tha implementation shall
include, up in any mappin operation, any partial page specified by the
range [\fIpa\fP,\fIpa\fP+\fIlen\fP).
.LP
Da system shall always zero-fill any partial page all up in tha end of an
object. Further, tha system shall never write up any
modified portionz of tha last page of a object which is beyond its
end yo, but it ain't no stoppin cause I be still poppin'.  References
within tha address range startin at \fIpa\fP n' continuin fo' \fIlen\fP
bytes ta whole pages followin tha end of a object
shall result up in delivery of a SIGBUS signal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. 
.LP
An implementation may generate SIGBUS signals when a reference would
cause a error up in tha mapped object, like fuckin out-of-space
condition.
.LP
Da \fImmap\fP() function shall add a extra reference ta tha file
associated wit tha file descriptor \fIfildes\fP which is
not removed by a subsequent \fIclose\fP() on dat file descriptor.
This reference shall be
removed when there be no mo' mappings ta tha file.
.LP
Da \fIst_atime\fP field of tha mapped file may be marked fo' update
at any time between tha \fImmap\fP() call n' the
correspondin \fImunmap\fP() call. Da initial read or write reference
to a mapped region
shall cause tha filez \fIst_atime\fP field ta be marked fo' update
if it has not already been marked fo' update.
.LP
Da \fIst_ctime\fP n' \fIst_mtime\fP fieldz of a gangbangin' file dat is mapped
with MAP_SHARED n' PROT_WRITE shall be marked for
update at some point up in tha interval between a write reference to
the mapped region n' tha next call ta \fImsync\fP() wit MS_ASYNC
or MS_SYNC fo' dat portion of tha file by any process. If there is
no
such call n' if tha underlyin file is modified as a result of a
write reference, then these fieldz shall be marked fo' update at
some time afta tha write reference.
.LP
There may be implementation-defined limits on tha number of memory
regions dat can be mapped (per process or per system).
.LP
If such a limit is imposed, whether tha number of memory regions that
can be mapped by a process is decreased by tha use of \fIshmat\fP()
is implementation-defined. Y'all KNOW dat shit, muthafucka! 
.LP
If \fImmap\fP() fails fo' reasons other than [EBADF], [EINVAL], or
[ENOTSUP], a shitload of tha mappings up in tha address range
startin at \fIaddr\fP n' continuin fo' \fIlen\fP bytes may have
been unmapped.
.SH RETURN VALUE
.LP
Upon successful completion, tha \fImmap\fP() function shall return
the address at which tha mappin was placed ( \fIpa\fP);
otherwise, it shall return a value of MAP_FAILED n' set \fIerrno\fP
to indicate tha error. Shiiit, dis aint no joke. Da symbol MAP_FAILED is defined in
the \fI<sys/mman.h>\fP header n' shit. No successful return from \fImmap\fP()
shall
return tha value MAP_FAILED.
.SH ERRORS
.LP
Da \fImmap\fP() function shall fail if:
.TP 7
.B EACCES
Da \fIfildes\fP argument aint open fo' read, regardless of the
protection specified, or \fIfildes\fP aint open fo' write
and PROT_WRITE was specified fo' a MAP_SHARED type mapping.
.TP 7
.B EAGAIN
Da mappin could not be locked up in memory, if required by \fImlockall\fP(),
due ta a lack
of resources. 
.TP 7
.B EBADF
Da \fIfildes\fP argument aint a valid open file descriptor.
.TP 7
.B EINVAL
Da \fIaddr\fP argument (if MAP_FIXED was specified) or \fIoff\fP
is not a multiple of tha page size as returned by \fIsysconf\fP(),
or is considered invalid by tha implementation.
.TP 7
.B EINVAL
Da value of \fIflags\fP is invalid (neither MAP_PRIVATE nor MAP_SHARED
is set).
.TP 7
.B EMFILE
Da number of mapped regions would exceed a implementation-defined
limit (per process or per system).
.TP 7
.B ENODEV
Da \fIfildes\fP argument refers ta a gangbangin' file whose type aint supported
by \fImmap\fP().
.TP 7
.B ENOMEM
MAP_FIXED was specified, n' tha range [\fIaddr\fP,\fIaddr\fP+\fIlen\fP)
exceedz dat allowed fo' tha address space of a
process; or, if MAP_FIXED was not specified n' there is insufficient
room up in tha address space ta effect tha mapping.
.TP 7
.B ENOMEM
Da mappin could not be locked up in memory, if required by \fImlockall\fP(),
because it
would require mo' space than tha system be able ta supply. 
.TP 7
.B ENOMEM
Not enough unallocated memory resources remain up in tha typed memory
object designated by \fIfildes\fP ta allocate \fIlen\fP bytes.
.TP 7
.B ENOTSUP
MAP_FIXED or MAP_PRIVATE was specified up in tha \fIflags\fP argument
and tha implementation do not support dis functionality.
.LP
Da implementation do not support tha combination of accesses requested
in tha \fIprot\fP argument.
.TP 7
.B ENXIO
Addresses up in tha range [\fIoff\fP,\fIoff\fP+\fIlen\fP) is invalid
for tha object specified by \fIfildes\fP.
.TP 7
.B ENXIO
MAP_FIXED was specified up in \fIflags\fP n' tha combination of \fIaddr\fP,
\fIlen\fP, n' \fIoff\fP is invalid fo' the
object specified by \fIfildes\fP.
.TP 7
.B ENXIO
Da \fIfildes\fP argument refers ta a typed memory object dat is
not accessible from tha callin process. 
.TP 7
.B EOVERFLOW
Da file be a regular file n' tha value of \fIoff\fP plus \fIlen\fP
exceedz tha offset maximum established up in tha open file
description associated wit \fIfildes\fP.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
Use of \fImmap\fP() may reduce tha amount of memory available ta other
memory allocation functions.
.LP
Use of MAP_FIXED may result up in unspecified behavior up in further use
of \fImalloc\fP() and
\fIshmat\fP(). Da use of MAP_FIXED is discouraged, as it may prevent
an implementation from
makin da most thugged-out effectizzle use of resources.
.LP
Da application must ensure erect synchronization when rockin \fImmap\fP()
in conjunction wit any other file access method,
like fuckin \fIread\fP() n' \fIwrite\fP(), standard
input/output, n' \fIshmat\fP().
.LP
Da \fImmap\fP() function allows access ta resources via address space
manipulations, instead of \fIread\fP()/ \fIwrite\fP(). Once a gangbangin' file
is mapped, all a
process has ta do ta access it is use tha data all up in tha address ta which
the file was mapped. Y'all KNOW dat shit, muthafucka! So, rockin pseudo-code ta illustrate the
way up in which a existin program might be chizzled ta use \fImmap\fP(),
the following:
.sp
.RS
.nf

\fBfildes = open(...)
lseek(fildes, some_offset)
read(fildes, buf, len)
/* Use data up in buf. */
\fP
.fi
.RE
.LP
becomes:
.sp
.RS
.nf

\fBfildes = open(...)
address = mmap(0, len, PROT_READ, MAP_PRIVATE, fildes, some_offset)
/* Use data at address. */
\fP
.fi
.RE
.SH RATIONALE
.LP
Afta thankin bout nuff muthafuckin other alternatives, dat shiznit was decided ta adopt
the \fImmap\fP() definizzle found up in SVR4 fo' mapping
memory objects tha fuck into process address spaces. Da SVR4 definizzle is
minimal, up in dat it raps bout only what tha fuck has been built, n' what
appears ta be necessary fo' a general n' portable mappin facility.
.LP
Note dat while \fImmap\fP() was first designed fo' mappin files,
it is straight-up a general-purpose mappin facility. Well shiiiit, it can be
used ta map any appropriate object, like fuckin memory, files, devices,
and so on, tha fuck into tha address space of a process.
.LP
When a mappin is established, it is possible dat tha implementation
may need ta map mo' than be axed tha fuck into tha address
space of tha process cuz of hardware requirements fo' realz. An application,
however, cannot count on dis behavior. Shiiit, dis aint no joke. Implementations that
do not bust a paged architecture may simply allocate a cold-ass lil common memory
region n' return tha address of it; such implementations
probably do not allocate any mo' than is necessary. References past
the end of tha axed area is unspecified.
.LP
If a application requests a mappin dat would overlay existin mappings
in tha process, it might be desirable dat an
implementation detect dis n' inform tha application. I aint talkin' bout chicken n' gravy biatch. But fuck dat shiznit yo, tha word on tha street is dat the
default, portable (not MAP_FIXED) operation do not overlay
existin mappings. On tha other hand, if tha program specifies a gangbangin' fixed
address mappin (which requires some implementation
knowledge ta determine a suitable address, if tha function is supported
at all), then tha program is presumed ta be successfully
managin its own address space n' should be trusted when it asks
to map over existin data structures. Furthermore, it be also
desirable ta make as few system calls as possible, n' it might be
considered onerous ta require a \fImunmap\fP() before a \fImmap\fP()
to tha same address range. This volume of
IEEE\ Std\ 1003.1-2001 specifies dat tha freshly smoked up mappings replace any
existin mappings, followin existin practice up in this
regard.
.LP
It aint expected, when tha Memory Protection option is supported,
that all hardware implementations is able ta support all
combinationz of permissions at all addresses. When dis option is
supported, implementations is required ta disallow write access
to mappings without write permission n' ta disallow access ta mappings
without any access permission. I aint talkin' bout chicken n' gravy biatch. Other than these
restrictions, implementations may allow access types other than them
axed by tha application. I aint talkin' bout chicken n' gravy biatch. For example, if tha application
requests only PROT_WRITE, tha implementation may also allow read access.
A call ta \fImmap\fP() fails if tha implementation cannot
support allowin all tha access axed by tha application. I aint talkin' bout chicken n' gravy biatch. For
example, some implementations cannot support a request fo' both
write access n' execute access simultaneously fo' realz. All implementations
supportin tha Memory Protection option must support requests
for no access, read access, write access, n' both read n' write
access. Right back up in yo muthafuckin ass. Strictly conformin code must only rely on tha required
checks. These restrictions allow fo' portabilitizzle across a wide range
of hardware.
.LP
Da MAP_FIXED address treatment is likely ta fail fo' non-page-aligned
values n' fo' certain architecture-dependent address
ranges. Conformin implementations cannot count on bein able ta chizzle
address joints fo' MAP_FIXED without utilizing
non-portable, implementation-defined knowledge. Nonetheless, MAP_FIXED
is provided as a standard intercourse conformin ta existing
practice fo' utilizin such knowledge when it be available.
.LP
Similarly, up in order ta allow implementations dat do not support virtual
addresses, support fo' directly specifyin any mapping
addresses via MAP_FIXED aint required n' thus a cold-ass lil conformin application
may not count on dat shit.
.LP
Da MAP_PRIVATE function can be implemented efficiently when memory
protection hardware be available. When such hardware is not
available, implementations can implement such "mappings" by simply
makin a real copy of tha relevant data tha fuck into process private
memory, though dis tendz ta behave similarly ta \fIread\fP().
.LP
Da function has been defined ta allow fo' nuff different models of
usin shared memory. But fuck dat shiznit yo, tha word on tha street is dat all uses is not equally
portable across all machine architectures. In particular, tha \fImmap\fP()
function allows tha system as well as tha application
to specify tha address at which ta map a specific region of a memory
object. Da most portable way ta use tha function be always to
let tha system chizzle tha address, specifyin NULL as tha value for
the argument \fIaddr\fP n' not ta specify MAP_FIXED.
.LP
If it is intended dat a particular region of a memory object be mapped
at tha same address up in a crew of processes (on machines
where dis is even possible), then MAP_FIXED can be used ta pass in
the desired mappin address. Da system can still be used to
choose tha desired address if tha straight-up original gangsta such mappin is made without
specifyin MAP_FIXED, n' then tha resultin mappin address
can be passed ta subsequent processes fo' dem ta pass up in via MAP_FIXED.
Da availabilitizzle of a specific address range cannot be
guaranteed, up in general.
.LP
Da \fImmap\fP() function can be used ta map a region of memory that
is larger than tha current size of tha object. Memory
access within tha mappin but beyond tha current end of tha underlying
objects may result up in SIGBUS signals bein busted ta the
process. Da reason fo' dis is dat tha size of tha object can be
manipulated by other processes n' can chizzle at any moment. The
implementation should tell tha application dat a memory reference
is outside tha object where dis can be detected; otherwise,
written data may be lost n' read data may not reflect actual data
in tha object.
.LP
Note dat references beyond tha end of tha object do not extend the
object as tha freshly smoked up end cannot be determined precisely by most
virtual memory hardware. Instead, tha size can be directly manipulated
by \fIftruncate\fP().
.LP
Process memory lockin do apply ta shared memory regions, n' the
MEMLOCK_FUTURE argument ta \fImlockall\fP() can be relied upon to
cause freshly smoked up shared memory regions ta be automatically
locked.
.LP
Existin implementationz of \fImmap\fP() return tha value -1 when
unsuccessful naaahhmean, biatch? Since tha castin of dis value ta type \fBvoid
*\fP cannot be guaranteed by tha ISO\ C standard ta be distinct from
a successful value, dis volume of
IEEE\ Std\ 1003.1-2001 defines tha symbol MAP_FAILED, which a cold-ass lil conforming
implementation do not return as tha result of a
successful call.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIexec\fP(), \fIfcntl\fP(), \fIfork\fP(), \fIlockf\fP(), \fImsync\fP(),
\fImunmap\fP(), \fImprotect\fP(), \fIposix_typed_mem_open\fP(),
\fIshmat\fP(), \fIsysconf\fP(), tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, \fI<sys/mman.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
