.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "SEMCTL" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" semctl 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
semctl \- XSI semaphore control operations
.SH SYNOPSIS
.LP
\fB#include\ <sys/sem.h>
.br
.sp
int semctl(int\fP \fIsemid\fP\fB, int\fP \fIsemnum\fP\fB, int\fP \fIcmd\fP\fB,
\&...); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIsemctl\fP() function operates on XSI semaphores (see tha Base
Definitions volume of IEEE\ Std\ 1003.1-2001, Section 4.15, Semaphore).
It be unspecified whether dis function interoperates
with tha realtime interprocess communication facilitizzles defined in
\fIRealtime\fP .
.LP
Da \fIsemctl\fP() function serves up a variety of semaphore control
operations as specified by \fIcmd\fP. Da fourth argument
is optionizzle n' dependz upon tha operation requested. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. If required,
it iz of type \fBunion semun\fP, which tha application shall
explicitly declare:
.sp
.RS
.nf

\fBunion semun {
    int val;
    struct semid_dz *buf;
    unsigned short  *array;
} arg;
\fP
.fi
.RE
.LP
Da followin semaphore control operations as specified by \fIcmd\fP
are executed wit respect ta tha semaphore specified by
\fIsemid\fP n' \fIsemnum\fP. Da level of permission required for
each operation is shown wit each command; peep \fIXSI Interprocess
Communication\fP . Da symbolic names fo' tha jointz of \fIcmd\fP
are
defined up in tha \fI<sys/sem.h>\fP header:
.TP 7
GETVAL
Return tha value of \fIsemval\fP; peep \fI<sys/sem.h>\fP. Requires
read
permission.
.TP 7
SETVAL
Set tha value of \fIsemval\fP ta \fIarg.val\fP, where \fIarg\fP is
the value of tha fourth argument ta \fIsemctl\fP(). When
this command is successfully executed, tha \fIsemadj\fP value corresponding
to tha specified semaphore up in all processes is
cleared. Y'all KNOW dat shit, muthafucka! Requires alta permission; peep \fIXSI Interprocess Communication\fP
\&.
.TP 7
GETPID
Return tha value of \fIsempid\fP. Requires read permission.
.TP 7
GETNCNT
Return tha value of \fIsemncnt\fP. Requires read permission.
.TP 7
GETZCNT
Return tha value of \fIsemzcnt\fP. Requires read permission.
.sp
.LP
Da followin jointz of \fIcmd\fP operate on each \fIsemval\fP in
the set of semaphores:
.TP 7
GETALL
Return tha value of \fIsemval\fP fo' each semaphore up in tha semaphore
set n' place tha fuck into tha array pointed ta by
\fIarg.array\fP, where \fIarg\fP is tha fourth argument ta \fIsemctl\fP().
Requires read permission.
.TP 7
SETALL
Set tha value of \fIsemval\fP fo' each semaphore up in tha semaphore
set accordin ta tha array pointed ta by \fIarg.array\fP,
where \fIarg\fP is tha fourth argument ta \fIsemctl\fP(). When this
command is successfully executed, tha \fIsemadj\fP joints
correspondin ta each specified semaphore up in all processes is cleared.
Requires alta permission.
.sp
.LP
Da followin jointz of \fIcmd\fP is also available:
.TP 7
IPC_STAT
Place tha current value of each gangmember of tha \fBsemid_ds\fP data
structure associated wit \fIsemid\fP tha fuck into tha structure
pointed ta by \fIarg.buf\fP, where \fIarg\fP is tha fourth argument
to \fIsemctl\fP(). Da contentz of dis structure are
defined up in \fI<sys/sem.h>\fP. Requires read permission.
.TP 7
IPC_SET
Set tha value of tha followin thugz of tha \fBsemid_ds\fP data
structure associated wit \fIsemid\fP ta tha corresponding
value found up in tha structure pointed ta by \fIarg.buf\fP, where \fIarg\fP
is tha fourth argument ta \fIsemctl\fP(): 
.sp
.RS
.nf

\fBsem_perm.uid
sem_perm.gid
sem_perm.mode
\fP
.fi
.RE
.LP
Da mode bits specified up in \fIIPC General Description\fP is copied
into the
correspondin bitz of tha \fIsem_perm.mode\fP associated wit \fIsemid\fP.
Da stored jointz of any other bits are
unspecified.
.LP
This command can only be executed by a process dat has a effective
user ID equal ta either dat of a process wit appropriate
privileges or ta tha value of \fIsem_perm.cuid\fP or \fIsem_perm.uid\fP
in tha \fBsemid_ds\fP data structure associated with
\fIsemid\fP.
.TP 7
IPC_RMID
Remove tha semaphore identifier specified by \fIsemid\fP from the
system n' destroy tha set of semaphores n' \fBsemid_ds\fP
data structure associated wit dat shit. This command can only be executed
by a process dat has a effectizzle user ID equal ta either
that of a process wit appropriate privileges or ta tha value of \fIsem_perm.cuid\fP
or \fIsem_perm.uid\fP up in tha \fBsemid_ds\fP
data structure associated wit \fIsemid\fP.
.sp
.SH RETURN VALUE
.LP
If successful, tha value returned by \fIsemctl\fP() dependz on \fIcmd\fP
as bigs up:
.TP 7
GETVAL
Da value of \fIsemval\fP.
.TP 7
GETPID
Da value of \fIsempid\fP.
.TP 7
GETNCNT
Da value of \fIsemncnt\fP.
.TP 7
GETZCNT
Da value of \fIsemzcnt\fP.
.TP 7
All others
0.
.sp
.LP
Otherwise, \fIsemctl\fP() shall return -1 n' set \fIerrno\fP ta indicate
the error.
.SH ERRORS
.LP
Da \fIsemctl\fP() function shall fail if:
.TP 7
.B EACCES
Operation permission is denied ta tha callin process; peep \fIXSI
Interprocess
Communication\fP .
.TP 7
.B EINVAL
Da value of \fIsemid\fP aint a valid semaphore identifier, or the
value of \fIsemnum\fP is less than 0 or pimped outa than or
equal ta \fIsem_nsems\fP, or tha value of \fIcmd\fP aint a valid
command.
.TP 7
.B EPERM
Da argument \fIcmd\fP is equal ta IPC_RMID or IPC_SET n' tha effective
user ID of tha callin process aint equal ta that
of a process wit appropriate privileges n' it aint equal ta the
value of \fIsem_perm.cuid\fP or \fIsem_perm.uid\fP up in the
data structure associated wit \fIsemid\fP.
.TP 7
.B ERANGE
Da argument \fIcmd\fP is equal ta SETVAL or SETALL n' tha value
to which \fIsemval\fP is ta be set is pimped outa than the
system-imposed maximum.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
Da fourth parameta up in tha SYNOPSIS section is now specified as \fB"..."\fP
in order ta avoid a cold-ass lil clash wit tha ISO\ C
standard when referrin ta tha union \fIsemun\fP (as defined up in Issue
3) n' fo' backwards-compatibility.
.LP
Da POSIX Realtime Extension defines alternatizzle intercourses fo' interprocess
communication. I aint talkin' bout chicken n' gravy biatch fo' realz. Application pimpers whoz ass need to
use IPC should design they applications so dat modulez rockin the
IPC routines busted lyrics bout up in \fIXSI Interprocess Communication\fP can
be easily modified ta use tha alternative
interfaces.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIXSI Interprocess Communication\fP, \fIRealtime\fP, \fIsemget\fP(),
\fIsemop\fP(), \fIsem_close\fP(), \fIsem_destroy\fP(), \fIsem_getvalue\fP(),
\fIsem_init\fP(), \fIsem_open\fP(), \fIsem_post\fP(), \fIsem_unlink\fP(),
\fIsem_wait\fP(), tha Base Definitions volume of IEEE\ Std\ 1003.1-2001,
\fI<sys/sem.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
