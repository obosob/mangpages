.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "SCHED_SETPARAM" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" sched_setparam 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
sched_setparam \- set schedulin parametas (\fBREALTIME\fP)
.SH SYNOPSIS
.LP
\fB#include <sched.h>
.br
.sp
int sched_setparam(pid_t\fP \fIpid\fP\fB, const struct sched_param
*\fP\fIparam\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIsched_setparam\fP() function shall set tha schedulin parameters
of tha process specified by \fIpid\fP ta tha joints
specified by tha \fBsched_param\fP structure pointed ta by \fIparam\fP.
Da value of tha \fIsched_priority\fP member up in the
\fBsched_param\fP structure shall be any integer within tha inclusive
prioritizzle range fo' tha current schedulin policy of the
process specified by \fIpid\fP yo. Higher numerical joints fo' tha priority
represent higher priorities. Put ya muthafuckin choppers up if ya feel dis! If tha value of \fIpid\fP
is negative, tha behavior of tha \fIsched_setparam\fP() function is
unspecified.
.LP
If a process specified by \fIpid\fP exists, n' if tha callin process
has permission, tha schedulin parametas shall be set
for tha process whose process ID is equal ta \fIpid\fP.
.LP
If \fIpid\fP is zero, tha schedulin parametas shall be set fo' the
callin process.
.LP
Da conditions under which one process has permission ta chizzle the
schedulin parametaz of another process are
implementation-defined.
.LP
Implementations may require tha requestin process ta have tha appropriate
privilege ta set its own schedulin parametas or
those of another process.
.LP
Da target process, whether it is hustlin or not hustlin, shall be
moved ta tha tail of tha thread list fo' its priority.
.LP
If tha prioritizzle of tha process specified by tha \fIpid\fP argument
is set higher than dat of tha lowest prioritizzle hustlin
process n' if tha specified process is locked n loaded ta run, tha process
specified by tha \fIpid\fP argument shall preempt a lowest
prioritizzle hustlin process. Right back up in yo muthafuckin ass. Similarly, if tha process callin \fIsched_setparam\fP()
sets its own prioritizzle lower than dat of one or
more other non-empty process lists, then tha process dat is tha head
of tha highest prioritizzle list shall also preempt tha calling
process. Thus, up in either case, tha originatin process might not receive
notification of tha completion of tha axed priority
change until tha higher prioritizzle process has executed.
.LP
If
the schedulin policy of tha target process is SCHED_SPORADIC, the
value specified by tha \fIsched_ss_low_priority\fP gangmember of
the \fIparam\fP argument shall be any integer within tha inclusive
prioritizzle range fo' tha sporadic server policy. The
\fIsched_ss_repl_period\fP n' \fIsched_ss_init_budget\fP members
of tha \fIparam\fP argument shall represent tha time
parametas ta be used by tha sporadic server schedulin policy for
the target process. Da \fIsched_ss_max_repl\fP gangmember of the
\fIparam\fP argument shall represent tha maximum number of replenishments
that is allowed ta be pendin simultaneously fo' the
process scheduled under dis schedulin policy.
.LP
Da specified \fIsched_ss_repl_period\fP shall be pimped outa than or
equal ta tha specified \fIsched_ss_init_budget\fP fo' the
function ta succeed; if it is not, then tha function shall fail.
.LP
Da value of \fIsched_ss_max_repl\fP shall be within tha inclusive
range [1, {SS_REPL_MAX}] fo' tha function ta succeed; if
not, tha function shall fail.
.LP
If tha schedulin policy of tha target process is either SCHED_FIFO
or SCHED_RR, tha \fIsched_ss_low_priority\fP,
\fIsched_ss_repl_period\fP, n' \fIsched_ss_init_budget\fP members
of tha \fIparam\fP argument shall have no effect on the
schedulin behavior. Shiiit, dis aint no joke. If tha schedulin policy of dis process is not
SCHED_FIFO, SCHED_RR, or SCHED_SPORADIC, tha effectz of these
thugz is implementation-defined; dis case includes tha SCHED_OTHER
policy. 
.LP
If tha current schedulin policy fo' tha process specified by \fIpid\fP
is not SCHED_FIFO, SCHED_RR,  or
SCHED_SPORADIC, tha result is implementation-defined; this
case includes tha SCHED_OTHER policy.
.LP
Da effect of dis function on individual threadz is dependent on
the schedulin contention scope of tha threads:
.IP " *" 3
For threadz wit system schedulin contention scope, these functions
shall have no effect on they scheduling.
.LP
.IP " *" 3
For threadz wit process schedulin contention scope, tha threads'
schedulin parametas shall not be affected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. But fuck dat shiznit yo, tha word on tha street is dat the
schedulin of these threadz wit respect ta threadz up in other processes
may be dependent on tha schedulin parametaz of their
process, which is governed rockin these functions.
.LP
.LP
If a implementation supports a two-level schedulin model up in which
library threadz is multiplexed on top of several
kernel-scheduled entities, then tha underlyin kernel-scheduled entities
for tha system contention scope threadz shall not be
affected by these functions.
.LP
Da underlyin kernel-scheduled entitizzles fo' tha process contention
scope threadz shall have they schedulin parametas chizzled
to tha value specified up in \fIparam\fP. Kernel-scheduled entitizzles for
use by process contention scope threadz dat is pimped
afta dis call completes shall inherit they schedulin policy and
associated schedulin parametas from tha process.
.LP
This function aint atomic wit respect ta other threadz up in tha process.
Threadz may continue ta execute while dis function
call is up in tha process of changin tha schedulin policy fo' tha underlying
kernel-scheduled entitizzles used by tha process
contention scope threads.
.SH RETURN VALUE
.LP
If successful, tha \fIsched_setparam\fP() function shall return zero.
.LP
If tha call ta \fIsched_setparam\fP() is unsuccessful, tha priority
shall remain unchanged, n' tha function shall return a
value of -1 n' set \fIerrno\fP ta indicate tha error.
.SH ERRORS
.LP
Da \fIsched_setparam\fP() function shall fail if:
.TP 7
.B EINVAL
One or mo' of tha axed schedulin parametas is outside the
range defined fo' tha schedulin policy of tha specified
\fIpid\fP.
.TP 7
.B EPERM
Da requestin process aint gots permission ta set tha scheduling
parametas fo' tha specified process, or do not have
the appropriate privilege ta invoke \fIsched_setparam\fP().
.TP 7
.B ESRCH
No process can be found correspondin ta dat specified by \fIpid\fP.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIsched_getparam\fP(), \fIsched_getscheduler\fP(),
\fIsched_setscheduler\fP(), tha Base Definitions volume of IEEE\ Std\ 1003.1-2001,
\fI<sched.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
