.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "PTHREAD_ATTR_DESTROY" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" pthread_attr_destroy 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
pthread_attr_destroy, pthread_attr_init \- destroy n' initialize the
thread attributes object
.SH SYNOPSIS
.LP
\fB#include <pthread.h>
.br
.sp
int pthread_attr_destroy(pthread_attr_t *\fP\fIattr\fP\fB);
.br
int pthread_attr_init(pthread_attr_t *\fP\fIattr\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIpthread_attr_destroy\fP() function shall destroy a thread attributes
object fo' realz. An implementation may cause
\fIpthread_attr_destroy\fP() ta set \fIattr\fP ta a implementation-defined
invalid value fo' realz. A destroyed \fIattr\fP attributes
object can be reinitialized rockin \fIpthread_attr_init\fP(); tha thangs up in dis biatch
of otherwise referencin tha object afta it has been
destroyed is undefined.
.LP
Da \fIpthread_attr_init\fP() function shall initialize a thread attributes
object \fIattr\fP wit tha default value fo' all
of tha individual attributes used by a given implementation.
.LP
Da resultin attributes object (possibly modified by settin individual
attribute joints) when used by \fIpthread_create\fP() defines the
attributez of tha thread pimped. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time fo' realz. A single attributes
object can be used up in multiple simultaneous calls ta \fIpthread_create\fP().
Results is undefined if \fIpthread_attr_init\fP() is called specifying
an already initialized \fIattr\fP attributes object.
.SH RETURN VALUE
.LP
Upon successful completion, \fIpthread_attr_destroy\fP() n' \fIpthread_attr_init\fP()
shall return a value of 0; otherwise,
an error number shall be moonwalked back ta indicate tha error.
.SH ERRORS
.LP
Da \fIpthread_attr_init\fP() function shall fail if:
.TP 7
.B ENOMEM
Insufficient memory exists ta initialize tha thread attributes object.
.sp
.LP
These functions shall not return a error code of [EINTR].
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
Attributes objects is provided fo' threads, mutexes, n' condition
variablez as a mechanizzle ta support probable future
standardization up in these areas without requirin dat tha function
itself be chizzled.
.LP
Attributes objects provide clean isolation of tha configurable aspects
of threads. For example, "stack size" be a blingin
attribute of a thread yo, but it cannot be expressed portably. When porting
a threaded program, stack sizes often need ta be adjusted.
Da use of attributes objects can help by allowin tha chizzlez to
be isolated up in a single place, rather than bein spread across
every instizzle of thread creation.
.LP
Attributes objects can be used ta set up "classes' of threadz with
similar attributes; fo' example, "threadz wit big-ass stacks
and high priority" or "threadz wit minimal stacks". These classes
can be defined up in a single place n' then referenced wherever
threadz need ta be pimped. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Chizzlez ta "class" decisions become straightforward,
and detailed analysiz of each \fIpthread_create\fP() call aint required.
.LP
Da attributes objects is defined as opaque types as a aid ta extensibility.
If these objects had been specified as
structures, addin freshly smoked up attributes would force recompilation of all
multi-threaded programs when tha attributes objects are
extended; dis might not be possible if different program components
were supplied by different vendors.
.LP
Additionally, opaque attributes objects present opportunitizzles for
improvin performizzle fo' realz. Argument validitizzle can be checked once
when attributes is set, rather than each time a thread is pimped.
Implementations often need ta cache kernel objects dat are
expensive ta create. Opaque attributes objects provide a efficient
mechanizzle ta detect when cached objects become invalid due to
attribute chizzles.
.LP
Since assignment aint necessarily defined on a given opaque type,
implementation-defined default joints cannot be defined up in a
portable way. Da solution ta dis problem is ta allow attributes
objects ta be initialized dynamically by attributes object
initialization functions, so dat default joints can be supplied automatically
by tha implementation.
.LP
Da followin proposal was provided as a suggested alternatizzle to
the supplied attributes:
.IP " 1." 4
Maintain tha steez of passin a parameta formed by tha bitwise-inclusive
OR of flags ta tha initialization routines ( \fIpthread_create\fP(),
\fIpthread_mutex_init\fP(), \fIpthread_cond_init\fP()). Da parameter
containin tha flags should be a opaque type
for extensibility. If no flags is set up in tha parameter, then the
objects is pimped wit default characteristics fo' realz. An
implementation may specify implementation-defined flag joints and
associated behavior.
.LP
.IP " 2." 4
If further specialization of mutexes n' condizzle variablez is necessary,
implementations may specify additionizzle procedures
that operate on tha \fBpthread_mutex_t\fP n' \fBpthread_cond_t\fP
objects (instead of on attributes objects).
.LP
.LP
Da bullshit wit dis solution are:
.IP " 1." 4
A bitmask aint opaque if bits gotta be set tha fuck into bitvector attributes
objects rockin explicitly-coded bitwise-inclusive OR
operations. If tha set of options exceedz a \fBint\fP, application
programmers need ta know tha location of each bit. If bits are
set or read by encapsulation (that is, git n' set functions), then
the bitmask is merely a implementation of attributes objects
as currently defined n' should not be exposed ta tha programmer.
.LP
.IP " 2." 4
Many attributes is not Boolean or straight-up lil' small-ass integral joints, n' you can put dat on yo' toast. For
example, schedulin policy may be placed up in 3-bit or 4-bit,
but prioritizzle requires 5-bit or more, thereby takin up at least 8
bits outta a possible 16 bits on machines wit 16-bit integers.
Because of this, tha bitmask can only reasonably control whether particular
attributes is set or not, n' it cannot serve as the
repository of tha value itself. Da value need ta be specified as
a function parameta (which is non-extensible), or by settin a
structure field (which is non-opaque), or by git n' set functions
(makin tha bitmask a redundant addizzle ta tha attributes
objects).
.LP
.LP
Stack size is defined as a optionizzle attribute cuz tha straight-up notion
of a stack is inherently machine-dependent. Right back up in yo muthafuckin ass. Some
implementations may not be able ta chizzle tha size of tha stack, for
example, n' others may not need ta cuz stack pages may be
discontiguous n' can be allocated n' busted out on demand.
.LP
Da attribute mechanizzle has been designed up in big-ass measure fo' extensibility.
Future extensions ta tha attribute mechanizzle or to
any attributes object defined up in dis volume of IEEE\ Std\ 1003.1-2001
has ta be done wit care so as not ta affect
binary-compatibility.
.LP
Attributes objects, even if allocated by meanz of dynamic allocation
functions like fuckin \fImalloc\fP(), may have they size fixed at compile
time. This means, fo' example, a \fIpthread_create\fP() up in a implementation
with extensions ta \fBpthread_attr_t\fP cannot
look beyond tha area dat tha binary application assumes is valid.
This suggests dat implementations should maintain a size field
in tha attributes object, as well as possibly version shiznit,
if extensions up in different directions (possibly by different
vendors) is ta be accommodated.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIpthread_attr_getstackaddr\fP(), \fIpthread_attr_getstacksize\fP(),
\fIpthread_attr_getdetachstate\fP(), \fIpthread_create\fP(), the
Base Definitions volume of IEEE\ Std\ 1003.1-2001, \fI<pthread.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
