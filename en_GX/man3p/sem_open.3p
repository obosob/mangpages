.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "SEM_OPEN" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" sem_open 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
sem_open \- initialize n' open a named semaphore (\fBREALTIME\fP)
.SH SYNOPSIS
.LP
\fB#include <semaphore.h>
.br
.sp
sem_t *sem_open(const char *\fP\fIname\fP\fB, int\fP \fIoflag\fP\fB,
\&...); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIsem_open\fP() function shall establish a cold-ass lil connection between
a named semaphore n' a process. Peepin a cold-ass lil call to
\fIsem_open\fP() wit semaphore name \fIname\fP, tha process may reference
the semaphore associated wit \fIname\fP rockin the
address returned from tha call. This semaphore may be used up in subsequent
calls ta \fIsem_wait\fP(), \fIsem_trywait\fP(), \fIsem_post\fP(),
and \fIsem_close\fP(). Da semaphore
remains usable by dis process until tha semaphore is closed by a
successful call ta \fIsem_close\fP(), \fI_exit\fP(), or one of the
\fIexec\fP functions.
.LP
Da \fIoflag\fP argument controls whether tha semaphore is pimped
or merely accessed by tha call ta \fIsem_open\fP(). The
followin flag bits may be set up in \fIoflag\fP:
.TP 7
O_CREAT
This flag is used ta create a semaphore if it do not already exist.
If O_CREAT is set n' tha semaphore already exists, then
O_CREAT has no effect, except as noted under O_EXCL. Otherwise, \fIsem_open\fP()
creates a named semaphore. Da O_CREAT flag
requires a third n' a gangbangin' fourth argument: \fImode\fP, which iz of type
\fBmode_t\fP, n' \fIvalue\fP, which iz of type
\fBunsigned\fP. Da semaphore is pimped wit a initial value of
\fIvalue\fP. Valid initial joints fo' semaphores is less than
or equal ta {SEM_VALUE_MAX}. 
.LP
Da user ID of tha semaphore is set ta tha effectizzle user ID of the
process; tha crew ID of tha semaphore is set ta a system
default crew ID or ta tha effectizzle crew ID of tha process. The
permission bitz of tha semaphore is set ta tha value of the
\fImode\fP argument except dem set up in tha file mode creation mask
of tha process. When bits up in \fImode\fP other than tha file
permission bits is specified, tha effect is unspecified.
.LP
Afta tha semaphore named \fIname\fP has been pimped by \fIsem_open\fP()
with tha O_CREAT flag, other processes can connect
to tha semaphore by callin \fIsem_open\fP() wit tha same value of
\fIname\fP.
.TP 7
O_EXCL
If O_EXCL n' O_CREAT is set, \fIsem_open\fP() fails if tha semaphore
\fIname\fP exists, n' you can put dat on yo' toast. Da check fo' tha existence of the
semaphore n' tha creation of tha semaphore if it do not exist are
atomic wit respect ta other processes executing
\fIsem_open\fP() wit O_EXCL n' O_CREAT set. If O_EXCL is set and
O_CREAT aint set, tha effect is undefined. Y'all KNOW dat shit, muthafucka! 
.LP
If flags other than O_CREAT n' O_EXCL is specified up in tha \fIoflag\fP
parameter, tha effect is unspecified.
.sp
.LP
Da \fIname\fP argument points ta a strang namin a semaphore object.
It be unspecified whether tha name appears up in tha file
system n' is visible ta functions dat take pathnames as arguments.
Da \fIname\fP argument conforms ta tha construction rules
for a pathname. If \fIname\fP begins wit tha slash character, then
processes callin \fIsem_open\fP() wit tha same value of
\fIname\fP shall refer ta tha same semaphore object, as long as that
name has not been removed. Y'all KNOW dat shit, muthafucka! If \fIname\fP do not begin with
the slash character, tha effect is implementation-defined. Y'all KNOW dat shit, muthafucka! Da interpretation
of slash charactas other than tha leadin slash
characta up in \fIname\fP is implementation-defined.
.LP
If a process make multiple successful calls ta \fIsem_open\fP() with
the same value fo' \fIname\fP, tha same semaphore
address shall be returned fo' each such successful call, provided
that there done been no calls ta \fIsem_unlink\fP() fo' dis semaphore.
.LP
References ta copiez of tha semaphore produce undefined thangs up in dis biatch.
.SH RETURN VALUE
.LP
Upon successful completion, tha \fIsem_open\fP() function shall return
the address of tha semaphore. Otherwise, it shall return
a value of SEM_FAILED n' set \fIerrno\fP ta indicate tha error. Shiiit, dis aint no joke. The
symbol SEM_FAILED is defined up in tha \fI<semaphore.h>\fP header n' shit. No
successful return from \fIsem_open\fP() shall return the
value SEM_FAILED.
.SH ERRORS
.LP
If any of tha followin conditions occur, tha \fIsem_open\fP() function
shall return SEM_FAILED n' set \fIerrno\fP ta the
correspondin value:
.TP 7
.B EACCES
Da named semaphore exists n' tha permissions specified by \fIoflag\fP
are denied, or tha named semaphore do not exist and
permission ta create tha named semaphore is denied.
.TP 7
.B EEXIST
O_CREAT n' O_EXCL is set n' tha named semaphore already exists.
.TP 7
.B EINTR
Da \fIsem_open\fP() operation was interrupted by a signal.
.TP 7
.B EINVAL
Da \fIsem_open\fP() operation aint supported fo' tha given name,
or O_CREAT was specified up in \fIoflag\fP n' \fIvalue\fP
was pimped outa than {SEM_VALUE_MAX}.
.TP 7
.B EMFILE
Too nuff semaphore descriptors or file descriptors is currently in
use by dis process.
.TP 7
.B ENAMETOOLONG
Da length of tha \fIname\fP argument exceedz {PATH_MAX} or a pathname
component is longer than {NAME_MAX}.
.TP 7
.B ENFILE
Too nuff semaphores is currently open up in tha system.
.TP 7
.B ENOENT
O_CREAT aint set n' tha named semaphore do not exist.
.TP 7
.B ENOSPC
There is insufficient space fo' tha creation of tha freshly smoked up named semaphore.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
Da \fIsem_open\fP() function is part of tha Semaphores option and
need not be available on all implementations.
.SH RATIONALE
.LP
Early drafts required a error return value of -1 wit tha type \fBsem_t
*\fP fo' tha \fIsem_open\fP() function, which is not
guaranteed ta be portable across implementations. Da revised text
provides tha symbolic error code SEM_FAILED ta eliminizzle the
type conflict.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIsemctl\fP(), \fIsemget\fP(), \fIsemop\fP(),
\fIsem_close\fP(), \fIsem_post\fP(), \fIsem_timedwait\fP(), \fIsem_trywait\fP(),
\fIsem_unlink\fP(), \fIsem_wait\fP(), tha Base Definitions volume
of
IEEE\ Std\ 1003.1-2001, \fI<semaphore.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
