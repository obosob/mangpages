.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "SOCKET" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" socket 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
socket \- create a endpoint fo' communication
.SH SYNOPSIS
.LP
\fB#include <sys/socket.h>
.br
.sp
int socket(int\fP \fIdomain\fP\fB, int\fP \fItype\fP\fB, int\fP \fIprotocol\fP\fB);
.br
\fP
.SH DESCRIPTION
.LP
Da \fIsocket\fP() function shall create a unbound socket up in a cold-ass lil communications
domain, n' return a gangbangin' file descriptor dat can be
used up in lata function calls dat operate on sockets.
.LP
Da \fIsocket\fP() function takes tha followin arguments:
.TP 7
\fIdomain\fP
Specifies tha communications domain up in which a socket is ta be pimped.
.TP 7
\fItype\fP
Specifies tha type of socket ta be pimped.
.TP 7
\fIprotocol\fP
Specifies a particular protocol ta be used wit tha socket. Right back up in yo muthafuckin ass. Specifying
a \fIprotocol\fP of 0 causes \fIsocket\fP() ta use an
unspecified default protocol appropriate fo' tha axed socket
type.
.sp
.LP
Da \fIdomain\fP argument specifies tha address crew used up in the
communications domain. I aint talkin' bout chicken n' gravy biatch. Da address crews supported by the
system is implementation-defined.
.LP
Symbolic constants dat can be used fo' tha domain argument is defined
in tha \fI<sys/socket.h>\fP header.
.LP
Da \fItype\fP argument specifies tha socket type, which determines
the semantics of communication over tha socket. The
followin socket types is defined; implementations may specify additional
socket types:
.TP 7
SOCK_STREAM
Provides sequenced, reliable, bidirectional, connection-mode byte
streams, n' may provide a transmission mechanizzle for
out-of-band data.
.TP 7
SOCK_DGRAM
Provides datagrams, which is connectionless-mode, unreliable lyrics
of fixed maximum length.
.TP 7
SOCK_SEQPACKET
Provides sequenced, reliable, bidirectional, connection-mode transmission
paths fo' recordz fo' realz. A record can be busted rockin one or
more output operations n' received rockin one or mo' input operations,
but a single operation never transfers part of mo' than
one record. Y'all KNOW dat shit, muthafucka! Record boundaries is visible ta tha receiver via the
MSG_EOR flag.
.sp
.LP
If tha \fIprotocol\fP argument is non-zero, it shall specify a protocol
that is supported by tha address crew. If the
\fIprotocol\fP argument is zero, tha default protocol fo' dis address
family n' type shall be used. Y'all KNOW dat shit, muthafucka! Da protocols supported by
the system is implementation-defined.
.LP
Da process may need ta have appropriate privileges ta use tha \fIsocket\fP()
function or ta create some sockets.
.SH RETURN VALUE
.LP
Upon successful completion, \fIsocket\fP() shall return a non-negative
integer, tha socket file descriptor. Shiiit, dis aint no joke. Otherwise, a value
of -1 shall be returned n' \fIerrno\fP set ta indicate tha error.
.SH ERRORS
.LP
Da \fIsocket\fP() function shall fail if:
.TP 7
.B EAFNOSUPPORT
.sp
Da implementation do not support tha specified address crew.
.TP 7
.B EMFILE
No mo' file descriptors is available fo' dis process.
.TP 7
.B ENFILE
No mo' file descriptors is available fo' tha system.
.TP 7
.B EPROTONOSUPPORT
.sp
Da protocol aint supported by tha address crew, or tha protocol
is not supported by tha implementation.
.TP 7
.B EPROTOTYPE
Da socket type aint supported by tha protocol.
.sp
.LP
Da \fIsocket\fP() function may fail if:
.TP 7
.B EACCES
Da process aint gots appropriate privileges.
.TP 7
.B ENOBUFS
Insufficient resources was available up in tha system ta big-ass up the
operation.
.TP 7
.B ENOMEM
Insufficient memory was available ta fulfill tha request.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
Da documentation fo' specific address crews specifies which protocols
each address crew supports, n' you can put dat on yo' toast. Da documentation for
specific protocols specifies which socket types each protocol supports.
.LP
Da application can determine whether a address crew is supported
by tryin ta create a socket wit \fIdomain\fP set ta the
protocol up in question.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIaccept\fP(), \fIbind\fP(), \fIconnect\fP(),
\fIgetsockname\fP(), \fIgetsockopt\fP(), \fIlisten\fP(), \fIrecv\fP(),
\fIrecvfrom\fP(), \fIrecvmsg\fP(), \fIsend\fP(), \fIsendmsg\fP(),
\fIsetsockopt\fP(), \fIshutdown\fP(), \fIsocketpair\fP(), the
Base Definitions volume of IEEE\ Std\ 1003.1-2001, \fI<netinet/in.h>\fP,
\fI<sys/socket.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
