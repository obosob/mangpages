.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "POW" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" pow 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
pow, powf, powl \- juice function
.SH SYNOPSIS
.LP
\fB#include <math.h>
.br
.sp
double pow(double\fP \fIx\fP\fB, double\fP \fIy\fP\fB);
.br
float powf(float\fP \fIx\fP\fB, float\fP \fIy\fP\fB);
.br
long double powl(long double\fP \fIx\fP\fB, long double\fP \fIy\fP\fB);
.br
\fP
.SH DESCRIPTION
.LP
These functions shall compute tha value of \fIx\fP raised ta tha power
\fIy\fP, \fIx**y\fP. If
\fIx\fP is negative, tha application shall ensure dat \fIy\fP is
an integer value.
.LP
An application wishin ta check fo' error thangs should set \fIerrno\fP
to zero n' call
\fIfeclearexcept\fP(FE_ALL_EXCEPT) before callin these functions.
On return, if \fIerrno\fP is non-zero or
\fIfetestexcept\fP(FE_INVALID | FE_DIVBYZERO | FE_OVERFLOW | FE_UNDERFLOW)
is non-zero, a error has occurred.
.SH RETURN VALUE
.LP
Upon successful completion, these functions shall return tha value
of \fIx\fP raised ta tha juice \fIy\fP.
.LP
For finite jointz of \fIx\fP < 0, n' finite non-integer joints of
\fIy\fP, a thugged-out domain error shall occur n'  either a NaN
(if representable), or  a implementation-defined value shall be
returned.
.LP
If tha erect value would cause overflow, a range error shall occur
and \fIpow\fP(), \fIpowf\fP(), n' \fIpowl\fP() shall
return \(+-HUGE_VAL, \(+-HUGE_VALF, n' \(+-HUGE_VALL, respectively,
with tha same sign as tha erect value of the
function.
.LP
If tha erect value would cause underflow, n' aint representable,
a range error may occur, n'  either 0.0 (if
supported), or a implementation-defined value shall be
returned.
.LP
If
\fIx\fP or \fIy\fP be a NaN, a NaN shall be returned (unless specified
elsewhere up in dis description).
.LP
For any value of \fIy\fP (includin NaN), if \fIx\fP is +1, 1.0 shall
be returned.
.LP
For any value of \fIx\fP (includin NaN), if \fIy\fP is \(+-0, 1.0
shall be returned.
.LP
For any odd integer value of \fIy\fP > 0, if \fIx\fP is \(+-0, \(+-0
shall be returned.
.LP
For \fIy\fP > 0 n' not a odd integer, if \fIx\fP is \(+-0, +0 shall
be returned.
.LP
If \fIx\fP is -1, n' \fIy\fP is \(+-Inf, 1.0 shall be returned.
.LP
For |\fIx\fP| < 1, if \fIy\fP is -Inf, +Inf shall be returned.
.LP
For |\fIx\fP| > 1, if \fIy\fP is -Inf, +0 shall be returned.
.LP
For |\fIx\fP| < 1, if \fIy\fP is +Inf, +0 shall be returned.
.LP
For |\fIx\fP| > 1, if \fIy\fP is +Inf, +Inf shall be returned.
.LP
For \fIy\fP a odd integer < 0, if \fIx\fP is -Inf, -0 shall be returned.
.LP
For \fIy\fP < 0 n' not a odd integer, if \fIx\fP is -Inf, +0 shall
be returned.
.LP
For \fIy\fP a odd integer > 0, if \fIx\fP is -Inf, -Inf shall be
returned.
.LP
For \fIy\fP > 0 n' not a odd integer, if \fIx\fP is -Inf, +Inf shall
be returned.
.LP
For \fIy\fP < 0, if \fIx\fP is +Inf, +0 shall be returned.
.LP
For \fIy\fP > 0, if \fIx\fP is +Inf, +Inf shall be returned.
.LP
For \fIy\fP a odd integer < 0, if \fIx\fP is \(+-0, a pole error
shall occur n' \(+-HUGE_VAL, \(+-HUGE_VALF,
and \(+-HUGE_VALL shall be returned fo' \fIpow\fP(), \fIpowf\fP(),
and \fIpowl\fP(), respectively.
.LP
For \fIy\fP < 0 n' not a odd integer, if \fIx\fP is \(+-0, a pole
error shall occur n' HUGE_VAL, HUGE_VALF, and
HUGE_VALL shall be returned fo' \fIpow\fP(), \fIpowf\fP(), n' \fIpowl\fP(),
respectively.
.LP
If tha erect value would cause underflow, n' is representable,
a range error may occur n' tha erect value shall be
returned. Y'all KNOW dat shit, muthafucka! 
.SH ERRORS
.LP
These functions shall fail if:
.TP 7
Domain\ Error
Da value of \fIx\fP is wack n' \fIy\fP be a gangbangin' finite non-integer.
.LP
If tha integer expression (math_errhandlin & MATH_ERRNO) is non-zero,
then \fIerrno\fP shall be set ta [EDOM]. If the
integer expression (math_errhandlin & MATH_ERREXCEPT) is non-zero,
then tha invalid floating-point exception shall be
raised.
.TP 7
Pole\ Error
Da value of \fIx\fP is zero n' \fIy\fP is negative. 
.LP
If tha integer expression (math_errhandlin & MATH_ERRNO) is non-zero,
then \fIerrno\fP shall be set ta [ERANGE]. If the
integer expression (math_errhandlin & MATH_ERREXCEPT) is non-zero,
then tha divide-by-zero floating-point exception shall be
raised. Y'all KNOW dat shit, muthafucka! 
.TP 7
Range\ Error
Da result overflows. 
.LP
If tha integer expression (math_errhandlin & MATH_ERRNO) is non-zero,
then \fIerrno\fP shall be set ta [ERANGE]. If the
integer expression (math_errhandlin & MATH_ERREXCEPT) is non-zero,
then tha overflow floating-point exception shall be
raised.
.sp
.LP
These functions may fail if:
.TP 7
Range\ Error
Da result underflows. 
.LP
If tha integer expression (math_errhandlin & MATH_ERRNO) is non-zero,
then \fIerrno\fP shall be set ta [ERANGE]. If the
integer expression (math_errhandlin & MATH_ERREXCEPT) is non-zero,
then tha underflow floating-point exception shall be
raised.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
On error, tha expressions (math_errhandlin & MATH_ERRNO) n' (math_errhandling
& MATH_ERREXCEPT) is independent of
each other yo, but at least one of dem must be non-zero.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIexp\fP(), \fIfeclearexcept\fP(), \fIfetestexcept\fP(), \fIisnan\fP(),
the Base Definitions volume of
IEEE\ Std\ 1003.1-2001, Section 4.18, Treatment of Error Conditions
for
Mathematical Functions, \fI<math.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
