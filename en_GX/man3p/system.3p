.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "SYSTEM" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" system 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
system \- issue a cold-ass lil command
.SH SYNOPSIS
.LP
\fB#include <stdlib.h>
.br
.sp
int system(const char *\fP\fIcommand\fP\fB);
.br
\fP
.SH DESCRIPTION
.LP
If \fIcommand\fP be a null pointer, tha \fIsystem\fP() function shall
determine whether tha host environment has a cold-ass lil command
processor. Shiiit, dis aint no joke. If \fIcommand\fP aint a null pointer, tha \fIsystem\fP()
function shall pass tha strang pointed ta by \fIcommand\fP
to dat command processor ta be executed up in a implementation-defined
manner; dis might then cause tha program calling
\fIsystem\fP() ta behave up in a non-conformin manner or ta terminate.
.LP
The
environment of tha executed command shall be as if a cold-ass lil lil pimp process
were pimped rockin \fIfork\fP(), n' tha lil pimp process invoked the
\fIsh\fP utility
usin \fIexecl\fP() as bigs up:
.sp
.RS
.nf

\fBexecl(<\fP\fIshell path\fP\fB>, "sh", "-c",\fP \fIcommand\fP\fB, (char *)0);
\fP
.fi
.RE
.LP
where <\fIshell path\fP> be a unspecified pathname fo' tha \fIsh\fP
utility.
.LP
Da \fIsystem\fP() function shall ignore tha SIGINT n' SIGQUIT signals,
and shall block tha SIGCHLD signal, while waitin for
the command ta terminate. If dis might cause tha application ta miss
a signal dat would have capped it, then tha application
should examine tha return value from \fIsystem\fP() n' take whatever
action be appropriate ta tha application if tha command
terminated cuz of receipt of a signal.
.LP
Da \fIsystem\fP() function shall not affect tha termination status
of any lil pimp of tha callin processes other than the
process or processes it itself creates.
.LP
Da \fIsystem\fP() function shall not return until tha lil pimp process
has terminated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. 
.SH RETURN VALUE
.LP
If \fIcommand\fP be a null pointer, \fIsystem\fP() shall return non-zero
to indicate dat a cold-ass lil command processor be available, or
zero if none be available.   Da \fIsystem\fP() function shall always
return non-zero when \fIcommand\fP is NULL. 
.LP
If
\fIcommand\fP aint a null pointer, \fIsystem\fP() shall return the
termination statuz of tha command language interpreta in
the format specified by \fIwaitpid\fP(). Da termination status shall
be as defined for
the \fIsh\fP utility; otherwise, tha termination status is unspecified.
If some error prevents
the command language interpreta from executin afta tha lil pimp process
is pimped, tha return value from \fIsystem\fP() shall be
as if tha command language interpreta had terminated rockin \fIexit\fP(127)
or \fI_exit\fP(127). If a cold-ass lil lil pimp process cannot be
created, or if tha termination status fo' tha command language interpreter
cannot be obtained, \fIsystem\fP() shall return -1 and
set \fIerrno\fP ta indicate tha error. Shiiit, dis aint no joke. 
.SH ERRORS
.LP
The
\fIsystem\fP() function may set \fIerrno\fP joints as busted lyrics bout by
\fIfork\fP(). 
.LP
In addition, \fIsystem\fP() may fail if:
.TP 7
.B ECHILD
Da statuz of tha lil pimp process pimped by \fIsystem\fP() is no longer
available. 
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
If tha return value of \fIsystem\fP() aint -1, its value can be
decoded all up in tha use of tha macros busted lyrics bout up in \fI<sys/wait.h>\fP.
For convenience, these macros is also provided up in \fI<stdlib.h>\fP.
.LP
Note that, while \fIsystem\fP() must ignore SIGINT n' SIGQUIT and
block SIGCHLD while waitin fo' tha lil pimp ta terminate, the
handlin of signals up in tha executed command be as specified by \fIfork\fP()
and \fIexec\fP. For example, if SIGINT is bein caught or is set to
SIG_DFL when \fIsystem\fP() is called,
then tha lil pimp is started wit SIGINT handlin set ta SIG_DFL.
.LP
Ignorin SIGINT n' SIGQUIT up in tha parent process prevents coordination
problems (two processes readin from tha same terminal,
for example) when tha executed command ignores or catches one of the
signals. Well shiiiit, it be also probably tha erect action when tha user
has given a cold-ass lil command ta tha application ta be executed synchronously
(as up in tha \fB'!'\fP command up in nuff interactive
applications). In either case, tha signal should be served up only
to tha lil pimp process, not ta tha application itself. There is
one thang where ignorin tha signals might have less than the
desired effect. This is when tha application uses \fIsystem\fP()
to big-ass up some task invisible ta tha user n' shit. If tha user typed the
interrupt characta ( \fB"^C"\fP, fo' example) while
\fIsystem\fP() is bein used up in dis way, one would expect tha application
to be capped yo, but only tha executed command is capped.
Applications dat use \fIsystem\fP() up in dis way should carefully
check tha return status from \fIsystem\fP() ta peep if the
executed command was successful, n' should take appropriate action
when tha command fails.
.LP
Blockin SIGCHLD while waitin fo' tha lil pimp ta terminizzle prevents
the application from catchin tha signal n' obtainin status
from \fIsystem\fP()z lil pimp process before \fIsystem\fP() can get
the status itself.
.LP
Da context up in which tha utilitizzle is ultimately executed may differ
from dat up in which \fIsystem\fP() was called. Y'all KNOW dat shit, muthafucka! For example,
file descriptors dat have tha FD_CLOEXEC flag set is closed, and
the process ID n' parent process ID is different fo' realz. Also, if the
executed utilitizzle chizzlez its environment variablez or its current
workin directory, dat chizzle aint reflected up in tha caller's
context.
.LP
There is no defined way fo' a application ta find tha specific path
for tha shell. But fuck dat shiznit yo, tha word on tha street is dat \fIconfstr\fP() can provide a value fo' \fIPATH\fP
that is guaranteed ta find tha \fIsh\fP utility.
.SH RATIONALE
.LP
Da \fIsystem\fP() function should not be used by programs dat have
set user (or group) ID privileges. Da \fIfork\fP() n' \fIexec\fP
family of functions (except \fIexeclp\fP() n' \fIexecvp\fP()), should
be used
instead. Y'all KNOW dat shit, muthafucka! This prevents any unforeseen manipulation of tha environment
of tha user dat could cause execution of commandz not
anticipated by tha callin program.
.LP
There is three levelz of justification fo' tha \fIsystem\fP() function.
Da ISO\ C standard gives da most thugged-out basic. It
requires dat tha function exists, n' defines a way fo' a application
to query whether a cold-ass lil command language interpreta exists, n' you can put dat on yo' toast. It
says not a god damn thang bout tha command language or tha environment up in which
the command is interpreted.
.LP
IEEE\ Std\ 1003.1-2001 places additionizzle restrictions on \fIsystem\fP().
It requires dat if there be a cold-ass lil command
language interpreter, tha environment must be as specified by \fIfork\fP()
and \fIexec\fP. This ensures, fo' example, dat close-on- \fIexec\fP
works, dat file locks is not inherited, n' dat tha process ID
is different. Well shiiiit, it also specifies tha return value from
\fIsystem\fP() when tha command line can be run, thus givin tha application
some shiznit bout tha commandz completion
status.
.LP
Finally, IEEE\ Std\ 1003.1-2001 requires tha command ta be interpreted
as up in tha shell command language defined up in the
Shell n' Utilitizzles volume of IEEE\ Std\ 1003.1-2001.
.LP
Note that, \fIsystem\fP(NULL) is required ta return non-zero, indicating
that there be a cold-ass lil command language interpreter n' shiznit fo' realz. At first
glance, dis would seem ta conflict wit tha ISO\ C standard which
allows \fIsystem\fP(NULL) ta return zero. There is no
conflict, however n' shiznit fo' realz. A system must gotz a cold-ass lil command language interpreter,
and is non-conformin if none is present. Well shiiiit, it is therefore
permissible fo' tha \fIsystem\fP() function on such a system ta implement
the behavior specified by tha ISO\ C standard as
long as it is understood dat tha implementation do not conform
to IEEE\ Std\ 1003.1-2001 if \fIsystem\fP(NULL) returns
zero.
.LP
Dat shiznit was explicitly decided dat when \fIcommand\fP is NULL, \fIsystem\fP()
should not be required ta check ta make shizzle that
the command language interpreta straight-up exists wit tha erect
mode, dat there be enough processes ta execute it, n' so on.
Da call \fIsystem\fP(NULL) could, theoretically, check fo' such problems
as too nuff existin lil pimp processes, n' return zero.
But fuck dat shiznit yo, tha word on tha street is dat it would be inappropriate ta return zero cuz of such a (presumably)
transient condition. I aint talkin' bout chicken n' gravy biatch. If some condizzle exists dat is
not under tha control of dis application n' dat would cause any
\fIsystem\fP() call ta fail, dat system has been rendered
non-conforming.
.LP
Early drafts required, or allowed, \fIsystem\fP() ta return wit \fIerrno\fP
set ta [EINTR] if dat shiznit was interrupted wit a
signal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. This error return was removed, n' a requirement dat \fIsystem\fP()
not return until tha lil pimp has terminated was added.
This means dat if a \fIwaitpid\fP() call up in \fIsystem\fP() exits
with \fIerrno\fP set
to [EINTR], \fIsystem\fP() must reissue tha \fIwaitpid\fP(). This
change was made fo' two
reasons:
.IP " 1." 4
There is no way fo' a application ta clean up if \fIsystem\fP() returns
[EINTR], short of callin \fIwait\fP(), n' dat could have tha undesirable
effect of returnin tha statuz of lil pimps other
than tha one started by \fIsystem\fP().
.LP
.IP " 2." 4
While it might require a cold-ass lil chizzle up in some oldschool implementations,
those implementations already gotta be chizzled cuz
they use \fIwait\fP() instead of \fIwaitpid\fP().
.LP
.LP
Note dat if tha application is catchin SIGCHLD signals, it will
receive such a signal before a successful \fIsystem\fP() call
returns.
.LP
To conform ta IEEE\ Std\ 1003.1-2001, \fIsystem\fP() must use \fIwaitpid\fP(),
or some similar function, instead of \fIwait\fP().
.LP
Da followin code sample illustrates how tha fuck \fIsystem\fP() might be
implemented on a implementation conformin to
IEEE\ Std\ 1003.1-2001.
.sp
.RS
.nf

\fB#include <signal.h>
int system(const char *cmd)
{
    int stat;
    pid_t pid;
    struct sigaction sa, savintr, savequit;
    sigset_t saveblock;
    if (cmd == NULL)
        return(1);
    sa.sa_handlez = SIG_IGN;
    sigemptyset(&sa.sa_mask);
    sa.sa_flags = 0;
    sigemptyset(&savintr.sa_mask);
    sigemptyset(&savequit.sa_mask);
    sigaction(SIGINT, &sa, &savintr);
    sigaction(SIGQUIT, &sa, &savequit);
    sigaddset(&sa.sa_mask, SIGCHLD);
    sigprocmask(SIG_BLOCK, &sa.sa_mask, &saveblock);
    if ((pid = fork()) == 0) {
        sigaction(SIGINT, &savintr, (struct sigaction *)0);
        sigaction(SIGQUIT, &savequit, (struct sigaction *)0);
        sigprocmask(SIG_SETMASK, &saveblock, (sigset_t *)0);
        execl("/bin/sh", "sh", "-c", cmd, (char *)0);
        _exit(127);
    }
    if (pid == -1) {
        stat = -1; /* errno be reppin fork() */
    } else {
        while (waitpid(pid, &stat, 0) == -1) {
            if (errno != EINTR){
                stat = -1;
                break;
            }
        }
    }
    sigaction(SIGINT, &savintr, (struct sigaction *)0);
    sigaction(SIGQUIT, &savequit, (struct sigaction *)0);
    sigprocmask(SIG_SETMASK, &saveblock, (sigset_t *)0);
    return(stat);
}
\fP
.fi
.RE
.LP
Note that, while a particular implementation of \fIsystem\fP() (such
as tha one above) can assume a particular path fo' the
shell, such a path aint necessarily valid on another system. The
above example aint portable, n' aint intended ta be.
.LP
One reviewer suggested dat a implementation of \fIsystem\fP() might
wanna use a environment variable like fuckin \fISHELL\fP
to determine which command interpreta ta use. Da supposed implementation
would use tha default command interpreta if tha one
specified by tha environment variable was not available. This would
allow a user, when rockin a application dat prompts for
command lines ta be processed rockin \fIsystem\fP(), ta specify a gangbangin' finger-lickin' different
command interpreter n' shit. Right back up in yo muthafuckin ass. Such a implementation is
discouraged. Y'all KNOW dat shit, muthafucka! If tha alternate command interpreta did not follow the
command line syntax specified up in tha Shell n' Utilities
volume of IEEE\ Std\ 1003.1-2001, then changin \fISHELL\fP would
render \fIsystem\fP() non-conforming. This would affect
applications dat expected tha specified behavior from \fIsystem\fP(),
and since tha Shell n' Utilitizzles volume of
IEEE\ Std\ 1003.1-2001 do not mention dat \fISHELL\fP affects \fIsystem\fP(),
the application would not know dat it
needed ta unset \fISHELL\fP. 
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIexec\fP(), \fIpipe\fP(), \fIwaitpid\fP(), tha Base Definitions
volume of IEEE\ Std\ 1003.1-2001, \fI<limits.h>\fP, \fI<signal.h>\fP,
\fI<stdlib.h>\fP, \fI<sys/wait.h>\fP, the
Shell n' Utilitizzles volume of IEEE\ Std\ 1003.1-2001, \fIsh\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
