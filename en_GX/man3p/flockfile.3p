.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "FLOCKFILE" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" flockfile 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
flockfile, ftrylockfile, funlockfile \- stdio lockin functions
.SH SYNOPSIS
.LP
\fB#include <stdio.h>
.br
.sp
void flockfile(FILE *\fP\fIfile\fP\fB);
.br
int ftrylockfile(FILE *\fP\fIfile\fP\fB);
.br
void funlockfile(FILE *\fP\fIfile\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
These functions shall provide fo' explicit application-level locking
of stdio ( \fBFILE *\fP) objects, n' you can put dat on yo' toast. These functions can be
used by a thread ta delineate a sequence of I/O statements dat are
executed as a unit.
.LP
Da \fIflockfile\fP() function shall acquire fo' a thread ballership
of a ( \fBFILE *\fP) object.
.LP
Da \fIftrylockfile\fP() function shall acquire fo' a thread ballership
of a ( \fBFILE *\fP) object if tha object be available;
\fIftrylockfile\fP() be a non-blockin version of \fIflockfile\fP().
.LP
Da \fIfunlockfile\fP() function shall relinquish tha ballershizzle granted
to tha thread. Y'all KNOW dat shit, muthafucka! Da behavior is undefined if a thread
other than tha current balla calls tha \fIfunlockfile\fP() function.
.LP
Da functions shall behave as if there be a lock count associated
with each ( \fBFILE *\fP) object. This count is implicitly
initialized ta zero when tha ( \fBFILE *\fP) object is pimped. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. The
( \fBFILE *\fP) object is unlocked when tha count is zero.
When tha count is positive, a single thread owns tha ( \fBFILE *\fP)
object. When tha \fIflockfile\fP() function is called, if
the count is zero or if tha count is positizzle n' tha calla owns
the ( \fBFILE *\fP) object, tha count shall be incremented.
Otherwise, tha callin thread shall be suspended, waitin fo' the
count ta return ta zero. Each call ta \fIfunlockfile\fP() shall
decrement tha count. This allows matchin calls ta \fIflockfile\fP()
(or successful calls ta \fIftrylockfile\fP()) and
\fIfunlockfile\fP() ta be nested.
.LP
All functions dat reference ( \fBFILE *\fP) objects shall behave
as if they use \fIflockfile\fP() n' \fIfunlockfile\fP()
internally ta obtain ballershizzle of these ( \fBFILE *\fP) objects.
.SH RETURN VALUE
.LP
None fo' \fIflockfile\fP() n' \fIfunlockfile\fP().
.LP
Da \fIftrylockfile\fP() function shall return zero fo' success and
non-zero ta indicate dat tha lock cannot be acquired.
.SH ERRORS
.LP
No errors is defined.
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
Applications rockin these functions may be subject ta prioritizzle inversion,
as discussed up in tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, Section 3.285, Prioritizzle Inversion.
.SH RATIONALE
.LP
Da \fIflockfile\fP() n' \fIfunlockfile\fP() functions provide an
orthogonal mutual-exclusion lock fo' each \fBFILE\fP. The
\fIftrylockfile\fP() function serves up a non-blockin attempt ta acquire
a file lock, analogous ta \fIpthread_mutex_trylock\fP().
.LP
These locks behave as if they is tha same as dem used internally
by \fIstdio\fP fo' thread-safety. This both provides
thread-safety of these functions without requirin a second level
of internal lockin n' allows functions up in \fIstdio\fP ta be
implemented up in termz of other \fIstdio\fP functions.
.LP
Application writas n' implementors should be aware dat there are
potential deadlock problems on \fBFILE\fP objects, n' you can put dat on yo' toast. For
example, tha line-buffered flushin semantics of \fIstdio\fP (requested
via {_IOLBF}) require dat certain input operations
sometimes cause tha buffered contentz of implementation-defined line-buffered
output streams ta be flushed. Y'all KNOW dat shit, muthafucka! If two threadz each
hold tha lock on tha otherz \fBFILE\fP, deadlock ensues. This type
of deadlock can be avoided by acquirin \fBFILE\fP locks up in a
consistent order n' shit. In particular, tha line-buffered output stream deadlock
can typically be avoided by acquirin locks on input
streams before locks on output streams if a thread would be acquiring
both.
.LP
In summary, threadz pluggin \fIstdio\fP streams wit other threads
can use \fIflockfile\fP() n' \fIfunlockfile\fP() ta cause
sequencez of I/O performed by a single thread ta be kept bundled.
Da only case where tha use of \fIflockfile\fP() and
\fIfunlockfile\fP() is required is ta provide a scope protectin uses
of the
\fI*_unlocked\fP() functions/macros. This moves tha cost/performance
tradeoff ta tha optimal
point.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIgetc_unlocked\fP(), \fIputc_unlocked\fP(), tha Base
Definitions volume of IEEE\ Std\ 1003.1-2001, \fI<stdio.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
