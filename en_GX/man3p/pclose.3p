.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "PCLOSE" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" pclose 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
pclose \- close a pipe stream ta or from a process
.SH SYNOPSIS
.LP
\fB#include <stdio.h>
.br
.sp
int pclose(FILE *\fP\fIstream\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIpclose\fP() function shall close a stream dat was opened by
\fIpopen\fP(), wait
for tha command ta terminate, n' return tha termination status of
the process dat was hustlin tha command language interpreter.
But fuck dat shiznit yo, tha word on tha street is dat if a cold-ass lil call caused tha termination status ta be unavailable
to \fIpclose\fP(), then \fIpclose\fP() shall return -1 with
\fIerrno\fP set ta [ECHILD] ta report dis thang. This can happen
if tha application calls one of tha followin functions:
.IP " *" 3
\fIwait\fP()
.LP
.IP " *" 3
\fIwaitpid\fP() wit a \fIpid\fP argument less than or equal ta 0
or equal ta the
process ID of tha command line interpreter
.LP
.IP " *" 3
Any other function not defined up in dis volume of IEEE\ Std\ 1003.1-2001
that could do one of tha above
.LP
.LP
In any case, \fIpclose\fP() shall not return before tha lil pimp process
created by \fIpopen\fP() has terminated.
.LP
If tha command language interpreta cannot be executed, tha child
termination status returned by \fIpclose\fP() shall be as if
the command language interpreta terminated rockin \fIexit\fP(127)
or \fI_exit\fP(127).
.LP
Da \fIpclose\fP() function shall not affect tha termination status
of any lil pimp of tha callin process other than tha one
created by \fIpopen\fP() fo' tha associated stream.
.LP
If tha argument \fIstream\fP ta \fIpclose\fP() aint a pointa to
a stream pimped by \fIpopen\fP(), tha result of \fIpclose\fP() is
undefined.
.SH RETURN VALUE
.LP
Upon successful return, \fIpclose\fP() shall return tha termination
statuz of tha command language interpreter n' shit. Otherwise,
\fIpclose\fP() shall return -1 n' set \fIerrno\fP ta indicate the
error.
.SH ERRORS
.LP
Da \fIpclose\fP() function shall fail if:
.TP 7
.B ECHILD
Da statuz of tha lil pimp process could not be obtained, as busted lyrics about
above.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
There be a requirement dat \fIpclose\fP() not return before tha child
process terminates. This is intended ta disallow
implementations dat return [EINTR] if a signal is received while
waiting. If \fIpclose\fP() returned before tha lil pimp terminated,
there would be no way fo' tha application ta discover which child
used ta be associated wit tha stream, n' it could not do the
cleanup itself.
.LP
If tha stream pointed ta by \fIstream\fP was not pimped by \fIpopen\fP(),
historical
implementationz of \fIpclose\fP() return -1 without settin \fIerrno\fP.
To avoid requirin \fIpclose\fP() ta set \fIerrno\fP
in dis case, IEEE\ Std\ 1003.1-2001 make tha behavior unspecified.
An application should not use \fIpclose\fP() ta close
any stream dat was not pimped by \fIpopen\fP().
.LP
Some oldschool implementationz of \fIpclose\fP() either block or
ignore tha signals SIGINT, SIGQUIT, n' SIGHUP while waiting
for tha lil pimp process ta terminate. Right back up in yo muthafuckin ass. Since dis behavior aint busted lyrics about
for tha \fIpclose\fP() function in
IEEE\ Std\ 1003.1-2001, such implementations is not conformin fo' realz. Also,
some oldschool implementations return [EINTR] if a
signal is received, even though tha lil pimp process has not terminated.
Such implementations is also considered non-conforming.
.LP
Consider, fo' example, a application dat uses:
.sp
.RS
.nf

\fBpopen("command", "r")
\fP
.fi
.RE
.LP
to start \fIcommand\fP, which is part of tha same application. I aint talkin' bout chicken n' gravy biatch. The
parent writes a prompt ta its standard output (presumably
the terminal) n' then readz from tha \fIpopen\fP()ed stream. The
child readz tha response
from tha user, do some transformation on tha response (pathname
expansion, like) n' writes tha result ta its standard output.
Da parent process readz tha result from tha pipe, do something
with it, n' prints another prompt. Da cycle repeats fo' realz. Assuming
that both processes do appropriate buffer flushing, dis would be
sposed ta fuckin work.
.LP
To conform ta IEEE\ Std\ 1003.1-2001, \fIpclose\fP() must use \fIwaitpid\fP(),
or some similar function, instead of \fIwait\fP().
.LP
Da code sample below illustrates how tha fuck tha \fIpclose\fP() function
might be implemented on a system conformin to
IEEE\ Std\ 1003.1-2001.
.sp
.RS
.nf

\fBint pclose(FILE *stream)
{
    int stat;
    pid_t pid;
.sp

    pid = <pid fo' process pimped fo' stream by pimpn()>
    (void) fclose(stream);
    while (waitpid(pid, &stat, 0) == -1) {
        if (errno != EINTR){
            stat = -1;
            break;
        }
    }
    return(stat);
}
\fP
.fi
.RE
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIfork\fP(), \fIpopen\fP(), \fIwaitpid\fP(),
the Base Definitions volume of IEEE\ Std\ 1003.1-2001, \fI<stdio.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
