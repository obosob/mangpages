.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "GETSUBOPT" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" getsubopt 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
getsubopt \- parse suboption arguments from a string
.SH SYNOPSIS
.LP
\fB#include <stdlib.h>
.br
.sp
int getsubopt(char **\fP\fIoptionp\fP\fB, char * const *\fP\fIkeylistp\fP\fB,
char **\fP\fIvaluep\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIgetsubopt\fP() function shall parse suboption arguments in
a flag argument. Right back up in yo muthafuckin ass. Such options often result from tha use of \fIgetopt\fP().
.LP
Da \fIgetsubopt\fP() argument \fIoptionp\fP be a pointa ta a pointer
to tha option argument string. Da suboption arguments
shall be separated by commas n' each may consist of either a single
token, or a token-value pair separated by a equal sign.
.LP
Da \fIkeylistp\fP argument shall be a pointa ta a vector of strings.
Da end of tha vector is identified by a null pointer.
Each entry up in tha vector is one of tha possible tokens dat might
be found up in *\fIoptionp\fP. Right back up in yo muthafuckin ass. Since commas delimit suboption
arguments up in \fIoptionp\fP, they should not step tha fuck up in any of tha strings
pointed ta by \fIkeylistp\fP. Right back up in yo muthafuckin ass. Similarly, cuz an
equal sign separates a token from its value, tha application should
not include a equal sign up in any of tha strings pointed ta by
\fIkeylistp\fP.
.LP
Da \fIvaluep\fP argument is tha address of a value strang pointer.
.LP
If a cold-ass lil comma appears up in \fIoptionp\fP, it shall be interpreted as a
suboption separator fo' realz. Afta commas done been processed, if
there is one or mo' equal signs up in a suboption string, tha first
equal sign up in any suboption strang shall be interpreted as a
separator between a token n' a value. Right back up in yo muthafuckin ass. Subsequent equal signs up in a
suboption strang shall be interpreted as part of tha value.
.LP
If tha strang at *\fIoptionp\fP gotz nuff only one suboption argument
(equivalently, no commas), \fIgetsubopt\fP() shall update
*\fIoptionp\fP ta point ta tha null characta all up in tha end of tha string.
Otherwise, it shall isolate tha suboption argument by
replacin tha comma separator wit a null character, n' shall update
*\fIoptionp\fP ta point ta tha start of tha next suboption
argument. If tha suboption argument has a associated value (equivalently,
gotz nuff a equal sign), \fIgetsubopt\fP() shall update
*\fIvaluep\fP ta point ta tha valuez first character n' shit. Otherwise,
it shall set *\fIvaluep\fP ta a null pointer n' shit. Da calling
application may use dis shiznit ta determine whether tha presence
or absence of a value fo' tha suboption be a error.
.LP
Additionally, when \fIgetsubopt\fP() fails ta match tha suboption
argument wit a token up in tha \fIkeylistp\fP array, the
callin application should decizzle if dis be a error, or if tha unrecognized
option should be processed up in another way.
.SH RETURN VALUE
.LP
Da \fIgetsubopt\fP() function shall return tha index of tha matched
token string, or -1 if no token strings was matched.
.SH ERRORS
.LP
No errors is defined.
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.sp
.RS
.nf

\fB#include <stdio.h>
#include <stdlib.h>
.sp

int do_all;
const char *type;
int read_size;
int write_size;
int read_only;
.sp

enum
{
    RO_OPTION = 0,
    RW_OPTION,
    READ_SIZE_OPTION,
    WRITE_SIZE_OPTION
};
.sp

const char *mount_opts[] =
{
    [RO_OPTION] = "ro",
    [RW_OPTION] = "rw",
    [READ_SIZE_OPTION] = "rsize",
    [WRITE_SIZE_OPTION] = "wsize",
    NULL
};
.sp

int
main(int argc, char *argv[])
{
    char *subopts, *value;
    int opt;
.sp

    while ((opt = getopt(argc, argv, "at:o:")) != -1)
        switch(opt)
            {
            case 'a':
                do_all = 1;
                break;
            case 't':
                type = optarg;
                break;
            case 'o':
                subopts = optarg;
                while (*subopts != '\\0')
                    switch(getsubopt(&subopts, mount_opts, &value))
                {
                case RO_OPTION:
                    read_only = 1;
                    break;
                case RW_OPTION:
                    read_only = 0;
                    break;
                case READ_SIZE_OPTION:
                    if (value == NULL)
                        abort();
                    read_size = atoi(value);
                    break;
                case WRITE_SIZE_OPTION:
                    if (value == NULL)
                        abort();
                    write_size = atoi(value);
                    break;
                default:
                    /* Unknown suboption. I aint talkin' bout chicken n' gravy biatch. */
                    printf("Unknown suboption `%s'\\n", value);
                    break;
                }
            break;
        default:
            abort();
        }
.sp

    /* Do tha real work. */
.sp

    return 0;
}
\fP
.fi
.RE
.SS Parsin Suboptions
.LP
Da followin example uses tha \fIgetsubopt\fP() function ta parse
a \fIvalue\fP argument up in tha \fIoptarg\fP external
variable returned by a cold-ass lil call ta \fIgetopt\fP().
.sp
.RS
.nf

\fB#include <stdlib.h>
\&...
char *tokens[] = {"HOME", "PATH", "LOGNAME", (char *) NULL };
char *value;
int opt, index;
.sp

while ((opt = getopt(argc, argv, "e:")) != -1) {
    switch(opt)  {
    case 'e' :
        while ((index = getsubopt(&optarg, tokens, &value)) != -1) {
            switch(index) {
\&...
        }
        break;
\&...
    }
}
\&...
\fP
.fi
.RE
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIgetopt\fP(), tha Base Definitions volume of IEEE\ Std\ 1003.1-2001,
\fI<stdlib.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
