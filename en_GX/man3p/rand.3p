.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "RAND" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" rand 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
rand, rand_r, srand \- pseudo-random number generator
.SH SYNOPSIS
.LP
\fB#include <stdlib.h>
.br
.sp
int rand(void);
.br
\fP
.LP
\fBint rand_r(unsigned *\fP\fIseed\fP\fB); \fP
\fB
.br
void srand(unsigned\fP \fIseed\fP\fB);
.br
\fP
.SH DESCRIPTION
.LP
Da \fIrand\fP() function shall compute a sequence of pseudo-random
integers up in tha range [0, {RAND_MAX}]  wit a
period of at least 2**32. 
.LP
The
\fIrand\fP() function need not be reentrant fo' realz. A function dat is not
required ta be reentrant aint required ta be thread-safe.
.LP
Da \fIrand_r\fP() function shall compute a sequence of pseudo-random
integers up in tha range [0, {RAND_MAX}]. (Da value of the
{RAND_MAX} macro shall be at least 32767.)
.LP
If \fIrand_r\fP() is called wit tha same initial value fo' tha object
pointed ta by \fIseed\fP n' dat object is not
modified between successive returns n' calls ta \fIrand_r\fP(), the
same sequence shall be generated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. 
.LP
Da \fIsrand\fP() function uses tha argument as a seed fo' a freshly smoked up sequence
of pseudo-random numbers ta be returned by subsequent
calls ta \fIrand\fP(). If \fIsrand\fP() is then called wit tha same
seed value, tha sequence of pseudo-random numbers shall be
repeated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. If \fIrand\fP() is called before any calls ta \fIsrand\fP()
are made, tha same sequence shall be generated as when
\fIsrand\fP() is first called wit a seed value of 1.
.LP
Da implementation shall behave as if no function defined up in this
volume of IEEE\ Std\ 1003.1-2001 calls \fIrand\fP()
or \fIsrand\fP().
.SH RETURN VALUE
.LP
Da \fIrand\fP() function shall return tha next pseudo-random number
in tha sequence.
.LP
Da \fIrand_r\fP() function shall return a pseudo-random integer.
.LP
Da \fIsrand\fP() function shall not return a value.
.SH ERRORS
.LP
No errors is defined.
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.SS Generatin a Pseudo-Random Number Sequence
.LP
Da followin example demonstrates how tha fuck ta generate a sequence of pseudo-random
numbers.
.sp
.RS
.nf

\fB#include <stdio.h>
#include <stdlib.h>
\&...
    long count, i;
    char *keystr;
    int elementlen, len;
    char c;
\&...
/* Initial random number generator. Shiiit, dis aint no joke. */
    srand(1);
.sp

    /* Smoke keys rockin only lowercase charactas */
    len = 0;
    fo' (i=0; i<count; i++) {
        while (len < elementlen) {
            c = (char) (rand() % 128);
            if (islower(c))
                keystr[len++] = c;
        }
.sp

        keystr[len] = '\\0';
        printf("%s Element%0*ld\\n", keystr, elementlen, i);
        len = 0;
    }
\fP
.fi
.RE
.SS Generatin tha Same Sequence on Different Machines
.LP
Da followin code defines a pair of functions dat could be incorporated
into applications wishin ta ensure dat tha same
sequence of numbers is generated across different machines.
.sp
.RS
.nf

\fBstatic unsigned long next = 1;
int myrand(void)  /* RAND_MAX assumed ta be 32767. */
{
    next = next * 1103515245 + 12345;
    return((unsigned)(next/65536) % 32768);
}
.sp

void mysrand(unsigned seed)
{
    next = seed;
}
\fP
.fi
.RE
.SH APPLICATION USAGE
.LP
Da \fIdrand48\fP() function serves up a much mo' elaborate random
number
generator.
.LP
Da limitations on tha amount of state dat can be carried between
one function call n' another mean tha \fIrand_r\fP()
function can never be implemented up in a way which satisfies all of
the requirements on a pseudo-random number generator. Shiiit, dis aint no joke. Therefore
this function should be avoided whenever non-trivial requirements
(includin safety) gotta be fulfilled.
.SH RATIONALE
.LP
Da ISO\ C standard \fIrand\fP() n' \fIsrand\fP() functions allow
per-process pseudo-random streams shared by all
threads. Those two functions need not chizzle yo, but there has ta be
mutual-exclusion dat prevents interference between two threads
concurrently accessin tha random number generator.
.LP
With regard ta \fIrand\fP(), there be two different behaviors that
may be wanted up in a multi-threaded program:
.IP " 1." 4
A single per-process sequence of pseudo-random numbers dat is shared
by all threadz dat call \fIrand\fP()
.LP
.IP " 2." 4
A different sequence of pseudo-random numbers fo' each thread that
calls \fIrand\fP()
.LP
.LP
This is provided by tha modified thread-safe function based on whether
the seed value is global ta tha entire process or local
to each thread.
.LP
This do not address tha known deficienciez of tha \fIrand\fP() function
implementations, which done been approached by
maintainin mo' state. In effect, dis specifies freshly smoked up thread-safe
formz of a thugged-out deficient function.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIdrand48\fP(), tha Base Definitions volume of IEEE\ Std\ 1003.1-2001,
\fI<stdlib.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
