.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "PTHREAD_MUTEXATTR_GETPROTOCOL" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" pthread_mutexattr_getprotocol 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
pthread_mutexattr_getprotocol, pthread_mutexattr_setprotocol \- get
and set tha protocol attribute of tha mutex
attributes object (\fBREALTIME THREADS\fP)
.SH SYNOPSIS
.LP
\fB#include <pthread.h>
.br
.sp
\fBint pthread_mutexattr_getprotocol(const pthread_mutexattr_t *
.br
\ \ \ \ \ \  restrict\fP \fIattr\fP\fB, int *restrict\fP \fIprotocol\fP\fB);
.br
int pthread_mutexattr_setprotocol(pthread_mutexattr_t *\fP\fIattr\fP\fB,
.br
\ \ \ \ \ \  int\fP \fIprotocol\fP\fB); \fP
.sp
\fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIpthread_mutexattr_getprotocol\fP() n' \fIpthread_mutexattr_setprotocol\fP()
functions, respectively, shall git n' set
the protocol attribute of a mutex attributes object pointed ta by
\fIattr\fP which was previously pimped by tha function \fIpthread_mutexattr_init\fP().
.LP
Da \fIprotocol\fP attribute defines tha protocol ta be followed in
utilizin mutexes. Da value of \fIprotocol\fP may be one
of:
.LP
.sp
PTHREAD_PRIO_NONE
.br
.sp
PTHREAD_PRIO_INHERIT
.br
.sp
.sp
PTHREAD_PRIO_PROTECT
.br
.sp
.LP
which is defined up in tha \fI<pthread.h>\fP header.
.LP
When a thread owns a mutex wit tha PTHREAD_PRIO_NONE \fIprotocol\fP
attribute, its prioritizzle n' schedulin shall not be
affected by its mutex ballership.
.LP
When a thread is blockin higher prioritizzle threadz cuz of owning
one or mo' mutexes wit tha PTHREAD_PRIO_INHERIT
\fIprotocol\fP attribute, it shall execute all up in tha higher of its priority
or tha prioritizzle of tha highest prioritizzle thread waitin on
any of tha mutexes owned by dis thread n' initialized wit this
protocol. 
.LP
When a thread owns one or mo' mutexes initialized wit tha PTHREAD_PRIO_PROTECT
protocol, it shall execute all up in tha higher of its
prioritizzle or tha highest of tha prioritizzle ceilingz of all tha mutexes
owned by dis thread n' initialized wit dis attribute,
regardless of whether other threadz is blocked on any of these mutexes
or not. 
.LP
While a thread is holdin a mutex which has been initialized with
the PTHREAD_PRIO_INHERIT or PTHREAD_PRIO_PROTECT protocol
attributes, it shall not be subject ta bein moved ta tha tail of
the schedulin queue at its prioritizzle up in tha event dat its
original gangsta prioritizzle is chizzled, like fuckin by a cold-ass lil call ta \fIsched_setparam\fP().
Likewise, when a thread unlocks a mutex dat has been initialized
with tha PTHREAD_PRIO_INHERIT or PTHREAD_PRIO_PROTECT protocol
attributes, it shall not be subject ta bein moved ta tha tail of
the schedulin queue at its prioritizzle up in tha event dat its
original gangsta prioritizzle is chizzled.
.LP
If a thread simultaneously owns nuff muthafuckin mutexes initialized wit different
protocols, it shall execute all up in tha highest of the
prioritizzles dat it would have obtained by each of these protocols.
.LP
When a thread cook up a cold-ass lil call ta \fIpthread_mutex_lock\fP(), tha mutex
was
initialized wit tha protocol attribute havin tha value PTHREAD_PRIO_INHERIT,
when tha callin thread is blocked cuz tha mutex
is owned by another thread, dat balla thread shall inherit tha priority
level of tha callin thread as long as it continues ta own
the mutex. Da implementation shall update its execution priority
to tha maximum of its assigned prioritizzle n' all its inherited
priorities. Put ya muthafuckin choppers up if ya feel dis! Furthermore, if dis balla thread itself becomes blocked
on another mutex, tha same prioritizzle inheritizzle effect shall
be propagated ta dis other balla thread, up in a recursive manner n' shit. 
.SH RETURN VALUE
.LP
Upon successful completion, tha \fIpthread_mutexattr_getprotocol\fP()
and \fIpthread_mutexattr_setprotocol\fP() functions
shall return zero; otherwise, a error number shall be returned to
indicate tha error.
.SH ERRORS
.LP
Da \fIpthread_mutexattr_setprotocol\fP() function shall fail if:
.TP 7
.B ENOTSUP
Da value specified by \fIprotocol\fP be a unsupported value.
.sp
.LP
Da \fIpthread_mutexattr_getprotocol\fP() n' \fIpthread_mutexattr_setprotocol\fP()
functions may fail if:
.TP 7
.B EINVAL
Da value specified by \fIattr\fP or \fIprotocol\fP is invalid.
.TP 7
.B EPERM
Da calla aint gots tha privilege ta big-ass up tha operation.
.sp
.LP
These functions shall not return a error code of [EINTR].
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIpthread_cond_destroy\fP(), \fIpthread_create\fP(), \fIpthread_mutex_destroy\fP(),
the
Base Definitions volume of IEEE\ Std\ 1003.1-2001, \fI<pthread.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
