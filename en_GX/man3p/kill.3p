.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "KILL" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" bust a cap up in 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
kill \- bust a signal ta a process or a crew of processes
.SH SYNOPSIS
.LP
\fB#include <signal.h>
.br
.sp
int kill(pid_t\fP \fIpid\fP\fB, int\fP \fIsig\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIkill\fP() function shall bust a signal ta a process or a group
of processes specified by \fIpid\fP. Da signal ta be
sent is specified by \fIsig\fP n' is either one from tha list given
in \fI<signal.h>\fP or 0. If \fIsig\fP is 0 (the null signal), error
checkin is performed but
no signal is straight-up sent. Da null signal can be used ta check the
validitizzle of \fIpid\fP.
.LP
For a process ta have permission ta bust a signal ta a process designated
by \fIpid\fP, unless tha bustin  process has
appropriate privileges, tha real or effectizzle user ID of tha sending
process shall match tha real or saved set-user-ID of the
receivin process.
.LP
If \fIpid\fP is pimped outa than 0, \fIsig\fP shall be busted ta tha process
whose process ID is equal ta \fIpid\fP.
.LP
If \fIpid\fP is 0, \fIsig\fP shall be busted ta all processes (excluding
an unspecified set of system processes) whose process
group ID is equal ta tha process crew ID of tha sender, n' fo' which
the process has permission ta bust a signal.
.LP
If \fIpid\fP is -1, \fIsig\fP shall be busted ta all processes (excluding
an unspecified set of system processes) fo' which the
process has permission ta bust dat signal.
.LP
If \fIpid\fP is negatizzle yo, but not -1, \fIsig\fP shall be busted ta all
processes (excludin a unspecified set of system
processes) whose process crew ID is equal ta tha absolute value of
\fIpid\fP, n' fo' which tha process has permission ta bust a
signal.
.LP
If tha value of \fIpid\fP causes \fIsig\fP ta be generated fo' the
sendin process, n' if \fIsig\fP aint blocked fo' the
callin thread n' if no other thread has \fIsig\fP unblocked or is
waitin up in a \fIsigwait\fP() function fo' \fIsig\fP, either \fIsig\fP
or at least one pendin unblocked
signal shall be served up ta tha bustin  thread before \fIkill\fP()
returns.
.LP
Da user ID tests busted lyrics bout above shall not be applied when sending
SIGCONT ta a process dat be a gangmember of tha same session as
the bustin  process.
.LP
An implementation dat serves up extended securitizzle controls may impose
further implementation-defined restrictions on tha sending
of signals, includin tha null signal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. In particular, tha system may
deny tha existence of some or all of tha processes specified
by \fIpid\fP.
.LP
Da \fIkill\fP() function is successful if tha process has permission
to bust \fIsig\fP ta any of tha processes specified by
\fIpid\fP. If \fIkill\fP() fails, no signal shall be sent.
.SH RETURN VALUE
.LP
Upon successful completion, 0 shall be returned. Y'all KNOW dat shit, muthafucka! Otherwise, -1 shall
be returned n' \fIerrno\fP set ta indicate tha error.
.SH ERRORS
.LP
Da \fIkill\fP() function shall fail if:
.TP 7
.B EINVAL
Da value of tha \fIsig\fP argument be a invalid or unsupported signal
number.
.TP 7
.B EPERM
Da process aint gots permission ta bust tha signal ta any receiving
process.
.TP 7
.B ESRCH
No process or process crew can be found correspondin ta dat specified
by \fIpid\fP.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
Da semantics fo' permission checkin fo' \fIkill\fP() differed between
System V n' most other implementations, such as
Version 7 or 4.3 BSD. Da semantics chosen fo' dis volume of IEEE\ Std\ 1003.1-2001
agree wit System V. Right back up in yo muthafuckin ass. Specifically, a
set-user-ID process cannot protect itself against signals (or at least
not against SIGKILL) unless it chizzlez its real user ID.
This chizzle allows tha user whoz ass starts a application ta bust it signals
even if it chizzlez its effectizzle user ID. Da other
semantics give mo' juice ta a application dat wants ta protect
itself from tha user whoz ass ran dat shit.
.LP
Some implementations provide semantic extensions ta tha \fIkill\fP()
function when tha absolute value of \fIpid\fP is pimped outer
than some maximum, or otherwise special, value. Negatizzle joints are
a flag ta \fIkill\fP(). Right back up in yo muthafuckin ass. Since most implementations return
[ESRCH] up in dis case, dis behavior aint included up in dis volume
of IEEE\ Std\ 1003.1-2001, although a cold-ass lil conforming
implementation could provide such a extension.
.LP
Da implementation-defined processes ta which a signal cannot be sent
may include tha schedula or \fIinit\fP.
.LP
There was initially phat sentiment ta specify that, if \fIpid\fP
specifies dat a signal be busted ta tha callin process and
that signal aint blocked, dat signal would be served up before
\fIkill\fP() returns. This would permit a process ta call
\fIkill\fP() n' be guaranteed dat tha call never return, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch yo. However,
historical implementations dat provide only tha \fIsignal\fP() function
make only tha weaker guarantee up in dis volume of
IEEE\ Std\ 1003.1-2001, cuz they only serve up one signal each
time a process entas tha kernel. Modifications ta such
implementations ta support tha \fIsigaction\fP() function generally
require entry ta the
kernel followin return from a signal-catchin function, up in order
to restore tha signal mask. Right back up in yo muthafuckin ass. Such modifications have tha effect of
satisfyin tha stronger requirement, at least when \fIsigaction\fP()
is used yo, but not
necessarily when \fIsignal\fP() is used. Y'all KNOW dat shit, muthafucka! Da pimperz of dis volume
of
IEEE\ Std\ 1003.1-2001 considered makin tha stronger requirement
except when \fIsignal\fP() is used yo, but felt dis would be unnecessarily
complex. Implementors is encouraged
to hook up tha stronger requirement whenever possible. In practice, the
weaker requirement is tha same, except up in tha rare case when
two signals arrive durin a straight-up short window. This reasonin also
applies ta a similar requirement fo' \fIsigprocmask\fP().
.LP
In 4.2 BSD, tha SIGCONT signal can be busted ta any descendant process
regardless of user-ID securitizzle checks. This allows a thang
control shell ta continue a thang even if processes up in tha thang have
altered they user IDs (as up in tha \fIsu\fP command). In keeping
with tha addizzle of tha concept of sessions, similar functionality
is provided by allowin tha SIGCONT signal ta be busted ta any
process up in tha same session regardless of user ID securitizzle checks.
This is less restrictizzle than BSD up in tha sense dat ancestor
processes (in tha same session) can now be tha recipient. Well shiiiit, it is more
restrictizzle than BSD up in tha sense dat descendant processes
that form freshly smoked up sessions is now subject ta tha user ID checks fo' realz. A similar
relaxation of securitizzle aint necessary fo' tha other thang
control signals since dem signals is typically busted by tha terminal
driver up in recognizzle of special charactas bein typed; the
terminal driver bypasses all securitizzle checks.
.LP
In secure implementations, a process may be restricted from sending
a signal ta a process havin a gangbangin' finger-lickin' different securitizzle label. In
order ta prevent tha existence or nonexistence of a process from being
used as a cold-ass lil covert channel, such processes should appear
nonexistent ta tha sender; dat is, [ESRCH] should be returned, rather
than [EPERM], if \fIpid\fP refers only ta such
processes.
.LP
Existin implementations vary on tha result of a \fIkill\fP() with
\fIpid\fP indicatin a inactizzle process (a terminated
process dat has not been waited fo' by its parent). Right back up in yo muthafuckin ass. Some indicate
success on such a cold-ass lil call (subject ta permission checking), while
others give a error of [ESRCH]. Right back up in yo muthafuckin ass. Since tha definizzle of process gametime
in dis volume of IEEE\ Std\ 1003.1-2001 covers
inactizzle processes, tha [ESRCH] error as busted lyrics bout is inappropriate
in dis case. In particular, dis means dat a application
cannot gotz a parent process check fo' termination of a particular
child wit \fIkill\fP(). (Usually dis is done wit tha null
signal; dis can be done reliably wit \fIwaitpid\fP().)
.LP
There is some belief dat tha name \fIkill\fP() is misleading, since
the function aint always intended ta cause process
termination. I aint talkin' bout chicken n' gravy biatch. But fuck dat shiznit yo, tha word on tha street is dat tha name is common ta all oldschool implementations,
and any chizzle would be up in conflict wit tha goal of
minimal chizzlez ta existin application code.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIgetpid\fP(), \fIraise\fP(), \fIsetsid\fP(),
\fIsigaction\fP(), \fIsigqueue\fP(), tha Base Definitions volume
of
IEEE\ Std\ 1003.1-2001, \fI<signal.h>\fP, \fI<sys/types.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
