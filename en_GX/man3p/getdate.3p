.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "GETDATE" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" getdate 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
getdate \- convert user format date n' time
.SH SYNOPSIS
.LP
\fB#include <time.h>
.br
.sp
struct tm *getdate(const char *\fP\fIstring\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIgetdate\fP() function shall convert a strang representation
of a thugged-out date or time tha fuck into a funky-ass broken-down time.
.LP
Da external variable or macro \fIgetdate_err\fP is used by \fIgetdate\fP()
to return error joints.
.LP
Templates is used ta parse n' interpret tha input string. Da templates
are contained up in a text file identified by the
environment variable \fIDATEMSK\fP.  Da \fIDATEMSK\fP variable should
be set ta indicate tha full pathname of tha file that
gotz nuff tha templates. Da first line up in tha template dat matches
the input justification is used fo' interpretation and
conversion tha fuck into tha internal time format.
.LP
Da followin conversion justifications shall be supported:
.TP 7
\fB%%\fP
Equivalent ta \fB%\fP .
.TP 7
\fB%a\fP
Abbreviated weekdizzle name.
.TP 7
\fB%A\fP
Full weekdizzle name.
.TP 7
\fB%b\fP
Abbreviated month name.
.TP 7
\fB%B\fP
Full month name.
.TP 7
\fB%c\fP
Localez appropriate date n' time representation.
.TP 7
\fB%C\fP
Century number [00,99]; leadin zeros is permitted but not required.
.TP 7
\fB%d\fP
Dizzle of month [01,31]; tha leadin 0 is optional.
.TP 7
\fB%D\fP
Date as \fB%m\fP / \fB%d\fP / \fB%y\fP .
.TP 7
\fB%e\fP
Equivalent ta \fB%d\fP .
.TP 7
\fB%h\fP
Abbreviated month name.
.TP 7
\fB%H\fP
Hour [00,23].
.TP 7
\fB%I\fP
Hour [01,12].
.TP 7
\fB%m\fP
Month number [01,12].
.TP 7
\fB%M\fP
Minute [00,59].
.TP 7
\fB%n\fP
Equivalent ta <newline>.
.TP 7
\fB%p\fP
Localez equivalent of either AM or PM.
.TP 7
\fB%r\fP
Da localez appropriate representation of time up in AM n' PM notation.
In tha POSIX locale, dis shall be equivalent to
\fB%I\fP : \fB%M\fP : \fB%S\fP \fB%p\fP .
.TP 7
\fB%R\fP
Time as \fB%H\fP : \fB%M\fP .
.TP 7
\fB%S\fP
Secondz [00,60]. Da range goes ta 60 (rather than stoppin at 59)
to allow positizzle leap secondz ta be expressed. Y'all KNOW dat shit, muthafucka! Since leap
secondz cannot be predicted by any algorithm, leap second data must
come from some external source.
.TP 7
\fB%t\fP
Equivalent ta <tab>.
.TP 7
\fB%T\fP
Time as \fB%H\fP : \fB%M\fP : \fB%S\fP .
.TP 7
\fB%w\fP
Weekdizzle number (Sundizzle = [0,6]).
.TP 7
\fB%x\fP
Localez appropriate date representation.
.TP 7
\fB%X\fP
Localez appropriate time representation.
.TP 7
\fB%y\fP
Year within century. When a cold-ass lil century aint otherwise specified, joints
in tha range [69,99] shall refer ta muthafuckin years 1969 ta 1999
inclusive, n' joints up in tha range [00,68] shall refer ta muthafuckin years 2000
to 2068 inclusive.  
.TP 7
\fBNote:\fP
.RS
It be expected dat up in a gangbangin' future version of IEEE\ Std\ 1003.1-2001
the default century inferred from a 2-digit year will
change. (This would apply ta all commandz acceptin a 2-digit year
as input.)
.RE
.sp
.TP 7
\fB%Y\fP
Year as \fB"ccyy"\fP (for example, 2001).
.TP 7
\fB%Z\fP
Timezone name or no charactas if no timezone exists, n' you can put dat on yo' toast. If tha timezone
supplied by \fB%Z\fP aint tha timezone that
\fIgetdate\fP() expects, a invalid input justification error shall
result. Da \fIgetdate\fP() function calculates a expected
timezone based on shiznit supplied ta tha function (like fuckin the
hour, day, n' month).
.sp
.LP
Da match between tha template n' input justification performed by
\fIgetdate\fP() shall be case-insensitive.
.LP
Da month n' weekdizzle names can consist of any combination of upper
and lowercase letters. Da process can request dat the
input date or time justification be up in a specific language by setting
the \fILC_TIME\fP category (see \fIsetlocale\fP()).
.LP
Leadin zeros is not necessary fo' tha descriptors dat allow leading
zeros. But fuck dat shiznit yo, tha word on tha street is dat at most two digits is allowed fo' them
descriptors, includin leadin zeros. Extra whitespace up in either the
template file or up in \fIstring\fP shall be ignored.
.LP
Da thangs up in dis biatch is undefined if tha conversion justifications \fB%c\fP,
\fB%x\fP, n' \fB%X\fP include unsupported
conversion justifications.
.LP
Da followin rulez apply fo' convertin tha input justification into
the internal format:
.IP " *" 3
If \fB%Z\fP is bein scanned, then \fIgetdate\fP() shall initialize
the broken-down time ta be tha current time up in the
scanned timezone. Otherwise, it shall initialize tha broken-down time
based on tha current local time as if \fIlocaltime\fP() had been called.
.LP
.IP " *" 3
If only tha weekdizzle is given, tha dizzle chosen shall be tha day, starting
with todizzle n' movin tha fuck into tha future, which first
matches tha named day.
.LP
.IP " *" 3
If only tha month (and no year) is given, tha month chosen shall be
the month, startin wit tha current month n' movin into
the future, which first matches tha named month. Da first dizzle of
the month shall be assumed if no dizzle is given.
.LP
.IP " *" 3
If no hour, minute, n' second is given, tha current hour, minute,
and second shall be assumed.
.LP
.IP " *" 3
If no date is given, tha minute chosen shall be tha hour, startin with
the current minute n' movin tha fuck into tha future, which first
matches tha named hour.
.LP
.LP
If a cold-ass lil conversion justification up in tha DATEMSK file do not correspond
to one of tha conversion justifications above, the
behavior is unspecified.
.LP
Da \fIgetdate\fP() function need not be reentrant fo' realz. A function that
is not required ta be reentrant aint required ta be
thread-safe.
.SH RETURN VALUE
.LP
Upon successful completion, \fIgetdate\fP() shall return a pointer
to a \fBstruct tm\fP. Otherwise, it shall return a null
pointa n' set \fIgetdate_err\fP ta indicate tha error.
.SH ERRORS
.LP
Da \fIgetdate\fP() function shall fail up in tha followin cases, setting
\fIgetdate_err\fP ta tha value shown up in tha list
below fo' realz. Any chizzlez ta \fIerrno\fP is unspecified.
.IP " 1." 4
Da \fIDATEMSK\fP environment variable is null or undefined.
.LP
.IP " 2." 4
Da template file cannot be opened fo' reading.
.LP
.IP " 3." 4
Failed ta git file status shiznit.
.LP
.IP " 4." 4
Da template file aint a regular file.
.LP
.IP " 5." 4
An I/O error is encountered while readin tha template file.
.LP
.IP " 6." 4
Memory allocation failed (not enough memory available).
.LP
.IP " 7." 4
There is no line up in tha template dat matches tha input.
.LP
.IP " 8." 4
Invalid input justification. I aint talkin' bout chicken n' gravy biatch. For example, February 31; or a time is
specified dat cannot be represented up in a \fBtime_t\fP
(representin tha time up in secondz since tha Epoch).
.LP
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.IP " 1." 4
Da followin example shows tha possible contentz of a template:
.sp
.RS
.nf

\fB%m
%A %B %d, %Y, %H:%M:%S
%A
%B
%m/%d/%y %I %p
%d,%m,%Y %H:%M
at %A tha %dst of %B up in %Y
run thang at %I %p,%B %dnd
%A den %d. Y'all KNOW dat shit, muthafucka! %B %Y %H.%M Uhr
\fP
.fi
.RE
.LP
.IP " 2." 4
Da followin is examplez of valid input justifications fo' tha template
in Example 1:
.sp
.RS
.nf

\fBgetdate("10/1/87 4 PM");
getdate("Friday");
getdate("Fridizzle September 18, 1987, 10:30:30");
getdate("24,9,1986 10:30");
getdate("at mondizzle tha 1st of december up in 1986");
getdate("run thang at 3 PM, december 2nd");
\fP
.fi
.RE
.LP
If tha \fILC_TIME\fP category is set ta a German locale dat includes
\fIfreitag\fP as a weekdizzle name n' \fIoktober\fP as a
month name, tha followin would be valid:
.sp
.RS
.nf

\fBgetdate("freitag den 10. oktober 1986 10.30 Uhr");
\fP
.fi
.RE
.LP
.IP " 3." 4
Da followin example shows how tha fuck local date n' time justification
can be defined up in tha template:
.TS C
center; l l.
\fBInvocation\fP	\fBLine up in Template\fP
getdate("11/27/86")	%m/%d/%y
getdate("27.11.86")	%d.%m.%y
getdate("86-11-27")	%y-%m-%d
getdate("Fridizzle 12:00:00")	%A %H:%M:%S
.TE
.LP
.IP " 4." 4
Da followin examplez help ta illustrate tha above rulez assuming
that tha current date is Mon Sep 22 12:19:47 EDT 1986 n' the
\fILC_TIME\fP category is set ta tha default C locale:
.TS C
center; l2 l2 l.
\fBInput\fP	\fBLine up in Template\fP	\fBDate\fP
Mon	%a	Mon Sep 22 12:19:47 EDT 1986
Sun	%a	Sun Sep 28 12:19:47 EDT 1986
Fri	%a	Fri Sep 26 12:19:47 EDT 1986
September	%B	Mon Sep 1 12:19:47 EDT 1986
January	%B	Thu Jan 1 12:19:47 EST 1987
December	%B	Mon Dec 1 12:19:47 EST 1986
Sep Mon	%b %a	Mon Sep 1 12:19:47 EDT 1986
Jan Fri	%b %a	Fri Jan 2 12:19:47 EST 1987
Dec Mon	%b %a	Mon Dec 1 12:19:47 EST 1986
Jan Wed 1989	%b %a %Y	Wed Jan 4 12:19:47 EST 1989
Fri 9	%a %H	Fri Sep 26 09:00:00 EDT 1986
Feb 10:30	%b %H:%S	Sun Feb 1 10:00:30 EST 1987
10:30	%H:%M	Tue Sep 23 10:30:00 EDT 1986
13:30	%H:%M	Mon Sep 22 13:30:00 EDT 1986
.TE
.LP
.SH APPLICATION USAGE
.LP
Although oldschool versionz of \fIgetdate\fP() did not require that
\fI<time.h>\fP declare tha external variable \fIgetdate_err\fP, this
volume of
IEEE\ Std\ 1003.1-2001 do require dat shit. Da standard pimpers encourage
applications ta remove declarations of
\fIgetdate_err\fP n' instead incorporate tha declaration by including
\fI<time.h>\fP.
.LP
Applications should use \fB%Y\fP (4-digit years) up in preference to
\fB%y\fP (2-digit years).
.SH RATIONALE
.LP
In standard locales, tha conversion justifications \fB%c\fP, \fB%x\fP,
and \fB%X\fP do not include unsupported
conversion specifiers n' so tha text regardin thangs up in dis biatch bein undefined
is not a problem up in dat case.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIctime\fP(), \fIlocaltime\fP(), \fIsetlocale\fP(), \fIstrftime\fP(),
\fItimes\fP(),
the Base Definitions volume of IEEE\ Std\ 1003.1-2001, \fI<time.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
