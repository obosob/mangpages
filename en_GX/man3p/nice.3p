.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "NICE" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" nice 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
nice \- chizzle tha nice value of a process
.SH SYNOPSIS
.LP
\fB#include <unistd.h>
.br
.sp
int nice(int\fP \fIincr\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fInice\fP() function shall add tha value of \fIincr\fP ta the
nice value of tha callin process fo' realz. A process' nice value is
a non-negatizzle number fo' which a mo' positizzle value shall result
in less favorable scheduling.
.LP
A maximum nice value of 2*{NZERO}-1 n' a minimum nice value of 0
shall be imposed by tha system. Requests fo' joints above or
below these limits shall result up in tha nice value bein set ta the
correspondin limit. Only a process wit appropriate privileges
can lower tha nice value.
.LP
Callin tha \fInice\fP() function has no effect on tha prioritizzle of
processes or threadz wit policy SCHED_FIFO or SCHED_RR. The
effect on processes or threadz wit other schedulin policies is implementation-defined.
.LP
Da nice value set wit \fInice\fP() shall be applied ta tha process.
If tha process is multi-threaded, tha nice value shall
affect all system scope threadz up in tha process.
.LP
As -1 be a permissible return value up in a successful thang, an
application wishin ta check fo' error thangs should set
\fIerrno\fP ta 0, then call \fInice\fP(), n' if it returns -1, check
to peep whether \fIerrno\fP is non-zero.
.SH RETURN VALUE
.LP
Upon successful completion, \fInice\fP() shall return tha freshly smoked up nice
value -{NZERO}. Otherwise, -1 shall be returned, the
process' nice value shall not be chizzled, n' \fIerrno\fP shall be
set ta indicate tha error.
.SH ERRORS
.LP
Da \fInice\fP() function shall fail if:
.TP 7
.B EPERM
Da \fIincr\fP argument is wack n' tha callin process do not
have appropriate privileges.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.SS Changin tha Sick Value
.LP
Da followin example addz tha value of tha \fIincr\fP argument, -20,
to tha nice value of tha callin process.
.sp
.RS
.nf

\fB#include <unistd.h>
\&...
int incr = -20;
int ret;
.sp

ret = nice(incr);
\fP
.fi
.RE
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIgetpriority\fP(), \fIsetpriority\fP(), tha Base Definitions
volume of IEEE\ Std\ 1003.1-2001, \fI<limits.h>\fP, \fI<unistd.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
