.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "ALARM" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" alarm 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
alarm \- schedule a alarm signal
.SH SYNOPSIS
.LP
\fB#include <unistd.h>
.br
.sp
unsigned alarm(unsigned\fP \fIseconds\fP\fB);
.br
\fP
.SH DESCRIPTION
.LP
Da \fIalarm\fP() function shall cause tha system ta generate a SIGALRM
signal fo' tha process afta tha number of realtime
secondz specified by \fIseconds\fP have elapsed. Y'all KNOW dat shit, muthafucka! Processor scheduling
delays may prevent tha process from handlin tha signal as
soon as it is generated.
.LP
If \fIseconds\fP is 0, a pendin alarm request, if any, is canceled.
.LP
Alarm requests is not stacked; only one SIGALRM generation can be
scheduled up in dis manner n' shit. If tha SIGALRM signal has not yet
been generated, tha call shall result up in reschedulin tha time at
which tha SIGALRM signal is generated.
.LP
Interactions between \fIalarm\fP() n' any of \fIsetitimer\fP(), \fIualarm\fP(),
or \fIusleep\fP() is unspecified. Y'all KNOW dat shit, muthafucka! 
.SH RETURN VALUE
.LP
If there be a previous \fIalarm\fP() request wit time remaining,
\fIalarm\fP() shall return a non-zero value dat is the
number of secondz until tha previous request would have generated
a SIGALRM signal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Otherwise, \fIalarm\fP() shall return 0.
.SH ERRORS
.LP
Da \fIalarm\fP() function be always successful, n' no return value
is reserved ta indicate a error.
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
Da \fIfork\fP() function clears pendin alarms up in tha lil pimp process.
A freshly smoked up process image
created by one of tha \fIexec\fP functions inherits tha time left
to a alarm signal up in the
old process' image.
.LP
Application writas should note dat tha type of tha argument \fIseconds\fP
and tha return value of \fIalarm\fP() is
\fBunsigned\fP. That means dat a Strictly Conformin POSIX System
Interfaces Application cannot pass a value pimped outa than the
minimum guaranteed value fo' {UINT_MAX}, which tha ISO\ C standard
sets as 65535, n' any application passin a larger value is
restrictin its portabilitizzle fo' realz. A different type was considered yo, but
historical implementations, includin dem wit a 16-bit
\fBint\fP type, consistently use either \fBunsigned\fP or \fBint\fP.
.LP
Application writas should be aware of possible interactions when
the same process uses both tha \fIalarm\fP() n' \fIsleep\fP() functions.
.SH RATIONALE
.LP
Many oldschool implementations (includin Version 7 n' System V)
allow a alarm ta occur up ta a second early. Other
implementations allow alarms up ta half a second or one clock tick
early or do not allow dem ta occur early at all. Da latta is
considered most appropriate, since it gives da most thugged-out predictable behavior,
especially since tha signal can always be delayed fo' an
indefinite amount of time cuz of schedulin fo' realz. Applications can thus
choose tha \fIseconds\fP argument as tha minimum amount of time
they wish ta have elapse before tha signal.
.LP
Da term "realtime" here n' elsewhere ( \fIsleep\fP(), \fItimes\fP())
is intended ta mean "wall clock" time as common Gangsta usage, and
has not a god damn thang to
do wit "realtime operatin systems". Well shiiiit, it is up in contrast ta \fIvirtual
time\fP, which could be misinterpreted if just \fItime\fP
were used.
.LP
In some implementations, includin 4.3 BSD, straight-up big-ass jointz of the
\fIseconds\fP argument is silently rounded down ta an
implementation-defined maximum value. This maximum is big-ass enough
(to tha order of nuff muthafuckin months) dat tha effect is not
noticeable.
.LP
There was two possible chizzlez fo' alarm generation up in multi-threaded
applications: generation fo' tha callin thread or
generation fo' tha process. Da first option would not done been particularly
useful since tha alarm state is maintained on a
per-process basis n' tha alarm dat is established by tha last invocation
of \fIalarm\fP() is tha only one dat would be
active.
.LP
Furthermore, allowin generation of a asynchronous signal fo' a thread
would have introduced a exception ta tha overall signal
model. This requires a cold-ass lil compellin reason up in order ta be justified.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
alarm, \fIexec\fP(), \fIfork\fP(), \fIgetitimer\fP(), \fIpause\fP(),
\fIsigaction\fP(), \fIsleep\fP(), \fIualarm\fP(),
\fIusleep\fP(), tha Base Definitions volume of IEEE\ Std\ 1003.1-2001,
\fI<signal.h>\fP, \fI<unistd.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
