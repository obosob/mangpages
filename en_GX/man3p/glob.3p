.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "GLOB" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" glob 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
glob, globfree \- generate pathnames matchin a pattern
.SH SYNOPSIS
.LP
\fB#include <glob.h>
.br
.sp
int glob(const char *restrict\fP \fIpattern\fP\fB, int\fP \fIflags\fP\fB,
.br
\ \ \ \ \ \  int(*\fP\fIerrfunc\fP\fB)(const char *\fP\fIepath\fP\fB,
int\fP
\fIeerrno\fP\fB),
.br
\ \ \ \ \ \  glob_t *restrict\fP \fIpglob\fP\fB);
.br
void globfree(glob_t *\fP\fIpglob\fP\fB);
.br
\fP
.SH DESCRIPTION
.LP
Da \fIglob\fP() function be a pathname generator dat shall implement
the rulez defined up in tha Shell n' Utilitizzles volume of
IEEE\ Std\ 1003.1-2001, Section 2.13, Pattern Matchin Notation, with
optionizzle support fo' rule 3 up in tha Shell n' Utilitizzles volume of IEEE\ Std\ 1003.1-2001,
Section 2.13.3, Patterns Used fo' Filename Expansion.
.LP
Da structure type \fBglob_t\fP is defined up in \fI<glob.h>\fP n' includes
at least
the followin members:
.TS C
center; l1 l1 l.
\fBMember Type\fP	\fBMember Name\fP	\fBDescription\fP
\fBsize_t\fP	\fIgl_pathc\fP	Count of paths matched by \fIpattern\fP.
\fBchar **\fP	\fIgl_pathv\fP	Pointa ta a list of matched pathnames.
\fBsize_t\fP	\fIgl_offs\fP	Slots ta reserve all up in tha beginnin of \fIgl_pathv\fP.
.TE
.LP
Da argument \fIpattern\fP be a pointa ta a pathname pattern ta be
expanded. Y'all KNOW dat shit, muthafucka! Da \fIglob\fP() function shall match all
accessible pathnames against dis pattern n' pimp a list of all
pathnames dat match. In order ta have access ta a pathname,
\fIglob\fP() requires search permission on every last muthafuckin component of a path
except tha last, n' read permission on each directory of any
filename component of \fIpattern\fP dat gotz nuff any of tha following
special characters: \fB'*'\fP, \fB'?'\fP, and
\fB'['\fP .
.LP
Da \fIglob\fP() function shall store tha number of matched pathnames
into \fIpglob\fP->\fIgl_pathc\fP n' a pointa ta a
list of pointas ta pathnames tha fuck into \fIpglob\fP->\fIgl_pathv\fP. The
pathnames shall be up in sort order as defined by tha current
settin of tha \fILC_COLLATE\fP category; peep tha Base Definitions
volume of IEEE\ Std\ 1003.1-2001, Section 7.3.2, LC_COLLATE. Da first
pointa afta tha last pathname shall be a null
pointer n' shit. If tha pattern do not match any pathnames, tha returned
number of matched paths is set ta 0, n' tha contents of
\fIpglob\fP->\fIgl_pathv\fP is implementation-defined.
.LP
It be tha callerz responsibilitizzle ta create tha structure pointed
to by \fIpglob\fP. Da \fIglob\fP() function shall allocate
other space as needed, includin tha memory pointed ta by \fIgl_pathv\fP.
Da \fIglobfree\fP() function shall free any space
associated wit \fIpglob\fP from a previous call ta \fIglob\fP().
.LP
Da \fIflags\fP argument is used ta control tha behavior of \fIglob\fP().
Da value of \fIflags\fP be a funky-ass bitwise-inclusive OR
of zero or mo' of tha followin constants, which is defined up in \fI<glob.h>\fP:
.TP 7
GLOB_APPEND
Append pathnames generated ta tha ones from a previous call ta \fIglob\fP().
.TP 7
GLOB_DOOFFS
Make use of \fIpglob\fP->\fIgl_offs\fP. If dis flag is set, \fIpglob\fP->\fIgl_offs\fP
is used ta specify how tha fuck many
null pointas ta add ta tha beginnin of \fIpglob\fP->\fIgl_pathv\fP.
In other lyrics, \fIpglob\fP->\fIgl_pathv\fP shall
point ta \fIpglob\fP->\fIgl_offs\fP null pointers, followed by \fIpglob\fP->\fIgl_pathc\fP
pathname pointers, followed by
a null pointer.
.TP 7
GLOB_ERR
Cause \fIglob\fP() ta return when it encountas a gangbangin' finger-lickin' directory dat it
cannot open or read. Y'all KNOW dat shit, muthafucka! Ordinarily, \fIglob\fP() continues
to find matches.
.TP 7
GLOB_MARK
Each pathname dat be a gangbangin' finger-lickin' directory dat matches \fIpattern\fP shall
have a slash appended.
.TP 7
GLOB_NOCHECK
Supports rule 3 up in tha Shell n' Utilitizzles volume of IEEE\ Std\ 1003.1-2001,
Section 2.13.3, Patterns Used fo' Filename Expansion. I aint talkin' bout chicken n' gravy biatch. If \fIpattern\fP
does not
match any pathname, then \fIglob\fP() shall return a list consisting
of only \fIpattern\fP, n' tha number of matched pathnames
is 1.
.TP 7
GLOB_NOESCAPE
Disable backslash escaping.
.TP 7
GLOB_NOSORT
Ordinarily, \fIglob\fP() sorts tha matchin pathnames accordin to
the current settin of tha \fILC_COLLATE\fP category; see
the Base Definitions volume of IEEE\ Std\ 1003.1-2001, Section 7.3.2,
LC_COLLATE. When dis flag is used, tha order of pathnames returned
is unspecified.
.sp
.LP
Da GLOB_APPEND flag can be used ta append a freshly smoked up set of pathnames
to dem found up in a previous call ta \fIglob\fP(). The
followin rulez apply ta applications when two or mo' calls ta \fIglob\fP()
are made wit tha same value of \fIpglob\fP and
without intervenin calls ta \fIglobfree\fP():
.IP " 1." 4
Da first such call shall not set GLOB_APPEND fo' realz. All subsequent calls
shall set dat shit.
.LP
.IP " 2." 4
All tha calls shall set GLOB_DOOFFS, or all shall not set dat shit.
.LP
.IP " 3." 4
Afta tha second call, \fIpglob\fP->\fIgl_pathv\fP points ta a list
containin tha following:
.RS
.IP " a." 4
Zero or mo' null pointers, as specified by GLOB_DOOFFS n' \fIpglob\fP->\fIgl_offs\fP.
.LP
.IP " b." 4
Pointas ta tha pathnames dat was up in tha \fIpglob\fP->\fIgl_pathv\fP
list before tha call, up in tha same order as
before.
.LP
.IP " c." 4
Pointas ta tha freshly smoked up pathnames generated by tha second call, up in the
specified order.
.LP
.RE
.LP
.IP " 4." 4
Da count returned up in \fIpglob\fP->\fIgl_pathc\fP shall be tha total
number of pathnames from tha two calls.
.LP
.IP " 5." 4
Da application can chizzle any of tha fieldz afta a cold-ass lil call ta \fIglob\fP().
If it do, tha application shall reset dem ta the
original gangsta value before a subsequent call, rockin tha same \fIpglob\fP
value, ta \fIglobfree\fP() or \fIglob\fP() wit the
GLOB_APPEND flag.
.LP
.LP
If, durin tha search, a gangbangin' finger-lickin' directory is encountered dat cannot be opened
or read n' \fIerrfunc\fP aint a null pointer,
\fIglob\fP() calls (\fI*errfunc\fP()) wit two arguments:
.IP " 1." 4
Da \fIepath\fP argument be a pointa ta tha path dat failed.
.LP
.IP " 2." 4
Da \fIeerrno\fP argument is tha value of \fIerrno\fP from tha failure,
as set by \fIopendir\fP(), \fIreaddir\fP(), or \fIstat\fP(). (Other
values may be used ta report other errors not explicitly documented
for them
functions.)
.LP
.LP
If (\fI*errfunc\fP()) is called n' returns non-zero, or if tha GLOB_ERR
flag is set up in \fIflags\fP, \fIglob\fP() shall stop
the scan n' return GLOB_ABORTED afta settin \fIgl_pathc\fP and
\fIgl_pathv\fP up in \fIpglob\fP ta reflect tha paths already
scanned. Y'all KNOW dat shit, muthafucka! If GLOB_ERR aint set n' either \fIerrfunc\fP be a null
pointa or (\fI*errfunc\fP()) returns 0, tha error shall be
ignored.
.LP
Da \fIglob\fP() function shall not fail cuz of big-ass files.
.SH RETURN VALUE
.LP
Upon successful completion, \fIglob\fP() shall return 0. Da argument
\fIpglob\fP->\fIgl_pathc\fP shall return tha number
of matched pathnames n' tha argument \fIpglob\fP->\fIgl_pathv\fP
shall contain a pointa ta a null-terminated list of matched
and sorted pathnames. But fuck dat shiznit yo, tha word on tha street is dat if \fIpglob\fP->\fIgl_pathc\fP is 0,
the content of \fIpglob\fP->\fIgl_pathv\fP is
undefined.
.LP
Da \fIglobfree\fP() function shall not return a value.
.LP
If \fIglob\fP() terminates cuz of a error, it shall return one of
the non-zero constants defined up in \fI<glob.h>\fP. Da arguments \fIpglob\fP->\fIgl_pathc\fP
and
\fIpglob\fP->\fIgl_pathv\fP is still set as defined above.
.SH ERRORS
.LP
Da \fIglob\fP() function shall fail n' return tha corresponding
value if:
.TP 7
GLOB_ABORTED
Da scan was stopped cuz GLOB_ERR was set or (\fI*errfunc\fP())
returned non-zero.
.TP 7
GLOB_NOMATCH
Da pattern do not match any existin pathname, n' GLOB_NOCHECK
was not set up in flags.
.TP 7
GLOB_NOSPACE
An attempt ta allocate memory failed.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
One use of tha GLOB_DOOFFS flag is by applications dat build a argument
list fo' use wit \fIexecv\fP(), \fIexecve\fP(), or \fIexecvp\fP().
Suppose, fo' example, dat a application wants ta do tha equivalent
of:
.sp
.RS
.nf

\fBls -l *.c
\fP
.fi
.RE
.LP
but fo' some reason:
.sp
.RS
.nf

\fBsystem("ls -l *.c")
\fP
.fi
.RE
.LP
is not acceptable. Da application could obtain approximately the
same result rockin tha sequence:
.sp
.RS
.nf

\fBglobbuf.gl_offs = 2;
glob("*.c", GLOB_DOOFFS, NULL, &globbuf);
globbuf.gl_pathv[0] = "ls";
globbuf.gl_pathv[1] = "-l";
execvp("ls", &globbuf.gl_pathv[0]);
\fP
.fi
.RE
.LP
Usin tha same example:
.sp
.RS
.nf

\fBls -l *.c *.h
\fP
.fi
.RE
.LP
could be approximately simulated rockin GLOB_APPEND as bigs up:
.sp
.RS
.nf

\fBglobbuf.gl_offs = 2;
glob("*.c", GLOB_DOOFFS, NULL, &globbuf);
glob("*.h", GLOB_DOOFFS|GLOB_APPEND, NULL, &globbuf);
\&...
\fP
.fi
.RE
.SH APPLICATION USAGE
.LP
This function aint provided fo' tha purpose of enablin utilities
to big-ass up pathname expansion on they arguments, as this
operation is performed by tha shell, n' utilitizzles is explicitly
not sposed ta fuckin redo all dis bullshit. Instead, it is provided for
applications dat need ta do pathname expansion on strings obtained
from other sources, like fuckin a pattern typed by a user or read
from a gangbangin' file.
.LP
If a utilitizzle need ta peep if a pathname matches a given pattern, it
can use \fIfnmatch\fP().
.LP
Note dat \fIgl_pathc\fP n' \fIgl_pathv\fP have meanin even if \fIglob\fP()
fails. This allows \fIglob\fP() ta report
partial thangs up in dis biatch up in tha event of a error. Shiiit, dis aint no joke. But fuck dat shiznit yo, tha word on tha street is dat if \fIgl_pathc\fP
is 0, \fIgl_pathv\fP is unspecified even if \fIglob\fP()
did not return a error.
.LP
Da GLOB_NOCHECK option could be used when a application wants to
expand a pathname if wildcardz is specified yo, but wants to
treat tha pattern as just a strang otherwise. Da \fIsh\fP utility
might use dis for
option-arguments, fo' example.
.LP
Da freshly smoked up pathnames generated by a subsequent call wit GLOB_APPEND
are not sorted together wit tha previous pathnames. This
mirrors tha way dat tha shell handlez pathname expansion when multiple
expansions is done on a cold-ass lil command line.
.LP
Applications dat need tilde n' parameta expansion should use \fIwordexp\fP().
.SH RATIONALE
.LP
Dat shiznit was fronted dat tha GLOB_DOOFFS flag is unnecessary cuz it
could be simulated using:
.sp
.RS
.nf

\fBnew = (char **)malloc((n + pglob->gl_pathc + 1)
       * sizeof(char *));
(void) memcpy(new+n, pglob->gl_pathv,
       pglob->gl_pathc * sizeof(char *));
(void) memset(new, 0, n * sizeof(char *));
free(pglob->gl_pathv);
pglob->gl_pathv = new;
\fP
.fi
.RE
.LP
But fuck dat shiznit yo, tha word on tha street is dat dis assumes dat tha memory pointed ta by \fIgl_pathv\fP
is a funky-ass block dat was separately pimped rockin \fImalloc\fP(). This
is not necessarily tha case fo' realz. An application should make no assumptions
about
how tha memory referenced by fieldz up in \fIpglob\fP was allocated.
It might done been obtained from \fImalloc\fP() up in a big-ass chunk and
then carved up within \fIglob\fP(), or it might have been
created rockin a gangbangin' finger-lickin' different memory allocator. Shiiit, dis aint no joke. Well shiiiit, it aint tha intent of
the standard pimpers ta specify or imply how tha fuck tha memory used
by \fIglob\fP() is managed.
.LP
Da GLOB_APPEND flag would be used when a application wants ta expand
several different patterns tha fuck into a single list.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIexec\fP(), \fIfnmatch\fP(), \fIopendir\fP(), \fIreaddir\fP(),
\fIstat\fP(), \fIwordexp\fP(), tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, \fI<glob.h>\fP, tha Shell n' Utilitizzles volume
of IEEE\ Std\ 1003.1-2001
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
