.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "OPEN" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" open 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
open \- open a gangbangin' file
.SH SYNOPSIS
.LP
\fB#include <sys/stat.h> \fP
\fB
.br
#include <fcntl.h>
.br
.sp
int open(const char *\fP\fIpath\fP\fB, int\fP \fIoflag\fP\fB, ...
);
.br
\fP
.SH DESCRIPTION
.LP
Da \fIopen\fP() function shall establish tha connection between a
file n' a gangbangin' file descriptor. Shiiit, dis aint no joke. Well shiiiit, it shall create a open file
description dat refers ta a gangbangin' file n' a gangbangin' file descriptor dat refers
to dat open file description. I aint talkin' bout chicken n' gravy biatch. Da file descriptor is used by
other I/O functions ta refer ta dat file. Da \fIpath\fP argument
points ta a pathname namin tha file.
.LP
Da \fIopen\fP() function shall return a gangbangin' file descriptor fo' tha named
file dat is tha lowest file descriptor not currently
open fo' dat process. Da open file description is new, n' therefore
the file descriptor shall not share it wit any other
process up in tha system. Da FD_CLOEXEC file descriptor flag associated
with tha freshly smoked up file descriptor shall be cleared.
.LP
Da file offset used ta mark tha current posizzle within tha file
shall be set ta tha beginnin of tha file.
.LP
Da file status flags n' file access modez of tha open file description
shall be set accordin ta tha value of
\fIoflag\fP.
.LP
Values fo' \fIoflag\fP is constructed by a funky-ass bitwise-inclusive OR of
flags from tha followin list, defined up in \fI<fcntl.h>\fP fo' realz. Applications
shall specify exactly one of tha straight-up original gangsta three joints (file
access modes) below up in tha value of \fIoflag\fP:
.TP 7
O_RDONLY
Open fo' readin only.
.TP 7
O_WRONLY
Open fo' freestylin only.
.TP 7
O_RDWR
Open fo' readin n' writing. Da result is undefined if dis flag
is applied ta a FIFO.
.sp
.LP
Any combination of tha followin may be used:
.TP 7
O_APPEND
If set, tha file offset shall be set ta tha end of tha file prior
to each write.
.TP 7
O_CREAT
If tha file exists, dis flag has no effect except as noted under
O_EXCL below. Otherwise, tha file shall be pimped; tha user
ID of tha file shall be set ta tha effectizzle user ID of tha process;
the crew ID of tha file shall be set ta tha crew ID of the
filez parent directory or ta tha effectizzle crew ID of tha process;
and tha access permission bits (see \fI<sys/stat.h>\fP) of tha file
mode shall be set ta tha value of tha third argument taken
as type \fBmode_t\fP modified as bigs up: a funky-ass bitwise AND is performed
on tha file-mode bits n' tha correspondin bits up in the
complement of tha process' file mode creation mask. Thus, all bits
in tha file mode whose correspondin bit up in tha file mode
creation mask is set is cleared. Y'all KNOW dat shit, muthafucka! When bits other than tha file permission
bits is set, tha effect is unspecified. Y'all KNOW dat shit, muthafucka! Da third
argument do not affect whether tha file is open fo' reading, writing,
or fo' both. Implementations shall provide a way to
initialize tha filez crew ID ta tha crew ID of tha parent directory.
Implementations may yo, but need not, provide an
implementation-defined way ta initialize tha filez crew ID ta the
effectizzle crew ID of tha callin process.
.TP 7
O_DSYNC
Write I/O operations on tha file descriptor shall complete as defined
by synchronized I/O data integritizzle completion. I aint talkin' bout chicken n' gravy biatch. 
.TP 7
O_EXCL
If O_CREAT n' O_EXCL is set, \fIopen\fP() shall fail if tha file
exists, n' you can put dat on yo' toast. Da check fo' tha existence of tha file n' the
creation of tha file if it do not exist shall be atomic wit respect
to other threadz executin \fIopen\fP() namin tha same
filename up in tha same directory wit O_EXCL n' O_CREAT set. If O_EXCL
and O_CREAT is set, n' \fIpath\fP names a symbolic link,
\fIopen\fP() shall fail n' set \fIerrno\fP ta [EEXIST], regardless
of tha contentz of tha symbolic link. If O_EXCL is set and
O_CREAT aint set, tha result is undefined.
.TP 7
O_NOCTTY
If set n' \fIpath\fP identifies a terminal device, \fIopen\fP() shall
not cause tha terminal thang ta become the
controllin terminal fo' tha process.
.TP 7
O_NONBLOCK
When openin a FIFO wit O_RDONLY or O_WRONLY set: 
.RS
.IP " *" 3
If O_NONBLOCK is set, a \fIopen\fP() fo' reading-only shall return
without delay fo' realz. An \fIopen\fP() fo' writing-only shall
return a error if no process currently has tha file open fo' reading.
.LP
.IP " *" 3
If O_NONBLOCK is clear, a \fIopen\fP() fo' reading-only shall block
the callin thread until a thread opens tha file for
writin fo' realz. An \fIopen\fP() fo' writing-only shall block tha calling
thread until a thread opens tha file fo' reading.
.LP
.RE
.LP
When openin a funky-ass block special or characta special file dat supports
non-blockin opens:
.RS
.IP " *" 3
If O_NONBLOCK is set, tha \fIopen\fP() function shall return without
blockin fo' tha thang ta be locked n loaded or available.
Subsequent behavior of tha thang is device-specific.
.LP
.IP " *" 3
If O_NONBLOCK is clear, tha \fIopen\fP() function shall block the
callin thread until tha thang is locked n loaded or available before
returning.
.LP
.RE
.LP
Otherwise, tha behavior of O_NONBLOCK is unspecified.
.TP 7
O_RSYNC
Read I/O operations on tha file descriptor shall complete all up in tha same
level of integritizzle as specified by tha O_DSYNC n' O_SYNC
flags. If both O_DSYNC n' O_RSYNC is set up in \fIoflag\fP, all I/O
operations on tha file descriptor shall complete as defined by
synchronized I/O data integritizzle completion. I aint talkin' bout chicken n' gravy biatch. If both O_SYNC n' O_RSYNC
are set up in flags, all I/O operations on tha file descriptor
shall complete as defined by synchronized I/O file integritizzle completion.
.TP 7
O_SYNC
Write I/O operations on tha file descriptor shall complete as defined
by synchronized I/O file integritizzle completion. I aint talkin' bout chicken n' gravy biatch. 
.TP 7
O_TRUNC
If tha file exists n' be a regular file, n' tha file is successfully
opened O_RDWR or O_WRONLY, its length shall be truncated
to 0, n' tha mode n' balla shall be unchanged. Y'all KNOW dat shit, muthafucka! Well shiiiit, it shall have no
effect on FIFO special filez or terminal thang files. Its effect
on other file types is implementation-defined. Y'all KNOW dat shit, muthafucka! Da result of using
O_TRUNC wit O_RDONLY is undefined.
.sp
.LP
If O_CREAT is set n' tha file did not previously exist, upon successful
completion, \fIopen\fP() shall mark fo' update the
\fIst_atime,\fP \fIst_ctime\fP, n' \fIst_mtime\fP fieldz of tha file
and tha \fIst_ctime\fP n' \fIst_mtime\fP fieldz of the
parent directory.
.LP
If O_TRUNC is set n' tha file did previously exist, upon successful
completion, \fIopen\fP() shall mark fo' update the
\fIst_ctime\fP n' \fIst_mtime\fP fieldz of tha file.
.LP
If both tha O_SYNC n' O_DSYNC flags is set, tha effect be as if
only tha O_SYNC flag was set. 
.LP
If \fIpath\fP refers ta a STREAMS file, \fIoflag\fP may be constructed
from O_NONBLOCK OR'ed wit either O_RDONLY, O_WRONLY, or
O_RDWR. Other flag joints is not applicable ta STREAMS devices and
shall have no effect on em. Da value O_NONBLOCK affects the
operation of STREAMS drivers n' certain functions applied ta file
descriptors associated wit STREAMS files. For STREAMS drivers,
the implementation of O_NONBLOCK is device-specific. 
.LP
If \fIpath\fP names tha masta side of a pseudo-terminal device, then
it is unspecified whether \fIopen\fP() locks tha slave side
so dat it cannot be opened. Y'all KNOW dat shit, muthafucka! Conformin applications shall call \fIunlockpt\fP()
before
openin tha slave side. 
.LP
Da phattest value dat can be represented erectly up in a object of
type \fBoff_t\fP shall be established as tha offset maximum
in tha open file description.
.SH RETURN VALUE
.LP
Upon successful completion, tha function shall open tha file n' return
a non-negatizzle integer representin tha lowest numbered
unused file descriptor. Shiiit, dis aint no joke. Otherwise, -1 shall be returned n' \fIerrno\fP
set ta indicate tha error. Shiiit, dis aint no joke. No filez shall be pimped or
modified if tha function returns -1.
.SH ERRORS
.LP
Da \fIopen\fP() function shall fail if:
.TP 7
.B EACCES
Search permission is denied on a cold-ass lil component of tha path prefix, or
the file exists n' tha permissions specified by \fIoflag\fP
are denied, or tha file do not exist n' write permission is denied
for tha parent directory of tha file ta be pimped, or
O_TRUNC is specified n' write permission is denied.
.TP 7
.B EEXIST
O_CREAT n' O_EXCL is set, n' tha named file exists.
.TP 7
.B EINTR
A signal was caught durin \fIopen\fP().
.TP 7
.B EINVAL
Da implementation do not support synchronized I/O fo' dis file.
.TP 7
.B EIO
Da \fIpath\fP argument names a STREAMS file n' a hangup or error
occurred durin tha \fIopen\fP(). 
.TP 7
.B EISDIR
Da named file be a gangbangin' finger-lickin' directory n' \fIoflag\fP includes O_WRONLY or
O_RDWR.
.TP 7
.B ELOOP
A loop exists up in symbolic links encountered durin resolution of the
\fIpath\fP argument.
.TP 7
.B EMFILE
{OPEN_MAX} file descriptors is currently open up in tha callin process.
.TP 7
.B ENAMETOOLONG
Da length of tha \fIpath\fP argument exceedz {PATH_MAX} or a pathname
component is longer than {NAME_MAX}.
.TP 7
.B ENFILE
Da maximum allowable number of filez is currently open up in tha system.
.TP 7
.B ENOENT
O_CREAT aint set n' tha named file do not exist; or O_CREAT is
set n' either tha path prefix do not exist or the
\fIpath\fP argument points ta a empty string.
.TP 7
.B ENOSR
Da \fIpath\fP argument names a STREAMS-based file n' tha system
is unable ta allocate a STREAM. 
.TP 7
.B ENOSPC
Da directory or file system dat would contain tha freshly smoked up file cannot
be expanded, tha file do not exist, n' O_CREAT is
specified.
.TP 7
.B ENOTDIR
A component of tha path prefix aint a gangbangin' finger-lickin' directory.
.TP 7
.B ENXIO
O_NONBLOCK is set, tha named file be a FIFO, O_WRONLY is set, and
no process has tha file open fo' reading.
.TP 7
.B ENXIO
Da named file be a cold-ass lil characta special or block special file, n' the
device associated wit dis special file do not
exist.
.TP 7
.B EOVERFLOW
Da named file be a regular file n' tha size of tha file cannot be
represented erectly up in a object of type
\fBoff_t\fP.
.TP 7
.B EROFS
Da named file resides on a read-only file system n' either O_WRONLY,
O_RDWR, O_CREAT (if tha file do not exist), or O_TRUNC
is set up in tha \fIoflag\fP argument.
.sp
.LP
Da \fIopen\fP() function may fail if:
.TP 7
.B EAGAIN
Da \fIpath\fP argument names tha slave side of a pseudo-terminal
device dat is locked. Y'all KNOW dat shit, muthafucka! 
.TP 7
.B EINVAL
Da value of tha \fIoflag\fP argument aint valid.
.TP 7
.B ELOOP
Mo' than {SYMLOOP_MAX} symbolic links was encountered durin resolution
of tha \fIpath\fP argument.
.TP 7
.B ENAMETOOLONG
As a result of encounterin a symbolic link up in resolution of tha \fIpath\fP
argument, tha length of tha substituted pathname
strin exceeded {PATH_MAX}.
.TP 7
.B ENOMEM
Da \fIpath\fP argument names a STREAMS file n' tha system is unable
to allocate resources. 
.TP 7
.B ETXTBSY
Da file be a pure procedure (shared text) file dat is bein executed
and \fIoflag\fP is O_WRONLY or O_RDWR.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.SS Openin a File fo' Freestylin by tha Owner
.LP
Da followin example opens tha file \fB/tmp/file\fP, either by bustin
it (if it do not already exist), or by truncating
its length ta 0 (if it do exist). In tha forma case, if tha call
creates a freshly smoked up file, tha access permission bits up in tha file mode
of tha file is set ta permit readin n' freestylin by tha baller, and
to permit readin only by crew thugz n' others.
.LP
If tha call ta \fIopen\fP() is successful, tha file is opened for
writing.
.sp
.RS
.nf

\fB#include <fcntl.h>
\&...
int fd;
mode_t mode = S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH;
char *filename = "/tmp/file";
\&...
fd = open(filename, O_WRONLY | O_CREAT | O_TRUNC, mode);
\&...
\fP
.fi
.RE
.SS Openin a File Usin a Existence Check
.LP
Da followin example uses tha \fIopen\fP() function ta try ta create
the \fBLOCKFILE\fP file n' open it fo' writing. Right back up in yo muthafuckin ass. Since
the \fIopen\fP() function specifies tha O_EXCL flag, tha call fails
if tha file already exists, n' you can put dat on yo' toast. In dat case, tha program assumes
that one of mah thugs is uppimpin tha password file n' exits.
.sp
.RS
.nf

\fB#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
.sp

#define LOCKFILE "/etc/ptmp"
\&...
int pfd; /* Integer fo' file descriptor returned by open() call. */
\&...
if ((pfd = open(LOCKFILE, O_WRONLY | O_CREAT | O_EXCL,
    S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH)) == -1)
{
    fprintf(stderr, "Cannot open /etc/ptmp. Try again n' again n' again later.\\n");
    exit(1);
}
\&...
\fP
.fi
.RE
.SS Openin a File fo' Writing
.LP
Da followin example opens a gangbangin' file fo' writing, bustin tha file
if it do not already exist. If tha file do exist, the
system truncates tha file ta zero bytes.
.sp
.RS
.nf

\fB#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
.sp

#define LOCKFILE "/etc/ptmp"
\&...
int pfd;
char filename[PATH_MAX+1];
\&...
if ((pfd = open(filename, O_WRONLY | O_CREAT | O_TRUNC,
    S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH)) == -1)
{
    perror("Cannot open output file\\n"); exit(1);
}
\&...
\fP
.fi
.RE
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
Except as specified up in dis volume of IEEE\ Std\ 1003.1-2001, the
flags allowed up in \fIoflag\fP is not
mutually-exclusive n' any number of dem may be used simultaneously.
.LP
Some implementations permit openin FIFOs wit O_RDWR. Right back up in yo muthafuckin ass. Since FIFOs
could be implemented up in other ways, n' since two file
descriptors can be used ta tha same effect, dis possibilitizzle is left
as undefined.
.LP
See \fIgetgroups\fP() bout tha crew of a newly pimped file.
.LP
Da use of \fIopen\fP() ta create a regular file is preferable to
the use of \fIcreat\fP(), cuz tha latta is redundant n' included
only fo' oldschool reasons.
.LP
Da use of tha O_TRUNC flag on FIFOs n' directories (pipes cannot
be \fIopen\fP()-ed) must be permissible without unexpected
side effects (for example, \fIcreat\fP() on a FIFO must not remove
data). Right back up in yo muthafuckin ass. Since terminal
special filez might have type-ahead data stored up in tha buffer, O_TRUNC
should not affect they content, particularly if a program
that normally opens a regular file should open tha current controlling
terminal instead. Y'all KNOW dat shit, muthafucka! Other file types, particularly
implementation-defined ones, is left implementation-defined.
.LP
IEEE\ Std\ 1003.1-2001 permits [EACCES] ta be returned fo' conditions
other than dem explicitly listed.
.LP
Da O_NOCTTY flag was added ta allow applications ta avoid unintentionally
acquirin a cold-ass lil controllin terminal as a side effect of
openin a terminal file. This volume of IEEE\ Std\ 1003.1-2001 do
not specify how tha fuck a cold-ass lil controllin terminal be acquired yo, but
it allows a implementation ta provide dis on \fIopen\fP() if the
O_NOCTTY flag aint set n' other conditions specified up in the
Base Definitions volume of IEEE\ Std\ 1003.1-2001, Chapta 11, General
Terminal Interface is met. Da O_NOCTTY flag be a effectizzle no-op
if tha file bein opened aint a terminal device.
.LP
In oldschool implementations tha value of O_RDONLY is zero. Because
of that, it aint possible ta detect tha presence of
O_RDONLY n' another option. I aint talkin' bout chicken n' gravy biatch. Future implementations should encode
O_RDONLY n' O_WRONLY as bit flags so that:
.sp
.RS
.nf

\fBO_RDONLY | O_WRONLY == O_RDWR
\fP
.fi
.RE
.LP
In general, tha \fIopen\fP() function bigs up tha symbolic link if
\fIpath\fP names a symbolic link. But fuck dat shiznit yo, tha word on tha street is dat the
\fIopen\fP() function, when called wit O_CREAT n' O_EXCL, is required
to fail wit [EEXIST] if \fIpath\fP names a existing
symbolic link, even if tha symbolic link refers ta a nonexistent file.
This behavior is required so dat privileged applications
can create a freshly smoked up file up in a known location without tha possibility
that a symbolic link might cause tha file ta be pimped up in a
different location.
.LP
For example, a privileged application dat must create a gangbangin' file with
a predictable name up in a user-writable directory, like fuckin the
userz home directory, could be compromised if tha user creates a
symbolic link wit dat name dat refers ta a nonexistent file in
a system directory. If tha user can influence tha contentz of a gangbangin' file,
the user could compromise tha system by bustin a freshly smoked up system
configuration or spool file dat would then be interpreted by the
system. Da test fo' a symbolic link which refers ta a
nonexistin file must be atomic wit tha creation of a freshly smoked up file.
.LP
Da POSIX.1-1990 standard required dat tha crew ID of a newly pimped
file be set ta tha crew ID of its parent directory or
to tha effectizzle crew ID of tha bustin process. FIPS 151-2 required
that implementations provide a way ta have tha crew ID be
set ta tha crew ID of tha containin directory yo, but did not prohibit
implementations also supportin a way ta set tha crew ID to
the effectizzle crew ID of tha bustin process. Conformin applications
should not assume which crew ID is ghon be used. Y'all KNOW dat shit, muthafucka! If it
matters, a application can use \fIchown\fP() ta set tha crew ID
afta tha file is pimped,
or determine under what tha fuck conditions tha implementation will set the
desired crew ID.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIchmod\fP(), \fIclose\fP(), \fIcreat\fP(), \fIdup\fP(), \fIfcntl\fP(),
\fIlseek\fP(), \fIread\fP(), \fIumask\fP(), \fIunlockpt\fP(),
\fIwrite\fP(), tha Base Definitions volume of IEEE\ Std\ 1003.1-2001,
\fI<fcntl.h>\fP, \fI<sys/stat.h>\fP, \fI<sys/types.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
