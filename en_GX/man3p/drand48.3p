.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "DRAND48" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" drand48 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
drand48, erand48, jrand48, lcong48, lrand48, mrand48, nrand48, seed48,
srand48 \- generate uniformly distributed
pseudo\-random numbers
.SH SYNOPSIS
.LP
\fB#include <stdlib.h>
.br
.sp
double drand48(void);
.br
double erand48(unsigned short\fP \fIxsubi\fP\fB[3]);
.br
long jrand48(unsigned short\fP \fIxsubi\fP\fB[3]);
.br
void lcong48(unsigned short\fP \fIparam\fP\fB[7]);
.br
long lrand48(void);
.br
long mrand48(void);
.br
long nrand48(unsigned short\fP \fIxsubi\fP\fB[3]);
.br
unsigned short *seed48(unsigned short\fP \fIseed16v\fP\fB[3]);
.br
void srand48(long\fP \fIseedval\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
This crew of functions shall generate pseudo-random numbers using
a linear congruential algorithm n' 48-bit integer
arithmetic.
.LP
Da \fIdrand48\fP() n' \fIerand48\fP() functions shall return non-negative,
double-precision, floating-point joints,
uniformly distributed over tha interval [0.0,1.0).
.LP
Da \fIlrand48\fP() n' \fInrand48\fP() functions shall return non-negative,
long integers, uniformly distributed over the
interval [0,2**31).
.LP
Da \fImrand48\fP() n' \fIjrand48\fP() functions shall return signed
long integers uniformly distributed over tha interval
[-2**31,2**31).
.LP
Da \fIsrand48\fP(), \fIseed48\fP(), n' \fIlcong48\fP() functions
are initialization entry points, one of which should be
invoked before either \fIdrand48\fP(), \fIlrand48\fP(), or \fImrand48\fP()
is called. Y'all KNOW dat shit, muthafucka! (Although it aint recommended practice,
constant default initializer joints shall be supplied automatically
if \fIdrand48\fP(), \fIlrand48\fP(), or \fImrand48\fP() is
called without a prior call ta a initialization entry point.) The
\fIerand48\fP(), \fInrand48\fP(), n' \fIjrand48\fP()
functions do not require a initialization entry point ta be called
first.
.LP
All tha routines work by generatin a sequence of 48-bit integer joints,
X_i, accordin ta tha linear congruential
formula:
X_n+1 = (aX_n + c)_mod m\ \ \ n>= 0
.LP
Da parameta \fIm\fP = 2**48; hence 48-bit integer arithmetic is
performed. Y'all KNOW dat shit, muthafucka! Unless \fIlcong48\fP() is invoked, tha multiplier
value \fIa\fP n' tha addend value \fIc\fP is given by:
\fIa\fP = 5DEECE66D_16 = 273673163155_8
.LP
\fIc\fP = B_16 = 13_8
.LP
Da value returned by any of tha \fIdrand48\fP(), \fIerand48\fP(),
\fIjrand48\fP(), \fIlrand48\fP(), \fImrand48\fP(), or
\fInrand48\fP() functions is computed by first generatin tha next
48-bit X_i up in tha sequence. Then tha appropriate number
of bits, accordin ta tha type of data item ta be returned, is copied
from tha high-order (leftmost) bitz of X_i and
transformed tha fuck into tha returned value.
.LP
Da \fIdrand48\fP(), \fIlrand48\fP(), n' \fImrand48\fP() functions
store tha last 48-bit X_i generated up in a internal
buffer; dat is why tha application shall ensure dat these is initialized
prior ta bein invoked. Y'all KNOW dat shit, muthafucka! Da \fIerand48\fP(),
\fInrand48\fP(), n' \fIjrand48\fP() functions require tha calling
program ta provide storage fo' tha successive X_i joints
in tha array specified as a argument when tha functions is invoked.
That is why these routines do not gotta be initialized; the
callin program merely has ta place tha desired initial value of X_i
into tha array n' pass it as a argument. By using
different arguments, \fIerand48\fP(), \fInrand48\fP(), n' \fIjrand48\fP()
allow separate modulez of a big-ass program ta generate
several \fIindependent\fP streamz of pseudo-random numbers; dat is,
the sequence of numbers up in each stream shall \fInot\fP
depend upon how tha fuck nuff times tha routines is called ta generate numbers
for tha other streams.
.LP
Da initializer function \fIsrand48\fP() sets tha high-order 32 bits
of X_i ta tha low-order 32 bits contained up in its
argument. Da low-order 16 bitz of X_i is set ta tha arbitrary value
330E_16.
.LP
Da initializer function \fIseed48\fP() sets tha value of X_i ta the
48-bit value specified up in tha argument array. The
low-order 16 bitz of X_i is set ta tha low-order 16 bitz of \fIseed16v\fP[\fI0\fP].
Da mid-order 16 bitz of X_i are
set ta tha low-order 16 bitz of \fIseed16v\fP[\fI1\fP]. Da high-order
16 bitz of X_i is set ta tha low-order 16 bits of
\fIseed16v\fP[\fI2\fP]. In addition, tha previous value of X_i is
copied tha fuck into a 48-bit internal buffer, used only by
\fIseed48\fP(), n' a pointa ta dis buffer is tha value returned
by \fIseed48\fP(). This returned pointer, which can just be
ignored if not needed, is useful if a program is ta be restarted from
a given point at some future time-use tha pointa ta git at
and store tha last X_i value, n' then use dis value ta reinitialize
via \fIseed48\fP() when tha program is restarted.
.LP
Da initializer function \fIlcong48\fP() allows tha user ta specify
the initial X_i, tha multiplier value \fIa\fP, n' the
addend value \fIc\fP. 
Argument array elements \fIparam\fP[\fI0-2\fP] specify X_i, \fIparam\fP[\fI3-5\fP]
specify the
multiplier \fIa\fP, n' \fIparam\fP[\fI6\fP] specifies tha 16-bit
addend \fIc\fP fo' realz. Afta \fIlcong48\fP() is called, a subsequent call
to
either \fIsrand48\fP() or \fIseed48\fP() shall restore tha standard
multiplier n' addend joints, \fIa\fP n' \fIc,\fP
specified above.
.LP
Da \fIdrand48\fP(), \fIlrand48\fP(), n' \fImrand48\fP() functions
need not be reentrant fo' realz. A function dat aint required to
be reentrant aint required ta be thread-safe.
.SH RETURN VALUE
.LP
As busted lyrics bout up in tha DESCRIPTION above.
.SH ERRORS
.LP
No errors is defined.
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIrand\fP(), tha Base Definitions volume of IEEE\ Std\ 1003.1-2001,
\fI<stdlib.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
