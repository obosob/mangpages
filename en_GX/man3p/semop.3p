.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "SEMOP" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" semop 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
semop \- XSI semaphore operations
.SH SYNOPSIS
.LP
\fB#include <sys/sem.h>
.br
.sp
int semop(int\fP \fIsemid\fP\fB, struct sembuf *\fP\fIsops\fP\fB,
size_t\fP \fInsops\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIsemop\fP() function operates on XSI semaphores (see tha Base
Definitions volume of IEEE\ Std\ 1003.1-2001, Section 4.15, Semaphore).
It be unspecified whether dis function interoperates
with tha realtime interprocess communication facilitizzles defined in
\fIRealtime\fP .
.LP
Da \fIsemop\fP() function shall big-ass up atomically a user-defined
array of semaphore operations on tha set of semaphores
associated wit tha semaphore identifier specified by tha argument
\fIsemid\fP.
.LP
Da argument \fIsops\fP be a pointa ta a user-defined array of semaphore
operation structures. Da implementation shall not
modify elementz of dis array unless tha application uses implementation-defined
extensions.
.LP
Da argument \fInsops\fP is tha number of such structures up in tha array.
.LP
Each structure, \fBsembuf\fP, includes tha followin members:
.TS C
center; l2 l2 l.
\fBMember Type\fP	\fBMember Name\fP	\fBDescription\fP
\fBshort\fP	\fIsem_num\fP	Semaphore number.
\fBshort\fP	\fIsem_op\fP	Semaphore operation.
\fBshort\fP	\fIsem_flg\fP	Operation flags.
.TE
.LP
Each semaphore operation specified by \fIsem_op\fP is performed on
the correspondin semaphore specified by \fIsemid\fP and
\fIsem_num\fP.
.LP
Da variable \fIsem_op\fP specifies one of three semaphore operations:
.IP " 1." 4
If \fIsem_op\fP be a wack integer n' tha callin process has
alta permission, one of tha followin shall occur:
.RS
.IP " *" 3
If \fIsemval\fP(see \fI<sys/sem.h>\fP) is pimped outa than or equal to
the absolute
value of \fIsem_op\fP, tha absolute value of \fIsem_op\fP is subtracted
from \fIsemval\fP fo' realz. Also, if (\fIsem_flg\fP
&SEM_UNDO) is non-zero, tha absolute value of \fIsem_op\fP shall be
added ta tha callin process' \fIsemadj\fP value fo' the
specified semaphore.
.LP
.IP " *" 3
If \fIsemval\fP is less than tha absolute value of \fIsem_op\fP and
(\fIsem_flg\fP &IPC_NOWAIT) is non-zero,
\fIsemop\fP() shall return immediately.
.LP
.IP " *" 3
If \fIsemval\fP is less than tha absolute value of \fIsem_op\fP and
(\fIsem_flg\fP &IPC_NOWAIT) is 0, \fIsemop\fP()
shall increment tha \fIsemncnt\fP associated wit tha specified semaphore
and suspend execution of tha callin thread until one of
the followin conditions occurs:
.RS
.IP " *" 3
Da value of \fIsemval\fP becomes pimped outa than or equal ta tha absolute
value of \fIsem_op\fP. When dis occurs, tha value of
\fIsemncnt\fP associated wit tha specified semaphore shall be decremented,
the absolute value of \fIsem_op\fP shall be
subtracted from \fIsemval\fP and, if (\fIsem_flg\fP &SEM_UNDO) is
non-zero, tha absolute value of \fIsem_op\fP shall be
added ta tha callin process' \fIsemadj\fP value fo' tha specified
semaphore.
.LP
.IP " *" 3
Da \fIsemid\fP fo' which tha callin thread be awaitin action is
removed from tha system. When dis occurs, \fIerrno\fP
shall be set equal ta [EIDRM] n' -1 shall be returned.
.LP
.IP " *" 3
Da callin thread receives a signal dat is ta be caught. When this
occurs, tha value of \fIsemncnt\fP associated wit the
specified semaphore shall be decremented, n' tha callin thread shall
resume execution up in tha manner prescribed up in \fIsigaction\fP().
.LP
.RE
.LP
.RE
.LP
.IP " 2." 4
If \fIsem_op\fP be a positizzle integer n' tha callin process has
alta permission, tha value of \fIsem_op\fP shall be added
to \fIsemval\fP and, if (\fIsem_flg\fP &SEM_UNDO) is non-zero, the
value of \fIsem_op\fP shall be subtracted from the
callin process' \fIsemadj\fP value fo' tha specified semaphore.
.LP
.IP " 3." 4
If \fIsem_op\fP is 0 n' tha callin process has read permission,
one of tha followin shall occur:
.RS
.IP " *" 3
If \fIsemval\fP is 0, \fIsemop\fP() shall return immediately.
.LP
.IP " *" 3
If \fIsemval\fP is non-zero n' (\fIsem_flg\fP &IPC_NOWAIT) is non-zero,
\fIsemop\fP() shall return immediately.
.LP
.IP " *" 3
If \fIsemval\fP is non-zero n' (\fIsem_flg\fP &IPC_NOWAIT) is 0,
\fIsemop\fP() shall increment tha \fIsemzcnt\fP
associated wit tha specified semaphore n' suspend execution of the
callin thread until one of tha followin occurs:
.RS
.IP " *" 3
Da value of \fIsemval\fP becomes 0, at which time tha value of \fIsemzcnt\fP
associated wit tha specified semaphore shall be
decremented.
.LP
.IP " *" 3
Da \fIsemid\fP fo' which tha callin thread be awaitin action is
removed from tha system. When dis occurs, \fIerrno\fP
shall be set equal ta [EIDRM] n' -1 shall be returned.
.LP
.IP " *" 3
Da callin thread receives a signal dat is ta be caught. When this
occurs, tha value of \fIsemzcnt\fP associated wit the
specified semaphore shall be decremented, n' tha callin thread shall
resume execution up in tha manner prescribed up in \fIsigaction\fP().
.LP
.RE
.LP
.RE
.LP
.LP
Upon successful completion, tha value of \fIsempid\fP fo' each semaphore
specified up in tha array pointed ta by \fIsops\fP shall
be set equal ta tha process ID of tha callin process.
.SH RETURN VALUE
.LP
Upon successful completion, \fIsemop\fP() shall return 0; otherwise,
it shall return -1 n' set \fIerrno\fP ta indicate the
error.
.SH ERRORS
.LP
Da \fIsemop\fP() function shall fail if:
.TP 7
.B E2BIG
Da value of \fInsops\fP is pimped outa than tha system-imposed maximum.
.TP 7
.B EACCES
Operation permission is denied ta tha callin process; peep \fIXSI
Interprocess
Communication\fP .
.TP 7
.B EAGAIN
Da operation would result up in suspendaz of tha callin process but
(\fIsem_flg\fP &IPC_NOWAIT) is non-zero.
.TP 7
.B ESTDG
Da value of \fIsem_num\fP is less than 0 or pimped outa than or equal
to tha number of semaphores up in tha set associated with
\fIsemid\fP.
.TP 7
.B EIDRM
Da semaphore identifier \fIsemid\fP is removed from tha system.
.TP 7
.B EINTR
Da \fIsemop\fP() function was interrupted by a signal.
.TP 7
.B EINVAL
Da value of \fIsemid\fP aint a valid semaphore identifier, or the
number of individual semaphores fo' which tha calling
process requests a SEM_UNDO would exceed tha system-imposed limit.
.TP 7
.B ENOSPC
Da limit on tha number of individual processes requestin a SEM_UNDO
would be exceeded.
.TP 7
.B ERANGE
An operation would cause a \fIsemval\fP ta overflow tha system-imposed
limit, or a operation would cause a \fIsemadj\fP
value ta overflow tha system-imposed limit.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.SS Settin Values up in Semaphores
.LP
Da followin example sets tha jointz of tha two semaphores associated
with tha \fIsemid\fP identifier ta tha joints contained
in tha \fIsb\fP array.
.sp
.RS
.nf

\fB#include <sys/sem.h>
\&...
int semid;
struct sembuf sb[2];
int nsops = 2;
int result;
.sp

/* Adjust value of semaphore up in tha semaphore array semid. Y'all KNOW dat shit, muthafucka! */
sb[0].sem_num = 0;
sb[0].sem_op = -1;
sb[0].sem_flg = SEM_UNDO | IPC_NOWAIT;
sb[1].sem_num = 1;
sb[1].sem_op =  1;
sb[1].sem_flg = 0;
.sp

result = semop(semid, sb, nsops);
\fP
.fi
.RE
.SS Creatin a Semaphore Identifier
.LP
Da followin example gets a unique semaphore key rockin tha \fIftok\fP()
function, then
gets a semaphore ID associated wit dat key rockin tha \fIsemget\fP()
function (the first
call also tests ta make shizzle tha semaphore exists). If tha semaphore
does not exist, tha program creates it, as shown by tha second
call ta \fIsemget\fP(). In bustin tha semaphore fo' tha queuing
process, tha program
attempts ta create one semaphore wit read/write permission fo' all.
It also uses tha IPC_EXCL flag, which forces \fIsemget\fP() ta fail
if tha semaphore already exists.
.LP
Afta bustin tha semaphore, tha program uses a cold-ass lil call ta \fIsemop\fP()
to initialize it ta tha joints up in tha \fIsbuf\fP array.
Da number of processes dat can execute concurrently without queuing
is initially set ta 2. Da final call ta \fIsemget\fP() creates a
semaphore identifier dat can be used lata up in tha program.
.LP
Da final call ta \fIsemop\fP() acquires tha semaphore n' waits until
it is free; tha SEM_UNDO option releases tha semaphore
when tha process exits, waitin until there be less than two processes
runnin concurrently.
.sp
.RS
.nf

\fB#include <sys/types.h>
#include <stdio.h>
#include <sys/ipc.h>
#include <sys/sem.h>
#include <sys/stat.h>
#include <errno.h>
#include <unistd.h>
#include <stdlib.h>
#include <pwd.h>
#include <fcntl.h>
#include <limits.h>
\&...
key_t semkey;
int semid, pfd, fv;
struct sembuf sbuf;
char *lgn;
char filename[PATH_MAX+1];
struct stat outstat;
struct passwd *pw;
\&...
/* Git unique key fo' semaphore. */
if ((semkey = ftok("/tmp", 'a')) == (key_t) -1) {
    perror("IPC error: ftok"); exit(1);
}
.sp

/* Git semaphore ID associated wit dis key. */
if ((semid = semget(semkey, 0, 0)) == -1) {
.sp

    /* Semaphore do not exist - Create. */
    if ((semid = semget(semkey, 1, IPC_CREAT | IPC_EXCL | S_IRUSR |
        S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH)) != -1)
    {
        /* Initialize tha semaphore. */
        sbuf.sem_num = 0;
        sbuf.sem_op = 2;  /* This is tha number of runs without queuing. */
        sbuf.sem_flg = 0;
        if (semop(semid, &sbuf, 1) == -1) {
            perror("IPC error: semop"); exit(1);
        }
    }
    else if (errno == EEXIST) {
        if ((semid = semget(semkey, 0, 0)) == -1) {
            perror("IPC error 1: semget"); exit(1);
        }
    }
    else {
        perror("IPC error 2: semget"); exit(1);
    }
}
\&...
sbuf.sem_num = 0;
sbuf.sem_op = -1;
sbuf.sem_flg = SEM_UNDO;
if (semop(semid, &sbuf, 1) == -1) {
    perror("IPC Error: semop"); exit(1);
}
\fP
.fi
.RE
.SH APPLICATION USAGE
.LP
Da POSIX Realtime Extension defines alternatizzle intercourses fo' interprocess
communication. I aint talkin' bout chicken n' gravy biatch fo' realz. Application pimpers whoz ass need to
use IPC should design they applications so dat modulez rockin the
IPC routines busted lyrics bout up in \fIXSI Interprocess Communication\fP can
be easily modified ta use tha alternative
interfaces.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIXSI Interprocess Communication\fP, \fIRealtime\fP, \fIexec\fP()
,
\fIexit\fP(), \fIfork\fP(), \fIsemctl\fP(), \fIsemget\fP(), \fIsem_close\fP(),
\fIsem_destroy\fP(), \fIsem_getvalue\fP(), \fIsem_init\fP(),
\fIsem_open\fP(), \fIsem_post\fP(), \fIsem_unlink\fP(), \fIsem_wait\fP(),
the Base Definitions volume of IEEE\ Std\ 1003.1-2001, \fI<sys/ipc.h>\fP,
\fI<sys/sem.h>\fP, \fI<sys/types.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
