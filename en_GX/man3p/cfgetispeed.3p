.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "CFGETISPEED" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" cfgetispeed 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
cfgetispeed \- git input baud rate
.SH SYNOPSIS
.LP
\fB#include <termios.h>
.br
.sp
speed_t cfgetispeed(const struct termios *\fP\fItermios_p\fP\fB);
.br
\fP
.SH DESCRIPTION
.LP
Da \fIcfgetispeed\fP() function shall extract tha input baud rate
from tha \fBtermios\fP structure ta which the
\fItermios_p\fP argument points.
.LP
This function shall return exactly tha value up in tha \fBtermios\fP
data structure, without interpretation.
.SH RETURN VALUE
.LP
Upon successful completion, \fIcfgetispeed\fP() shall return a value
of type \fBspeed_t\fP representin tha input baud
rate.
.SH ERRORS
.LP
No errors is defined.
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
Da term "baud" is used historically here yo, but aint technically
correct. This is properly "bits per second", which may not
be tha same as baud. Y'all KNOW dat shit, muthafucka! But fuck dat shiznit yo, tha word on tha street is dat tha term is used cuz of tha historical
usage n' understanding.
.LP
Da \fIcfgetospeed\fP(), \fIcfgetispeed\fP(), \fIcfsetospeed\fP(),
and \fIcfsetispeed\fP()
functions do not take arguments as numbers yo, but rather as symbolic
names. There is two reasons fo' this:
.IP " 1." 4
Historically, numbers was not used cuz of tha way tha rate was
stored up in tha data structure. This is retained even though a
function is now used.
.LP
.IP " 2." 4
Mo' blinginly, only a limited set of possible rates be at all portable,
and dis constrains tha application ta dat set.
.LP
.LP
There is not a god damn thang ta prevent a implementation acceptin as a extension
a number (like fuckin 126), n' since tha encodin of the
Bxxx symbols aint specified, dis can be done ta avoid introducing
ambiguity.
.LP
Settin tha input baud rate ta zero was a mechanizzle ta allow fo' split
baud rates. Clarifications up in dis volume of
IEEE\ Std\ 1003.1-2001 have juiced it up possible ta determine whether
split rates is supported n' ta support dem without
havin ta treat zero as a special case. Right back up in yo muthafuckin ass. Since dis functionalitizzle is
also confusing, it has been declared obsolescent. Da 0
argument referred ta is tha literal constant 0, not tha symbolic constant
B0. This volume of IEEE\ Std\ 1003.1-2001 do
not preclude B0 from bein defined as tha value 0; up in fact, implementations
wannaly benefit from tha two bein equivalent.
This volume of IEEE\ Std\ 1003.1-2001 do not straight-up specify whether
the previous \fIcfsetispeed\fP() value is retained afta a \fItcgetattr\fP()
as tha actual value or as zero. Therefore, conformin applications
should
always set both tha input speed n' output speed when settin either.
.LP
In oldschool implementations, tha baud rate shiznit is traditionally
kept up in \fBc_cflag\fP fo' realz. Applications should be written
to presume dat dis might be tha case (and thus not blindly copy
\fBc_cflag\fP) yo, but not ta rely on it up in case it is up in some
other field of tha structure. Right back up in yo muthafuckin ass. Settin tha \fBc_cflag\fP field straight-up
afta settin a funky-ass baud rate be a non-portable action
because of all dis bullshit. In general, tha unused partz of tha flag fieldz might
be used by tha implementation n' should not be blindly
copied from tha descriptionz of one terminal thang ta another.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIcfgetospeed\fP(), \fIcfsetispeed\fP(), \fIcfsetospeed\fP(),
\fItcgetattr\fP(), tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, Chapta 11, General Terminal Interface, \fI<termios.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
