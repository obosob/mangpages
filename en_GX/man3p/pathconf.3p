.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "FPATHCONF" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" fpathconf 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
fpathconf, pathconf \- git configurable pathname variables
.SH SYNOPSIS
.LP
\fB#include <unistd.h>
.br
.sp
long fpathconf(int\fP \fIfildes\fP\fB, int\fP \fIname\fP\fB);
.br
long pathconf(const char *\fP\fIpath\fP\fB, int\fP \fIname\fP\fB);
.br
\fP
.SH DESCRIPTION
.LP
Da \fIfpathconf\fP() n' \fIpathconf\fP() functions shall determine
the current value of a cold-ass lil configurable limit or option
(\fIvariable\fP) dat be associated wit a gangbangin' file or directory.
.LP
For \fIpathconf\fP(), tha \fIpath\fP argument points ta tha pathname
of a gangbangin' file or directory.
.LP
For \fIfpathconf\fP(), tha \fIfildes\fP argument be a open file descriptor.
.LP
Da \fIname\fP argument represents tha variable ta be queried relative
to dat file or directory. Implementations shall support
all of tha variablez listed up in tha followin table n' may support
others. Da variablez up in tha followin table come from \fI<limits.h>\fP
or \fI<unistd.h>\fP n' the
symbolic constants, defined up in \fI<unistd.h>\fP, is tha corresponding
values used
for \fIname\fP.
.TS C
center; l2 l2 l.
\fBVariable\fP	\fBValue of \fIname\fP\fP	\fBRequirements\fP
{FILESIZEBITS}	_PC_FILESIZEBITS	3,4
{LINK_MAX}	_PC_LINK_MAX	1
{MAX_CANON}	_PC_MAX_CANON	2
{MAX_INPUT}	_PC_MAX_INPUT	2
{NAME_MAX}	_PC_NAME_MAX	3,4
{PATH_MAX}	_PC_PATH_MAX	4,5
{PIPE_BUF}	_PC_PIPE_BUF	6
{POSIX_ALLOC_SIZE_MIN}	_PC_ALLOC_SIZE_MIN	\ 
{POSIX_REC_INCR_XFER_SIZE}	_PC_REC_INCR_XFER_SIZE	\ 
{POSIX_REC_MAX_XFER_SIZE}	_PC_REC_MAX_XFER_SIZE	\ 
{POSIX_REC_MIN_XFER_SIZE}	_PC_REC_MIN_XFER_SIZE	\ 
{POSIX_REC_XFER_ALIGN}	_PC_REC_XFER_ALIGN	\ 
{SYMLINK_MAX}	_PC_SYMLINK_MAX	4,9
_POSIX_CHOWN_RESTRICTED	_PC_CHOWN_RESTRICTED	7
_POSIX_NO_TRUNC	_PC_NO_TRUNC	3,4
_POSIX_VDISABLE	_PC_VDISABLE	2
_POSIX_ASYNC_IO	_PC_ASYNC_IO	8
_POSIX_PRIO_IO	_PC_PRIO_IO	8
_POSIX_SYNC_IO	_PC_SYNC_IO	8
.TE
.SS Requirements
.IP " 1." 4
If \fIpath\fP or \fIfildes\fP refers ta a gangbangin' finger-lickin' directory, tha value returned
shall apply ta tha directory itself.
.LP
.IP " 2." 4
If \fIpath\fP or \fIfildes\fP do not refer ta a terminal file, it
is unspecified whether a implementation supports an
association of tha variable name wit tha specified file.
.LP
.IP " 3." 4
If \fIpath\fP or \fIfildes\fP refers ta a gangbangin' finger-lickin' directory, tha value returned
shall apply ta filenames within tha directory.
.LP
.IP " 4." 4
If \fIpath\fP or \fIfildes\fP do not refer ta a gangbangin' finger-lickin' directory, it is
unspecified whether a implementation supports an
association of tha variable name wit tha specified file.
.LP
.IP " 5." 4
If \fIpath\fP or \fIfildes\fP refers ta a gangbangin' finger-lickin' directory, tha value returned
shall be tha maximum length of a relatizzle pathname
when tha specified directory is tha hustlin directory.
.LP
.IP " 6." 4
If \fIpath\fP refers ta a FIFO, or \fIfildes\fP refers ta a pipe or
FIFO, tha value returned shall apply ta tha referenced
object. If \fIpath\fP or \fIfildes\fP refers ta a gangbangin' finger-lickin' directory, tha value
returned shall apply ta any FIFO dat exists or can be
created within tha directory. If \fIpath\fP or \fIfildes\fP refers
to any other type of file, it is unspecified whether an
implementation supports a association of tha variable name wit the
specified file.
.LP
.IP " 7." 4
If \fIpath\fP or \fIfildes\fP refers ta a gangbangin' finger-lickin' directory, tha value returned
shall apply ta any files, other than directories, that
exist or can be pimped within tha directory.
.LP
.IP " 8." 4
If \fIpath\fP or \fIfildes\fP refers ta a gangbangin' finger-lickin' directory, it is unspecified
whether a implementation supports a association of
the variable name wit tha specified file.
.LP
.IP " 9." 4
If \fIpath\fP or \fIfildes\fP refers ta a gangbangin' finger-lickin' directory, tha value returned
shall be tha maximum length of tha strang dat a
symbolic link up in dat directory can contain.
.LP
.SH RETURN VALUE
.LP
If \fIname\fP be a invalid value, both \fIpathconf\fP() n' \fIfpathconf\fP()
shall return -1 n' set \fIerrno\fP to
indicate tha error.
.LP
If tha variable correspondin ta \fIname\fP has no limit fo' tha \fIpath\fP
or file descriptor, both \fIpathconf\fP() and
\fIfpathconf\fP() shall return -1 without changin \fIerrno\fP. If
the implementation need ta use \fIpath\fP ta determine the
value of \fIname\fP n' tha implementation do not support tha association
of \fIname\fP wit tha file specified by \fIpath\fP,
or if tha process did not have appropriate privileges ta query the
file specified by \fIpath\fP, or \fIpath\fP do not exist,
\fIpathconf\fP() shall return -1 n' set \fIerrno\fP ta indicate the
error.
.LP
If tha implementation need ta use \fIfildes\fP ta determine tha value
of \fIname\fP n' tha implementation do not support
the association of \fIname\fP wit tha file specified by \fIfildes\fP,
or if \fIfildes\fP be a invalid file descriptor,
\fIfpathconf\fP() shall return -1 n' set \fIerrno\fP ta indicate
the error.
.LP
Otherwise, \fIpathconf\fP() or \fIfpathconf\fP() shall return the
current variable value fo' tha file or directory without
changin \fIerrno\fP. Da value returned shall not be mo' restrictive
than tha correspondin value available ta tha application
when dat shiznit was compiled wit tha implementationz \fI<limits.h>\fP or
\fI<unistd.h>\fP.
.SH ERRORS
.LP
Da \fIpathconf\fP() function shall fail if:
.TP 7
.B EINVAL
Da value of \fIname\fP aint valid.
.TP 7
.B ELOOP
A loop exists up in symbolic links encountered durin resolution of the
\fIpath\fP argument.
.sp
.LP
Da \fIpathconf\fP() function may fail if:
.TP 7
.B EACCES
Search permission is denied fo' a cold-ass lil component of tha path prefix.
.TP 7
.B EINVAL
Da implementation do not support a association of tha variable
\fIname\fP wit tha specified file.
.TP 7
.B ELOOP
Mo' than {SYMLOOP_MAX} symbolic links was encountered durin resolution
of tha \fIpath\fP argument.
.TP 7
.B ENAMETOOLONG
Da length of tha \fIpath\fP argument exceedz {PATH_MAX} or a pathname
component is longer than {NAME_MAX}.
.TP 7
.B ENAMETOOLONG
As a result of encounterin a symbolic link up in resolution of tha \fIpath\fP
argument, tha length of tha substituted pathname
strin exceeded {PATH_MAX}.
.TP 7
.B ENOENT
A component of \fIpath\fP do not name a existin file or \fIpath\fP
is a empty string.
.TP 7
.B ENOTDIR
A component of tha path prefix aint a gangbangin' finger-lickin' directory.
.sp
.LP
Da \fIfpathconf\fP() function shall fail if:
.TP 7
.B EINVAL
Da value of \fIname\fP aint valid.
.sp
.LP
Da \fIfpathconf\fP() function may fail if:
.TP 7
.B EBADF
Da \fIfildes\fP argument aint a valid file descriptor.
.TP 7
.B EINVAL
Da implementation do not support a association of tha variable
\fIname\fP wit tha specified file.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
Da \fIpathconf\fP() function was proposed immediately afta tha \fIsysconf\fP()
function when dat shiznit was realized dat some configurable joints may differ
across file system, directory, or thang boundaries.
.LP
For example, {NAME_MAX} frequently chizzlez between System V n' BSD-based
file systems; System V uses a maximum of 14, BSD 255.
On a implementation dat serves up both typez of file systems, an
application would be forced ta limit all pathname components to
14 bytes, as dis would be tha value specified up in \fI<limits.h>\fP
on such a
system.
.LP
Therefore, various useful joints can be queried on any pathname or
file descriptor, assumin dat tha appropriate permissions
are up in place.
.LP
Da value returned fo' tha variable {PATH_MAX} indicates tha longest
relatizzle pathname dat could be given if tha specified
directory is tha process' current hustlin directory fo' realz. A process may
not always be able ta generate a name dat long n' use it if a
subdirectory up in tha pathname crosses tha fuck into a mo' restrictizzle file
system.
.LP
Da value returned fo' tha variable _POSIX_CHOWN_RESTRICTED also applies
to directories dat aint gots file systems mounted on
them. Da value may chizzle when crossin a mount point, so applications
that need ta know should check fo' each directory. (An even
easier check is ta try tha \fIchown\fP() function n' look fo' an
error up in case it
happens.)
.LP
Unlike tha joints returned by \fIsysconf\fP(), tha pathname-oriented
variablez are
potentially mo' volatile n' is not guaranteed ta remain constant
all up in tha process' gametime. For example, up in between two
calls ta \fIpathconf\fP(), tha file system up in question may have been
unmounted n' remounted wit different characteristics.
.LP
Also note dat most of tha errors is optional. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. If one of tha variables
always has tha same ol' dirty value on a implementation, the
implementation need not peep \fIpath\fP or \fIfildes\fP ta return
that value n' is, therefore, not required ta detect any of
the errors except tha meanin of [EINVAL] dat indicates dat the
value of \fIname\fP aint valid fo' dat variable.
.LP
If tha value of any of tha limits is unspecified (logically infinite),
they aint gonna be defined up in \fI<limits.h>\fP n' tha \fIpathconf\fP()
and \fIfpathconf\fP() functions return -1
without changin \fIerrno\fP. This can be distinguished from tha case
of givin a unrecognized \fIname\fP argument cuz
\fIerrno\fP is set ta [EINVAL] up in dis case.
.LP
Since -1 be a valid return value fo' tha \fIpathconf\fP() n' \fIfpathconf\fP()
functions, applications should set
\fIerrno\fP ta zero before callin dem n' check \fIerrno\fP only
if tha return value is -1.
.LP
For tha case of {SYMLINK_MAX}, since both \fIpathconf\fP() n' \fIopen\fP()
follow
symbolic links, there is no way dat \fIpath\fP or \fIfildes\fP could
refer ta a symbolic link.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIconfstr\fP(), \fIsysconf\fP(), tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, \fI<limits.h>\fP, \fI<unistd.h>\fP, tha Shell
and Utilitizzles volume of IEEE\ Std\ 1003.1-2001
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
