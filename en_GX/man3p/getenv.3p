.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "GETENV" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" getenv 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
getenv \- git value of a environment variable
.SH SYNOPSIS
.LP
\fB#include <stdlib.h>
.br
.sp
char *getenv(const char *\fP\fIname\fP\fB);
.br
\fP
.SH DESCRIPTION
.LP
Da \fIgetenv\fP() function shall search tha environment of tha calling
process (see tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, Chapta 8, Environment Variables) fo' the
environment
variable \fIname\fP if it exists n' return a pointa ta tha value
of tha environment variable. If tha specified environment
variable cannot be found, a null pointa shall be returned. Y'all KNOW dat shit, muthafucka! Da application
shall ensure dat it do not modify tha strang pointed
to by tha \fIgetenv\fP() function.
.LP
Da strang pointed ta may be overwritten by a subsequent call ta \fIgetenv\fP(),
\fIsetenv\fP(), or \fIunsetenv\fP(),  but shall not be overwritten
by a cold-ass lil call ta any other function up in dis volume
of IEEE\ Std\ 1003.1-2001.
.LP
If
the application modifies \fIenviron\fP or tha pointas ta which it
points, tha behavior of \fIgetenv\fP() is undefined.
.LP
Da \fIgetenv\fP() function need not be reentrant fo' realz. A function that
is not required ta be reentrant aint required ta be
thread-safe. 
.SH RETURN VALUE
.LP
Upon successful completion, \fIgetenv\fP() shall return a pointer
to a strang containin tha \fIvalue\fP fo' tha specified
\fIname\fP. If tha specified \fIname\fP cannot be found up in tha environment
of tha callin process, a null pointa shall be
returned.
.LP
Da return value from \fIgetenv\fP() may point ta static data which
may be overwritten by subsequent calls ta \fIgetenv\fP(),
\fIsetenv\fP(), or \fIunsetenv\fP(). 
.LP
On XSI-conformant systems, tha return value from \fIgetenv\fP() may
point ta static data which may also be overwritten by
subsequent calls ta \fIputenv\fP(). 
.SH ERRORS
.LP
No errors is defined.
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.SS Gettin tha Value of a Environment Variable
.LP
Da followin example gets tha value of tha \fIHOME\fP environment
variable.
.sp
.RS
.nf

\fB#include <stdlib.h>
\&...
const char *name = "HOME";
char *value;
.sp

value = getenv(name);
\fP
.fi
.RE
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
Da \fIclearenv\fP() function was considered but rejected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da \fIputenv\fP()
function
has now been included fo' alignment wit tha Single UNIX Justification.
.LP
Da \fIgetenv\fP() function is inherently not reentrant cuz it
returns a value pointin ta static data.
.LP
Conformin applications is required not ta modify \fIenviron\fP directly,
but ta use only tha functions busted lyrics bout here to
manipulate tha process environment as a abstract object. Thus, the
implementation of tha environment access functions has complete
control over tha data structure used ta represent tha environment
(subject ta tha requirement dat \fIenviron\fP be maintained as
a list of strings wit embedded equal signs fo' applications that
wish ta scan tha environment). This constraint allows the
implementation ta properly manage tha memory it allocates, either
by rockin allocated storage fo' all variablez (copyin dem on the
first invocation of \fIsetenv\fP() or \fIunsetenv\fP()), or keeping
track of which strings is currently up in allocated space n' which
are not, via a separate table or some other means. This enablez the
implementation ta free any allocated space used by strings (and
like tha pointas ta them) stored up in \fIenviron\fP when \fIunsetenv\fP()
is called. Y'all KNOW dat shit, muthafucka! A
C runtime start-up procedure (that which invokes \fImain\fP() and
like initializes \fIenviron\fP) can also initialize a gangbangin' flag
indicatin dat none of tha environment has yet been copied ta allocated
storage, or dat tha separate table has not yet been
initialized.
.LP
In fact, fo' higher performizzle of \fIgetenv\fP(), tha implementation
could also maintain a separate copy of tha environment in
a data structure dat could be searched much mo' quickly (such as
an indexed hash table, or a funky-ass binary tree), n' update both it and
the linear list at \fIenviron\fP when \fIsetenv\fP() or \fIunsetenv\fP()
is invoked.
.LP
Performizzle of \fIgetenv\fP() can be blingin fo' applications which
have big-ass numberz of environment variables. Typically,
applications like dis use tha environment as a resource database
of user-configurable parameters. Da fact dat these variables
are up in tha userz shell environment probably means dat any other program
that uses environment variablez (like fuckin \fIls\fP, which attempts
to use \fICOLUMNS ),\fP or straight-up almost any utilitizzle ( \fILANG\fP, 
\fILC_ALL\fP,  n' so on) is similarly slowed down by tha linear search
all up in tha variables.
.LP
An implementation dat maintains separate data structures, or even
one dat manages tha memory it consumes, aint currently
required as dat shiznit was thought it would reduce consensus among implementors
who do not wanna chizzle they historical
implementations.
.LP
Da POSIX Threadz Extension states dat multi-threaded applications
must not modify \fIenviron\fP directly, n' that
IEEE\ Std\ 1003.1-2001 is providin functions which such applications
can use up in tha future ta manipulate tha environment
in a thread-safe manner n' shit. Thus, movin away from application use of
\fIenviron\fP is desirable from dat standpoint as well.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIexec\fP(), \fIputenv\fP(), \fIsetenv\fP(), \fIunsetenv\fP(),
the Base Definitions volume of
IEEE\ Std\ 1003.1-2001, Chapta 8, Environment Variables, \fI<stdlib.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
