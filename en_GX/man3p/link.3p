.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "LINK" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" link 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
link \- link ta a gangbangin' file
.SH SYNOPSIS
.LP
\fB#include <unistd.h>
.br
.sp
int link(const char *\fP\fIpath1\fP\fB, const char *\fP\fIpath2\fP\fB);
.br
\fP
.SH DESCRIPTION
.LP
Da \fIlink\fP() function shall create a freshly smoked up link (directory entry)
for tha existin file, \fIpath1\fP.
.LP
Da \fIpath1\fP argument points ta a pathname namin a existin file.
Da \fIpath2\fP argument points ta a pathname naming
the freshly smoked up directory entry ta be pimped. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da \fIlink\fP() function shall
atomically create a freshly smoked up link fo' tha existin file n' the
link count of tha file shall be incremented by one.
.LP
If \fIpath1\fP names a gangbangin' finger-lickin' directory, \fIlink\fP() shall fail unless the
process has appropriate privileges n' tha implementation
supports rockin \fIlink\fP() on directories.
.LP
Upon successful completion, \fIlink\fP() shall mark fo' update the
\fIst_ctime\fP field of tha file fo' realz. Also, tha \fIst_ctime\fP
and \fIst_mtime\fP fieldz of tha directory dat gotz nuff tha freshly smoked up entry
shall be marked fo' update.
.LP
If \fIlink\fP() fails, no link shall be pimped n' tha link count
of tha file shall remain unchanged.
.LP
Da implementation may require dat tha callin process has permission
to access tha existin file.
.SH RETURN VALUE
.LP
Upon successful completion, 0 shall be returned. Y'all KNOW dat shit, muthafucka! Otherwise, -1 shall
be returned n' \fIerrno\fP set ta indicate tha error.
.SH ERRORS
.LP
Da \fIlink\fP() function shall fail if:
.TP 7
.B EACCES
A component of either path prefix denies search permission, or the
axed link requires freestylin up in a gangbangin' finger-lickin' directory dat denies
write permission, or tha callin process aint gots permission
to access tha existin file n' dis is required by the
implementation.
.TP 7
.B EEXIST
Da \fIpath2\fP argument resolves ta a existin file or refers to
a symbolic link.
.TP 7
.B ELOOP
A loop exists up in symbolic links encountered durin resolution of the
\fIpath1\fP or \fIpath2\fP argument.
.TP 7
.B EMLINK
Da number of links ta tha file named by \fIpath1\fP would exceed
{LINK_MAX}.
.TP 7
.B ENAMETOOLONG
Da length of tha \fIpath1\fP or \fIpath2\fP argument exceedz {PATH_MAX}
or a pathname component is longer than {NAME_MAX}.
.TP 7
.B ENOENT
A component of either path prefix do not exist; tha file named by
\fIpath1\fP do not exist; or \fIpath1\fP or
\fIpath2\fP points ta a empty string.
.TP 7
.B ENOSPC
Da directory ta contain tha link cannot be extended.
.TP 7
.B ENOTDIR
A component of either path prefix aint a gangbangin' finger-lickin' directory.
.TP 7
.B EPERM
Da file named by \fIpath1\fP be a gangbangin' finger-lickin' directory n' either tha calling
process aint gots appropriate privileges or the
implementation prohibits rockin \fIlink\fP() on directories.
.TP 7
.B EROFS
Da axed link requires freestylin up in a gangbangin' finger-lickin' directory on a read-only
file system.
.TP 7
.B EXDEV
Da link named by \fIpath2\fP n' tha file named by \fIpath1\fP are
on different file systems n' tha implementation do not
support links between file systems.
.TP 7
.B EXDEV
\fIpath1\fP refers ta a named STREAM. 
.sp
.LP
Da \fIlink\fP() function may fail if:
.TP 7
.B ELOOP
Mo' than {SYMLOOP_MAX} symbolic links was encountered durin resolution
of tha \fIpath1\fP or \fIpath2\fP argument.
.TP 7
.B ENAMETOOLONG
As a result of encounterin a symbolic link up in resolution of tha \fIpath1\fP
or \fIpath2\fP argument, tha length of the
substituted pathname strang exceeded {PATH_MAX}.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.SS Creatin a Link ta a File
.LP
Da followin example shows how tha fuck ta create a link ta a gangbangin' file named \fB/home/cnd/mod1\fP
by bustin a freshly smoked up directory entry named
\fB/modules/pass1\fP.
.sp
.RS
.nf

\fB#include <unistd.h>
.sp

char *path1 = "/home/cnd/mod1";
char *path2 = "/modules/pass1";
int   status;
\&...
status = link (path1, path2);
\fP
.fi
.RE
.SS Creatin a Link ta a File Within a Program
.LP
In tha followin program example, tha \fIlink\fP() function links
the \fB/etc/passwd\fP file (defined as \fBPASSWDFILE\fP) to
a file named \fB/etc/opasswd\fP (defined as \fBSAVEFILE\fP), which
is used ta save tha current password file. Then, after
removin tha current password file (defined as \fBPASSWDFILE\fP),
the freshly smoked up password file is saved as tha current password file
usin tha \fIlink\fP() function again.
.sp
.RS
.nf

\fB#include <unistd.h>
.sp

#define LOCKFILE "/etc/ptmp"
#define PASSWDFILE "/etc/passwd"
#define SAVEFILE "/etc/opasswd"
\&...
/* Save current password file */
link (PASSWDFILE, SAVEFILE);
.sp

/* Remove current password file. */
unlink (PASSWDFILE);
.sp

/* Save freshly smoked up password file as current password file. */
link (LOCKFILE,PASSWDFILE);
\fP
.fi
.RE
.SH APPLICATION USAGE
.LP
Some implementations do allow links between file systems.
.SH RATIONALE
.LP
Linkin ta a gangbangin' finger-lickin' directory is restricted ta tha superuser up in most historical
implementations cuz dis capabilitizzle may produce
loops up in tha file hierarchy or otherwise corrupt tha file system.
This volume of IEEE\ Std\ 1003.1-2001 continues that
philosophy by prohibitin \fIlink\fP() n' \fIunlink\fP() from bustin
this. Other functions
could do it if tha implementor designed such a extension.
.LP
Some oldschool implementations allow linkin of filez on different
file systems. Wordin was added ta explicitly allow this
optionizzle behavior.
.LP
Da exception fo' cross-file system links is intended ta apply only
to links dat is programmatically indistinguishable from
"hard" links.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIsymlink\fP(), \fIunlink\fP(), tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, \fI<unistd.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
