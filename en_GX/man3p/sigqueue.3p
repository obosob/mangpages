.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "SIGQUEUE" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" sigqueue 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
sigqueue \- queue a signal ta a process (\fBREALTIME\fP)
.SH SYNOPSIS
.LP
\fB#include <signal.h>
.br
.sp
int sigqueue(pid_t\fP \fIpid\fP\fB, int\fP \fIsigno\fP\fB, const union
sigval\fP \fIvalue\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIsigqueue\fP() function shall cause tha signal specified by
\fIsigno\fP ta be busted wit tha value specified by
\fIvalue\fP ta tha process specified by \fIpid\fP. If \fIsigno\fP
is zero (the null signal), error checkin is performed but no
signal is straight-up sent. Da null signal can be used ta check the
validitizzle of \fIpid\fP.
.LP
Da conditions required fo' a process ta have permission ta queue
a signal ta another process is tha same as fo' tha \fIkill\fP() function.
.LP
Da \fIsigqueue\fP() function shall return immediately. If SA_SIGINFO
is set fo' \fIsigno\fP n' if tha resources were
available ta queue tha signal, tha signal shall be queued n' sent
to tha receivin process. If SA_SIGINFO aint set for
\fIsigno\fP, then \fIsigno\fP shall be busted at least once ta tha receiving
process; it is unspecified whether \fIvalue\fP shall
be busted ta tha receivin process as a result of dis call.
.LP
If tha value of \fIpid\fP causes \fIsigno\fP ta be generated fo' the
sendin process, n' if \fIsigno\fP aint blocked for
the callin thread n' if no other thread has \fIsigno\fP unblocked
or is waitin up in a \fIsigwait\fP() function fo' \fIsigno\fP, either
\fIsigno\fP or at least tha pending, unblocked
signal shall be served up ta tha callin thread before tha \fIsigqueue\fP()
function returns. Right back up in yo muthafuckin ass. Should any multiple pendin signals
in tha range SIGRTMIN ta SIGRTMAX be selected fo' delivery, it shall
be tha lowest numbered one. Da selection order between
realtime n' non-realtime signals, or between multiple pendin non-realtime
signals, is unspecified.
.SH RETURN VALUE
.LP
Upon successful completion, tha specified signal shall done been queued,
and tha \fIsigqueue\fP() function shall return a value
of zero. Otherwise, tha function shall return a value of -1 n' set
\fIerrno\fP ta indicate tha error.
.SH ERRORS
.LP
Da \fIsigqueue\fP() function shall fail if:
.TP 7
.B EAGAIN
No resources is available ta queue tha signal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Da process has already
queued {SIGQUEUE_MAX} signals dat is still pendin at
the receiver(s), or a system-wide resource limit has been exceeded.
.TP 7
.B EINVAL
Da value of tha \fIsigno\fP argument be a invalid or unsupported
signal number.
.TP 7
.B EPERM
Da process aint gots tha appropriate privilege ta bust tha signal
to tha receivin process.
.TP 7
.B ESRCH
Da process \fIpid\fP do not exist.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
Da \fIsigqueue\fP() function allows a application ta queue a realtime
signal ta itself or ta another process, specifyin the
application-defined value. This is common practice up in realtime applications
on existin realtime systems. Dat shiznit was felt that
specifyin another function up in tha \fIsig\fP... name space already
carved up fo' signals was preferable ta extendin the
interface ta \fIkill\fP().
.LP
Such a gangbangin' function became necessary when tha put/get event function of
the message queues was removed. Y'all KNOW dat shit, muthafucka! Well shiiiit, it should be noted dat the
\fIsigqueue\fP() function implies reduced performizzle up in a security-conscious
implementation as tha access permissions between the
sender n' receiver gotta be checked on each bust when tha \fIpid\fP
is resolved tha fuck into a target process. Right back up in yo muthafuckin ass. Such access checks were
necessary only at message queue open up in tha previous intercourse.
.LP
Da standard pimpers required dat \fIsigqueue\fP() have tha same
semantics wit respect ta tha null signal as \fIkill\fP(), n' that
the same permission checkin be used. Y'all KNOW dat shit, muthafucka! But cuz of tha difficulty
of
implementin tha "broadcast" semantic of \fIkill\fP() (for example,
to process groups) and
the interaction wit resource allocation, dis semantic was not adopted.
Da \fIsigqueue\fP() function queues a signal ta a single
process specified by tha \fIpid\fP argument.
.LP
Da \fIsigqueue\fP() function can fail if tha system has insufficient
resources ta queue tha signal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack fo' realz. An explicit limit on the
number of queued signals dat a process could bust was introduced.
While tha limit is "per-sender", dis volume of
IEEE\ Std\ 1003.1-2001 do not specify dat tha resources be part
of tha state of tha sender n' shit. This would require either
that tha sender be maintained afta exit until all signals dat it
had busted ta other processes was handled or dat all such
signals dat had not yet been acted upon be removed from tha queue(s)
of tha receivers. This volume of
IEEE\ Std\ 1003.1-2001 do not preclude dis behavior yo, but a implementation
that allocated queuin resources from a
system-wide pool (with per-sender limits) n' dat leaves queued signals
pendin afta tha sender exits be also permitted.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIRealtime Signals\fP, tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, \fI<signal.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
