.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "PTHREAD_MUTEX_DESTROY" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" pthread_mutex_destroy 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
pthread_mutex_destroy, pthread_mutex_init \- destroy n' initialize
a mutex
.SH SYNOPSIS
.LP
\fB#include <pthread.h>
.br
.sp
int pthread_mutex_destroy(pthread_mutex_t *\fP\fImutex\fP\fB);
.br
int pthread_mutex_init(pthread_mutex_t *restrict\fP \fImutex\fP\fB,
.br
\ \ \ \ \ \  const pthread_mutexattr_t *restrict\fP \fIattr\fP\fB);
.br
pthread_mutex_t\fP \fImutex\fP \fB= PTHREAD_MUTEX_INITIALIZER; \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIpthread_mutex_destroy\fP() function shall destroy tha mutex
object referenced by \fImutex\fP; tha mutex object becomes,
in effect, uninitialized. Y'all KNOW dat shit, muthafucka! An implementation may cause \fIpthread_mutex_destroy\fP()
to set tha object referenced by \fImutex\fP
to a invalid value fo' realz. A destroyed mutex object can be reinitialized
usin \fIpthread_mutex_init\fP(); tha thangs up in dis biatch of otherwise
referencin tha object afta it has been destroyed is undefined.
.LP
It shall be safe ta destroy a initialized mutex dat is unlocked.
Attemptin ta destroy a locked mutex thangs up in dis biatch up in undefined
behavior.
.LP
Da \fIpthread_mutex_init\fP() function shall initialize tha mutex
referenced by \fImutex\fP wit attributes specified by
\fIattr\fP. If \fIattr\fP is NULL, tha default mutex attributes are
used; tha effect shall be tha same as passin tha address of
a default mutex attributes object. Upon successful initialization,
the state of tha mutex becomes initialized n' unlocked.
.LP
Only \fImutex\fP itself may be used fo' struttin synchronization.
Da result of referrin ta copiez of \fImutex\fP up in calls
to \fIpthread_mutex_lock\fP(), \fIpthread_mutex_trylock\fP(), \fIpthread_mutex_unlock\fP(),
and \fIpthread_mutex_destroy\fP() is undefined.
.LP
Attemptin ta initialize a already initialized mutex thangs up in dis biatch up in undefined
behavior.
.LP
In cases where default mutex attributes is appropriate, tha macro
PTHREAD_MUTEX_INITIALIZER can be used ta initialize mutexes
that is statically allocated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da effect shall be equivalent ta dynamic
initialization by a cold-ass lil call ta \fIpthread_mutex_init\fP()
with parameta \fIattr\fP specified as NULL, except dat no error
checks is performed.
.SH RETURN VALUE
.LP
If successful, tha \fIpthread_mutex_destroy\fP() n' \fIpthread_mutex_init\fP()
functions shall return zero; otherwise, an
error number shall be moonwalked back ta indicate tha error.
.LP
Da [EBUSY] n' [EINVAL] error checks, if implemented, act as if they
were performed immediately all up in tha beginnin of processing
for tha function n' shall cause a error return prior ta modifying
the state of tha mutex specified by \fImutex\fP.
.SH ERRORS
.LP
Da \fIpthread_mutex_destroy\fP() function may fail if:
.TP 7
.B EBUSY
Da implementation has detected a attempt ta destroy tha object referenced
by \fImutex\fP while it is locked or referenced
(for example, while bein used up in a \fIpthread_cond_timedwait\fP()
or \fIpthread_cond_wait\fP()) by another thread.
.TP 7
.B EINVAL
Da value specified by \fImutex\fP is invalid.
.sp
.LP
Da \fIpthread_mutex_init\fP() function shall fail if:
.TP 7
.B EAGAIN
Da system lacked tha necessary resources (other than memory) ta initialize
another mutex.
.TP 7
.B ENOMEM
Insufficient memory exists ta initialize tha mutex.
.TP 7
.B EPERM
Da calla aint gots tha privilege ta big-ass up tha operation.
.sp
.LP
Da \fIpthread_mutex_init\fP() function may fail if:
.TP 7
.B EBUSY
Da implementation has detected a attempt ta reinitialize tha object
referenced by \fImutex\fP, a previously initialized yo, but
not yet destroyed, mutex.
.TP 7
.B EINVAL
Da value specified by \fIattr\fP is invalid.
.sp
.LP
These functions shall not return a error code of [EINTR].
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.SS Alternate Implementations Possible
.LP
This volume of IEEE\ Std\ 1003.1-2001 supports nuff muthafuckin alternative
implementationz of mutexes fo' realz. An implementation may
store tha lock directly up in tha object of type \fBpthread_mutex_t\fP.
Alternatively, a implementation may store tha lock up in the
heap n' merely store a pointer, handle, or unique ID up in tha mutex
object. Either implementation has advantages or may be required
on certain hardware configurations. Right back up in yo muthafuckin ass. So dat portable code can be written
that is invariant ta dis chizzle, dis volume of
IEEE\ Std\ 1003.1-2001 do not define assignment or equalitizzle for
this type, n' it uses tha term "initialize" to
reinforce tha (more restrictive) notion dat tha lock may actually
reside up in tha mutex object itself.
.LP
Note dat dis precludes a over-specification of tha type of the
mutex or condizzle variable n' motivates tha opaquenizz of
the type.
.LP
An implementation is permitted yo, but not required, ta have \fIpthread_mutex_destroy\fP()
store a illegal value tha fuck into tha mutex.
This may help detect erroneous programs dat try ta lock (or otherwise
reference) a mutex dat has already been destroyed.
.SS Tradeoff Between Error Checks n' Performizzle Supported
.LP
Many of tha error checks was made optionizzle up in order ta let implementations
trade off performizzle \fIversus\fP degree of error
checkin accordin ta tha needz of they specific applications and
execution environment fo' realz. As a general rule, errors or conditions
caused by tha system (like fuckin insufficient memory) always need to
be reported yo, but errors cuz of a erroneously coded application
(like fuckin failin ta provide adequate synchronization ta prevent a
mutex from bein deleted while up in use) is made optional.
.LP
A wide range of implementations is thus made possible. For example,
an implementation intended fo' application debuggin may
implement all of tha error checks yo, but a implementation hustlin a
single, provably erect application under straight-up tight
performizzle constraints up in a embedded computa might implement minimal
checks fo' realz. An implementation might even be provided up in two
versions, similar ta tha options dat compilaz provide: a gangbangin' full-checking,
but slower version; n' a limited-checkin yo, but faster
version. I aint talkin' bout chicken n' gravy biatch. To forbid dis optionalitizzle would be a gangbangin' finger-lickin' disservice ta users.
.LP
By carefully limitin tha use of "undefined behavior" only ta thangs
that a erroneous (badly coded) application might do, and
by definin dat resource-not-available errors is mandatory, this
volume of IEEE\ Std\ 1003.1-2001 ensures dat a
fully-conformin application is portable across tha full range of
implementations, while not forcin all implementations ta add
overhead ta check fo' a shitload of thangs dat a cold-ass lil erect program never
does.
.SS Why No Limits is Defined
.LP
Definin symbols fo' tha maximum number of mutexes n' condizzle variables
was considered but rejected cuz tha number of
these objects may chizzle dynamically. Furthermore, nuff implementations
place these objects tha fuck into application memory; thus, there is
no explicit maximum.
.SS Static Initializers fo' Mutexes n' Condizzle Variables
.LP
Providin fo' static initialization of statically allocated synchronization
objects allows modulez wit private static
synchronization variablez ta avoid runtime initialization tests and
overhead. Y'all KNOW dat shit, muthafucka! Furthermore, it simplifies tha codin of
self-initializin modules. Right back up in yo muthafuckin ass. Such modulez is common up in C libraries,
where fo' various reasons tha design calls for
self-initialization instead of requirin a explicit module initialization
function ta be called. Y'all KNOW dat shit, muthafucka! An example use of static
initialization bigs up.
.LP
Without static initialization, a self-initializin routine \fIfoo\fP()
might look as bigs up:
.sp
.RS
.nf

\fBstatic pthread_once_t foo_once = PTHREAD_ONCE_INIT;
static pthread_mutex_t foo_mutex;
.sp

void foo_init()
{
    pthread_mutex_init(&foo_mutex, NULL);
}
.sp

void foo()
{
    pthread_once(&foo_once, foo_init);
    pthread_mutex_lock(&foo_mutex);
   /* Do work. */
    pthread_mutex_unlock(&foo_mutex);
}
\fP
.fi
.RE
.LP
With static initialization, tha same routine could be coded as bigs up:
.sp
.RS
.nf

\fBstatic pthread_mutex_t foo_mutex = PTHREAD_MUTEX_INITIALIZER;
.sp

void foo()
{
    pthread_mutex_lock(&foo_mutex);
   /* Do work. */
    pthread_mutex_unlock(&foo_mutex);
}
\fP
.fi
.RE
.LP
Note dat tha static initialization both eliminates tha need fo' the
initialization test inside \fIpthread_once\fP() n' tha fetch of &\fIfoo_mutex\fP
to learn tha address ta be passed
to \fIpthread_mutex_lock\fP() or \fIpthread_mutex_unlock\fP().
.LP
Thus, tha C code freestyled ta initialize static objects is simpla on
all systems n' be also fasta on a big-ass class of systems;
those where tha (entire) synchronization object can be stored up in application
memory.
.LP
Yet tha lockin performizzle question is likely ta be raised fo' machines
that require mutexes ta be allocated outta special
memory. Right back up in yo muthafuckin ass. Such machines straight-up gotta have mutexes n' possibly condition
variablez contain pointas ta tha actual hardware locks.
For static initialization ta work on such machines, \fIpthread_mutex_lock\fP()
also has ta test whether or not tha pointa ta tha actual lock has
been allocated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. If it has not, \fIpthread_mutex_lock\fP() has ta initialize
it before use. Da reservation of such
resources can be made when tha program is loaded, n' hence return
codes aint been added ta mutex lockin n' condition
variable waitin ta indicate failure ta complete initialization.
.LP
This runtime test up in \fIpthread_mutex_lock\fP() would at first seem
to be
extra work; a extra test is required ta peep whether tha pointa has
been initialized. Y'all KNOW dat shit, muthafucka! On most machines dis would straight-up be
implemented as a gangbangin' fetch of tha pointer, testin tha pointa against
zero, n' then rockin tha pointa if it has already been
initialized. Y'all KNOW dat shit, muthafucka! While tha test might seem ta add extra work, tha extra
effort of testin a regista is probably negligible since no
extra memory references is straight-up done fo' realz. As mo' n' mo' machines
provide caches, tha real expenses is memory references, not
instructions executed.
.LP
Alternatively, dependin on tha machine architecture, there be often
ways ta eliminizzle \fIall\fP overhead up in da most thugged-out
important case: on tha lock operations dat occur \fIafter\fP the
lock has been initialized. Y'all KNOW dat shit, muthafucka! This can be done by shiftin more
overhead ta tha less frequent operation: initialization. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. Since out-of-line
mutex allocation also means dat a address has ta be
dereferenced ta find tha actual lock, one technique dat is widely
applicable is ta have static initialization store a funky-ass bogus value
for dat address; up in particular, a address dat causes a machine
fault ta occur. Shiiit, dis aint no joke. When such a gangbangin' fault occurs upon tha straight-up original gangsta attempt
to lock such a mutex, validitizzle checks can be done, n' then tha erect
address fo' tha actual lock can be filled in. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. Subsequent
lock operations incur no extra overhead since they do not "fault".
This is merely one technique dat can be used ta support
static initialization, while not adversely affectin tha performance
of lock acquisition. I aint talkin' bout chicken n' gravy biatch. No doubt there be other steez that
are highly machine-dependent.
.LP
Da lockin overhead fo' machines bustin out-of-line mutex allocation
is thus similar fo' modulez bein implicitly initialized,
where it is improved fo' dem bustin mutex allocation entirely inline.
Da inline case is thus made much faster, n' the
out-of-line case aint hella worse.
.LP
Besides tha issue of lockin performizzle fo' such machines, a cold-ass lil concern
is raised dat it is possible dat threadz would serialize
contendin fo' initialization locks when attemptin ta finish initializing
statically allocated mutexes. (Such finishin would
typically involve takin a internal lock, allocatin a structure,
storin a pointa ta tha structure up in tha mutex, n' releasing
the internal lock.) First, nuff implementations would reduce such
serialization by hashin on tha mutex address. Right back up in yo muthafuckin ass. Second, such
serialization can only occur a funky-ass bounded number of times. In particular,
it can happen at most as nuff times as there be statically
allocated synchronization objects, n' you can put dat on yo' toast. Dynamically allocated objects would
still be initialized via \fIpthread_mutex_init\fP() or \fIpthread_cond_init\fP().
.LP
Finally, if none of tha above optimization steez fo' out-of-line
allocation yieldz sufficient performizzle fo' an
application on some implementation, tha application can avoid static
initialization altogether by explicitly initializin all
synchronization objects wit tha correspondin \fIpthread_*_init\fP()
functions,
which is supported by all implementations fo' realz. An implementation can
also document tha tradeoffs n' advise which initialization
technique is mo' efficient fo' dat particular implementation.
.SS Destroyin Mutexes
.LP
A mutex can be destroyed immediately afta it is unlocked. Y'all KNOW dat shit, muthafucka! For example,
consider tha followin code:
.sp
.RS
.nf

\fBstruct obj {
pthread_mutex_t om;
    int refcnt;
    ...
};
.sp

obj_done(struct obj *op)
{
    pthread_mutex_lock(&op->om);
    if (--op->refcnt == 0) {
        pthread_mutex_unlock(&op->om);
(A)     pthread_mutex_destroy(&op->om);
(B)     free(op);
    } else
(C)     pthread_mutex_unlock(&op->om);
}
\fP
.fi
.RE
.LP
In dis case \fIobj\fP is reference counted n' \fIobj_done\fP() is
called whenever a reference ta tha object is dropped.
Implementations is required ta allow a object ta be destroyed and
freed n' potentially unmapped (for example, lines A n' B)
immediately afta tha object is unlocked (line C).
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIpthread_mutex_getprioceiling\fP(), \fIpthread_mutex_lock\fP(),
\fIpthread_mutex_timedlock\fP(), \fIpthread_mutexattr_getpshared\fP(),
the Base Definitions volume of
IEEE\ Std\ 1003.1-2001, \fI<pthread.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
