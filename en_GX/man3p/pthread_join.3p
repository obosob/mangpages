.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "PTHREAD_JOIN" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" pthread_join 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
pthread_join \- wait fo' thread termination
.SH SYNOPSIS
.LP
\fB#include <pthread.h>
.br
.sp
int pthread_join(pthread_t\fP \fIthread\fP\fB, void **\fP\fIvalue_ptr\fP\fB);
\fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIpthread_join\fP() function shall suspend execution of tha calling
thread until tha target \fIthread\fP terminates,
unless tha target \fIthread\fP has already terminated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. On return from
a successful \fIpthread_join\fP() call wit a non-NULL
\fIvalue_ptr\fP argument, tha value passed ta \fIpthread_exit\fP()
by the
terminatin thread shall be made available up in tha location referenced
by \fIvalue_ptr\fP. When a \fIpthread_join\fP() returns
successfully, tha target thread has been terminated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da thangs up in dis biatch of
multiple simultaneous calls ta \fIpthread_join\fP() specifying
the same target thread is undefined. Y'all KNOW dat shit, muthafucka! If tha thread callin \fIpthread_join\fP()
is canceled, then tha target thread shall not be
detached.
.LP
It be unspecified whether a thread dat has exited but remains unjoined
counts against {PTHREAD_THREADS_MAX}.
.SH RETURN VALUE
.LP
If successful, tha \fIpthread_join\fP() function shall return zero;
otherwise, a error number shall be moonwalked back ta indicate
the error.
.SH ERRORS
.LP
Da \fIpthread_join\fP() function shall fail if:
.TP 7
.B EINVAL
Da implementation has detected dat tha value specified by \fIthread\fP
does not refer ta a joinable thread.
.TP 7
.B ESRCH
No thread could be found correspondin ta dat specified by tha given
thread ID.
.sp
.LP
Da \fIpthread_join\fP() function may fail if:
.TP 7
.B EDEADLK
A deadlock was detected or tha value of \fIthread\fP specifies the
callin thread.
.sp
.LP
Da \fIpthread_join\fP() function shall not return a error code of
[EINTR].
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
An example of thread creation n' deletion bigs up:
.sp
.RS
.nf

\fBtypedef struct {
    int *ar;
    long n;
} subarray;
.sp

void *
incer(void *arg)
{
    long i;
.sp

    fo' (i = 0; i < ((subarray *)arg)->n; i++)
        ((subarray *)arg)->ar[i]++;
}
.sp

int main(void)
{
    int        ar[1000000];
    pthread_t  th1, th2;
    subarray   sb1, sb2;
.sp

    sb1.ar = &ar[0];
    sb1.n  = 500000;
    (void) pthread_create(&th1, NULL, incer, &sb1);
.sp

    sb2.ar = &ar[500000];
    sb2.n  = 500000;
    (void) pthread_create(&th2, NULL, incer, &sb2);
.sp

    (void) pthread_join(th1, NULL);
    (void) pthread_join(th2, NULL);
    return 0;
}
\fP
.fi
.RE
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
Da \fIpthread_join\fP() function be a cold-ass lil convenience dat has proven
useful up in multi-threaded applications. Well shiiiit, it is legit dat a
programmer could simulate dis function if it was not provided by
passin extra state as part of tha argument ta the
\fIstart_routine\fP(). Da terminatin thread would set a gangbangin' flag to
indicate termination n' broadcast a cold-ass lil condizzle dat is part of
that state; a joinin thread would wait on dat condizzle variable.
While such a technique would allow a thread ta wait on more
complex conditions (for example, waitin fo' multiple threadz ta terminate),
waitin on individual thread termination is considered
widely useful naaahhmean? Also, includin tha \fIpthread_join\fP() function in
no way precludes a programmer from codin such complex waits.
Thus, while not a primitive, includin \fIpthread_join\fP() up in this
volume of IEEE\ Std\ 1003.1-2001 was considered
valuable.
.LP
Da \fIpthread_join\fP() function serves up a simple mechanizzle allowing
an application ta wait fo' a thread ta terminizzle fo' realz. After
the thread terminates, tha application may then chizzle ta clean up
resources dat was used by tha thread. Y'all KNOW dat shit, muthafucka! For instance, after
\fIpthread_join\fP() returns, any application-provided stack storage
could be reclaimed.
.LP
Da \fIpthread_join\fP() or \fIpthread_detach\fP() function should
eventually
be called fo' every last muthafuckin thread dat is pimped wit tha \fIdetachstate\fP
attribute set ta PTHREAD_CREATE_JOINABLE so dat storage
associated wit tha thread may be reclaimed.
.LP
Da interaction between \fIpthread_join\fP() n' cancellation is well-defined
for tha followin reasons:
.IP " *" 3
Da \fIpthread_join\fP() function, like all other non-async-cancel-safe
functions, can only be called wit deferred
cancelabilitizzle type.
.LP
.IP " *" 3
Cancellation cannot occur up in tha disabled cancelabilitizzle state.
.LP
.LP
Thus, only tha default cancelabilitizzle state need be considered. Y'all KNOW dat shit, muthafucka! As
specified, either tha \fIpthread_join\fP() call is canceled,
or it succeedz yo, but not both. Da difference is obvious ta tha application,
since either a cold-ass lil cancellation handlez is run or
\fIpthread_join\fP() returns. There is no race conditions since \fIpthread_join\fP()
was called up in tha deferred cancelability
state.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIpthread_create\fP(), \fIwait\fP(), tha Base Definitions volume
of IEEE\ Std\ 1003.1-2001, \fI<pthread.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
