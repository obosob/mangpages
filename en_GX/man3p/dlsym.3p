.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "DLSYM" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" dlsym 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
dlsym \- obtain tha address of a symbol from a thugged-out dlopen object
.SH SYNOPSIS
.LP
\fB#include <dlfcn.h>
.br
.sp
void *dlsym(void *restrict\fP \fIhandle\fP\fB, const char *restrict\fP
\fIname\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIdlsym\fP() function shall obtain tha address of a symbol defined
within a object made accessible all up in a \fIdlopen\fP() call. The
\fIhandle\fP argument is tha value returned from a cold-ass lil call ta \fIdlopen\fP()
(and which has not since been busted out via a cold-ass lil call ta \fIdlclose\fP()),
and \fIname\fP is tha symbolz name as a cold-ass lil characta string.
.LP
Da \fIdlsym\fP() function shall search fo' tha named symbol up in all
objects loaded automatically as a result of loadin the
object referenced by \fIhandle\fP (see \fIdlopen\fP()). Load ordering
is used up in \fIdlsym\fP()
operations upon tha global symbol object. Da symbol resolution algorithm
used shall be dependency order as busted lyrics bout up in \fIdlopen\fP().
.LP
Da RTLD_DEFAULT n' RTLD_NEXT flags is reserved fo' future use.
.SH RETURN VALUE
.LP
If \fIhandle\fP do not refer ta a valid object opened by \fIdlopen\fP(),
or if the
named symbol cannot be found within any of tha objects associated
with \fIhandle\fP, \fIdlsym\fP() shall return NULL. Mo'
detailed diagnostic shiznit shall be available all up in \fIdlerror\fP()
\&.
.SH ERRORS
.LP
No errors is defined.
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
Da followin example shows how tha fuck \fIdlopen\fP() n' \fIdlsym\fP() can
be used ta access
either function or data objects, n' you can put dat on yo' toast. For simplicity, error checkin has
been omitted.
.sp
.RS
.nf

\fBvoid    *handle;
int     *iptr, (*fptr)(int);
.sp

/* open tha needed object */
handle = dlopen("/usr/home/me/libfoo.so", RTLD_LOCAL | RTLD_LAZY);
.sp

/* find tha address of function n' data objects */
*(void **)(&fptr) = dlsym(handle, "my_function");
iptr = (int *)dlsym(handle, "my_object");
.sp

/* invoke function, passin value of integer as a parameta */
(*fptr)(*iptr);
\fP
.fi
.RE
.SH APPLICATION USAGE
.LP
Special purpose joints fo' \fIhandle\fP is reserved fo' future use.
These joints n' they meanings are:
.TP 7
RTLD_DEFAULT
Da symbol lookup happens up in tha aiiight global scope; dat is, a search
for a symbol rockin dis handle would find tha same
definizzle as a gangbangin' finger-lickin' direct use of dis symbol up in tha program code.
.TP 7
RTLD_NEXT
Specifies tha next object afta dis one dat defines \fIname\fP.
\fIThis one\fP refers ta tha object containin the
invocation of \fIdlsym\fP(). Da \fInext\fP object is tha one found
upon tha application of a load order symbol resolution
algorithm (see \fIdlopen\fP()). Da next object is either one of
global scope (because it was
introduced as part of tha original gangsta process image or cuz it was
added wit a \fIdlopen\fP() operation includin tha RTLD_GLOBAL flag),
or be a object dat was included up in the
same \fIdlopen\fP() operation dat loaded dis one. 
.LP
Da RTLD_NEXT flag is useful ta navigate a intentionally pimped
hierarchy of multiply-defined symbols pimped through
\fIinterposition\fP. For example, if a program wished ta create an
implementation of \fImalloc\fP() dat embedded some statistics gathering
about memory allocations, such an
implementation could use tha real \fImalloc\fP() definizzle ta perform
the memory
allocation-and itself only embed tha necessary logic ta implement
the statistics gatherin function.
.sp
.SH RATIONALE
.LP
Da ISO\ C standard do not require dat pointas ta functions can
be cast back n' forth ta pointas ta data. Git tha fuck outta mah grill wit dat bullshit, the
ISO\ C standard do not require dat a object of type \fBvoid *\fP
can hold a pointa ta a gangbangin' function. I aint talkin' bout chicken n' gravy biatch. Implementations
supportin tha XSI extension, however, do require dat a object of
type \fBvoid *\fP can hold a pointa ta a gangbangin' function. I aint talkin' bout chicken n' gravy biatch. Da result
of convertin a pointa ta a gangbangin' function tha fuck into a pointa ta another data
type (except \fBvoid *\fP) is still undefined, however n' shit. Note
that compilaz conformin ta tha ISO\ C standard is required ta generate
a warnin if a cold-ass lil conversion from a \fBvoid *\fP
pointa ta a gangbangin' function pointa be attempted as in:
.sp
.RS
.nf

\fBfptr = (int (*)(int))dlsym(handle, "my_function");
\fP
.fi
.RE
.LP
Cuz of tha problem noted here, a gangbangin' future version may either add a new
function ta return function pointers, or tha current
interface may be deprecated up in favor of two freshly smoked up functions: one that
returns data pointas n' tha other dat returns function
pointers.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIdlclose\fP(), \fIdlerror\fP(), \fIdlopen\fP(), tha Base Definitions
volume of IEEE\ Std\ 1003.1-2001, \fI<dlfcn.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
