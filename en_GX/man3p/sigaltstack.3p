.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "SIGALTSTACK" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" sigaltstack 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
sigaltstack \- set n' git signal alternate stack context
.SH SYNOPSIS
.LP
\fB#include <signal.h>
.br
.sp
int sigaltstack(const stack_t *restrict\fP \fIss\fP\fB, stack_t *restrict\fP
\fIoss\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIsigaltstack\fP() function allows a process ta define n' examine
the state of a alternate stack fo' signal handlezs for
the current thread. Y'all KNOW dat shit, muthafucka! Signals dat done been explicitly declared to
execute on tha alternate stack shall be served up on the
alternate stack.
.LP
If \fIss\fP aint a null pointer, it points ta a \fBstack_t\fP structure
that specifies tha alternate signal stack dat shall
take effect upon return from \fIsigaltstack\fP(). Da \fIss_flags\fP
member specifies tha freshly smoked up stack state. If it is set to
SS_DISABLE, tha stack is disabled n' \fIss_sp\fP n' \fIss_size\fP
are ignored. Y'all KNOW dat shit, muthafucka! Otherwise, tha stack shall be enabled, n' the
\fIss_sp\fP n' \fIss_size\fP thugz specify tha freshly smoked up address and
size of tha stack.
.LP
Da range of addresses startin at \fIss_sp\fP up ta but not including
\fIss_sp\fP+ \fIss_size\fP be available ta the
implementation fo' use as tha stack. This function make no assumptions
regardin which end is tha stack base n' up in which
direction tha stack grows as shit is pushed.
.LP
If \fIoss\fP aint a null pointer, on successful completion it shall
point ta a \fBstack_t\fP structure dat specifies the
alternate signal stack dat was up in effect prior ta tha call ta \fIsigaltstack\fP().
Da \fIss_sp\fP n' \fIss_size\fP members
specify tha address n' size of dat stack. Da \fIss_flags\fP member
specifies tha stackz state, n' may contain one of the
followin joints:
.TP 7
SS_ONSTACK
Da process is currently executin on tha alternate signal stack.
Attempts ta modify tha alternate signal stack while the
process is executin on it fail. This flag shall not be modified by
processes.
.TP 7
SS_DISABLE
Da alternate signal stack is currently disabled.
.sp
.LP
Da value SIGSTKSZ be a system default specifyin tha number of bytes
that would be used ta cover tha usual case when manually
allocatin a alternate stack area. Da value MINSIGSTKSZ is defined
to be tha minimum stack size fo' a signal handlez n' shit. In
computin a alternate stack size, a program should add dat amount
to its stack requirements ta allow fo' tha system
implementation overhead. Y'all KNOW dat shit, muthafucka! Da constants SS_ONSTACK, SS_DISABLE, SIGSTKSZ,
and MINSIGSTKSZ is defined up in \fI<signal.h>\fP.
.LP
Afta a successful call ta one of tha \fIexec\fP functions, there
are no alternate signal
stacks up in tha freshly smoked up process image.
.LP
In some implementations, a signal (whether or not indicated ta execute
on tha alternate stack) shall always execute on the
alternate stack if it is served up while another signal is bein caught
usin tha alternate stack.
.LP
Use of dis function by library threadz dat is not bound ta kernel-scheduled
entitizzles thangs up in dis biatch up in undefined behavior.
.SH RETURN VALUE
.LP
Upon successful completion, \fIsigaltstack\fP() shall return 0; otherwise,
it shall return -1 n' set \fIerrno\fP ta indicate
the error.
.SH ERRORS
.LP
Da \fIsigaltstack\fP() function shall fail if:
.TP 7
.B EINVAL
Da \fIss\fP argument aint a null pointer, n' tha \fIss_flags\fP
member pointed ta by \fIss\fP gotz nuff flags other than
SS_DISABLE.
.TP 7
.B ENOMEM
Da size of tha alternate stack area is less than MINSIGSTKSZ.
.TP 7
.B EPERM
An attempt was made ta modify a actizzle stack.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.SS Allocatin Memory fo' a Alternate Stack
.LP
Da followin example illustrates a method fo' allocatin memory for
an alternate stack.
.sp
.RS
.nf

\fB#include <signal.h>
\&...
if ((sigstk.ss_sp = malloc(SIGSTKSZ)) == NULL)
    /* Error return, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch. */
sigstk.ss_size = SIGSTKSZ;
sigstk.ss_flags = 0;
if (sigaltstack(&sigstk,(stack_t *)0) < 0)
    perror("sigaltstack");
\fP
.fi
.RE
.SH APPLICATION USAGE
.LP
On some implementations, stack space be automatically extended as
needed. Y'all KNOW dat shit, muthafucka! On dem implementations, automatic extension is
typically not available fo' a alternate stack. If tha stack overflows,
the behavior is undefined.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fISignal Concepts\fP, \fIsigaction\fP(), \fIsigsetjmp\fP(), the
Base Definitions volume of IEEE\ Std\ 1003.1-2001, \fI<signal.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
