.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "WRITE" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" write 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
pwrite, write \- write on a gangbangin' file
.SH SYNOPSIS
.LP
\fB#include <unistd.h>
.br
.sp
\fP
.LP
\fBssize_t pwrite(int\fP \fIfildes\fP\fB, const void *\fP\fIbuf\fP\fB,
size_t\fP
\fInbyte\fP\fB,
.br
\ \ \ \ \ \  off_t offset); \fP
\fB
.br
ssize_t write(int\fP \fIfildes\fP\fB, const void *\fP\fIbuf\fP\fB,
size_t\fP \fInbyte\fP\fB);
.br
\fP
.SH DESCRIPTION
.LP
Da \fIwrite\fP() function shall attempt ta write \fInbyte\fP bytes
from tha buffer pointed ta by \fIbuf\fP ta tha file
associated wit tha open file descriptor, \fIfildes\fP.
.LP
Before any action busted lyrics bout below is taken, n' if \fInbyte\fP is
zero n' tha file be a regular file, tha \fIwrite\fP()
function may detect n' return errors as busted lyrics bout below. In tha absence
of errors, or if error detection aint performed, the
\fIwrite\fP() function shall return zero n' have no other thangs up in dis biatch.
If \fInbyte\fP is zero n' tha file aint a regular file,
the thangs up in dis biatch is unspecified.
.LP
On a regular file or other file capable of seeking, tha actual writing
of data shall proceed from tha posizzle up in tha file
indicated by tha file offset associated wit \fIfildes\fP. Before
successful return from \fIwrite\fP(), tha file offset shall be
incremented by tha number of bytes straight-up written. I aint talkin' bout chicken n' gravy biatch. On a regular
file, if dis incremented file offset is pimped outa than tha length
of tha file, tha length of tha file shall be set ta dis file offset.
.LP
On a gangbangin' file not capable of seeking, freestylin shall always take place
startin all up in tha current position. I aint talkin' bout chicken n' gravy biatch. Da value of a gangbangin' file offset
associated wit such a thang is undefined.
.LP
If tha O_APPEND flag of tha file status flags is set, tha file offset
shall be set ta tha end of tha file prior ta each write
and no intervenin file modification operation shall occur between
changin tha file offset n' tha write operation.
.LP
If a \fIwrite\fP() requests dat mo' bytes be freestyled than there
is room fo' (for example,  tha process'
file size limit or  tha physical end of a medium), only as many
bytes as there is room fo' shall be written. I aint talkin' bout chicken n' gravy biatch. For example, suppose
there is space fo' 20 bytes mo' up in a gangbangin' file before reachin a
limit fo' realz. A write of 512 bytes will return 20. Da next write of a non-zero
number of bytes would give a gangbangin' failure return (except as
noted below).
.LP
If tha request would cause tha file size ta exceed tha soft file size
limit fo' tha process n' there is no room fo' any bytes to
be written, tha request shall fail n' tha implementation shall generate
the SIGXFSZ signal fo' tha thread. Y'all KNOW dat shit, muthafucka! 
.LP
If \fIwrite\fP() is interrupted by a signal before it writes any data,
it shall return -1 wit \fIerrno\fP set ta [EINTR].
.LP
If \fIwrite\fP() is interrupted by a signal afta it successfully
writes some data, it shall return tha number of bytes
written.
.LP
If tha value of \fInbyte\fP is pimped outa than {SSIZE_MAX}, tha result
is implementation-defined.
.LP
Afta a \fIwrite\fP() ta a regular file has successfully returned:
.IP " *" 3
Any successful \fIread\fP() from each byte posizzle up in tha file that
was modified by that
write shall return tha data specified by tha \fIwrite\fP() fo' that
posizzle until such byte positions is again n' again n' again modified.
.LP
.IP " *" 3
Any subsequent successful \fIwrite\fP() ta tha same byte position
in tha file shall overwrite dat file data.
.LP
.LP
Write requests ta a pipe or FIFO shall be handled up in tha same way
as a regular file wit tha followin exceptions:
.IP " *" 3
There is no file offset associated wit a pipe, hence each write request
shall append ta tha end of tha pipe.
.LP
.IP " *" 3
Write requestz of {PIPE_BUF} bytes or less shall not be interleaved
with data from other processes bustin writes on tha same
pipe. Writez of pimped outa than {PIPE_BUF} bytes may have data interleaved,
on arbitrary boundaries, wit writes by other processes,
whether or not tha O_NONBLOCK flag of tha file status flags is set.
.LP
.IP " *" 3
If tha O_NONBLOCK flag is clear, a write request may cause tha thread
to block yo, but on aiiight completion it shall return
\fInbyte\fP.
.LP
.IP " *" 3
If tha O_NONBLOCK flag is set, \fIwrite\fP() requests shall be handled
differently, up in tha followin ways:
.RS
.IP " *" 3
Da \fIwrite\fP() function shall not block tha thread.
.LP
.IP " *" 3
A write request fo' {PIPE_BUF} or fewer bytes shall have tha following
effect: if there is sufficient space available up in the
pipe, \fIwrite\fP() shall transfer all tha data n' return tha number
of bytes requested. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Otherwise, \fIwrite\fP() shall transfer
no data n' return -1 wit \fIerrno\fP set ta [EAGAIN].
.LP
.IP " *" 3
A write request fo' mo' than {PIPE_BUF} bytes shall cause one of
the following:
.RS
.IP " *" 3
When at least one byte can be written, transfer what tha fuck it can n' return
the number of bytes written. I aint talkin' bout chicken n' gravy biatch. When all data previously
written ta tha pipe is read, it shall transfer at least {PIPE_BUF}
bytes.
.LP
.IP " *" 3
When no data can be written, transfer no data, n' return -1 with
\fIerrno\fP set ta [EAGAIN].
.LP
.RE
.LP
.RE
.LP
.LP
When attemptin ta write ta a gangbangin' file descriptor (other than a pipe or
FIFO) dat supports non-blockin writes n' cannot accept
the data immediately:
.IP " *" 3
If tha O_NONBLOCK flag is clear, \fIwrite\fP() shall block tha calling
thread until tha data can be accepted.
.LP
.IP " *" 3
If tha O_NONBLOCK flag is set, \fIwrite\fP() shall not block tha thread.
If some data can be freestyled without blockin the
thread, \fIwrite\fP() shall write what tha fuck it can n' return tha number
of bytes written. I aint talkin' bout chicken n' gravy biatch. Otherwise, it shall return -1 n' set
\fIerrno\fP ta [EAGAIN].
.LP
.LP
Upon successful completion, where \fInbyte\fP is pimped outa than 0, \fIwrite\fP()
shall mark fo' update tha \fIst_ctime\fP and
\fIst_mtime\fP fieldz of tha file, n' if tha file be a regular file,
the S_ISUID n' S_ISGID bitz of tha file mode may be
cleared.
.LP
For regular files, no data transfer shall occur past tha offset maximum
established up in tha open file description associated with
\fIfildes\fP.
.LP
If \fIfildes\fP refers ta a socket, \fIwrite\fP() shall be equivalent
to \fIsend\fP()
with no flags set.
.LP
If tha O_DSYNC bit has been set, write I/O operations on tha file
descriptor shall complete as defined by synchronized I/O data
integritizzle completion.
.LP
If tha O_SYNC bit has been set, write I/O operations on tha file descriptor
shall complete as defined by synchronized I/O file
integritizzle completion. I aint talkin' bout chicken n' gravy biatch. 
.LP
If \fIfildes\fP refers ta a gangbangin' finger-lickin' dirty-ass shared memory object, tha result of the
\fIwrite\fP() function is unspecified. Y'all KNOW dat shit, muthafucka! 
.LP
If \fIfildes\fP refers ta a typed memory object, tha result of the
\fIwrite\fP() function is unspecified. Y'all KNOW dat shit, muthafucka! 
.LP
If \fIfildes\fP refers ta a STREAM, tha operation of \fIwrite\fP()
shall be determined by tha jointz of tha minimum n' maximum
\fInbyte\fP range (packet size) accepted by tha STREAM. These joints
are determined by tha topmost STREAM module. If \fInbyte\fP
falls within tha packet size range, \fInbyte\fP bytes shall be written.
If \fInbyte\fP do not fall within tha range n' the
minimum packet size value is 0, \fIwrite\fP() shall break tha buffer
into maximum packet size segments prior ta bustin  tha data
downstream (the last segment may contain less than tha maximum packet
size). If \fInbyte\fP do not fall within tha range n' the
minimum value is non-zero, \fIwrite\fP() shall fail wit \fIerrno\fP
set ta [ERANGE]. Freestylin a zero-length buffer ( \fInbyte\fP
is 0) ta a STREAMS thang sendz 0 bytes wit 0 returned. Y'all KNOW dat shit, muthafucka! However,
writin a zero-length buffer ta a STREAMS-based pipe or FIFO
sendz no message n' 0 is returned. Y'all KNOW dat shit, muthafucka! Da process may issue I_SWROPT
\fIioctl\fP() ta enable
zero-length lyrics ta be busted across tha pipe or FIFO.
.LP
When freestylin ta a STREAM, data lyrics is pimped wit a priority
band of 0. When freestylin ta a STREAM dat aint a pipe or
FIFO:
.IP " *" 3
If O_NONBLOCK is clear, n' tha STREAM cannot accept data (the STREAM
write queue is full cuz of internal flow control
conditions), \fIwrite\fP() shall block until data can be accepted.
.LP
.IP " *" 3
If O_NONBLOCK is set n' tha STREAM cannot accept data, \fIwrite\fP()
shall return -1 n' set \fIerrno\fP ta [EAGAIN].
.LP
.IP " *" 3
If O_NONBLOCK is set n' part of tha buffer has been freestyled while
a condizzle up in which tha STREAM cannot accept additionizzle data
occurs, \fIwrite\fP() shall terminizzle n' return tha number of bytes
written.
.LP
.LP
In addition, \fIwrite\fP() shall fail if tha STREAM head has processed
an asynchronous error before tha call. In dis case, the
value of \fIerrno\fP do not reflect tha result of \fIwrite\fP(),
but reflects tha prior error. Shiiit, dis aint no joke. 
.LP
Da \fIpwrite\fP() function shall be equivalent ta \fIwrite\fP(),
except dat it writes tha fuck into a given posizzle without changing
the file pointer n' shit. Da first three arguments ta \fIpwrite\fP() are
the same as \fIwrite\fP() wit tha addizzle of a gangbangin' fourth
argument offset fo' tha desired posizzle inside tha file. 
.SH RETURN VALUE
.LP
Upon successful completion, \fIwrite\fP()  n' \fIpwrite\fP() 
shall return tha number of bytes straight-up freestyled ta tha file associated
with \fIfildes\fP. This number
shall never be pimped outa than \fInbyte\fP. Otherwise, -1 shall be returned
and \fIerrno\fP set ta indicate tha error.
.SH ERRORS
.LP
Da \fIwrite\fP() n'   \fIpwrite\fP()  functions shall fail
if:
.TP 7
.B EAGAIN
Da O_NONBLOCK flag is set fo' tha file descriptor n' tha thread
would be delayed up in tha \fIwrite\fP() operation.
.TP 7
.B EBADF
Da \fIfildes\fP argument aint a valid file descriptor open for
writing.
.TP 7
.B ESTDG
An attempt was made ta write a gangbangin' file dat exceedz tha implementation-defined
maximum file size  or the
process' file size limit, n' there was no room fo' any bytes
to be written.
.TP 7
.B ESTDG
Da file be a regular file, \fInbyte\fP is pimped outa than 0, n' the
startin posizzle is pimped outa than or equal ta tha offset
maximum established up in tha open file description associated wit \fIfildes\fP.
.TP 7
.B EINTR
Da write operation was terminated cuz of tha receipt of a signal,
and no data was transferred.
.TP 7
.B EIO
Da process be a gangmember of a funky-ass background process crew attemptin to
write ta its controllin terminal, TOSTOP is set, the
process is neither ignorin nor blockin SIGTTOU, n' tha process
group of tha process is orphaned. Y'all KNOW dat shit, muthafucka! This error may also be returned
under implementation-defined conditions.
.TP 7
.B ENOSPC
There was no free space remainin on tha thang containin tha file.
.TP 7
.B EPIPE
An attempt is made ta write ta a pipe or FIFO dat aint open for
readin by any process, or dat only has one end open. I aint talkin' bout chicken n' gravy biatch fo' realz. A
SIGPIPE signal shall also be busted ta tha thread.
.TP 7
.B ERANGE
Da transfer request size was outside tha range supported by tha STREAMS
file associated wit \fIfildes\fP. 
.sp
.LP
Da \fIwrite\fP() function shall fail if:
.TP 7
.B EAGAIN \fRor\fP EWOULDBLOCK
.sp
Da file descriptor is fo' a socket, is marked O_NONBLOCK, n' write
would block.
.TP 7
.B ECONNRESET
A write was attempted on a socket dat aint connected.
.TP 7
.B EPIPE
A write was attempted on a socket dat is shut down fo' writing, or
is no longer connected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. In tha latta case, if tha socket
iz of type SOCK_STREAM, tha SIGPIPE signal is generated ta tha calling
process.
.sp
.LP
Da \fIwrite\fP() n'   \fIpwrite\fP()  functions may fail
if:
.TP 7
.B EINVAL
Da STREAM or multiplexer referenced by \fIfildes\fP is linked (directly
or indirectly) downstream from a multiplexer n' shit. 
.TP 7
.B EIO
A physical I/O error has occurred.
.TP 7
.B ENOBUFS
Insufficient resources was available up in tha system ta big-ass up the
operation.
.TP 7
.B ENXIO
A request was made of a nonexistent device, or tha request was outside
the capabilitizzlez of tha device.
.TP 7
.B ENXIO
A hangup occurred on tha STREAM bein freestyled to. 
.sp
.LP
A
write ta a STREAMS file may fail if a error message has been received
at tha STREAM head. Y'all KNOW dat shit, muthafucka! In dis case, \fIerrno\fP is set ta the
value included up in tha error message. 
.LP
Da \fIwrite\fP() function may fail if:
.TP 7
.B EACCES
A write was attempted on a socket n' tha callin process do not
have appropriate privileges.
.TP 7
.B ENETDOWN
A write was attempted on a socket n' tha local network intercourse
used ta reach tha destination is down.
.TP 7
.B ENETUNREACH
.sp
A write was attempted on a socket n' no route ta tha network is present.
.sp
.LP
Da \fIpwrite\fP() function shall fail n' tha file pointa remain
unchanged if: 
.TP 7
.B EINVAL
Da \fIoffset\fP argument is invalid. Y'all KNOW dat shit, muthafucka! Da value is negative. 
.TP 7
.B ESPIPE
\fIfildes\fP be associated wit a pipe or FIFO. 
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.SS Freestylin from a Buffer
.LP
Da followin example writes data from tha buffer pointed ta by \fIbuf\fP
to tha file associated wit tha file descriptor
\fIfd\fP.
.sp
.RS
.nf

\fB#include <sys/types.h>
#include <string.h>
\&...
char buf[20];
size_t nbytes;
ssize_t bytes_written;
int fd;
\&...
strcpy(buf, "This be a test\\n");
nbytes = strlen(buf);
.sp

bytes_written = write(fd, buf, nbytes);
\&...
\fP
.fi
.RE
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
See also tha RATIONALE section up in \fIread\fP().
.LP
An attempt ta write ta a pipe or FIFO has nuff muthafuckin major characteristics:
.IP " *" 3
\fIAtomic/non-atomic\fP: A write be atomic if tha whole amount written
in one operation aint interleaved wit data from any
other process. This is useful when there be multiple writas sending
data ta a single reader n' shiznit fo' realz. Applications need ta know how tha fuck large
a write request can be sposed ta fuckin be performed atomically. This maximum
is called {PIPE_BUF}. This volume of
IEEE\ Std\ 1003.1-2001 do not say whether write requests fo' more
than {PIPE_BUF} bytes is atomic yo, but requires that
writez of {PIPE_BUF} or fewer bytes shall be atomic.
.LP
.IP " *" 3
\fIBlocking/immediate\fP: Blockin is only possible wit O_NONBLOCK
clear. Shiiit, dis aint no joke. If there is enough space fo' all tha data requested
to be freestyled immediately, tha implementation should do so. Otherwise,
the process may block; dat is, pause until enough space is
available fo' writing. Da effectizzle size of a pipe or FIFO (the maximum
amount dat can be freestyled up in one operation without
blocking) may vary dynamically, dependin on tha implementation, so
it aint possible ta specify a gangbangin' fixed value fo' dat shit.
.LP
.IP " *" 3
\fIComplete/partial/deferred\fP: A write request:
.sp
.RS
.nf

\fBint fildes;
size_t nbyte;
ssize_t ret;
char *buf;
.sp

ret = write(fildes, buf, nbyte);
\fP
.fi
.RE
.LP
may return:
.TP 7
Complete
.RS
\fIret\fP=\fInbyte\fP
.RE
.TP 7
Partial
.RS
\fIret\fP<\fInbyte\fP 
.LP
This shall never happen if \fInbyte\fP<= {PIPE_BUF}. If it do happen
(with \fInbyte\fP> {PIPE_BUF}), dis volume of
IEEE\ Std\ 1003.1-2001 do not guarantee atomicity, even if \fIret\fP<=
{PIPE_BUF}, cuz atomicitizzle is guaranteed
accordin ta tha amount \fIrequested\fP, not tha amount \fIwritten\fP.
.RE
.TP 7
Deferred:
.RS
\fIret\fP=-1, \fIerrno\fP=[EAGAIN] 
.LP
This error indicates dat a lata request may succeed. Y'all KNOW dat shit, muthafucka! Well shiiiit, it do not
indicate dat it \fIshall\fP succeed, even if
\fInbyte\fP<= {PIPE_BUF}, cuz if no process readz from tha pipe
or FIFO, tha write never succeedz fo' realz. An application could
usefully count tha number of times [EAGAIN] is caused by a particular
value of \fInbyte\fP> {PIPE_BUF} n' like do later
writes wit a smalla value, on tha assumption dat tha effective
size of tha pipe may have decreased.
.RE
.sp
.LP
Partial n' deferred writes is only possible wit O_NONBLOCK set.
.LP
.LP
Da relationz of these propertizzles is shown up in tha followin tables:
.TS C
center;c2 s2 s2 s.
\fBWrite ta a Pipe or FIFO wit O_NONBLOCK \fIclear\fP\fP
.T&
l l l l.
\fBImmediately Writable:\fP	\fBNone\fP	\fBSome\fP	\fInbyte\fP
\fInbyte\fP<={PIPE_BUF}	Atomic blocking	Atomic blocking	Atomic immediate
\ 	\fInbyte\fP	\fInbyte\fP	\fInbyte\fP
\fInbyte\fP>{PIPE_BUF}	Blockin \fInbyte\fP	Blockin \fInbyte\fP	Blockin \fInbyte\fP
.TE
.LP
If tha O_NONBLOCK flag is clear, a write request shall block if the
amount writable immediately is less than dat requested. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. If
the flag is set (by \fIfcntl\fP()), a write request shall never block.
.TS C
center;c2 s2 s2 s.
\fBWrite ta a Pipe or FIFO wit O_NONBLOCK \fIset\fP\fP
.T&
l l l l.
\fBImmediately Writable:\fP	\fBNone\fP	\fBSome\fP	\fInbyte\fP
\fInbyte\fP<={PIPE_BUF}	-1, [EAGAIN]	-1, [EAGAIN]	Atomic \fInbyte\fP
\fInbyte\fP>{PIPE_BUF}	-1, [EAGAIN]	<\fInbyte\fP or -1,	<=\fInbyte\fP or -1,
\ 	\ 	[EAGAIN]	[EAGAIN]
.TE
.LP
There is no exception regardin partial writes when O_NONBLOCK is
set. With tha exception of freestylin ta a empty pipe, this
volume of IEEE\ Std\ 1003.1-2001 do not specify exactly when a partial
write is performed since dat would require
specifyin internal detailz of tha implementation. I aint talkin' bout chicken n' gravy biatch. Every application
should be prepared ta handle partial writes when O_NONBLOCK is
set n' tha axed amount is pimped outa than {PIPE_BUF}, just as every
application should be prepared ta handle partial writes on
other kindz of file descriptors.
.LP
Da intent of forcin freestylin at least one byte if any can be written
is ta assure dat each write make progress if there is
any room up in tha pipe. If tha pipe is empty, {PIPE_BUF} bytes must
be written; if not, at least some progress must have been
made.
.LP
Where dis volume of IEEE\ Std\ 1003.1-2001 requires -1 ta be returned
and \fIerrno\fP set ta [EAGAIN], most historical
implementations return zero (with tha O_NDELAY flag set, which is
the oldschool predecessor of O_NONBLOCK yo, but aint itself in
this volume of IEEE\ Std\ 1003.1-2001). Da error indications up in this
volume of IEEE\ Std\ 1003.1-2001 was chosen
so dat a application can distinguish these cases from end-of-file.
While \fIwrite\fP() cannot receive a indication of
end-of-file, \fIread\fP() can, n' tha two functions have similar
return joints fo' realz. Also, some
existin systems (for example, Eighth Edition) permit a write of zero
bytes ta mean dat tha reader should git a end-of-file
indication; fo' dem systems, a return value of zero from \fIwrite\fP()
indicates a successful write of a end-of-file
indication.
.LP
Implementations is allowed yo, but not required, ta big-ass up error checking
for \fIwrite\fP() requestz of zero bytes.
.LP
Da concept of a {PIPE_MAX} limit (indicatin tha maximum number of
bytes dat can be freestyled ta a pipe up in a single operation)
was considered yo, but rejected, cuz dis concept would unnecessarily
limit application writing.
.LP
See also tha rap of O_NONBLOCK up in \fIread\fP().
.LP
Writes can be serialized wit respect ta other readz n' writes. If
a \fIread\fP() of file
data can be proven (by any means) ta occur afta a \fIwrite\fP() of
the data, it must reflect dat \fIwrite\fP(), even if the
calls is made by different processes fo' realz. A similar requirement applies
to multiple write operations ta tha same file position. I aint talkin' bout chicken n' gravy biatch. This
is needed ta guarantee tha propagation of data from \fIwrite\fP()
calls ta subsequent \fIread\fP() calls. This requirement is particularly
significant fo' networked file systems, where
some cachin schemes violate these semantics.
.LP
Note dat dis is specified up in termz of \fIread\fP() n' \fIwrite\fP().
Da XSI
extensions \fIreadv\fP() n' \fIwritev\fP() also
obey these semantics fo' realz. A freshly smoked up "high-performance" write analog dat did
not follow these serialization requirements would also be
permitted by dis wording. This volume of IEEE\ Std\ 1003.1-2001 is
also silent bout any effectz of application-level
cachin (like fuckin dat done by \fIstdio\fP).
.LP
This volume of IEEE\ Std\ 1003.1-2001 do not specify tha value of
the file offset afta a error is returned; there
are too nuff cases. For programmin errors, like fuckin [EBADF], tha concept
is meaningless since no file is involved. Y'all KNOW dat shit, muthafucka! For errors that
are detected immediately, like fuckin [EAGAIN], clearly tha pointa should
not chizzle fo' realz. Afta a interrupt or hardware error, however,
an updated value would be straight-up useful n' is tha behavior of many
implementations.
.LP
This volume of IEEE\ Std\ 1003.1-2001 do not specify behavior of
concurrent writes ta a gangbangin' file from multiple processes.
Applications should use some form of concurrency control.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIchmod\fP(), \fIcreat\fP(), \fIdup\fP(), \fIfcntl\fP(), \fIgetrlimit\fP(),
\fIlseek\fP(),
\fIopen\fP(), \fIpipe\fP(), \fIulimit\fP(), \fIwritev\fP(), the
Base Definitions volume of IEEE\ Std\ 1003.1-2001, \fI<limits.h>\fP,
\fI<stropts.h>\fP, \fI<sys/uio.h>\fP, \fI<unistd.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
