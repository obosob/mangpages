.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "SIGACTION" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" sigaction 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
sigaction \- examine n' chizzle a signal action
.SH SYNOPSIS
.LP
\fB#include <signal.h>
.br
.sp
int sigaction(int\fP \fIsig\fP\fB, const struct sigaction *restrict\fP
\fIact\fP\fB,
.br
\ \ \ \ \ \  struct sigaction *restrict\fP \fIoact\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIsigaction\fP() function allows tha callin process ta examine
and/or specify tha action ta be associated wit a specific
signal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Da argument \fIsig\fP specifies tha signal; aaight joints
are defined up in \fI<signal.h>\fP.
.LP
Da structure \fBsigaction\fP, used ta describe a action ta be taken,
is defined up in tha \fI<signal.h>\fP header ta include at least the
followin members:
.TS C
center; lw(15) l lw(30).
T{
.na
\fBMember Type\fP
.ad
T}	\fBMember Name\fP	T{
.na
\fBDescription\fP
.ad
T}
T{
.na
\fBvoid(*) (int)\fP
.ad
T}	\fIsa_handlez\fP	T{
.na
Pointa ta a signal-catchin function or one of tha macros SIG_IGN or SIG_DFL.
.ad
T}
T{
.na
\fBsigset_t\fP
.ad
T}	\fIsa_mask\fP	T{
.na
Additionizzle set of signals ta be blocked durin execution of signal-catchin function.
.ad
T}
T{
.na
\fBint\fP
.ad
T}	\fIsa_flags\fP	T{
.na
Special flags ta affect behavior of signal.
.ad
T}
T{
.na
\fBvoid(*) (int,\fP
.ad
T}	\fI\ \fP	T{
.na
\ 
.ad
T}
T{
.na
\fB\ \ siginfo_t *, void *)\fP
.ad
T}	\fIsa_sigaction\fP	T{
.na
Pointa ta a signal-catchin function.
.ad
T}
.TE
.LP
Da storage occupied by \fIsa_handlez\fP n' \fIsa_sigaction\fP may
overlap, n' a cold-ass lil conformin application shall not use both
simultaneously.
.LP
If tha argument \fIact\fP aint a null pointer, it points ta a structure
specifyin tha action ta be associated wit the
specified signal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. If tha argument \fIoact\fP aint a null pointer,
the action previously associated wit tha signal is stored in
the location pointed ta by tha argument \fIoact\fP. If tha argument
\fIact\fP be a null pointer, signal handlin is unchanged;
thus, tha call can be used ta enquire bout tha current handlin of
a given signal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Da SIGKILL n' SIGSTOP signals shall not be
added ta tha signal mask rockin dis mechanism; dis restriction shall
be enforced by tha system without causin a error ta be
indicated.
.LP
If tha SA_SIGINFO flag (see below) is cleared up in tha \fIsa_flags\fP
field of tha \fBsigaction\fP structure, the
\fIsa_handlez\fP field identifies tha action ta be associated with
the specified signal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  If the
SA_SIGINFO flag is set up in tha \fIsa_flags\fP field, n' tha implementation
supports tha Realtime Signals Extension option or the
XSI Extension option, tha \fIsa_sigaction\fP field specifies a signal-catching
function. I aint talkin' bout chicken n' gravy biatch.  If tha SA_SIGINFO bit is cleared n' tha \fIsa_handlez\fP
field specifies a signal-catchin function,
or if tha SA_SIGINFO bit is set, tha \fIsa_mask\fP field identifies
a set of signals dat shall be added ta tha signal mask of the
thread before tha signal-catchin function is invoked. Y'all KNOW dat shit, muthafucka! If tha \fIsa_handlez\fP
field specifies a signal-catchin function, the
\fIsa_mask\fP field identifies a set of signals dat shall be added
to tha process' signal mask before tha signal-catching
function is invoked.
.LP
Da \fIsa_flags\fP field can be used ta modify tha behavior of the
specified signal.
.LP
Da followin flags, defined up in tha \fI<signal.h>\fP header, can be
set in
\fIsa_flags\fP:
.TP 7
SA_NOCLDSTOP
Do not generate SIGCHLD when lil pimps stop  or stopped children
continue.  
.LP
If \fIsig\fP is SIGCHLD n' tha SA_NOCLDSTOP flag aint set up in \fIsa_flags\fP,
and tha implementation supports tha SIGCHLD
signal, then a SIGCHLD signal shall be generated fo' tha callin process
whenever any of its lil pimp processes stop  n' a
SIGCHLD signal may be generated fo' tha callin process whenever any
of its stopped lil pimp processes is continued. Y'all KNOW dat shit, muthafucka! If \fIsig\fP is SIGCHLD
and tha SA_NOCLDSTOP flag is set in
\fIsa_flags\fP, then tha implementation shall not generate a SIGCHLD
signal up in dis way.
.TP 7
SA_ONSTACK
If set n' a alternate signal stack has been declared wit \fIsigaltstack\fP(),
the
signal shall be served up ta tha callin process on dat stack. Otherwise,
the signal shall be served up on tha current stack. 
.TP 7
SA_RESETHAND
If set, tha disposizzle of tha signal shall be reset ta SIG_DFL and
the SA_SIGINFO flag shall be cleared on entry ta tha signal
handlez n' shit.  
.TP 7
\fBNote:\fP
.RS
SIGILL n' SIGTRAP cannot be automatically reset when delivered; the
system silently enforces dis restriction.
.RE
.sp
Otherwise, tha disposizzle of tha signal shall not be modified on
entry ta tha signal handlez n' shit. 
.LP
In addition, if dis flag is set, \fIsigaction\fP() behaves as if
the SA_NODEFER flag was also set. 
.TP 7
SA_RESTART
This flag affects tha behavior of interruptible functions; dat is,
those specified ta fail wit \fIerrno\fP set ta [EINTR]. If
set, n' a gangbangin' function specified as interruptible is interrupted by this
signal, tha function shall restart n' shall not fail with
[EINTR] unless otherwise specified. Y'all KNOW dat shit, muthafucka! If tha flag aint set, interruptible
functions interrupted by dis signal shall fail with
\fIerrno\fP set ta [EINTR]. 
.TP 7
SA_SIGINFO
If cleared n' tha signal is caught, tha signal-catchin function
shall be entered as: 
.sp
.RS
.nf

\fBvoid func(int\fP \fIsigno\fP\fB);
\fP
.fi
.RE
.LP
where \fIsigno\fP is tha only argument ta tha signal-catchin function.
In dis case, tha application shall use the
\fIsa_handlez\fP member ta describe tha signal-catchin function and
the application shall not modify tha \fIsa_sigaction\fP
member.
.LP
If SA_SIGINFO is set n' tha signal is caught, tha signal-catching
function shall be entered as:
.sp
.RS
.nf

\fBvoid func(int\fP \fIsigno\fP\fB, siginfo_t *\fP\fIinfo\fP\fB, void *\fP\fIcontext\fP\fB);
\fP
.fi
.RE
.LP
where two additionizzle arguments is passed ta tha signal-catchin function.
Da second argument shall point ta a object of type
\fBsiginfo_t\fP explainin tha reason why tha signal was generated;
the third argument can be cast ta a pointa ta a object of
type \fBucontext_t\fP ta refer ta tha receivin process' context that
was interrupted when tha signal was delivered. Y'all KNOW dat shit, muthafucka! In dis case,
the application shall use tha \fIsa_sigaction\fP member ta describe
the signal-catchin function n' tha application shall not
modify tha \fIsa_handlez\fP member.
.LP
Da \fIsi_signo\fP member gotz nuff tha system-generated signal number.
.LP
Da \fIsi_errno\fP member may contain implementation-defined additional
error shiznit; if non-zero, it gotz nuff a error
number identifyin tha condizzle dat caused tha signal ta be generated.
.LP
Da \fIsi_code\fP member gotz nuff a cold-ass lil code identifyin tha cause of
the signal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. 
.LP
If tha value of \fIsi_code\fP is less than or equal ta 0, then the
signal was generated by a process n' \fIsi_pid\fP and
\fIsi_uid\fP, respectively, indicate tha process ID n' tha real user
ID of tha sender n' shit.  Da \fI<signal.h>\fP header description gotz nuff
information bout tha signal-specific contentz of tha elements of
the \fBsiginfo_t\fP type.
.TP 7
SA_NOCLDWAIT
If set, n' \fIsig\fP equals SIGCHLD, lil pimp processez of tha calling
processes shall not be transformed tha fuck into zombie processes when
they terminate. If tha callin process subsequently waits fo' its
children, n' tha process has no unwaited-for lil pimps dat were
transformed tha fuck into zombie processes, it shall block until all of its
lil pimps terminate, n' \fIwait\fP(), \fIwaitid\fP(), n' \fIwaitpid\fP()
shall fail n' set \fIerrno\fP ta [ECHILD]. Otherwise, terminating
child
processes shall be transformed tha fuck into zombie processes, unless SIGCHLD
is set ta SIG_IGN. 
.TP 7
SA_NODEFER
If set n' \fIsig\fP is caught, \fIsig\fP shall not be added ta the
process' signal mask on entry ta tha signal handlez unless it
is included up in \fIsa_mask\fP. Otherwise, \fIsig\fP shall always be
added ta tha process' signal mask on entry ta tha signal
handlez n' shit. 
.sp
.LP
When a signal is caught by a signal-catchin function installed by
\fIsigaction\fP(), a freshly smoked up signal mask is calculated and
installed fo' tha duration of tha signal-catchin function (or until
a call ta either \fIsigprocmask\fP() or \fIsigsuspend\fP() is
made). This mask is formed by takin tha union of tha current signal
mask n' tha value of tha \fIsa_mask\fP fo' tha signal being
delivered  unless SA_NODEFER or SA_RESETHAND is set,  and
then includin tha signal bein delivered. Y'all KNOW dat shit, muthafucka! If n' when tha user's
signal handlez returns normally, tha original gangsta signal mask is
restored.
.LP
Once a action is installed fo' a specific signal, it shall remain
installed until another action is explicitly axed (by
another call ta \fIsigaction\fP()),  until tha SA_RESETHAND flag
causes resettin of tha handlez, or until one of tha \fIexec\fP
functions is called.
.LP
If tha previous action fo' \fIsig\fP had been established by \fIsignal\fP(),
the joints
of tha fieldz returned up in tha structure pointed ta by \fIoact\fP are
unspecified, n' up in particular \fIoact\fP->
\fIsa_handlez\fP aint necessarily tha same value passed ta \fIsignal\fP().
But fuck dat shiznit yo, tha word on tha street is dat if a
pointa ta tha same structure or a cold-ass lil copy thereof is passed ta a subsequent
call ta \fIsigaction\fP() via tha \fIact\fP argument,
handlin of tha signal shall be as if tha original gangsta call ta \fIsignal\fP()
were
repeated.
.LP
If \fIsigaction\fP() fails, no freshly smoked up signal handlez is installed.
.LP
It be unspecified whether a attempt ta set tha action fo' a signal
that cannot be caught or ignored ta SIG_DFL is ignored or
causes a error ta be returned wit \fIerrno\fP set ta [EINVAL].
.LP
If SA_SIGINFO aint set up in \fIsa_flags\fP, then tha disposizzle of
subsequent occurrencez of \fIsig\fP when it be already
pendin is implementation-defined; tha signal-catchin function shall
be invoked wit a single argument.  If the
implementation supports tha Realtime Signals Extension option, and
if SA_SIGINFO is set up in \fIsa_flags\fP, then subsequent
occurrencez of \fIsig\fP generated by \fIsigqueue\fP() or as a result
of any
signal-generatin function dat supports tha justification of a application-defined
value (when \fIsig\fP be already pending)
shall be queued up in FIFO order until served up or accepted; tha signal-catching
function shall be invoked wit three arguments, n' you can put dat on yo' toast. The
application specified value is passed ta tha signal-catchin function
as tha \fIsi_value\fP gangmember of tha \fBsiginfo_t\fP
structure. 
.LP
Da result of tha use of \fIsigaction\fP() n' a \fIsigwait\fP() function
concurrently
within a process on tha same signal is unspecified.
.SH RETURN VALUE
.LP
Upon successful completion, \fIsigaction\fP() shall return 0; otherwise,
-1 shall be returned, \fIerrno\fP shall be set to
indicate tha error, n' no freshly smoked up signal-catchin function shall be installed.
.SH ERRORS
.LP
Da \fIsigaction\fP() function shall fail if:
.TP 7
.B EINVAL
Da \fIsig\fP argument aint a valid signal number or a attempt
is made ta catch a signal dat cannot be caught or ignore a
signal dat cannot be ignored.
.TP 7
.B ENOTSUP
Da SA_SIGINFO bit flag is set up in tha \fIsa_flags\fP field of the
\fBsigaction\fP structure, n' tha implementation do not
support either tha Realtime Signals Extension option, or tha XSI Extension
option.
.sp
.LP
Da \fIsigaction\fP() function may fail if:
.TP 7
.B EINVAL
An attempt was made ta set tha action ta SIG_DFL fo' a signal that
cannot be caught or ignored (or both).
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
Da \fIsigaction\fP() function supersedes tha \fIsignal\fP() function,
and should be
used up in preference. In particular, \fIsigaction\fP() n' \fIsignal\fP()
should not be used
in tha same process ta control tha same signal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Da behavior of reentrant
functions, as defined up in tha DESCRIPTION, be as specified
by dis volume of IEEE\ Std\ 1003.1-2001, regardless of invocation
from a signal-catchin function. I aint talkin' bout chicken n' gravy biatch. This is tha only
intended meanin of tha statement dat reentrant functions may be
used up in signal-catchin functions without restrictions.
Applications must still consider all effectz of such functions on
such thangs as data structures, files, n' process state. In
particular, application writas need ta consider tha restrictions
on interactions when interruptin \fIsleep\fP() n' interactions among
multiple handlez fo' a gangbangin' file description. I aint talkin' bout chicken n' gravy biatch. Da fact dat any
specific function is listed as reentrant do not necessarily mean
that invocation of dat function from a signal-catchin function
is recommended.
.LP
In order ta prevent errors arisin from interruptin non-reentrant
function calls, applications should protect calls ta these
functions either by blockin tha appropriate signals or all up in the
use of some programmatic semaphore (see \fIsemget\fP(), \fIsem_init\fP(),
\fIsem_open\fP(),
and so on). Note up in particular dat even tha "safe" functions may
modify \fIerrno\fP; tha signal-catchin function, if not
executin as a independent thread, may wanna save n' restore its
value. Naturally, tha same principlez apply ta tha reentrancy
of application routines n' asynchronous data access. Note dat \fIlongjmp\fP()
and \fIsiglongjmp\fP() is not up in tha list of reentrant functions.
This is cuz tha code
executin afta \fIlongjmp\fP() n' \fIsiglongjmp\fP() can call any
unsafe functions wit tha same dark shiznit as callin dem unsafe
functions directly from tha signal handlez n' shiznit fo' realz. Applications dat use
\fIlongjmp\fP() n' \fIsiglongjmp\fP() from within signal handlezs
require rigorous protection up in order ta be
portable. Many of tha other functions dat is excluded from tha list
are traditionally implemented rockin either \fImalloc\fP() or \fIfree\fP()
functions or tha standard I/O
library, both of which traditionally use data structures up in a non-reentrant
manner n' shit. Right back up in yo muthafuckin ass. Since any combination of different functions
usin a cold-ass lil common data structure can cause reentrancy problems, this
volume of IEEE\ Std\ 1003.1-2001 do not define the
behavior when any unsafe function is called up in a signal handlez that
interrupts a unsafe function.
.LP
If tha signal occurs other than as tha result of callin \fIabort\fP(),
\fIkill\fP(), or \fIraise\fP(), tha behavior is undefined if
the signal handlez calls any function up in tha standard library other
than one of tha functions listed up in tha table above or refers
to any object wit static storage duration other than by assigning
a value ta a static storage duration variable of type
\fBvolatile sig_atomic_t\fP. Furthermore, if such a cold-ass lil call fails, the
value of \fIerrno\fP is unspecified.
.LP
Usually, tha signal is executed on tha stack dat was up in effect before
the signal was delivered. Y'all KNOW dat shit, muthafucka! An alternate stack may be
specified ta receive a subset of tha signals bein caught.
.LP
When tha signal handlez returns, tha receivin process resumes execution
at tha point dat shiznit was interrupted unless tha signal
handlez make other arrangements, n' you can put dat on yo' toast. If \fIlongjmp\fP() or \fI_longjmp\fP()
is used ta leave tha signal handlez, then tha signal mask must be
explicitly
restored by tha process.
.LP
This volume of IEEE\ Std\ 1003.1-2001 defines tha third argument of
a signal handlin function when SA_SIGINFO is set as
a \fBvoid *\fP instead of a \fBucontext_t *\fP yo, but without requiring
type checking. New applications should explicitly cast the
third argument of tha signal handlin function ta \fBucontext_t *\fP.
.LP
Da BSD optionizzle four argument signal handlin function aint supported
by dis volume of IEEE\ Std\ 1003.1-2001. The
BSD declaration would be:
.sp
.RS
.nf

\fBvoid handlez(int\fP \fIsig\fP\fB, int\fP \fIcode\fP\fB, struct sigcontext *\fP\fIscp\fP\fB,
    char *\fP\fIaddr\fP\fB);
\fP
.fi
.RE
.LP
where \fIsig\fP is tha signal number, \fIcode\fP be additionizzle shiznit
on certain signals, \fIscp\fP be a pointa ta the
\fBsigcontext\fP structure, n' \fIaddr\fP be additionizzle address shiznit.
Much tha same shiznit be available up in the
objects pointed ta by tha second argument of tha signal handlez specified
when SA_SIGINFO is set.
.SH RATIONALE
.LP
Although dis volume of IEEE\ Std\ 1003.1-2001 requires dat signals
that cannot be ignored shall not be added ta the
signal mask when a signal-catchin function is entered, there is no
explicit requirement dat subsequent calls to
\fIsigaction\fP() reflect dis up in tha shiznit returned up in the
\fIoact\fP argument. In other lyrics, if SIGKILL is included in
the \fIsa_mask\fP field of \fIact\fP, it is unspecified whether or
not a subsequent call ta \fIsigaction\fP() returns with
SIGKILL included up in tha \fIsa_mask\fP field of \fIoact\fP.
.LP
Da SA_NOCLDSTOP flag, when supplied up in tha \fIact\fP-> \fIsa_flags\fP
parameter, allows overloadin SIGCHLD wit the
System V semantics dat each SIGCLD signal indicates a single terminated
child. Y'all KNOW dat shit, muthafucka! Most conformin applications dat catch SIGCHLD are
sposed ta fuckin install signal-catchin functions dat repeatedly call
the \fIwaitpid\fP()
function wit tha WNOHANG flag set, actin on each lil pimp fo' which
status is returned, until \fIwaitpid\fP() returns zero. If stopped
lil pimps is not of interest, tha use of tha SA_NOCLDSTOP
flag can prevent tha overhead from invokin tha signal-catchin routine
when they stop.
.LP
Some oldschool implementations also define other mechanizzlez fo' stopping
processes, like fuckin tha \fIptrace\fP() function. I aint talkin' bout chicken n' gravy biatch. These
implementations probably do not generate a SIGCHLD signal when processes
stop cuz of dis mechanism; however, dat is beyond the
scope of dis volume of IEEE\ Std\ 1003.1-2001.
.LP
This volume of IEEE\ Std\ 1003.1-2001 requires dat calls ta \fIsigaction\fP()
that supply a NULL \fIact\fP argument
succeed, even up in tha case of signals dat cannot be caught or ignored
(that is, SIGKILL or SIGSTOP). Da System V \fIsignal\fP() n' BSD
\fIsigvec\fP() functions return [EINVAL] up in these cases and, up in this
respect, they behavior varies from \fIsigaction\fP().
.LP
This volume of IEEE\ Std\ 1003.1-2001 requires dat \fIsigaction\fP()
properly save n' restore a signal action set up
by tha ISO\ C standard \fIsignal\fP() function. I aint talkin' bout chicken n' gravy biatch. But fuck dat shiznit yo, tha word on tha street is dat there is
no guarantee dat the
reverse is true, nor could there be given tha pimped outa amount of shiznit
conveyed by tha \fBsigaction\fP structure. Because of
this, applications should avoid rockin both functions fo' tha same
signal up in tha same process. Right back up in yo muthafuckin ass. Since dis cannot always be avoided
in case of general-purpose library routines, they should always be
implemented wit \fIsigaction\fP().
.LP
Dat shiznit was intended dat tha \fIsignal\fP() function should be implementable
as a library
routine rockin \fIsigaction\fP().
.LP
Da POSIX Realtime Extension extendz tha \fIsigaction\fP() function
as specified by tha POSIX.1-1990 standard ta allow the
application ta request on a per-signal basis via a additionizzle signal
action flag dat tha extra parameters, includin the
application-defined signal value, if any, be passed ta tha signal-catching
function.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fISignal Concepts\fP, \fIbsd_signal\fP(), \fIkill\fP(), \fI_longjmp\fP(),
\fIlongjmp\fP(), \fIraise\fP(), \fIsemget\fP(), \fIsem_init\fP()
,
\fIsem_open\fP(), \fIsigaddset\fP(), \fIsigaltstack\fP(), \fIsigdelset\fP(),
\fIsigemptyset\fP(), \fIsigfillset\fP(), \fIsigismember\fP(),
\fIsignal\fP(), \fIsigprocmask\fP(), \fIsigsuspend\fP(), \fIwait\fP(),
\fIwaitid\fP(), \fIwaitpid\fP(), tha Base
Definitions volume of IEEE\ Std\ 1003.1-2001, \fI<signal.h>\fP, \fI<ucontext.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
