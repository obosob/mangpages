.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "PTHREAD_EXIT" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" pthread_exit 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
pthread_exit \- thread termination
.SH SYNOPSIS
.LP
\fB#include <pthread.h>
.br
.sp
void pthread_exit(void *\fP\fIvalue_ptr\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIpthread_exit\fP() function shall terminizzle tha callin thread
and make tha value \fIvalue_ptr\fP available ta any
successful join wit tha terminatin thread. Y'all KNOW dat shit, muthafucka! Any cancellation cleanup
handlezs dat done been pushed n' not yet popped shall be
popped up in tha reverse order dat they was pushed n' then executed.
Afta all cancellation cleanup handlezs done been executed, if
the thread has any thread-specific data, appropriate destructor functions
shall be called up in a unspecified order n' shit. Thread
termination do not release any application visible process resources,
includin yo, but not limited to, mutexes n' file
descriptors, nor do it big-ass up any process-level cleanup actions,
includin yo, but not limited to, callin any \fIatexit\fP() routines
that may exist.
.LP
An implicit call ta \fIpthread_exit\fP() is made when a thread other
than tha thread up in which \fImain\fP() was first invoked
returns from tha start routine dat was used ta create dat shit. Da function's
return value shall serve as tha threadz exit status.
.LP
Da behavior of \fIpthread_exit\fP() is undefined if called from a
cancellation cleanup handlez or destructor function dat was
invoked as a result of either a implicit or explicit call ta \fIpthread_exit\fP().
.LP
Afta a thread has terminated, tha result of access ta local (auto)
variablez of tha thread is undefined. Y'all KNOW dat shit, muthafucka! Thus, references to
local variablez of tha exitin thread should not be used fo' tha \fIpthread_exit\fP()
\fIvalue_ptr\fP parameta value.
.LP
Da process shall exit wit a exit statuz of 0 afta tha last thread
has been terminated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da behavior shall be as if the
implementation called \fIexit\fP() wit a zero argument at thread
termination time.
.SH RETURN VALUE
.LP
Da \fIpthread_exit\fP() function cannot return ta its caller.
.SH ERRORS
.LP
No errors is defined.
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
Da aiiight mechanizzle by which a thread terminates is ta return from
the routine dat was specified up in tha \fIpthread_create\fP() call
that started dat shit. Da \fIpthread_exit\fP() function provides
the capabilitizzle fo' a thread ta terminizzle without requirin a return
from tha start routine of dat thread, thereby providin a
function analogous ta \fIexit\fP().
.LP
Regardless of tha method of thread termination, any cancellation cleanup
handlezs dat done been pushed n' not yet popped are
executed, n' tha destructors fo' any existin thread-specific data
are executed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. This volume of IEEE\ Std\ 1003.1-2001
requires dat cancellation cleanup handlezs be popped n' called in
order n' shiznit fo' realz. Afta all cancellation cleanup handlezs have been
executed, thread-specific data destructors is called, up in a unspecified
order, fo' each item of thread-specific data dat exists
in tha thread. Y'all KNOW dat shit, muthafucka! This orderin is necessary cuz cancellation cleanup
handlezs may rely on thread-specific data.
.LP
As tha meanin of tha status is determined by tha application (except
when tha thread has been canceled, up in which case it is
PTHREAD_CANCELED), tha implementation has no clue what tha fuck a illegal
status value is, which is why no address error checkin is
done.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIexit\fP(), \fIpthread_create\fP(), \fIpthread_join\fP(), the
Base Definitions volume of IEEE\ Std\ 1003.1-2001, \fI<pthread.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
