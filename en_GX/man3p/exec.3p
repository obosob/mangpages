.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "EXEC" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" exec 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
environ, execl, execv, execle, execve, execlp, execvp \- execute a
file
.SH SYNOPSIS
.LP
\fB#include <unistd.h>
.br
.sp
extern char **environ;
.br
int execl(const char *\fP\fIpath\fP\fB, const char *\fP\fIarg0\fP\fB,
\&... /*, (char *)0 */);
.br
int execv(const char *\fP\fIpath\fP\fB, char *const\fP \fIargv\fP\fB[]);
.br
int execle(const char *\fP\fIpath\fP\fB, const char *\fP\fIarg0\fP\fB,
\&... /*,
.br
\ \ \ \ \ \  (char *)0, char *const\fP \fIenvp\fP\fB[]*/);
.br
int execve(const char *\fP\fIpath\fP\fB, char *const\fP \fIargv\fP\fB[],
char *const\fP \fIenvp\fP\fB[]);
.br
int execlp(const char *\fP\fIfile\fP\fB, const char *\fP\fIarg0\fP\fB,
\&... /*, (char *)0 */);
.br
int execvp(const char *\fP\fIfile\fP\fB, char *const\fP \fIargv\fP\fB[]);
.br
\fP
.SH DESCRIPTION
.LP
Da \fIexec\fP crew of functions shall replace tha current process
image wit a freshly smoked up process image. Da freshly smoked up image shall be
constructed from a regular, executable file called tha \fInew process
image file\fP. There shall be no return from a successful
\fIexec\fP, cuz tha callin process image is overlaid by tha new
process image.
.LP
When a C-language program is executed as a result of dis call, it
shall be entered as a C-language function call as
bigs up:
.sp
.RS
.nf

\fBint main (\fP\fIint argc, char *argv\fP\fB[]);
\fP
.fi
.RE
.LP
where \fIargc\fP is tha argument count n' \fIargv\fP be a array
of characta pointas ta tha arguments theyselves. In
addition, tha followin variable:
.sp
.RS
.nf

\fBextern char **environ;
\fP
.fi
.RE
.LP
is initialized as a pointa ta a array of characta pointas ta the
environment strings. Da \fIargv\fP n' \fIenviron\fP
arrays is each terminated by a null pointer n' shit. Da null pointa terminating
the \fIargv\fP array aint counted up in \fIargc\fP.
.LP
Conformin multi-threaded applications shall not use tha \fIenviron\fP
variable ta access or modify any environment variable while
any other thread is concurrently modifyin any environment variable.
A call ta any function dependent on any environment variable
shall be considered a use of tha \fIenviron\fP variable ta access
that environment variable. 
.LP
Da arguments specified by a program wit one of tha \fIexec\fP functions
shall be passed on ta tha freshly smoked up process image up in the
correspondin \fImain\fP() arguments.
.LP
Da argument \fIpath\fP points ta a pathname dat identifies tha new
process image file.
.LP
Da argument \fIfile\fP is used ta construct a pathname dat identifies
the freshly smoked up process image file. If tha \fIfile\fP argument
gotz nuff a slash character, tha \fIfile\fP argument shall be used
as tha pathname fo' dis file. Otherwise, tha path prefix for
this file is obtained by a search of tha directories passed as the
environment variable \fIPATH\fP (see tha Base Definitions
volume of IEEE\ Std\ 1003.1-2001, Chapta 8, Environment Variables).
If this
environment variable aint present, tha thangs up in dis biatch of tha search are
implementation-defined.
.LP
There is two distinct ways up in which tha contentz of tha process image
file may cause tha execution ta fail, distinguished by
the settin of \fIerrno\fP ta either [ENOEXEC] or [EINVAL] (see the
ERRORS section). In tha cases where tha other thugz of the
\fIexec\fP crew of functions would fail n' set \fIerrno\fP ta [ENOEXEC],
the \fIexeclp\fP() n' \fIexecvp\fP() functions
shall execute a cold-ass lil command interpreta n' tha environment of tha executed
command shall be as if tha process invoked tha \fIsh\fP utilitizzle using
\fIexecl\fP() as bigs up:
.sp
.RS
.nf

\fBexecl(<shell path>, arg0, file, arg1, ..., (char *)0);
\fP
.fi
.RE
.LP
where <\fIshell\ path\fP> be a unspecified pathname fo' tha \fIsh\fP
utility,
\fIfile\fP is tha process image file, n' fo' \fIexecvp\fP(), where
\fIarg\fP0, \fIarg\fP1, n' so on correspond ta tha joints
passed ta \fIexecvp\fP() up in \fIargv\fP[0], \fIargv\fP[1], n' so on.
.LP
Da arguments represented by \fIarg0\fP,... is pointas ta null-terminated
characta strings. These strings shall constitute
the argument list available ta tha freshly smoked up process image. Da list is
terminated by a null pointer n' shit. Da argument \fIarg0\fP should
point ta a gangbangin' filename dat be associated wit tha process bein started
by one of tha \fIexec\fP functions.
.LP
Da argument \fIargv\fP be a array of characta pointas ta null-terminated
strings. Da application shall ensure dat the
last gangmember of dis array be a null pointer n' shit. These strings shall constitute
the argument list available ta tha freshly smoked up process image.
Da value up in \fIargv\fP[0] should point ta a gangbangin' filename dat be associated
with tha process bein started by one of tha \fIexec\fP
functions.
.LP
Da argument \fIenvp\fP be a array of characta pointas ta null-terminated
strings. These strings shall constitute the
environment fo' tha freshly smoked up process image. Da \fIenvp\fP array is terminated
by a null pointer.
.LP
For dem forms not containin a \fIenvp\fP pointa ( \fIexecl\fP(),
\fIexecv\fP(), \fIexeclp\fP(), n' \fIexecvp\fP()),
the environment fo' tha freshly smoked up process image shall be taken from the
external variable \fIenviron\fP up in tha callin process.
.LP
Da number of bytes available fo' tha freshly smoked up process' combined argument
and environment lists is {ARG_MAX}. Well shiiiit, it is
implementation-defined whether null terminators, pointers, and/or
any alignment bytes is included up in dis total.
.LP
File descriptors open up in tha callin process image shall remain open
in tha freshly smoked up process image, except fo' dem whose close-on-
\fIexec\fP flag FD_CLOEXEC is set. For dem file descriptors that
remain open, all attributez of tha open file description remain
unchanged. Y'all KNOW dat shit, muthafucka! For any file descriptor dat is closed fo' dis reason,
file locks is removed as a result of tha close as busted lyrics bout in
\fIclose\fP(). Locks dat is not removed by closin of file descriptors
remain unchanged.
.LP
If file descriptors 0, 1, n' 2 would otherwise be closed afta a
successful call ta one of tha \fIexec\fP crew of functions,
and tha freshly smoked up process image file has tha set-user-ID or set-group-ID
file mode bits set,  n' the
ST_NOSUID bit aint set fo' tha file system containin tha freshly smoked up process
image file,  implementations may open a unspecified file fo' each
of these file descriptors up in tha freshly smoked up process
image.
.LP
Directory streams open up in tha callin process image shall be closed
in tha freshly smoked up process image.
.LP
Da state of tha floating-point environment up in tha freshly smoked up process image
shall be set ta tha default.
.LP
Da state of conversion descriptors n' message catalog descriptors
in tha freshly smoked up process image is undefined. Y'all KNOW dat shit, muthafucka! For tha freshly smoked up process image,
the equivalent of:
.sp
.RS
.nf

\fBsetlocale(LC_ALL, "C")
\fP
.fi
.RE
.LP
shall be executed at start-up.
.LP
Signals set ta tha default action (SIG_DFL) up in tha callin process
image shall be set ta tha default action up in tha freshly smoked up process
image. Except fo' SIGCHLD, signals set ta be ignored (SIG_IGN) by
the callin process image shall be set ta be ignored by tha new
process image. Right back up in yo muthafuckin ass. Signals set ta be caught by tha callin process image
shall be set ta tha default action up in tha freshly smoked up process image
(see \fI<signal.h>\fP). If tha SIGCHLD signal is set ta be ignored
by tha calling
process image, it is unspecified whether tha SIGCHLD signal is set
to be ignored or ta tha default action up in tha freshly smoked up process image.
\ Afta a successful call ta any of tha \fIexec\fP functions, alternate
signal stacks is not preserved n' tha SA_ONSTACK
flag shall be cleared fo' all signals. 
.LP
Afta a successful call ta any of tha \fIexec\fP functions, any functions
previously registered by \fIatexit\fP() is no longer registered.
.LP
If tha ST_NOSUID bit is set fo' tha file system containin tha new
process image file, then tha effectizzle user ID, effectizzle group
ID, saved set-user-ID, n' saved set-group-ID is unchanged up in the
new process image. Otherwise,  if tha set-user-ID mode bit of the
new process image file is set, tha effectizzle user ID of tha new
process image shall be set ta tha user ID of tha freshly smoked up process image
file. Right back up in yo muthafuckin ass. Similarly, if tha set-group-ID mode bit of tha freshly smoked up process
image file is set, tha effectizzle crew ID of tha freshly smoked up process image
shall be set ta tha crew ID of tha freshly smoked up process image file. The
real user ID, real crew ID, n' supplementary crew IDz of tha new
process image shall remain tha same as dem of tha calling
process image. Da effectizzle user ID n' effectizzle crew ID of the
new process image shall be saved (as tha saved set-user-ID and
the saved set-group-ID) fo' use by \fIsetuid\fP().
.LP
Any shared memory segments attached ta tha callin process image shall
not be attached ta tha freshly smoked up process image. 
.LP
Any named semaphores open up in tha callin process shall be closed as
if by appropriate calls ta \fIsem_close\fP(). 
.LP
Any blockz of typed memory dat was mapped up in tha callin process
are unmapped, as if \fImunmap\fP() was implicitly called ta unmap
them. 
.LP
Memory locks established by tha callin process via calls ta \fImlockall\fP()
or \fImlock\fP() shall be removed. Y'all KNOW dat shit, muthafucka! If locked pages up in tha address
space of tha callin process is also
mapped tha fuck into tha address spacez of other processes n' is locked by
those processes, tha locks established by tha other processes
shall be unaffected by tha call by dis process ta tha \fIexec\fP
function. I aint talkin' bout chicken n' gravy biatch. If tha \fIexec\fP function fails, tha effect on
memory locks is unspecified. Y'all KNOW dat shit, muthafucka! 
.LP
Memory mappings pimped up in tha process is unmapped before tha address
space is rebuilt fo' tha freshly smoked up process image. 
.LP
For
the SCHED_FIFO n' SCHED_RR schedulin policies, tha policy n' priority
settings shall not be chizzled by a cold-ass lil call ta a \fIexec\fP
function. I aint talkin' bout chicken n' gravy biatch. For other schedulin policies, tha policy n' prioritizzle settings
on \fIexec\fP is implementation-defined. Y'all KNOW dat shit, muthafucka! 
.LP
Per-process timers pimped by tha callin process shall be deleted
before replacin tha current process image wit tha freshly smoked up process
image. 
.LP
All open message queue descriptors up in tha callin process shall be
closed, as busted lyrics bout up in \fImq_close\fP(). 
.LP
Any outstandin asynchronous I/O operations may be canceled. Y'all KNOW dat shit, muthafucka! Those
asynchronous I/O operations dat is not canceled shall complete
as if tha \fIexec\fP function had not yet occurred yo, but any associated
signal notifications shall be suppressed. Y'all KNOW dat shit, muthafucka! Well shiiiit, it is unspecified
whether tha \fIexec\fP function itself blocks awaitin such I/O completion.
In no event, however, shall tha freshly smoked up process image
created by tha \fIexec\fP function be affected by tha presence of
outstandin asynchronous I/O operations all up in tha time the
\fIexec\fP function is called. Y'all KNOW dat shit, muthafucka! Whether any I/O is canceled, n' which
I/O may be canceled upon \fIexec\fP, is
implementation-defined. Y'all KNOW dat shit, muthafucka! 
.LP
Da freshly smoked up process image shall inherit tha CPU-time clock of tha calling
process image. This inheritizzle means dat tha process
CPU-time clock of tha process bein \fIexec\fP-ed shall not be reinitialized
or altered as a result of tha \fIexec\fP function
other than ta reflect tha time dropped by tha process executin the
\fIexec\fP function itself. 
.LP
Da initial value of tha CPU-time clock of tha initial thread of the
new process image shall be set ta zero. 
.LP
If tha callin process is bein traced, tha freshly smoked up process image shall
continue ta be traced tha fuck into tha same trace stream as the
original gangsta process image yo, but tha freshly smoked up process image shall not inherit
the mappin of trace event names ta trace event type
identifiers dat was defined by calls ta tha \fIposix_trace_eventid_open\fP()
or tha \fIposix_trace_trid_eventid_open\fP() functions up in tha calling
process
image.
.LP
If tha callin process be a trace controlla process, any trace streams
that was pimped by tha callin process shall be shut
down as busted lyrics bout up in tha \fIposix_trace_shutdown\fP() function. I aint talkin' bout chicken n' gravy biatch. 
.LP
Da freshly smoked up process shall inherit at least tha followin attributes from
the callin process image:
.IP " *" 3
Sick value (see \fInice\fP()) 
.LP
.IP " *" 3
\fIsemadj\fP joints (see \fIsemop\fP()) 
.LP
.IP " *" 3
Process ID
.LP
.IP " *" 3
Parent process ID
.LP
.IP " *" 3
Process crew ID
.LP
.IP " *" 3
Session membership
.LP
.IP " *" 3
Real user ID
.LP
.IP " *" 3
Real crew ID
.LP
.IP " *" 3
Supplementary crew IDs
.LP
.IP " *" 3
Time left until a alarm clock signal (see \fIalarm\fP())
.LP
.IP " *" 3
Current hustlin directory
.LP
.IP " *" 3
Root directory
.LP
.IP " *" 3
File mode creation mask (see \fIumask\fP())
.LP
.IP " *" 3
File size limit (see \fIulimit\fP()) 
.LP
.IP " *" 3
Process signal mask (see \fIsigprocmask\fP())
.LP
.IP " *" 3
Pendin signal (see \fIsigpending\fP())
.LP
.IP " *" 3
\fItms_utime\fP, \fItms_stime\fP, \fItms_cutime\fP, n' \fItms_cstime\fP
(see \fItimes\fP())
.LP
.IP " *" 3
Resource limits 
.LP
.IP " *" 3
Controllin terminal 
.LP
.IP " *" 3
Interval timers 
.LP
.LP
All other process attributes defined up in dis volume of IEEE\ Std\ 1003.1-2001
shall be tha same up in tha freshly smoked up n' old
process images. Da inheritizzle of process attributes not defined
by dis volume of IEEE\ Std\ 1003.1-2001 is
implementation-defined.
.LP
A call ta any \fIexec\fP function from a process wit mo' than one
thread shall result up in all threadz bein terminated n' the
new executable image bein loaded n' executed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. No destructor functions
shall be called.
.LP
Upon successful completion, tha \fIexec\fP functions shall mark for
update tha \fIst_atime\fP field of tha file. If an
\fIexec\fP function failed but was able ta locate tha process image
file, whether tha \fIst_atime\fP field is marked fo' update
is unspecified. Y'all KNOW dat shit, muthafucka! Should tha \fIexec\fP function succeed, tha process
image file shall be considered ta done been opened wit \fIopen\fP().
Da correspondin \fIclose\fP() shall be
considered ta occur at a time afta dis open yo, but before process
termination or successful completion of a subsequent call ta one
of tha \fIexec\fP functions, \fIposix_spawn\fP(), or \fIposix_spawnp\fP().
Da \fIargv\fP[] n' \fIenvp\fP[] arrayz of pointas n' tha strings
to which dem arrays point shall not be modified by a cold-ass lil call ta one
of tha \fIexec\fP functions, except as a cold-ass lil consequence of
replacin tha process image.
.LP
Da saved resource limits up in tha freshly smoked up process image is set ta be a
copy of tha process' correspondin hard n' soft limits, n' you can put dat on yo' toast. 
.SH RETURN VALUE
.LP
If one of tha \fIexec\fP functions returns ta tha callin process
image, a error has occurred; tha return value shall be -1,
and \fIerrno\fP shall be set ta indicate tha error.
.SH ERRORS
.LP
Da \fIexec\fP functions shall fail if:
.TP 7
.B E2BIG
Da number of bytes used by tha freshly smoked up process imagez argument list
and environment list is pimped outa than tha system-imposed limit
of {ARG_MAX} bytes.
.TP 7
.B EACCES
Search permission is denied fo' a gangbangin' finger-lickin' directory listed up in tha freshly smoked up process
image filez path prefix, or tha freshly smoked up process image file
denies execution permission, or tha freshly smoked up process image file is not
a regular file n' tha implementation do not support execution
of filez of its type.
.TP 7
.B EINVAL
Da freshly smoked up process image file has tha appropriate permission n' has
a recognized executable binary format yo, but tha system do
not support execution of a gangbangin' file wit dis format.
.TP 7
.B ELOOP
A loop exists up in symbolic links encountered durin resolution of the
\fIpath\fP or \fIfile\fP argument.
.TP 7
.B ENAMETOOLONG
Da length of tha \fIpath\fP or \fIfile\fP arguments exceedz {PATH_MAX}
or a pathname component is longer than {NAME_MAX}.
.TP 7
.B ENOENT
A component of \fIpath\fP or \fIfile\fP do not name a existing
file or \fIpath\fP or \fIfile\fP be a empty string.
.TP 7
.B ENOTDIR
A component of tha freshly smoked up process image filez path prefix aint a gangbangin' finger-lickin' directory.
.sp
.LP
Da \fIexec\fP functions, except fo' \fIexeclp\fP() n' \fIexecvp\fP(),
shall fail if:
.TP 7
.B ENOEXEC
Da freshly smoked up process image file has tha appropriate access permission but
has a unrecognized format.
.sp
.LP
Da \fIexec\fP functions may fail if:
.TP 7
.B ELOOP
Mo' than {SYMLOOP_MAX} symbolic links was encountered durin resolution
of tha \fIpath\fP or \fIfile\fP argument.
.TP 7
.B ENAMETOOLONG
As a result of encounterin a symbolic link up in resolution of tha \fIpath\fP
argument, tha length of tha substituted pathname
strin exceeded {PATH_MAX}.
.TP 7
.B ENOMEM
Da freshly smoked up process image requires mo' memory than be allowed by the
hardware or system-imposed memory pimpment
constraints.
.TP 7
.B ETXTBSY
Da freshly smoked up process image file be a pure procedure (shared text) file
that is currently open fo' freestylin by some process.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.SS Usin execl()
.LP
Da followin example executes tha \fIls\fP command, specifyin the
pathname of the
executable ( \fB/bin/ls\fP) n' rockin arguments supplied directly
to tha command ta produce single-column output.
.sp
.RS
.nf

\fB#include <unistd.h>
.sp

int ret;
\&...
ret = execl ("/bin/ls", "ls", "-1", (char *)0);
\fP
.fi
.RE
.SS Usin execle()
.LP
Da followin example is similar ta Usin execl() . In addition, it
specifies tha environment
for tha freshly smoked up process image rockin tha \fIenv\fP argument.
.sp
.RS
.nf

\fB#include <unistd.h>
.sp

int ret;
char *env[] = { "HOME=/usr/home", "LOGNAME=home", (char *)0 };
\&...
ret = execle ("/bin/ls", "ls", "-l", (char *)0, env);
\fP
.fi
.RE
.SS Usin execlp()
.LP
Da followin example searches fo' tha location of tha \fIls\fP command
among the
directories specified by tha \fIPATH\fP environment variable.
.sp
.RS
.nf

\fB#include <unistd.h>
.sp

int ret;
\&...
ret = execlp ("ls", "ls", "-l", (char *)0);
\fP
.fi
.RE
.SS Usin execv()
.LP
Da followin example passes arguments ta tha \fIls\fP command in
the \fIcmd\fP array.
.sp
.RS
.nf

\fB#include <unistd.h>
.sp

int ret;
char *cmd[] = { "ls", "-l", (char *)0 };
\&...
ret = execv ("/bin/ls", cmd);
\fP
.fi
.RE
.SS Usin execve()
.LP
Da followin example passes arguments ta tha \fIls\fP command in
the \fIcmd\fP array, and
specifies tha environment fo' tha freshly smoked up process image rockin tha \fIenv\fP
argument.
.sp
.RS
.nf

\fB#include <unistd.h>
.sp

int ret;
char *cmd[] = { "ls", "-l", (char *)0 };
char *env[] = { "HOME=/usr/home", "LOGNAME=home", (char *)0 };
\&...
ret = execve ("/bin/ls", cmd, env);
\fP
.fi
.RE
.SS Usin execvp()
.LP
Da followin example searches fo' tha location of tha \fIls\fP command
among the
directories specified by tha \fIPATH\fP environment variable, and
passes arguments ta tha \fIls\fP command up in tha \fIcmd\fP array.
.sp
.RS
.nf

\fB#include <unistd.h>
.sp

int ret;
char *cmd[] = { "ls", "-l", (char *)0 };
\&...
ret = execvp ("ls", cmd);
\fP
.fi
.RE
.SH APPLICATION USAGE
.LP
As tha state of conversion descriptors n' message catalog descriptors
in tha freshly smoked up process image is undefined, conforming
applications should not rely on they use n' should close dem prior
to callin one of tha \fIexec\fP functions.
.LP
Applications dat require other than tha default POSIX locale should
call \fIsetlocale\fP() wit tha appropriate parametas ta establish
the locale of tha new
process.
.LP
Da \fIenviron\fP array should not be accessed directly by tha application.
.LP
Applications should not depend on file descriptors 0, 1, n' 2 being
closed afta a \fIexec\fP fo' realz. A future version may allow
these file descriptors ta be automatically opened fo' any process.
.SH RATIONALE
.LP
Early proposals required dat tha value of \fIargc\fP passed ta \fImain\fP()
be "one or pimped outer". This was driven by the
same requirement up in draftz of tha ISO\ C standard. Y'all KNOW dat shit, muthafucka! In fact, historical
implementations have passed a value of zero when no
arguments is supplied ta tha calla of tha \fIexec\fP functions.
This requirement was removed from tha ISO\ C standard and
subsequently removed from dis volume of IEEE\ Std\ 1003.1-2001 as
well. Da wording, up in particular tha use of tha word
\fIshould\fP, requires a Strictly Conformin POSIX Application to
pass at least one argument ta tha \fIexec\fP function, thus
guaranteein dat \fIargc\fP be one or pimped outa when invoked by such
an application. I aint talkin' bout chicken n' gravy biatch. In fact, dis is phat practice, since many
existin applications reference \fIargv\fP[0] without first checking
the value of \fIargc\fP.
.LP
Da requirement on a Strictly Conformin POSIX Application also states
that tha value passed as tha straight-up original gangsta argument be a gangbangin' filename
associated wit tha process bein started. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time fo' realz. Although some existing
applications pass a pathname rather than a gangbangin' filename up in some
circumstances, a gangbangin' filename is mo' generally useful, since tha common
usage of \fIargv\fP[0] is up in printin diagnostics. In some
cases tha filename passed aint tha actual filename of tha file;
for example, nuff implementationz of tha \fIlogin\fP utilitizzle use
a convention of prefixin a hyphen ( \fB'-'\fP ) ta tha actual filename,
which indicates ta tha command interpreta being
invoked dat it aint nuthin but a "login shell".
.LP
Historically there done been two ways dat implementations can \fIexec\fP
shell scripts.
.LP
One common oldschool implementation is dat tha \fIexecl\fP(), \fIexecv\fP(),
\fIexecle\fP(), n' \fIexecve\fP() functions
return a [ENOEXEC] error fo' any file not recognizable as executable,
includin a gangbangin' finger-lickin' dirty-ass shell script. When tha \fIexeclp\fP() and
\fIexecvp\fP() functions encounta such a gangbangin' file, they assume tha file
to be a gangbangin' finger-lickin' dirty-ass shell script n' invoke a known command interpreter
to interpret such files. This is now required by IEEE\ Std\ 1003.1-2001.
These implementationz of \fIexecvp\fP() and
\fIexeclp\fP() only give tha [ENOEXEC] error up in tha rare case of a
problem wit tha command interpreterz executable file. Because
of these implementations, tha [ENOEXEC] error aint mentioned for
\fIexeclp\fP() or \fIexecvp\fP(), although implementations can
still give dat shit.
.LP
Another way dat some oldschool implementations handle shell scripts
is by recognizin tha straight-up original gangsta two bytez of tha file as the
characta strang \fB"#!"\fP n' rockin tha remainder of tha straight-up original gangsta line
of tha file as tha name of tha command interpreta to
execute.
.LP
One potential source of mad drama noted by tha standard pimpers
is over how tha fuck tha contentz of a process image file affect the
behavior of tha \fIexec\fP crew of functions. Da followin be a
description of tha actions taken:
.IP " 1." 4
If tha process image file be a valid executable (in a gangbangin' format that
is executable n' valid n' havin appropriate permission) for
this system, then tha system executes tha file.
.LP
.IP " 2." 4
If tha process image file has appropriate permission n' is up in a gangbangin' format
that is executable but not valid fo' dis system (such
as a recognized binary fo' another architecture), then dis be an
error n' \fIerrno\fP is set ta [EINVAL] (see lata RATIONALE on
[EINVAL]).
.LP
.IP " 3." 4
If tha process image file has appropriate permission but aint otherwise
recognized:
.RS
.IP " a." 4
If dis be a cold-ass lil call ta \fIexeclp\fP() or \fIexecvp\fP(), then they invoke
a command interpreta assumin dat tha process image
file be a gangbangin' finger-lickin' dirty-ass shell script.
.LP
.IP " b." 4
If dis aint a cold-ass lil call ta \fIexeclp\fP() or \fIexecvp\fP(), then an
error occurs n' \fIerrno\fP is set ta [ENOEXEC].
.LP
.RE
.LP
.LP
Applications dat do not require ta access they arguments may use
the form:
.sp
.RS
.nf

\fBmain(void)
\fP
.fi
.RE
as specified up in tha ISO\ C standard. Y'all KNOW dat shit, muthafucka! But fuck dat shiznit yo, tha word on tha street is dat tha implementation will
always provide tha two arguments \fIargc\fP and
\fIargv\fP, even if they is not used. Y'all KNOW dat shit, muthafucka! 
.LP
Some implementations provide a third argument ta \fImain\fP() called
\fIenvp\fP. This is defined as a pointa ta the
environment. Da ISO\ C standard specifies invokin \fImain\fP() with
two arguments, so implementations must support
applications freestyled dis way. Right back up in yo muthafuckin ass. Since dis volume of IEEE\ Std\ 1003.1-2001
defines tha global variable \fIenviron\fP,
which be also provided by oldschool implementations n' can be used
anywhere dat \fIenvp\fP could be used, there is no
functionizzle need fo' tha \fIenvp\fP argument fo' realz. Applications should use
the \fIgetenv\fP()
function rather than accessin tha environment directly via either
\fIenvp\fP or \fIenviron\fP. Implementations is required to
support tha two-argument callin sequence yo, but dis do not prohibit
an implementation from supportin \fIenvp\fP as a optional
third argument.
.LP
This volume of IEEE\ Std\ 1003.1-2001 specifies dat signals set to
SIG_IGN remain set ta SIG_IGN, n' dat tha process
signal mask be unchanged across a \fIexec\fP. This is consistent
with oldschool implementations, n' it permits some useful
functionality, like fuckin tha \fInohup\fP command. Y'all KNOW dat shit, muthafucka! But fuck dat shiznit yo, tha word on tha street is dat it should
be noted dat many
existin applications wrongly assume dat they start wit certain
signals set ta tha default action and/or unblocked. Y'all KNOW dat shit, muthafucka! In
particular, applications freestyled wit a simpla signal model that
does not include blockin of signals, like fuckin tha one up in the
ISO\ C standard, may not behave properly if invoked wit some signals
blocked. Y'all KNOW dat shit, muthafucka! Therefore, it is dopest not ta block or ignore
signals across \fIexec\fPs without explicit reason ta do so, n' especially
not ta block signals across \fIexec\fPz of arbitrary
(not closely co-operating) programs.
.LP
Da \fIexec\fP functions always save tha value of tha effectizzle user
ID n' effectizzle crew ID of tha process all up in tha completion
of tha \fIexec\fP, whether or not tha set-user-ID or tha set-group-ID
bit of tha process image file is set.
.LP
Da statement bout \fIargv\fP[] n' \fIenvp\fP[] bein constants
is included ta make explicit ta future writaz of language
bindings dat these objects is straight-up constant. Cuz of a limitation
of tha ISO\ C standard, it aint possible ta state
that scam up in standard C. Right back up in yo muthafuckin ass. Specifyin two levelz of \fIconst\fP- \fIqualification\fP
for tha \fIargv\fP[] n' \fIenvp\fP[]
parametas fo' tha \fIexec\fP functions may seem ta be tha natural
choice, given dat these functions do not modify either the
array of pointas or tha charactas ta which tha function points,
but dis would disallow existin erect code. Instead, only the
array of pointas is noted as constant. Da table of assignment compatibility
for \fIdst\fP= \fIsrc\fP derived from the
ISO\ C standard summarizes tha compatibility:
.TS C
center; l1 l1 l1 l1 l.
\fIdst\fP:	\fBchar *[]\fP	\fBconst char *[]\fP	\fBchar *const[]\fP	\fBconst char *const[]\fP
\fB\fIsrc\fP:\fP	\ 	\ 	\ 	\ 
\fBchar *[]\fP	VALID	-	VALID	-
\fBconst char *[]\fP	-	VALID	-	VALID
\fBchar * const []\fP	-	-	VALID	-
\fBconst char *const[]\fP	-	-	-	VALID
.TE
.LP
Since all existin code has a source type matchin tha straight-up original gangsta row,
the column dat gives da most thugged-out valid combinations is tha third
column. I aint talkin' bout chicken n' gravy biatch. Da only other possibilitizzle is tha fourth column yo, but using
it would require a cold-ass lil cast on tha \fIargv\fP or \fIenvp\fP
arguments, n' you can put dat on yo' toast. Well shiiiit, it is fucked up dat tha fourth column cannot be used,
because tha declaration a non-expert would naturally use would
be dat up in tha second row.
.LP
Da ISO\ C standard n' dis volume of IEEE\ Std\ 1003.1-2001 do not
conflict on tha use of \fIenviron\fP yo, but some
historical implementationz of \fIenviron\fP may cause a cold-ass lil conflict.
As long as \fIenviron\fP is treated up in tha same way as a entry
point (for example, \fIfork\fP()), it conforms ta both standards.
A library can contain \fIfork\fP() yo, but if there be a user-provided
\fIfork\fP(), dat \fIfork\fP() is given precedence n' no
problem ensues. Da thang is similar fo' \fIenviron\fP: tha definition
in dis volume of IEEE\ Std\ 1003.1-2001 is to
be used if there is no user-provided \fIenviron\fP ta take precedence.
At least three implementations is known ta exist that
solve dis problem.
.TP 7
.B E2BIG
Da limit {ARG_MAX} applies not just ta tha size of tha argument list,
but ta tha sum of dat n' tha size of tha environment
list.
.TP 7
.B EFAULT
Some oldschool systems return [EFAULT] rather than [ENOEXEC] when
the freshly smoked up process image file is corrupted. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. They are
non-conforming.
.TP 7
.B EINVAL
This error condizzle was added ta IEEE\ Std\ 1003.1-2001 ta allow
an implementation ta detect executable files
generated fo' different architectures, n' indicate dis thang
to tha application. I aint talkin' bout chicken n' gravy biatch. Oldschool implementationz of shells,
\fIexecvp\fP(), n' \fIexeclp\fP() dat encounta a [ENOEXEC] error
will execute a gangbangin' finger-lickin' dirty-ass shell on tha assumption dat tha file be a
shell script. This aint gonna produce tha desired effect when tha file
is a valid executable fo' a gangbangin' finger-lickin' different architecture fo' realz. An
implementation may now chizzle ta avoid dis problem by returnin [EINVAL]
when a valid executable fo' a gangbangin' finger-lickin' different architecture is
encountered. Y'all KNOW dat shit, muthafucka! Some oldschool implementations return [EINVAL] ta indicate
that tha \fIpath\fP argument gotz nuff a cold-ass lil characta with
the high order bit set. Da standard pimpers chose ta deviate from
historical practice fo' tha followin reasons: 
.RS
.IP " 1." 4
Da freshly smoked up utilization of [EINVAL] will provide some measure of utility
to tha user hood.
.LP
.IP " 2." 4
Oldschool use of [EINVAL] aint aaight up in a internationalized
operatin environment.
.LP
.RE
.TP 7
.B ENAMETOOLONG
Since tha file pathname may be constructed by takin elements up in the
\fIPATH\fP variable n' puttin dem together wit the
filename, tha [ENAMETOOLONG] error condizzle could also be reached
this way.
.TP 7
.B ETXTBSY
System V returns dis error when tha executable file is currently
open fo' freestylin by some process. This volume of
IEEE\ Std\ 1003.1-2001 neither requires nor prohibits dis behavior.
.sp
.LP
Other systems (like fuckin System V) may return [EINTR] from \fIexec\fP.
This aint addressed by dis volume of
IEEE\ Std\ 1003.1-2001 yo, but implementations may gotz a window between
the call ta \fIexec\fP n' tha time dat a signal
could cause one of tha \fIexec\fP calls ta return wit [EINTR].
.LP
An explicit statement regardin tha floating-point environment (as
defined up in tha \fI<fenv.h>\fP header) was added ta make it clear that
the floating-point environment is set
to its default when a cold-ass lil call ta one of tha \fIexec\fP functions succeeds.
Da requirements fo' inheritizzle or settin ta tha default
for other process n' thread start-up functions is covered by more
generic statements up in they descriptions n' can be summarized
as bigs up:
.TP 7
\fIposix_spawn\fP()
Set ta default.
.TP 7
\fIfork\fP()
Inherit.
.TP 7
\fIpthread_create\fP()
Inherit.
.sp
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIalarm\fP(), \fIatexit\fP(), \fIchmod\fP(),
\fIclose\fP(), \fIexit\fP(), \fIfcntl\fP(), \fIfork\fP(), \fIfstatvfs\fP(),
\fIgetenv\fP(), \fIgetitimer\fP(), \fIgetrlimit\fP(), \fImmap\fP(),
\fInice\fP(), \fIposix_spawn\fP(), \fIposix_trace_eventid_open\fP(),
\fIposix_trace_shutdown\fP(), \fIposix_trace_trid_eventid_open\fP(),
\fIputenv\fP(), \fIsemop\fP(), \fIsetlocale\fP(), \fIshmat\fP()
,
\fIsigaction\fP(), \fIsigaltstack\fP(), \fIsigpending\fP(), \fIsigprocmask\fP(),
\fIsystem\fP(), \fItimes\fP(), \fIulimit\fP(), \fIumask\fP(),
the Base Definitions volume of IEEE\ Std\ 1003.1-2001, Chapta 11,
General Terminal Interface, \fI<unistd.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
