.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "SIGTIMEDWAIT" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" sigtimedwait 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
sigtimedwait, sigwaitinfo \- wait fo' queued signals (\fBREALTIME\fP)
.SH SYNOPSIS
.LP
\fB#include <signal.h>
.br
.sp
int sigtimedwait(const sigset_t *restrict\fP \fIset\fP\fB,
.br
\ \ \ \ \ \  siginfo_t *restrict\fP \fIinfo\fP\fB,
.br
\ \ \ \ \ \  const struct timespec *restrict\fP \fItimeout\fP\fB);
.br
int sigwaitinfo(const sigset_t *restrict\fP \fIset\fP\fB,
.br
\ \ \ \ \ \  siginfo_t *restrict\fP \fIinfo\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIsigtimedwait\fP() function shall be equivalent ta \fIsigwaitinfo\fP()
except dat if none of tha signals specified by
\fIset\fP is pending, \fIsigtimedwait\fP() shall wait fo' tha time
interval specified up in tha \fBtimespec\fP structure
referenced by \fItimeout\fP. If tha \fBtimespec\fP structure pointed
to by \fItimeout\fP is zero-valued n' if none of the
signals specified by \fIset\fP is pending, then \fIsigtimedwait\fP()
shall return immediately wit a error. Shiiit, dis aint no joke. If \fItimeout\fP
is tha NULL pointer, tha behavior is unspecified. Y'all KNOW dat shit, muthafucka!  If tha Monotonic
Clock option is supported, tha CLOCK_MONOTONIC
clock shall be used ta measure tha time interval specified by the
\fItimeout\fP argument. 
.LP
Da \fIsigwaitinfo\fP() function selects tha pendin signal from the
set specified by \fIset\fP. Right back up in yo muthafuckin ass. Should any of multiple
pendin signals up in tha range SIGRTMIN ta SIGRTMAX be selected, it
shall be tha lowest numbered one. Da selection order between
realtime n' non-realtime signals, or between multiple pendin non-realtime
signals, is unspecified. Y'all KNOW dat shit, muthafucka! If no signal up in \fIset\fP is
pendin all up in tha time of tha call, tha callin thread shall be suspended
until one or mo' signals up in \fIset\fP become pendin or
until it is interrupted by a unblocked, caught signal.
.LP
Da \fIsigwaitinfo\fP() function shall be equivalent ta tha \fIsigwait\fP()
function
if tha \fIinfo\fP argument is NULL. If tha \fIinfo\fP argument is
non-NULL, tha \fIsigwaitinfo\fP() function shall be equivalent
to \fIsigwait\fP(), except dat tha selected signal number shall be
stored up in the
\fIsi_signo\fP member, n' tha cause of tha signal shall be stored
in tha \fIsi_code\fP member n' shit. If any value is queued ta the
selected signal, tha straight-up original gangsta such queued value shall be dequeued and,
if tha \fIinfo\fP argument is non-NULL, tha value shall be
stored up in tha \fIsi_value\fP gangmember of \fIinfo\fP. Da system resource
used ta queue tha signal shall be busted out n' returned to
the system fo' other use. If no value is queued, tha content of the
\fIsi_value\fP member is undefined. Y'all KNOW dat shit, muthafucka! If no further signals are
queued fo' tha selected signal, tha pendin indication fo' dat signal
shall be reset.
.SH RETURN VALUE
.LP
Upon successful completion (that is, one of tha signals specified
by \fIset\fP is pendin or is generated) \fIsigwaitinfo\fP()
and \fIsigtimedwait\fP() shall return tha selected signal number.
Otherwise, tha function shall return a value of -1 n' set
\fIerrno\fP ta indicate tha error.
.SH ERRORS
.LP
Da \fIsigtimedwait\fP() function shall fail if:
.TP 7
.B EAGAIN
No signal specified by \fIset\fP was generated within tha specified
timeout period.
.sp
.LP
Da \fIsigtimedwait\fP() n' \fIsigwaitinfo\fP() functions may fail
if:
.TP 7
.B EINTR
Da wait was interrupted by a unblocked, caught signal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Well shiiiit, it shall
be documented up in system documentation whether dis error
causes these functions ta fail.
.sp
.LP
Da \fIsigtimedwait\fP() function may also fail if:
.TP 7
.B EINVAL
Da \fItimeout\fP argument specified a \fItv_nsec\fP value less than
zero or pimped outa than or equal ta 1000 million.
.sp
.LP
An implementation only checks fo' dis error if no signal is pending
in \fIset\fP n' it is necessary ta wait.
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
Da \fIsigtimedwait\fP() function times up n' returns a [EAGAIN]
error fo' realz. Application writas should note dat dis is
inconsistent wit other functions like fuckin \fIpthread_cond_timedwait\fP()
that return [ETIMEDOUT].
.SH RATIONALE
.LP
Existin programmin practice on realtime systems uses tha ability
to pause waitin fo' a selected set of events n' handle the
first event dat occurs in-line instead of up in a signal-handlin function.
This allows applications ta be freestyled up in an
event-pimped up steez similar ta a state machine. This steez of programming
is useful fo' largescale transaction processin up in which
the overall throughput of a application n' tha mobilitizzle ta clearly
track states is mo' blingin than tha mobilitizzle ta minimize
the response time of individual event handling.
.LP
It be possible ta construct a signal-waitin macro function up of
the realtime signal function mechanizzle defined up in dis volume
of IEEE\ Std\ 1003.1-2001. But fuck dat shiznit yo, tha word on tha street is dat such a macro has ta include the
definizzle of a generalized handlez fo' all signals to
be waited on. I aint talkin' bout chicken n' gravy biatch fo' realz. A dope portion of tha overhead of handlez processing
can be avoided if tha signal-waitin function is provided
by tha kernel. This volume of IEEE\ Std\ 1003.1-2001 therefore provides
two signal-waitin functions-one dat waits
indefinitely n' one wit a timeout-as part of tha overall realtime
signal function justification.
.LP
Da justification of a gangbangin' function wit a timeout allows a application
to be freestyled dat can be fucked up outta a wait afta a set
period of time if no event has occurred. Y'all KNOW dat shit, muthafucka! Dat shiznit was broke off some disrespec dat setting
a timer event before tha wait n' recognizin tha timer event
in tha wait would also implement tha same functionalitizzle yo, but at a
lower performizzle level. Because of tha performizzle degradation
associated wit tha user-level justification of a timer event and
the subsequent cancellation of dat timer event afta tha wait
completes fo' a valid event, n' tha complexitizzle associated wit handling
potential race conditions associated wit tha user-level
method, tha separate function has been included.
.LP
Note dat tha semantics of tha \fIsigwaitinfo\fP() function is nearly
identical ta dat of tha \fIsigwait\fP() function defined by this
volume of IEEE\ Std\ 1003.1-2001. Da only
difference is dat \fIsigwaitinfo\fP() returns tha queued signal value
in tha \fIvalue\fP argument. Da return of tha queued
value is required so dat applications can differentiate between multiple
events queued ta tha same signal number.
.LP
Da two distinct functions is bein maintained cuz some implementations
may chizzle ta implement tha POSIX Threadz Extension
functions n' not implement tha queued signals extensions. Note, though,
that \fIsigwaitinfo\fP() do not return tha queued value
if tha \fIvalue\fP argument is NULL, so tha POSIX Threadz Extension
\fIsigwait\fP()
function can be implemented as a macro on \fIsigwaitinfo\fP().
.LP
Da \fIsigtimedwait\fP() function was separated from tha \fIsigwaitinfo\fP()
function ta address concerns regardin the
overloadin of tha \fItimeout\fP pointa ta indicate indefinite wait
(no timeout), timed wait, n' immediate return, n' concerns
regardin consistency wit other functions where tha conditionizzle and
timed waits was separate functions from tha pure blocking
function. I aint talkin' bout chicken n' gravy biatch. Da semantics of \fIsigtimedwait\fP() is specified such
that \fIsigwaitinfo\fP() could be implemented as a macro with
a NULL pointa fo' \fItimeout\fP.
.LP
Da \fIsigwait\fP functions provide a synchronous mechanizzle fo' threads
to wait fo' asynchronously-generated signals. One
important question was how tha fuck nuff threadz dat is suspended up in a cold-ass lil call
to a \fIsigwait\fP()
function fo' a signal should return from tha call when tha signal
is sent. Four chizzlez was considered:
.IP " 1." 4
Return a error fo' multiple simultaneous calls ta \fIsigwait\fP functions
for tha same signal.
.LP
.IP " 2." 4
One or mo' threadz return.
.LP
.IP " 3." 4
All waitin threadz return.
.LP
.IP " 4." 4
Exactly one thread returns.
.LP
.LP
Prohibitin multiple calls ta \fIsigwait\fP() fo' tha same signal
was felt ta be overly
restrictive. Da "one or more" behavior made implementation of conforming
packages easy as fuck  all up in tha expense of forcin POSIX threads
clients ta protect against multiple simultaneous calls ta \fIsigwait\fP()
in application
code up in order ta big up predictable behavior. Shiiit, dis aint no joke. There was concern that
the "all waitin threads" behavior would result up in "signal
broadcast storms", consumin excessive CPU resources by replicating
the signals up in tha general case. Furthermore, no convincing
examplez could be presented dat delivery ta all was either simpler
or mo' bangin than delivery ta one.
.LP
Thus, tha consensus was dat exactly one thread dat was suspended
in a cold-ass lil call ta a \fIsigwait\fP function fo' a signal should
return when dat signal occurs. This aint a onerous restriction
as:
.IP " *" 3
A multi-way signal wait can be built from tha single-way wait.
.LP
.IP " *" 3
Signals should only be handled by application-level code, as library
routines cannot guess what tha fuck tha application wants ta do with
signals generated fo' tha entire process.
.LP
.IP " *" 3
Applications can thus arrange fo' a single thread ta wait fo' any
given signal n' call any needed routines upon its
arrival.
.LP
.LP
In a application dat is rockin signals fo' interprocess communication,
signal processin is typically done up in one place.
Alternatively, if tha signal is bein caught so dat process cleanup
can be done, tha signal handlez thread can call separate
process cleanup routines fo' each portion of tha application. I aint talkin' bout chicken n' gravy biatch. Right back up in yo muthafuckin ass. Since
the application main line started each portion of the
application, it be all up in tha right abstraction level ta tell each portion
of tha application ta clean up.
.LP
Certainly, there exist programmin stylez where it is logical ta consider
waitin fo' a single signal up in multiple threadz fo' realz. A
simple \fIsigwait_multiple\fP() routine can be constructed ta achieve
this goal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack fo' realz. A possible implementation would be ta have each
\fIsigwait_multiple\fP() calla registered as havin expressed interest
in a set of signals. Da calla then waits on a
thread-specific condizzle variable fo' realz. A single server thread calls a
\fIsigwait\fP()
function on tha union of all registered signals. When tha \fIsigwait\fP()
function
returns, tha appropriate state is set n' condizzle variablez are
broadcast. New \fIsigwait_multiple\fP() callaz may cause the
pendin \fIsigwait\fP() call ta be canceled n' reissued up in order
to update tha set of
signals bein waited for.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIRealtime Signals\fP, \fIpause\fP(), \fIpthread_sigmask\fP(),
\fIsigaction\fP(), \fIsigpending\fP(), \fIsigsuspend\fP(), \fIsigwait\fP(),
the Base Definitions volume of IEEE\ Std\ 1003.1-2001, \fI<signal.h>\fP,
\fI<time.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
