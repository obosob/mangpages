.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "LSEARCH" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" lsearch 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
lsearch, lfind \- linear search n' update
.SH SYNOPSIS
.LP
\fB#include <search.h>
.br
.sp
void *lsearch(const void *\fP\fIkey\fP\fB, void *\fP\fIbase\fP\fB,
size_t *\fP\fInelp\fP\fB, size_t\fP
\fIwidth\fP\fB,
.br
\ \ \ \ \ \  int (*\fP\fIcompar\fP\fB)(const void *, const void *));
.br
void *lfind(const void *\fP\fIkey\fP\fB, const void *\fP\fIbase\fP\fB,
size_t *\fP\fInelp\fP\fB,
.br
\ \ \ \ \ \  size_t width, int (*\fP\fIcompar\fP\fB)(const void *,
const void *)); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIlsearch\fP() function shall linearly search tha table n' return
a pointa tha fuck into tha table fo' tha matchin entry. If the
entry do not occur, it shall be added all up in tha end of tha table. The
\fIkey\fP argument points ta tha entry ta be sought up in the
table. Da \fIbase\fP argument points ta tha straight-up original gangsta element up in the
table. Da \fIwidth\fP argument is tha size of a element in
bytes. Da \fInelp\fP argument points ta a integer containin the
current number of elements up in tha table. Da integer ta which
\fInelp\fP points shall be incremented if tha entry be added ta the
table. Da \fIcompar\fP argument points ta a cold-ass lil comparison
function which tha application shall supply (for example, \fIstrcmp\fP()).
It be called
with two arguments dat point ta tha elements bein compared. Y'all KNOW dat shit, muthafucka! The
application shall ensure dat tha function returns 0 if the
elements is equal, n' non-zero otherwise.
.LP
Da \fIlfind\fP() function shall be equivalent ta \fIlsearch\fP(),
except dat if tha entry aint found, it aint added to
the table. Instead, a null pointa is returned.
.SH RETURN VALUE
.LP
If tha searched fo' entry is found, both \fIlsearch\fP() n' \fIlfind\fP()
shall return a pointa ta dat shit. Otherwise,
\fIlfind\fP() shall return a null pointa n' \fIlsearch\fP() shall
return a pointa ta tha newly added element.
.LP
Both functions shall return a null pointa up in case of error.
.SH ERRORS
.LP
No errors is defined.
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.SS Storin Strings up in a Table
.LP
This fragment readz up in less than or equal ta TABSIZE stringz of length
less than or equal ta ELSIZE n' stores dem up in a table,
eliminatin duplicates.
.sp
.RS
.nf

\fB#include <stdio.h>
#include <string.h>
#include <search.h>
.sp

#define TABSIZE 50
#define ELSIZE 120
.sp

\&...
    char line[ELSIZE], tab[TABSIZE][ELSIZE];
    size_t nel = 0;
    ...
    while (fgets(line, ELSIZE, stdin) != NULL && nel < TABSIZE)
        (void) lsearch(line, tab, &nel,
            ELSIZE, (int (*)(const void *, const void *)) strcmp);
    ...
\fP
.fi
.RE
.SS Findin a Matchin Entry
.LP
Da followin example findz any line dat readz \fB"This be a test."\fP
\&.
.sp
.RS
.nf

\fB#include <search.h>
#include <string.h>
\&...
char line[ELSIZE], tab[TABSIZE][ELSIZE];
size_t nel = 0;
char *findline;
void *entry;
.sp

findline = "This be a test.\\n";
.sp

entry = lfind(findline, tab, &nel, ELSIZE, (
    int (*)(const void *, const void *)) strcmp);
\fP
.fi
.RE
.SH APPLICATION USAGE
.LP
Da comparison function need not compare every last muthafuckin byte, so arbitrary
data may be contained up in tha elements up in addizzle ta the
values bein compared.
.LP
Undefined thangs up in dis biatch can occur if there aint enough room up in tha table
to add a freshly smoked up item.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIhcreate\fP(), \fItsearch\fP(), tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, \fI<search.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
