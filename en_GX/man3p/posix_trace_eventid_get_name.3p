.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "POSIX_TRACE_EVENTID_EQUAL" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" posix_trace_eventid_equal 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
posix_trace_eventid_equal, posix_trace_eventid_get_name, posix_trace_trid_eventid_open
\- manipulate tha trace event
type identifier (\fBTRACING\fP)
.SH SYNOPSIS
.LP
\fB#include <trace.h>
.br
.sp
int posix_trace_eventid_equal(trace_id_t\fP \fItrid\fP\fB, trace_event_id_t\fP
\fIevent1\fP\fB,
.br
\ \ \ \ \ \  trace_event_id_t\fP \fIevent2\fP\fB);
.br
int posix_trace_eventid_get_name(trace_id_t\fP \fItrid\fP\fB,
.br
\ \ \ \ \ \  trace_event_id_t\fP \fIevent\fP\fB, char *\fP\fIevent_name\fP\fB);
.br
\fP
.LP
\fBint posix_trace_trid_eventid_open(trace_id_t\fP \fItrid\fP\fB,
.br
\ \ \ \ \ \  const char *restrict\fP \fIevent_name\fP\fB,
.br
\ \ \ \ \ \  trace_event_id_t *restrict\fP \fIevent\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIposix_trace_eventid_equal\fP() function shall compare tha trace
event type identifiers \fIevent1\fP n' \fIevent2\fP
from tha same trace stream or tha same trace log identified by the
\fItrid\fP argument. If tha trace event type identifiers
\fIevent1\fP n' \fIevent2\fP is from different trace streams, the
return value shall be unspecified.
.LP
Da \fIposix_trace_eventid_get_name\fP() function shall return, in
the argument pointed ta by \fIevent_name\fP, tha trace
event name associated wit tha trace event type identifier identified
by tha argument \fIevent\fP, fo' tha trace stream or fo' the
trace log identified by tha \fItrid\fP argument. Da name of tha trace
event shall gotz a maximum of {TRACE_EVENT_NAME_MAX}
charactas (which has tha minimum value {_POSIX_TRACE_EVENT_NAME_MAX}).
Successive calls ta dis function wit tha same trace event
type identifier n' tha same trace stream identifier shall return
the same event name.
.LP
Da \fIposix_trace_trid_eventid_open\fP() function shall associate
a user trace event name wit a trace event type identifier for
a given trace stream. Da trace stream is identified by tha \fItrid\fP
argument, n' it shall be a actizzle trace stream. Da trace
event name is tha strang pointed ta by tha argument \fIevent_name\fP.
It shall gotz a maximum of {TRACE_EVENT_NAME_MAX} characters
(which has tha minimum value {_POSIX_TRACE_EVENT_NAME_MAX}). Da number
of user trace event type identifiers dat can be defined
for any given process is limited by tha maximum value {TRACE_USER_EVENT_MAX},
which has tha minimum value
{_POSIX_TRACE_USER_EVENT_MAX}.
.LP
If tha Trace Inherit option aint supported, tha \fIposix_trace_trid_eventid_open\fP()
function shall associate tha user trace
event name pointed ta by tha \fIevent_name\fP argument wit a trace
event type identifier dat is unique fo' tha process being
traced up in tha trace stream identified by tha \fItrid\fP argument,
and is returned up in tha variable pointed ta by tha \fIevent\fP
argument. If tha user trace event name has already been mapped for
the traced process, then tha previously assigned trace event
type identifier shall be returned. Y'all KNOW dat shit, muthafucka! If tha per-process user trace event
name limit represented by {TRACE_USER_EVENT_MAX} has been
reached, tha pre-defined POSIX_TRACE_UNNAMED_USEREVENT (see \fITrace
Option: User Trace
Event\fP ) user trace event shall be returned. Y'all KNOW dat shit, muthafucka! 
.LP
If tha Trace Inherit option is supported, tha \fIposix_trace_trid_eventid_open\fP()
function shall associate tha user
trace event name pointed ta by tha \fIevent_name\fP argument with
a trace event type identifier dat is unique fo' all the
processes bein traced up in tha trace stream identified by tha \fItrid\fP
argument, n' is returned up in tha variable pointed ta by
the \fIevent\fP argument. If tha user trace event name has already
been mapped fo' tha traced processes, then tha previously
assigned trace event type identifier shall be returned. Y'all KNOW dat shit, muthafucka! If tha per-process
user trace event name limit represented by
{TRACE_USER_EVENT_MAX} has been reached, tha pre-defined POSIX_TRACE_UNNAMED_USEREVENT
(see \fITrace Option: User Trace Event\fP ) user trace event shall
be returned. Y'all KNOW dat shit, muthafucka! 
.SH RETURN VALUE
.LP
Upon successful completion, tha \fIposix_trace_eventid_get_name\fP()
and  
\fIposix_trace_trid_eventid_open\fP()  functions shall return a
value of zero. Otherwise, they shall return tha correspondin error
number.
.LP
Da \fIposix_trace_eventid_equal\fP() function shall return a non-zero
value if \fIevent1\fP n' \fIevent2\fP is equal;
otherwise, a value of zero shall be returned. Y'all KNOW dat shit, muthafucka! No errors is defined.
If either \fIevent1\fP or \fIevent2\fP is not valid trace
event type identifiers fo' tha trace stream specified by \fItrid\fP
or if tha \fItrid\fP is invalid, tha behavior shall be
unspecified.
.LP
Da \fIposix_trace_eventid_get_name\fP() function stores tha trace
event name value up in tha object pointed ta by
\fIevent_name\fP, if successful.
.LP
Da \fIposix_trace_trid_eventid_open\fP() function stores tha trace
event type identifier value up in tha object pointed ta by
\fIevent\fP, if successful naaahhmean, biatch? 
.SH ERRORS
.LP
Da \fIposix_trace_eventid_get_name\fP() n'   \fIposix_trace_trid_eventid_open\fP()
functions shall fail if:
.TP 7
.B EINVAL
Da \fItrid\fP argument was not a valid trace stream identifier.
.sp
.LP
Da \fIposix_trace_trid_eventid_open\fP() function shall fail if:
.TP 7
.B ENAMETOOLONG
.sp
Da size of tha name pointed ta by tha \fIevent_name\fP argument was
longer than tha implementation-defined value
{TRACE_EVENT_NAME_MAX}. 
.sp
.LP
Da \fIposix_trace_eventid_get_name\fP() function shall fail if:
.TP 7
.B EINVAL
Da trace event type identifier \fIevent\fP was not associated with
any name.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fITrace Option: User Trace Event\fP, \fIposix_trace_event\fP(),
\fIposix_trace_getnext_event\fP(), tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, \fI<trace.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
