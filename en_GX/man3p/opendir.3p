.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "OPENDIR" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" opendir 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
opendir \- open a gangbangin' finger-lickin' directory
.SH SYNOPSIS
.LP
\fB#include <dirent.h>
.br
.sp
DIR *opendir(const char *\fP\fIdirname\fP\fB);
.br
\fP
.SH DESCRIPTION
.LP
Da \fIopendir\fP() function shall open a gangbangin' finger-lickin' directory stream corresponding
to tha directory named by tha \fIdirname\fP argument.
Da directory stream is positioned all up in tha straight-up original gangsta entry. If tha type
\fBDIR\fP is implemented rockin a gangbangin' file descriptor, applications
shall only be able ta open up ta a total of {OPEN_MAX} filez n' directories.
.SH RETURN VALUE
.LP
Upon successful completion, \fIopendir\fP() shall return a pointer
to a object of type \fBDIR\fP. Otherwise, a null pointer
shall be returned n' \fIerrno\fP set ta indicate tha error.
.SH ERRORS
.LP
Da \fIopendir\fP() function shall fail if:
.TP 7
.B EACCES
Search permission is denied fo' tha component of tha path prefix of
\fIdirname\fP or read permission is denied for
\fIdirname\fP.
.TP 7
.B ELOOP
A loop exists up in symbolic links encountered durin resolution of the
\fIdirname\fP argument.
.TP 7
.B ENAMETOOLONG
Da length of tha \fIdirname\fP argument exceedz {PATH_MAX} or a pathname
component is longer than {NAME_MAX}.
.TP 7
.B ENOENT
A component of \fIdirname\fP do not name a existin directory or
\fIdirname\fP be a empty string.
.TP 7
.B ENOTDIR
A component of \fIdirname\fP aint a gangbangin' finger-lickin' directory.
.sp
.LP
Da \fIopendir\fP() function may fail if:
.TP 7
.B ELOOP
Mo' than {SYMLOOP_MAX} symbolic links was encountered durin resolution
of tha \fIdirname\fP argument.
.TP 7
.B EMFILE
{OPEN_MAX} file descriptors is currently open up in tha callin process.
.TP 7
.B ENAMETOOLONG
As a result of encounterin a symbolic link up in resolution of tha \fIdirname\fP
argument, tha length of tha substituted pathname
strin exceeded {PATH_MAX}.
.TP 7
.B ENFILE
Too nuff filez is currently open up in tha system.
.sp
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.SS Open a Directory Stream
.LP
Da followin program fragment demonstrates how tha fuck tha \fIopendir\fP()
function is used.
.sp
.RS
.nf

\fB#include <sys/types.h>
#include <dirent.h>
#include <libgen.h>
\&...
    DIR *dir;
    struct dirent *dp;
\&...
    if ((dir = opendir (".")) == NULL) {
        perror ("Cannot open .");
        exit (1);
    }
.sp

    while ((dp = readdir (dir)) != NULL) {
\&...
\fP
.fi
.RE
.SH APPLICATION USAGE
.LP
Da \fIopendir\fP() function should be used up in conjunction wit \fIreaddir\fP(),
\fIclosedir\fP(), n' \fIrewinddir\fP() to
examine tha contentz of tha directory (see tha EXAMPLES section in
\fIreaddir\fP()). This method is
recommended fo' portability.
.SH RATIONALE
.LP
Based on oldschool implementations, tha rulez bout file descriptors
apply ta directory streams as well. But fuck dat shiznit yo, tha word on tha street is dat dis volume
of IEEE\ Std\ 1003.1-2001 do not mandate dat tha directory stream
be implemented rockin file descriptors. Da description
of \fIclosedir\fP() clarifies dat if a gangbangin' file descriptor is used for
the directory stream,
it is mandatory dat \fIclosedir\fP() deallocate tha file descriptor.
When a gangbangin' file
descriptor is used ta implement tha directory stream, it behaves as
if tha FD_CLOEXEC had been set fo' tha file descriptor.
.LP
Da directory entries fo' dot n' dot-dot is optional. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. This volume
of IEEE\ Std\ 1003.1-2001 do not provide a way to
test \fIa priori\fP fo' they existence cuz a application that
is portable must be freestyled ta look fo' (and probably ignore)
those entries. Put ya muthafuckin choppers up if ya feel dis! Freestylin code dat presumes dat they is tha first
two entries do not always work, as nuff implementations permit
them ta be other than tha straight-up original gangsta two entries, wit a "normal" entry
precedin em. There is negligible value up in providin a way
to determine what tha fuck tha implementation do cuz tha code ta deal
with dot n' dot-dot must be freestyled up in any case n' cuz
such a gangbangin' flag would add ta tha list of dem flags (which has proven
in itself ta be objectionable) n' might be abused.
.LP
Since tha structure n' buffer allocation, if any, fo' directory operations
are defined by tha implementation, dis volume of
IEEE\ Std\ 1003.1-2001 imposes no portabilitizzle requirements fo' erroneous
program constructs, erroneous data, or tha use of
unspecified joints like fuckin tha use or referencin of a \fIdirp\fP
value or a \fBdirent\fP structure value afta a gangbangin' finger-lickin' directory
stream has been closed or afta a \fIfork\fP() or one of tha \fIexec\fP
function calls.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIclosedir\fP(), \fIlstat\fP(), \fIreaddir\fP(), \fIrewinddir\fP(),
\fIsymlink\fP(),
the Base Definitions volume of IEEE\ Std\ 1003.1-2001, \fI<dirent.h>\fP,
\fI<limits.h>\fP, \fI<sys/types.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
