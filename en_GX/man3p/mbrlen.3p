.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "MBRLEN" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" mbrlen 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
mbrlen \- git number of bytes up in a cold-ass lil characta (restartable)
.SH SYNOPSIS
.LP
\fB#include <wchar.h>
.br
.sp
size_t mbrlen(const char *restrict\fP \fIs\fP\fB, size_t\fP \fIn\fP\fB,
.br
\ \ \ \ \ \  mbstate_t *restrict\fP \fIps\fP\fB);
.br
\fP
.SH DESCRIPTION
.LP
If \fIs\fP aint a null pointer, \fImbrlen\fP() shall determine the
number of bytes constitutin tha characta pointed ta by
\fIs\fP. Well shiiiit, it shall be equivalent to:
.sp
.RS
.nf

\fBmbstate_t internal;
mbrtowc(NULL, s, n, ps != NULL ? ps : &internal);
\fP
.fi
.RE
.LP
If \fIps\fP be a null pointer, tha \fImbrlen\fP() function shall use
its own internal \fBmbstate_t\fP object, which is
initialized at program start-up ta tha initial conversion state. Otherwise,
the \fBmbstate_t\fP object pointed ta by \fIps\fP
shall be used ta straight-up describe tha current conversion state
of tha associated characta sequence. Da implementation shall
behave as if no function defined up in dis volume of IEEE\ Std\ 1003.1-2001
calls \fImbrlen\fP().
.LP
Da behavior of dis function be affected by tha \fILC_CTYPE\fP category
of tha current locale.
.SH RETURN VALUE
.LP
Da \fImbrlen\fP() function shall return tha straight-up original gangsta of tha following
that applies:
.TP 7
0
If tha next \fIn\fP or fewer bytes complete tha characta dat corresponds
to tha null wide character.
.TP 7
\fIpositive\fP
If tha next \fIn\fP or fewer bytes complete a valid character; the
value returned shall be tha number of bytes dat complete
the character.
.TP 7
(\fBsize_t\fP)-2
If tha next \fIn\fP bytes contribute ta a incomplete but potentially
valid character, n' all \fIn\fP bytes have been
processed. Y'all KNOW dat shit, muthafucka! When \fIn\fP has at least tha value of tha {MB_CUR_MAX}
macro, dis case can only occur if \fIs\fP points at a
sequence of redundant shift sequences (for implementations wit state-dependent
encodings).
.TP 7
(\fBsize_t\fP)-1
If a encodin error occurs, up in which case tha next \fIn\fP or fewer
bytes do not contribute ta a cold-ass lil complete n' valid
character n' shit. In dis case, [EILSEQ] shall be stored up in \fIerrno\fP and
the conversion state is undefined.
.sp
.SH ERRORS
.LP
Da \fImbrlen\fP() function may fail if:
.TP 7
.B EINVAL
\fIps\fP points ta a object dat gotz nuff a invalid conversion state.
.TP 7
.B EILSEQ
Invalid characta sequence is detected.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fImbsinit\fP(), \fImbrtowc\fP(), tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, \fI<wchar.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
