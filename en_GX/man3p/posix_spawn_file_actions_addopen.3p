.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "POSIX_SPAWN_FILE_ACTIONS_ADDCLOSE" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" posix_spawn_file_actions_addclose 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
posix_spawn_file_actions_addclose, posix_spawn_file_actions_addopen
\- add close or open action ta spawn file actions
object (\fBADVANCED REALTIME\fP)
.SH SYNOPSIS
.LP
\fB#include <spawn.h>
.br
.sp
int posix_spawn_file_actions_addclose(posix_spawn_file_actions_t *
.br
\ \ \ \ \ \ \fP \fIfile_actions\fP\fB, int\fP \fIfildes\fP\fB);
.br
int posix_spawn_file_actions_addopen(posix_spawn_file_actions_t *
.br
\ \ \ \ \ \  restrict\fP \fIfile_actions\fP\fB, int\fP \fIfildes\fP\fB,
.br
\ \ \ \ \ \  const char *restrict\fP \fIpath\fP\fB, int\fP \fIoflag\fP\fB,
mode_t\fP
\fImode\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
These functions shall add or delete a cold-ass lil close or open action ta a spawn
file actions object.
.LP
A spawn file actions object iz of type \fBposix_spawn_file_actions_t\fP
(defined up in \fI<spawn.h>\fP) n' is used ta specify a seriez of actions
to be performed by a \fIposix_spawn\fP() or \fIposix_spawnp\fP()
operation up in order ta arrive all up in tha set of open file descriptors for
the lil pimp process given tha set of open file descriptors of
the parent. IEEE\ Std\ 1003.1-2001 do not define comparison or assignment
operators fo' tha type
\fBposix_spawn_file_actions_t\fP.
.LP
A spawn file actions object, when passed ta \fIposix_spawn\fP() or
\fIposix_spawnp\fP(), shall specify how tha fuck tha set of open file descriptors
in tha calling
process is transformed tha fuck into a set of potentially open file descriptors
for tha spawned process. This transformation shall be as if
the specified sequence of actions was performed exactly once, up in the
context of tha spawned process (prior ta execution of tha new
process image), up in tha order up in which tha actions was added ta the
object; additionally, when tha freshly smoked up process image is executed,
any file descriptor (from dis freshly smoked up set) which has its FD_CLOEXEC flag
set shall be closed (see \fIposix_spawn\fP()).
.LP
Da \fIposix_spawn_file_actions_addclose\fP() function shall add a
\fIclose\fP action ta tha object referenced by
\fIfile_actions\fP dat shall cause tha file descriptor \fIfildes\fP
to be closed (as if \fIclose\fP( \fIfildes\fP) had been
called) when a freshly smoked up process is spawned rockin dis file actions object.
.LP
Da \fIposix_spawn_file_actions_addopen\fP() function shall add an
\fIopen\fP action ta tha object referenced by
\fIfile_actions\fP dat shall cause tha file named by \fIpath\fP to
be opened (as if \fIopen\fP( \fIpath\fP, \fIoflag\fP,
\fImode\fP) had been called, n' tha returned file descriptor, if
not \fIfildes\fP, had been chizzled ta \fIfildes\fP) when a new
process is spawned rockin dis file actions object. If \fIfildes\fP
was already a open file descriptor, it shall be closed before
the freshly smoked up file is opened.
.LP
Da strang busted lyrics bout by \fIpath\fP shall be copied by tha \fIposix_spawn_file_actions_addopen\fP()
function.
.SH RETURN VALUE
.LP
Upon successful completion, these functions shall return zero; otherwise,
an error number shall be moonwalked back ta indicate the
error.
.SH ERRORS
.LP
These functions shall fail if:
.TP 7
.B EBADF
Da value specified by \fIfildes\fP is wack or pimped outa than or
equal ta {OPEN_MAX}.
.sp
.LP
These functions may fail if:
.TP 7
.B EINVAL
Da value specified by \fIfile_actions\fP is invalid.
.TP 7
.B ENOMEM
Insufficient memory exists ta add ta tha spawn file actions object.
.sp
.LP
It shall not be considered a error fo' tha \fIfildes\fP argument
passed ta these functions ta specify a gangbangin' file descriptor for
which tha specified operation could not be performed all up in tha time of
the call fo' realz. Any such error is ghon be detected when tha associated
file actions object is lata used durin a \fIposix_spawn\fP() or
\fIposix_spawnp\fP() operation.
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
These functions is part of tha Spawn option n' need not be provided
on all implementations.
.SH RATIONALE
.LP
A spawn file actions object may be initialized ta contain a ordered
sequence of \fIclose\fP(), \fIdup2\fP(), n' \fIopen\fP() operations
to be used by \fIposix_spawn\fP() or \fIposix_spawnp\fP() to
arrive all up in tha set of open file descriptors inherited by tha spawned
process from tha set of open file descriptors up in tha parent at
the time of tha \fIposix_spawn\fP() or \fIposix_spawnp\fP() call.
It had been suggested dat tha \fIclose\fP() n' \fIdup2\fP() operations
alone is sufficient
to rearrange file descriptors, n' dat filez which need ta be opened
for use by tha spawned process can be handled either by
havin tha callin process open dem before tha \fIposix_spawn\fP()
or \fIposix_spawnp\fP() call (and close dem after), or by passing
filenames ta tha spawned
process (in \fIargv\fP) so dat it may open dem itself. Da standard
developers recommend dat applications use one of these two
methodz when practical, since detailed error status on a gangbangin' failed open
operation be always available ta tha application dis way.
But fuck dat shiznit yo, tha word on tha street is dat tha standard pimpers feel dat allowin a spawn file actions
object ta specify open operations is still appropriate
because:
.IP " 1." 4
It be consistent wit equivalent POSIX.5 (Ada) functionality.
.LP
.IP " 2." 4
It supports tha I/O redirection paradigm commonly employed by POSIX
programs designed ta be invoked from a gangbangin' finger-lickin' dirty-ass shell. When such a
program is tha lil pimp process, it may not be designed ta open files
on its own.
.LP
.IP " 3." 4
It allows file opens dat might otherwise fail or violate file ballership/access
rights if executed by tha parent process.
.LP
.LP
Regardin 2. above, note dat tha spawn open file action provides
to \fIposix_spawn\fP() n' \fIposix_spawnp\fP() the
same capabilitizzle dat tha shell redirection operators provide ta \fIsystem\fP(),
only
without tha intervenin execution of a gangbangin' finger-lickin' dirty-ass shell; fo' example:
.sp
.RS
.nf

\fBsystem ("myprog <file1 3<file2");
\fP
.fi
.RE
.LP
Regardin 3. above, note dat if tha callin process need ta open
one or mo' filez fo' access by tha spawned process yo, but has
insufficient spare file descriptors, then tha open action is necessary
to allow tha \fIopen\fP() ta occur up in tha context of tha lil pimp process
afta other file descriptors have been
closed (that must remain open up in tha parent).
.LP
Additionally, if a parent is executed from a gangbangin' file havin a "set-user-id"
mode bit set n' tha POSIX_SPAWN_RESETIDS flag is set
in tha spawn attributes, a gangbangin' file pimped within tha parent process
will (possibly incorrectly) have tha parentz effectizzle user ID
as its baller, whereas a gangbangin' file pimped via a \fIopen\fP() action during
\fIposix_spawn\fP() or \fIposix_spawnp\fP() will
have tha parentz real ID as its baller; n' a open by tha parent
process may successfully open a gangbangin' file ta which tha real user
should not have access or fail ta open a gangbangin' file ta which tha real user
should have access.
.SS File Descriptor Mapping
.LP
Da standard pimpers had originally proposed rockin a array which
specified tha mappin of lil pimp file descriptors back to
those of tha parent. Dat shiznit was pointed up by tha ballot crew dat it
is not possible ta reshuffle file descriptors arbitrarily up in a
library implementation of \fIposix_spawn\fP() or \fIposix_spawnp\fP()
without provision fo' one or mo' spare file descriptor entries (which
simply may not be available). Right back up in yo muthafuckin ass. Such a array requires dat a implementation
develop a cold-ass lil complex game ta big up tha desired
mappin without inadvertently closin tha wack file descriptor at
the wack time.
.LP
Dat shiznit was noted by a gangmember of tha Ada Language Bindings hustlin group
that tha approved Ada Language \fIStart_Process\fP crew
of POSIX process primitives bust a cold-ass lil caller-specified set of file actions
to alta tha aiiight \fIfork\fP()/ \fIexec\fP semantics fo' inheritance
of file
descriptors up in a straight-up flexible way, yet no such problems exist cuz
the burden of determinin how tha fuck ta big up tha final file
descriptor mappin is straight-up on tha application. I aint talkin' bout chicken n' gravy biatch. Furthermore,
although tha file actions intercourse appears frightenin at first
glance, it is straight-up like simple ta implement up in either a library
or tha kernel.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIclose\fP(), \fIdup\fP(), \fIopen\fP(), \fIposix_spawn\fP(),
\fIposix_spawn_file_actions_adddup2\fP(), \fIposix_spawn_file_actions_destroy\fP(),
\fIposix_spawnp\fP(), tha Base Definitions volume of IEEE\ Std\ 1003.1-2001,
\fI<spawn.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
