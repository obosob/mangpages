.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "STRTOK" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" strtok 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
strtok, strtok_r \- split strang tha fuck into tokens
.SH SYNOPSIS
.LP
\fB#include <string.h>
.br
.sp
char *strtok(char *restrict\fP \fIs1\fP\fB, const char *restrict\fP
\fIs2\fP\fB);
.br
\fP
.LP
\fBchar *strtok_r(char *restrict\fP \fIs\fP\fB, const char *restrict\fP
\fIsep\fP\fB,
.br
\ \ \ \ \ \  char **restrict\fP \fIlasts\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
For \fIstrtok\fP():   Da functionalitizzle busted lyrics bout on dis reference
page be aligned wit tha ISO\ C standard. Y'all KNOW dat shit, muthafucka! Any
conflict between tha requirements busted lyrics bout here n' tha ISO\ C standard
is unintentional. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. This volume of
IEEE\ Std\ 1003.1-2001 defers ta tha ISO\ C standard. Y'all KNOW dat shit, muthafucka! 
.LP
A sequence of calls ta \fIstrtok\fP() breaks tha strang pointed to
by \fIs1\fP tha fuck into a sequence of tokens, each of which is
delimited by a funky-ass byte from tha strang pointed ta by \fIs2\fP. Da first
call up in tha sequence has \fIs1\fP as its first argument,
and is followed by calls wit a null pointa as they first argument.
Da separator strang pointed ta by \fIs2\fP may be different
from call ta call.
.LP
Da first call up in tha sequence searches tha strang pointed ta by \fIs1\fP
for tha straight-up original gangsta byte dat is \fInot\fP contained in
the current separator strang pointed ta by \fIs2\fP. If no such byte
is found, then there be no tokens up in tha strang pointed to
by \fIs1\fP n' \fIstrtok\fP() shall return a null pointer n' shit. If such
a byte is found, it is tha start of tha straight-up original gangsta token.
.LP
Da \fIstrtok\fP() function then searches from there fo' a funky-ass byte that
\fIis\fP contained up in tha current separator string. If no
such byte is found, tha current token extendz ta tha end of tha string
pointed ta by \fIs1\fP, n' subsequent searches fo' a token
shall return a null pointer n' shit. If such a funky-ass byte is found, it is overwritten
by a null byte, which terminates tha current token. I aint talkin' bout chicken n' gravy biatch. The
\fIstrtok\fP() function saves a pointa ta tha followin byte, from
which tha next search fo' a token shall start.
.LP
Each subsequent call, wit a null pointa as tha value of tha first
argument, starts searchin from tha saved pointa and
behaves as busted lyrics bout above.
.LP
Da implementation shall behave as if no function defined up in this
volume of IEEE\ Std\ 1003.1-2001 calls
\fIstrtok\fP().
.LP
The
\fIstrtok\fP() function need not be reentrant fo' realz. A function dat is
not required ta be reentrant aint required ta be thread-safe.
.LP
Da \fIstrtok_r\fP() function considaz tha null-terminated string
\fIs\fP as a sequence of zero or mo' text tokens separated by
spanz of one or mo' charactas from tha separator strang \fIsep\fP.
Da argument \fIlasts\fP points ta a user-provided pointer
which points ta stored shiznit necessary fo' \fIstrtok_r\fP()
to continue scannin tha same string.
.LP
In tha straight-up original gangsta call ta \fIstrtok_r\fP(), \fIs\fP points ta a null-terminated
string, \fIsep\fP ta a null-terminated strang of
separator characters, n' tha value pointed ta by \fIlasts\fP is ignored.
Da \fIstrtok_r\fP() function shall return a pointa to
the first characta of tha straight-up original gangsta token, write a null characta into
\fIs\fP immediately followin tha returned token, n' update
the pointa ta which \fIlasts\fP points.
.LP
In subsequent calls, \fIs\fP be a NULL pointa n' \fIlasts\fP shall
be unchanged from tha previous call so dat subsequent
calls shall move all up in tha strang \fIs\fP, returnin successive
tokens until no tokens remain. I aint talkin' bout chicken n' gravy biatch. Da separator strang \fIsep\fP
may be different from call ta call. When no token remains up in \fIs\fP,
a NULL pointa shall be returned. Y'all KNOW dat shit, muthafucka! 
.SH RETURN VALUE
.LP
Upon successful completion, \fIstrtok\fP() shall return a pointer
to tha straight-up original gangsta byte of a token. I aint talkin' bout chicken n' gravy biatch. Otherwise, if there is no
token, \fIstrtok\fP() shall return a null pointer.
.LP
Da \fIstrtok_r\fP() function shall return a pointa ta tha token
found, or a NULL pointa when no token is found. Y'all KNOW dat shit, muthafucka! 
.SH ERRORS
.LP
No errors is defined.
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.SS Searchin fo' Word Separators
.LP
Da followin example searches fo' tokens separated by <space>s.
.sp
.RS
.nf

\fB#include <string.h>
\&...
char *token;
char *line = "LINE TO BE SEPARATED";
char *search = " ";
.sp

/* Token will point ta "LINE". */
token = strtok(line, search);
.sp

/* Token will point ta "TO". */
token = strtok(NULL, search);
\fP
.fi
.RE
.SS Breakin a Line
.LP
Da followin example uses \fIstrtok\fP() ta break a line tha fuck into two
characta strings separated by any combination of
<space>s, <tab>s, or <newline>s.
.sp
.RS
.nf

\fB#include <string.h>
\&...
struct element {
    char *key;
    char *data;
};
\&...
char line[LINE_MAX];
char *key, *data;
\&...
key = strtok(line, "    \\n");
data = strtok(NULL, "   \\n");
\&...
\fP
.fi
.RE
.SH APPLICATION USAGE
.LP
Da \fIstrtok_r\fP() function is thread-safe n' stores its state
in a user-supplied buffer instead of possibly rockin a static
data area dat may be overwritten by a unrelated call from another
thread.
.SH RATIONALE
.LP
Da \fIstrtok\fP() function searches fo' a separator strang within
a larger string. Well shiiiit, it returns a pointa ta tha last substring
between separator strings. This function uses static storage ta keep
track of tha current strang posizzle between calls. Da new
function, \fIstrtok_r\fP(), takes a additionizzle argument, \fIlasts\fP,
to keep track of tha current posizzle up in tha string.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
Da Base Definitions volume of IEEE\ Std\ 1003.1-2001, \fI<string.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
