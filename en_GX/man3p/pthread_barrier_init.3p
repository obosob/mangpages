.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "PTHREAD_BARRIER_DESTROY" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" pthread_barrier_destroy 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
pthread_barrier_destroy, pthread_barrier_init \- destroy n' initialize
a barrier object (\fBADVANCED REALTIME
THREADS\fP)
.SH SYNOPSIS
.LP
\fB#include <pthread.h>
.br
.sp
int pthread_barrier_destroy(pthread_barrier_t *\fP\fIbarrier\fP\fB);
.br
int pthread_barrier_init(pthread_barrier_t *restrict\fP \fIbarrier\fP\fB,
.br
\ \ \ \ \ \  const pthread_barrierattr_t *restrict\fP \fIattr\fP\fB,
unsigned\fP \fIcount\fP\fB);
\fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIpthread_barrier_destroy\fP() function shall destroy tha barrier
referenced by \fIbarrier\fP n' release any resources
used by tha barrier n' shit. Da effect of subsequent use of tha barrier is
undefined until tha barrier is reinitialized by another call to
\fIpthread_barrier_init\fP() fo' realz. An implementation may use dis function
to set \fIbarrier\fP ta a invalid value. Da thangs up in dis biatch are
undefined if \fIpthread_barrier_destroy\fP() is called when any thread
is blocked on tha barrier, or if dis function is called
with a uninitialized barrier.
.LP
Da \fIpthread_barrier_init\fP() function shall allocate any resources
required ta use tha barrier referenced by \fIbarrier\fP
and shall initialize tha barrier wit attributes referenced by \fIattr\fP.
If \fIattr\fP is NULL, tha default barrier attributes
shall be used; tha effect is tha same ol' dirty as passin tha address of a
default barrier attributes object. Da thangs up in dis biatch is undefined if
\fIpthread_barrier_init\fP() is called when any thread is blocked
on tha barrier (that is, has not returned from tha \fIpthread_barrier_wait\fP()
call). Da thangs up in dis biatch is undefined if a funky-ass barrier is used
without first bein initialized. Y'all KNOW dat shit, muthafucka! Da thangs up in dis biatch is undefined if \fIpthread_barrier_init\fP()
is called specifyin a already
initialized barrier.
.LP
Da \fIcount\fP argument specifies tha number of threadz dat must
call \fIpthread_barrier_wait\fP() before any of dem successfully
return from tha call.
Da value specified by \fIcount\fP must be pimped outa than zero.
.LP
If tha \fIpthread_barrier_init\fP() function fails, tha barrier shall
not be initialized n' tha contentz of \fIbarrier\fP are
undefined.
.LP
Only tha object referenced by \fIbarrier\fP may be used fo' struttin
synchronization. I aint talkin' bout chicken n' gravy biatch. Da result of referrin ta copies of
that object up in calls ta \fIpthread_barrier_destroy\fP() or \fIpthread_barrier_wait\fP()
is undefined.
.SH RETURN VALUE
.LP
Upon successful completion, these functions shall return zero; otherwise,
an error number shall be moonwalked back ta indicate the
error.
.SH ERRORS
.LP
Da \fIpthread_barrier_destroy\fP() function may fail if:
.TP 7
.B EBUSY
Da implementation has detected a attempt ta destroy a funky-ass barrier while
it is up in use (for example, while bein used up in a \fIpthread_barrier_wait\fP()
call) by another thread.
.TP 7
.B EINVAL
Da value specified by \fIbarrier\fP is invalid.
.sp
.LP
Da \fIpthread_barrier_init\fP() function shall fail if:
.TP 7
.B EAGAIN
Da system lacks tha necessary resources ta initialize another barrier.
.TP 7
.B EINVAL
Da value specified by \fIcount\fP is equal ta zero.
.TP 7
.B ENOMEM
Insufficient memory exists ta initialize tha barrier.
.sp
.LP
Da \fIpthread_barrier_init\fP() function may fail if:
.TP 7
.B EBUSY
Da implementation has detected a attempt ta reinitialize a funky-ass barrier
while it is up in use (for example, while bein used up in a \fIpthread_barrier_wait\fP()
call) by another thread.
.TP 7
.B EINVAL
Da value specified by \fIattr\fP is invalid.
.sp
.LP
These functions shall not return a error code of [EINTR].
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
Da \fIpthread_barrier_destroy\fP() n' \fIpthread_barrier_init\fP()
functions is part of tha Barriers option n' need not be
provided on all implementations.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIpthread_barrier_wait\fP(), tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, \fI<pthread.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
