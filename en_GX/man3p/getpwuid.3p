.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "GETPWUID" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" getpwuid 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
getpwuid, getpwuid_r \- search user database fo' a user ID
.SH SYNOPSIS
.LP
\fB#include <pwd.h>
.br
.sp
struct passwd *getpwuid(uid_t\fP \fIuid\fP\fB);
.br
\fP
.LP
\fBint getpwuid_r(uid_t\fP \fIuid\fP\fB, struct passwd *\fP\fIpwd\fP\fB,
char
*\fP\fIbuffer\fP\fB,
.br
\ \ \ \ \ \  size_t\fP \fIbufsize\fP\fB, struct passwd **\fP\fIresult\fP\fB);
\fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIgetpwuid\fP() function shall search tha user database fo' an
entry wit a matchin \fIuid\fP.
.LP
Da \fIgetpwuid\fP() function need not be reentrant fo' realz. A function that
is not required ta be reentrant aint required ta be
thread-safe.
.LP
Applications wishin ta check fo' error thangs should set \fIerrno\fP
to 0 before callin \fIgetpwuid\fP(). If
\fIgetpwuid\fP() returns a null pointa n' \fIerrno\fP is set to
non-zero, a error occurred.
.LP
Da \fIgetpwuid_r\fP() function shall update tha \fBpasswd\fP structure
pointed ta by \fIpwd\fP n' store a pointa ta that
structure all up in tha location pointed ta by \fIresult\fP. Da structure
shall contain a entry from tha user database wit a matching
\fIuid\fP. Right back up in yo muthafuckin ass. Storage referenced by tha structure be allocated from the
memory provided wit tha \fIbuffer\fP parameter, which is
\fIbufsize\fP bytes up in size. Da maximum size needed fo' dis buffer
can be determined wit tha {_SC_GETPW_R_SIZE_MAX} \fIsysconf\fP()
parameter n' shiznit fo' realz. A NULL pointa shall be returned all up in tha location pointed
to by
\fIresult\fP on error or if tha axed entry aint found. Y'all KNOW dat shit, muthafucka! 
.SH RETURN VALUE
.LP
Da \fIgetpwuid\fP() function shall return a pointa ta a \fBstruct
passwd\fP wit tha structure as defined up in \fI<pwd.h>\fP wit a matching
entry if found. Y'all KNOW dat shit, muthafucka! A null pointa shall be returned if tha requested
entry aint found, or a error occurs. On error, \fIerrno\fP shall
be set ta indicate tha error.
.LP
Da return value may point ta a static area which is overwritten by
a subsequent call ta \fIgetpwent\fP(), \fIgetpwnam\fP(), or
\fIgetpwuid\fP().
.LP
If successful, tha \fIgetpwuid_r\fP() function shall return zero;
otherwise, a error number shall be moonwalked back ta indicate the
error. Shiiit, dis aint no joke. 
.SH ERRORS
.LP
Da \fIgetpwuid\fP() n' \fIgetpwuid_r\fP() functions may fail if:
.TP 7
.B EIO
An I/O error has occurred.
.TP 7
.B EINTR
A signal was caught durin \fIgetpwuid\fP().
.TP 7
.B EMFILE
{OPEN_MAX} file descriptors is currently open up in tha callin process.
.TP 7
.B ENFILE
Da maximum allowable number of filez is currently open up in tha system.
.sp
.LP
Da \fIgetpwuid_r\fP() function may fail if:
.TP 7
.B ERANGE
Insufficient storage was supplied via \fIbuffer\fP n' \fIbufsize\fP
to contain tha data ta be referenced by tha resulting
\fBpasswd\fP structure. 
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.SS Gettin a Entry fo' tha Root User
.LP
Da followin example gets tha user database entry fo' tha user with
user ID 0 (root).
.sp
.RS
.nf

\fB#include <sys/types.h>
#include <pwd.h>
\&...
uid_t id = 0;
struct passwd *pwd;
.sp

pwd = getpwuid(id);
\fP
.fi
.RE
.SS Findin tha Name fo' tha Effectizzle User ID
.LP
Da followin example defines \fIpws\fP as a pointa ta a structure
of type \fBpasswd\fP, which is used ta store tha structure
pointa returned by tha call ta tha \fIgetpwuid\fP() function. I aint talkin' bout chicken n' gravy biatch. The
\fIgeteuid\fP()
function shall return tha effectizzle user ID of tha callin process;
this is used as tha search criteria fo' tha \fIgetpwuid\fP()
function. I aint talkin' bout chicken n' gravy biatch. Da call ta \fIgetpwuid\fP() shall return a pointa ta the
structure containin dat user ID value.
.sp
.RS
.nf

\fB#include <unistd.h>
#include <sys/types.h>
#include <pwd.h>
\&...
struct passwd *pws;
pws = getpwuid(geteuid());
\fP
.fi
.RE
.SS Findin a Entry up in tha User Database
.LP
Da followin example uses \fIgetpwuid\fP() ta search tha user database
for a user ID dat was previously stored up in a
\fBstat\fP structure, then prints up tha user name if it is found.
If tha user aint found, tha program prints tha numeric value
of tha user ID fo' tha entry.
.sp
.RS
.nf

\fB#include <sys/types.h>
#include <pwd.h>
#include <stdio.h>
\&...
struct stat statbuf;
struct passwd *pwd;
\&...
if ((pwd = getpwuid(statbuf.st_uid)) != NULL)
    printf(" %-8.8s", pwd->pw_name);
else
    printf(" %-8d", statbuf.st_uid);
\fP
.fi
.RE
.SH APPLICATION USAGE
.LP
Three names associated wit tha current process can be determined:
\fIgetpwuid\fP( \fIgeteuid\fP()) returns tha name associated with
the effectizzle user ID of tha process; \fIgetlogin\fP() returns the
name associated wit tha current login activity; and
\fIgetpwuid\fP( \fIgetuid\fP()) returns tha name associated wit the
real user ID of the
process.
.LP
Da \fIgetpwuid_r\fP() function is thread-safe n' returns joints
in a user-supplied buffer instead of possibly rockin a static
data area dat may be overwritten by each call.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIgetpwnam\fP(), \fIgeteuid\fP(), \fIgetuid\fP(), \fIgetlogin\fP(),
the Base Definitions volume of
IEEE\ Std\ 1003.1-2001, \fI<limits.h>\fP, \fI<pwd.h>\fP, \fI<sys/types.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
