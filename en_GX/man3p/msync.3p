.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "MSYNC" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" msync 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
msync \- synchronize memory wit physical storage
.SH SYNOPSIS
.LP
\fB#include <sys/mman.h>
.br
.sp
int msync(void *\fP\fIaddr\fP\fB, size_t\fP \fIlen\fP\fB, int\fP \fIflags\fP\fB);
\fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fImsync\fP() function shall write all modified data ta permanent
storage locations, if any, up in dem whole pages
containin any part of tha address space of tha process startin at
address \fIaddr\fP n' continuin fo' \fIlen\fP bytes. If no
such storage exists, \fImsync\fP() need not have any effect. If requested,
the \fImsync\fP() function shall then invalidate
cached copiez of data.
.LP
Da implementation shall require dat \fIaddr\fP be a multiple of
the page size as returned by \fIsysconf\fP().
.LP
For mappings ta files, tha \fImsync\fP() function shall ensure that
all write operations is completed as defined for
synchronized I/O data integritizzle completion. I aint talkin' bout chicken n' gravy biatch. Well shiiiit, it is unspecified whether
the implementation also writes up other file attributes.
When tha \fImsync\fP() function is called on MAP_PRIVATE mappings,
any modified data shall not be freestyled ta tha underlyin object
and shall not cause such data ta be made visible ta other processes.
It be unspecified whether data up in MAP_PRIVATE mappings has any
permanent storage locations.  Da effect of \fImsync\fP() on a
shared memory object or a typed memory object is unspecified.
Da behavior of dis function is unspecified if tha mappin was not
established by a cold-ass lil call ta \fImmap\fP().
.LP
Da \fIflags\fP argument is constructed from tha bitwise-inclusive
OR of one or mo' of tha followin flags defined up in tha \fI<sys/mman.h>\fP
header:
.TS C
center; l2 l.
\fBSymbolic Constant\fP	\fBDescription\fP
MS_ASYNC	Perform asynchronous writes.
MS_SYNC	Perform synchronous writes.
MS_INVALIDATE	Invalidate cached data.
.TE
.LP
When MS_ASYNC is specified, \fImsync\fP() shall return immediately
once all tha write operations is initiated or queued for
servicing; when MS_SYNC is specified, \fImsync\fP() shall not return
until all write operations is completed as defined for
synchronized I/O data integritizzle completion. I aint talkin' bout chicken n' gravy biatch. Either MS_ASYNC or MS_SYNC
is specified yo, but not both.
.LP
When MS_INVALIDATE is specified, \fImsync\fP() shall invalidate all
cached copiez of mapped data dat is inconsistent wit the
permanent storage locations such dat subsequent references shall
obtain data dat was consistent wit tha permanent storage
locations sometime between tha call ta \fImsync\fP() n' tha first
subsequent memory reference ta tha data.
.LP
If \fImsync\fP() causes any write ta a gangbangin' file, tha filez \fIst_ctime\fP
and \fIst_mtime\fP fieldz shall be marked for
update.
.SH RETURN VALUE
.LP
Upon successful completion, \fImsync\fP() shall return 0; otherwise,
it shall return -1 n' set \fIerrno\fP ta indicate the
error.
.SH ERRORS
.LP
Da \fImsync\fP() function shall fail if:
.TP 7
.B EBUSY
Some or all of tha addresses up in tha range startin at \fIaddr\fP and
continuin fo' \fIlen\fP bytes is locked, and
MS_INVALIDATE is specified.
.TP 7
.B EINVAL
Da value of \fIflags\fP is invalid.
.TP 7
.B EINVAL
Da value of \fIaddr\fP aint a multiple of tha page size {PAGESIZE}.
.TP 7
.B ENOMEM
Da addresses up in tha range startin at \fIaddr\fP n' continuin for
\fIlen\fP bytes is outside tha range allowed fo' the
address space of a process or specify one or mo' pages dat is not
mapped.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
Da \fImsync\fP() function is only supported if tha Memory Mapped
Filez option n' tha Synchronized Input n' Output option are
supported, n' thus need not be available on all implementations.
.LP
Da \fImsync\fP() function should be used by programs dat require
a memory object ta be up in a known state; fo' example, in
buildin transaction facilities.
.LP
Normal system activitizzle can cause pages ta be freestyled ta disk. Therefore,
there is no guarantees dat \fImsync\fP() is tha only
control over when pages is or is not freestyled ta disk.
.SH RATIONALE
.LP
Da \fImsync\fP() function writes up data up in a mapped region ta the
permanent storage fo' tha underlyin object. Da call to
\fImsync\fP() ensures data integritizzle of tha file.
.LP
Afta tha data is freestyled out, any cached data may be invalidated
if tha MS_INVALIDATE flag was specified. Y'all KNOW dat shit, muthafucka! This is useful on
systems dat do not support read/write consistency.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fImmap\fP(), \fIsysconf\fP(), tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, \fI<sys/mman.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
