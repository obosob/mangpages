.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "POPEN" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" pimpn 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
popen \- initiate pipe streams ta or from a process
.SH SYNOPSIS
.LP
\fB#include <stdio.h>
.br
.sp
FILE *popen(const char *\fP\fIcommand\fP\fB, const char *\fP\fImode\fP\fB);
\fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIpopen\fP() function shall execute tha command specified by
the strang \fIcommand\fP. Well shiiiit, it shall create a pipe between the
callin program n' tha executed command, n' shall return a pointer
to a stream dat can be used ta either read from or write to
the pipe.
.LP
Da environment of tha executed command shall be as if a cold-ass lil lil pimp process
were pimped within tha \fIpopen\fP() call rockin tha \fIfork\fP()
function, n' tha lil pimp invoked tha \fIsh\fP
utilitizzle rockin tha call:
.sp
.RS
.nf

\fBexecl(\fP\fIshell path\fP\fB, "sh", "-c",\fP \fIcommand\fP\fB, (char *)0);
\fP
.fi
.RE
.LP
where \fIshell path\fP be a unspecified pathname fo' tha \fIsh\fP
utility.
.LP
Da \fIpopen\fP() function shall ensure dat any streams from previous
\fIpopen\fP() calls dat remain open up in tha parent
process is closed up in tha freshly smoked up lil pimp process.
.LP
Da \fImode\fP argument ta \fIpopen\fP() be a strang dat specifies
I/O mode:
.IP " 1." 4
If \fImode\fP is \fIr\fP, when tha lil pimp process is started, its file
descriptor STDOUT_FILENO shall be tha writable end of
the pipe, n' tha file descriptor \fIfileno\fP(\fIstream\fP) up in the
callin process, where \fIstream\fP is tha stream pointer
returned by \fIpopen\fP(), shall be tha readable end of tha pipe.
.LP
.IP " 2." 4
If \fImode\fP is \fIw\fP, when tha lil pimp process is started its file
descriptor STDIN_FILENO shall be tha readable end of the
pipe, n' tha file descriptor \fIfileno\fP(\fIstream\fP) up in tha calling
process, where \fIstream\fP is tha stream pointer
returned by \fIpopen\fP(), shall be tha writable end of tha pipe.
.LP
.IP " 3." 4
If \fImode\fP be any other value, tha result is undefined.
.LP
.LP
Afta \fIpopen\fP(), both tha parent n' tha lil pimp process shall be
capable of executin independently before either
terminates.
.LP
Pipe streams is byte-oriented.
.SH RETURN VALUE
.LP
Upon successful completion, \fIpopen\fP() shall return a pointa to
an open stream dat can be used ta read or write ta the
pipe. Otherwise, it shall return a null pointa n' may set \fIerrno\fP
to indicate tha error.
.SH ERRORS
.LP
Da \fIpopen\fP() function may fail if:
.TP 7
.B EMFILE
{FOPEN_MAX} or {STREAM_MAX} streams is currently open up in tha calling
process.
.TP 7
.B EINVAL
Da \fImode\fP argument is invalid.
.sp
.LP
Da \fIpopen\fP() function may also set \fIerrno\fP joints as busted lyrics about
by \fIfork\fP() or \fIpipe\fP().
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
Since open filez is shared, a mode \fIr\fP command can be used as
an input filta n' a mode \fIw\fP command as a output
filter.
.LP
Buffered readin before openin a input filta may leave tha standard
input of dat filta mispositioned. Y'all KNOW dat shit, muthafucka! Similar problems with
an output filta may be prevented by careful buffer flushing; for
example, wit \fIfflush\fP().
.LP
A stream opened by \fIpopen\fP() should be closed by \fIpclose\fP().
.LP
Da behavior of \fIpopen\fP() is specified fo' jointz of \fImode\fP
of \fIr\fP n' \fIw\fP. Other modes like fuckin \fIrb\fP
and \fIwb\fP might be supported by specific implementations yo, but these
would not be portable features. Note dat historical
implementationz of \fIpopen\fP() only check ta peep if tha straight-up original gangsta character
of \fImode\fP is \fIr\fP. Thus, a \fImode\fP of
\fIrobert tha robot\fP would be treated as \fImode\fP \fIr\fP, and
a \fImode\fP of \fIanythang else\fP would be treated as
\fImode\fP \fIw\fP.
.LP
If tha application calls \fIwaitpid\fP() or \fIwaitid\fP() wit a
\fIpid\fP argument pimped outa than 0, n' it still has a stream that
was called
with \fIpopen\fP() open, it must ensure dat \fIpid\fP do not refer
to tha process started by \fIpopen\fP().
.LP
To determine whether or not tha environment specified up in tha Shell
and Utilitizzles volume of IEEE\ Std\ 1003.1-2001 is
present, use tha function call:
.sp
.RS
.nf

\fBsysconf(_SC_2_VERSION)
\fP
.fi
.RE
.LP
(See \fIsysconf\fP()).
.SH RATIONALE
.LP
Da \fIpopen\fP() function should not be used by programs dat have
set user (or group) ID privileges. Da \fIfork\fP() n' \fIexec\fP
family of functions (except \fIexeclp\fP() n' \fIexecvp\fP()), should
be used
instead. Y'all KNOW dat shit, muthafucka! This prevents any unforeseen manipulation of tha environment
of tha user dat could cause execution of commandz not
anticipated by tha callin program.
.LP
If tha original gangsta n' \fIpopen\fP()ed processes both intend ta read
or write or read n' write a cold-ass lil common file, n' either will be
usin FILE-type C functions ( \fIfread\fP(), \fIfwrite\fP(), n' so
on), tha rulez fo' pluggin file handlez must be observed (see \fIInteraction
of File Descriptors n' Standard I/O Streams\fP ).
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIpclose\fP(), \fIpipe\fP(), \fIsysconf\fP(),
\fIsystem\fP(), tha Base Definitions volume of IEEE\ Std\ 1003.1-2001,
\fI<stdio.h>\fP, tha Shell n' Utilitizzles volume of IEEE\ Std\ 1003.1-2001,
\fIsh\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
