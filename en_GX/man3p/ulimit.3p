.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "ULIMIT" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" ulimit 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
ulimit \- git n' set process limits
.SH SYNOPSIS
.LP
\fB#include <ulimit.h>
.br
.sp
long ulimit(int\fP \fIcmd\fP\fB, ...); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIulimit\fP() function shall control process limits, n' you can put dat on yo' toast. Da process
limits dat can be controlled by dis function include
the maximum size of a single file dat can be freestyled (this is equivalent
to rockin \fIsetrlimit\fP() wit RLIMIT_FSIZE). Da \fIcmd\fP joints,
defined up in \fI<ulimit.h>\fP, include:
.TP 7
UL_GETFSIZE
Return tha file size limit (RLIMIT_FSIZE) of tha process. Da limit
shall be up in unitz of 512-byte blocks n' shall be inherited
by lil pimp processes. Filez of any size can be read. Y'all KNOW dat shit, muthafucka! Da return value
shall be tha integer part of tha soft file size limit divided
by 512. If tha result cannot be represented as a \fBlong\fP, tha result
is unspecified.
.TP 7
UL_SETFSIZE
Set tha file size limit fo' output operationz of tha process ta the
value of tha second argument, taken as a \fBlong\fP,
multiplied by 512. If tha result would overflow a \fBrlim_t\fP, the
actual value set is unspecified. Y'all KNOW dat shit, muthafucka! Any process may decrease its
own limit yo, but only a process wit appropriate privileges may increase
the limit. Da return value shall be tha integer part of the
new file size limit divided by 512.
.sp
.LP
Da \fIulimit\fP() function shall not chizzle tha settin of \fIerrno\fP
if successful.
.LP
As all return joints is permissible up in a successful thang, an
application wishin ta check fo' error thangs should set
\fIerrno\fP ta 0, then call \fIulimit\fP(), and, if it returns -1,
check ta peep if \fIerrno\fP is non-zero.
.SH RETURN VALUE
.LP
Upon successful completion, \fIulimit\fP() shall return tha value
of tha axed limit. Otherwise, -1 shall be returned and
\fIerrno\fP set ta indicate tha error.
.SH ERRORS
.LP
Da \fIulimit\fP() function shall fail n' tha limit shall be unchanged
if:
.TP 7
.B EINVAL
Da \fIcmd\fP argument aint valid.
.TP 7
.B EPERM
A process not havin appropriate privileges attempts ta increase its
file size limit.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIgetrlimit\fP(), \fIsetrlimit\fP(), \fIwrite\fP(), tha Base Definitions
volume of IEEE\ Std\ 1003.1-2001, \fI<ulimit.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
