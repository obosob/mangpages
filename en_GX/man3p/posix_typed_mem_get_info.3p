.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "POSIX_TYPED_MEM_GET_INFO" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" posix_typed_mem_get_info 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
posix_typed_mem_get_info \- query typed memory shiznit (\fBADVANCED
REALTIME\fP)
.SH SYNOPSIS
.LP
\fB#include <sys/mman.h>
.br
.sp
int posix_typed_mem_get_info(int\fP \fIfildes\fP\fB,
.br
\ \ \ \ \ \  struct posix_typed_mem_info *\fP\fIinfo\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIposix_typed_mem_get_info\fP() function shall return, up in the
\fIposix_tmi_length\fP field of the
\fBposix_typed_mem_info\fP structure pointed ta by \fIinfo\fP, the
maximum length which may be successfully allocated by the
typed memory object designated by \fIfildes\fP. This maximum length
shall take tha fuck into account tha flag POSIX_TYPED_MEM_ALLOCATE or
POSIX_TYPED_MEM_ALLOCATE_CONTIG specified when tha typed memory object
represented by \fIfildes\fP was opened. Y'all KNOW dat shit, muthafucka! Da maximum length
is dynamic; therefore, tha value returned is valid only while the
current mappin of tha correspondin typed memory pool remains
unchanged.
.LP
If \fIfildes\fP represents a typed memory object opened wit neither
the POSIX_TYPED_MEM_ALLOCATE flag nor the
POSIX_TYPED_MEM_ALLOCATE_CONTIG flag specified, tha returned value
of \fIinfo\fP->\fIposix_tmi_length\fP is unspecified.
.LP
Da \fIposix_typed_mem_get_info\fP() function may return additional
implementation-defined shiznit up in other fieldz of the
\fBposix_typed_mem_info\fP structure pointed ta by \fIinfo\fP.
.LP
If tha memory object specified by \fIfildes\fP aint a typed memory
object, then tha behavior of dis function is
undefined.
.SH RETURN VALUE
.LP
Upon successful completion, tha \fIposix_typed_mem_get_info\fP() function
shall return zero; otherwise, tha correspondin error
status value shall be returned.
.SH ERRORS
.LP
Da \fIposix_typed_mem_get_info\fP() function shall fail if:
.TP 7
.B EBADF
Da \fIfildes\fP argument aint a valid open file descriptor.
.TP 7
.B ENODEV
Da \fIfildes\fP argument aint connected ta a memory object supported
by dis function.
.sp
.LP
This function shall not return a error code of [EINTR].
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
An application dat need ta allocate a funky-ass block of typed memory with
length dependent upon tha amount of memory currently
available must either query tha typed memory object ta obtain the
amount available, or repeatedly invoke \fImmap\fP() attemptin to
guess a appropriate length. While tha latta method is existin practice
with \fImalloc\fP(), it be awkward n' imprecise. Da \fIposix_typed_mem_get_info\fP()
function allows a application ta immediately determine available
memory. This is particularly blingin fo' typed memory objects
that may up in some cases be scarce resources. Note dat when a typed
memory pool be a gangbangin' finger-lickin' dirty-ass shared resource, some form of mutual-exclusion
or synchronization may be required while typed memory is bein queried
and allocated ta prevent race conditions.
.LP
Da existin \fIfstat\fP() function aint suitable fo' dis purpose.
We realize that
implementations may wish ta provide other attributez of typed memory
objects (for example, alignment requirements, page size, and
so on). Da \fIfstat\fP() function returns a structure which is not
extensible and,
furthermore, gotz nuff substantial shiznit dat is inappropriate
for typed memory objects.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIfstat\fP(), \fImmap\fP(), \fIposix_typed_mem_open\fP(), the
Base Definitions volume of IEEE\ Std\ 1003.1-2001, \fI<sys/mman.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
