.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "PTHREAD_RWLOCK_TRYWRLOCK" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" pthread_rwlock_trywrlock 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
pthread_rwlock_trywrlock, pthread_rwlock_wrlock \- lock a read-write
lock object fo' writing
.SH SYNOPSIS
.LP
\fB#include <pthread.h>
.br
.sp
int pthread_rwlock_trywrlock(pthread_rwlock_t\fP \fI*rwlock\fP\fB);
.br
int pthread_rwlock_wrlock(pthread_rwlock_t\fP \fI*rwlock\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIpthread_rwlock_trywrlock\fP() function shall apply a write
lock like tha \fIpthread_rwlock_wrlock\fP() function, with
the exception dat tha function shall fail if any thread currently
holdz \fIrwlock\fP (for readin or writing).
.LP
Da \fIpthread_rwlock_wrlock\fP() function shall apply a write lock
to tha read-write lock referenced by \fIrwlock\fP. The
callin thread acquires tha write lock if no other thread (reader
or writer) holdz tha read-write lock \fIrwlock\fP. Otherwise,
the thread shall block until it can acquire tha lock. Da calling
thread may deadlock if all up in tha time tha call is juiced it up holdz the
read-write lock (whether a read or write lock).
.LP
Implementations may favor writas over readaz ta avoid writa starvation.
.LP
Results is undefined if any of these functions is called wit an
uninitialized read-write lock.
.LP
If a signal is served up ta a thread waitin fo' a read-write lock
for writing, upon return from tha signal handlez tha thread
resumes waitin fo' tha read-write lock fo' freestylin as if dat shiznit was not
interrupted.
.SH RETURN VALUE
.LP
Da \fIpthread_rwlock_trywrlock\fP() function shall return zero if
the lock fo' freestylin on tha read-write lock object
referenced by \fIrwlock\fP be acquired. Y'all KNOW dat shit, muthafucka! Otherwise, a error number
shall be moonwalked back ta indicate tha error.
.LP
If successful, tha \fIpthread_rwlock_wrlock\fP() function shall return
zero; otherwise, a error number shall be returned to
indicate tha error.
.SH ERRORS
.LP
Da \fIpthread_rwlock_trywrlock\fP() function shall fail if:
.TP 7
.B EBUSY
Da read-write lock could not be acquired fo' freestylin cuz it was
already locked fo' readin or writing.
.sp
.LP
Da \fIpthread_rwlock_trywrlock\fP() n' \fIpthread_rwlock_wrlock\fP()
functions may fail if:
.TP 7
.B EINVAL
Da value specified by \fIrwlock\fP do not refer ta a initialized
read-write lock object.
.sp
.LP
Da \fIpthread_rwlock_wrlock\fP() function may fail if:
.TP 7
.B EDEADLK
Da current thread already owns tha read-write lock fo' freestylin or
reading.
.sp
.LP
These functions shall not return a error code of [EINTR].
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
Applications rockin these functions may be subject ta prioritizzle inversion,
as discussed up in tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, Section 3.285, Prioritizzle Inversion.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIpthread_rwlock_destroy\fP(), \fIpthread_rwlock_rdlock\fP(), \fIpthread_rwlock_timedrdlock\fP(),
\fIpthread_rwlock_timedwrlock\fP(), \fIpthread_rwlock_tryrdlock\fP(),
\fIpthread_rwlock_unlock\fP(), tha Base Definitions volume of IEEE\ Std\ 1003.1-2001,
\fI<pthread.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
