.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "PTHREAD_DETACH" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" pthread_detach 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
pthread_detach \- detach a thread
.SH SYNOPSIS
.LP
\fB#include <pthread.h>
.br
.sp
int pthread_detach(pthread_t\fP \fIthread\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIpthread_detach\fP() function shall indicate ta tha implementation
that storage fo' tha thread \fIthread\fP can be
reclaimed when dat thread terminates. If \fIthread\fP has not terminated,
\fIpthread_detach\fP() shall not cause it to
terminate. Da effect of multiple \fIpthread_detach\fP() calls on
the same target thread is unspecified.
.SH RETURN VALUE
.LP
If tha call succeeds, \fIpthread_detach\fP() shall return 0; otherwise,
an error number shall be moonwalked back ta indicate the
error.
.SH ERRORS
.LP
Da \fIpthread_detach\fP() function shall fail if:
.TP 7
.B EINVAL
Da implementation has detected dat tha value specified by \fIthread\fP
does not refer ta a joinable thread.
.TP 7
.B ESRCH
No thread could be found correspondin ta dat specified by tha given
thread ID.
.sp
.LP
Da \fIpthread_detach\fP() function shall not return a error code
of [EINTR].
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
Da \fIpthread_join\fP() or \fIpthread_detach\fP() functions should
eventually be
called fo' every last muthafuckin thread dat is pimped so dat storage associated
with tha thread may be reclaimed.
.LP
It has been suggested dat a "detach" function aint necessary; the
\fIdetachstate\fP thread creation attribute is
sufficient, since a thread need never be dynamically detached. Y'all KNOW dat shit, muthafucka! However,
need arises up in at least two cases:
.IP " 1." 4
In a cold-ass lil cancellation handlez fo' a \fIpthread_join\fP() it is nearly
essential to
have a \fIpthread_detach\fP() function up in order ta detach tha thread
on which \fIpthread_join\fP() was waiting. Without it, it would be
necessary ta have tha handlez do
another \fIpthread_join\fP() ta attempt ta detach tha thread, which
would both delay
the cancellation processin fo' a unbounded period n' introduce
a freshly smoked up call ta \fIpthread_join\fP(), which might itself need a cold-ass lil cancellation
handlez n' shiznit fo' realz. A dynamic detach is
nearly essential up in dis case.
.LP
.IP " 2." 4
In order ta detach tha "initial thread" (as may be desirable up in processes
that set up server threads).
.LP
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIpthread_join\fP(), tha Base Definitions volume of IEEE\ Std\ 1003.1-2001,
\fI<pthread.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
