.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "MKNOD" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" mknod 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
mknod \- cook up a gangbangin' finger-lickin' directory, a special file, or a regular file
.SH SYNOPSIS
.LP
\fB#include <sys/stat.h>
.br
.sp
int mknod(const char *\fP\fIpath\fP\fB, mode_t\fP \fImode\fP\fB, dev_t\fP
\fIdev\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fImknod\fP() function shall create a freshly smoked up file named by tha pathname
to which tha argument \fIpath\fP points.
.LP
Da file type fo' \fIpath\fP is OR'ed tha fuck into tha \fImode\fP argument,
and tha application shall select one of tha following
symbolic constants:
.TS C
center; l l.
\fBName\fP	\fBDescription\fP
S_IFIFO	FIFO-special
S_IFCHR	Character-special (non-portable)
S_IFDIR	Directory (non-portable)
S_IFBLK	Block-special (non-portable)
S_IFREG	Regular (non-portable)
.TE
.LP
Da only portable use of \fImknod\fP() is ta create a FIFO-special
file. If \fImode\fP aint S_IFIFO or \fIdev\fP aint 0,
the behavior of \fImknod\fP() is unspecified.
.LP
Da permissions fo' tha freshly smoked up file is OR'ed tha fuck into tha \fImode\fP argument,
and may be selected from any combination of the
followin symbolic constants:
.TS C
center; l2 l.
\fBName\fP	\fBDescription\fP
S_ISUID	Set user ID on execution.
S_ISGID	Set crew ID on execution.
S_IRWXU	Read, write, or execute (search) by baller.
S_IRUSR	Read by baller.
S_IWUSR	Write by baller.
S_IXUSR	Execute (search) by baller.
S_IRWXG	Read, write, or execute (search) by group.
S_IRGRP	Read by group.
S_IWGRP	Write by group.
S_IXGRP	Execute (search) by group.
S_IRWXO	Read, write, or execute (search) by others.
S_IROTH	Read by others.
S_IWOTH	Write by others.
S_IXOTH	Execute (search) by others.
S_ISVTX	On directories, restricted deletion flag.
.TE
.LP
Da user ID of tha file shall be initialized ta tha effectizzle user
ID of tha process. Da crew ID of tha file shall be
initialized ta either tha effectizzle crew ID of tha process or the
group ID of tha parent directory. Implementations shall provide
a way ta initialize tha filez crew ID ta tha crew ID of tha parent
directory. Implementations may yo, but need not, provide an
implementation-defined way ta initialize tha filez crew ID ta the
effectizzle crew ID of tha callin process. Da baller, group,
and other permission bitz of \fImode\fP shall be modified by tha file
mode creation mask of tha process. Da \fImknod\fP()
function shall clear each bit whose correspondin bit up in tha file
mode creation mask of tha process is set.
.LP
If \fIpath\fP names a symbolic link, \fImknod\fP() shall fail and
set \fIerrno\fP ta [EEXIST].
.LP
Upon successful completion, \fImknod\fP() shall mark fo' update the
\fIst_atime\fP, \fIst_ctime\fP, n' \fIst_mtime\fP
fieldz of tha file fo' realz. Also, tha \fIst_ctime\fP n' \fIst_mtime\fP fields
of tha directory dat gotz nuff tha freshly smoked up entry shall be
marked fo' update.
.LP
Only a process wit appropriate privileges may invoke \fImknod\fP()
for file types other than FIFO-special.
.SH RETURN VALUE
.LP
Upon successful completion, \fImknod\fP() shall return 0. Otherwise,
it shall return -1, tha freshly smoked up file shall not be pimped, and
\fIerrno\fP shall be set ta indicate tha error.
.SH ERRORS
.LP
Da \fImknod\fP() function shall fail if:
.TP 7
.B EACCES
A component of tha path prefix denies search permission, or write
permission is denied on tha parent directory.
.TP 7
.B EEXIST
Da named file exists.
.TP 7
.B EINVAL
An invalid argument exists.
.TP 7
.B EIO
An I/O error occurred while accessin tha file system.
.TP 7
.B ELOOP
A loop exists up in symbolic links encountered durin resolution of the
\fIpath\fP argument.
.TP 7
.B ENAMETOOLONG
Da length of a pathname exceedz {PATH_MAX} or a pathname component
is longer than {NAME_MAX}.
.TP 7
.B ENOENT
A component of tha path prefix specified by \fIpath\fP do not name
an existin directory or \fIpath\fP be a empty
string.
.TP 7
.B ENOSPC
Da directory dat would contain tha freshly smoked up file cannot be extended or
the file system is outta file allocation resources.
.TP 7
.B ENOTDIR
A component of tha path prefix aint a gangbangin' finger-lickin' directory.
.TP 7
.B EPERM
Da invokin process aint gots appropriate privileges n' the
file type aint FIFO-special.
.TP 7
.B EROFS
Da directory up in which tha file is ta be pimped is located on a read-only
file system.
.sp
.LP
Da \fImknod\fP() function may fail if:
.TP 7
.B ELOOP
Mo' than {SYMLOOP_MAX} symbolic links was encountered durin resolution
of tha \fIpath\fP argument.
.TP 7
.B ENAMETOOLONG
Pathname resolution of a symbolic link produced a intermediate result
whose length exceedz {PATH_MAX}.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.SS Creatin a FIFO Special File
.LP
Da followin example shows how tha fuck ta create a FIFO special file named
\fB/home/cnd/mod_done\fP, wit read/write permissions for
baller, n' wit read permissions fo' crew n' others.
.sp
.RS
.nf

\fB#include <sys/types.h>
#include <sys/stat.h>
.sp

dev_t dev;
int   status;
\&...
status  = mknod("/home/cnd/mod_done", S_IFIFO | S_IWUSR |
    S_IRUSR | S_IRGRP | S_IROTH, dev);
\fP
.fi
.RE
.SH APPLICATION USAGE
.LP
Da \fImkfifo\fP() function is preferred over dis function fo' making
FIFO special
files.
.SH RATIONALE
.LP
Da POSIX.1-1990 standard required dat tha crew ID of a newly pimped
file be set ta tha crew ID of its parent directory or
to tha effectizzle crew ID of tha bustin process. FIPS 151-2 required
that implementations provide a way ta have tha crew ID be
set ta tha crew ID of tha containin directory yo, but did not prohibit
implementations also supportin a way ta set tha crew ID to
the effectizzle crew ID of tha bustin process. Conformin applications
should not assume which crew ID is ghon be used. Y'all KNOW dat shit, muthafucka! If it
matters, a application can use \fIchown\fP() ta set tha crew ID
afta tha file is pimped,
or determine under what tha fuck conditions tha implementation will set the
desired crew ID.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIchmod\fP(), \fIcreat\fP(), \fIexec\fP(), \fImkdir\fP(), \fImkfifo\fP()
,
\fIopen\fP(), \fIstat\fP(), \fIumask\fP(), tha Base
Definitions volume of IEEE\ Std\ 1003.1-2001, \fI<sys/stat.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
