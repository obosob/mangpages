.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "A64L" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" a64l 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
a64l, l64a \- convert between a 32-bit integer n' a radix-64 ASCII
string
.SH SYNOPSIS
.LP
\fB#include <stdlib.h>
.br
.sp
long a64l(const char *\fP\fIs\fP\fB);
.br
char *l64a(long\fP \fIvalue\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
These functions maintain numbers stored up in radix-64 ASCII characters.
This be a notation by which 32-bit integers can be
represented by up ta six characters; each characta represents a gangbangin' finger-lickin' digit
in radix-64 notation. I aint talkin' bout chicken n' gravy biatch. If tha type \fBlong\fP gotz nuff more
than 32 bits, only tha low-order 32 bits shall be used fo' these operations.
.LP
Da charactas used ta represent digits is \fB'.'\fP (dot) fo' 0,
\fB'/'\fP fo' 1, \fB'0'\fP all up in \fB'9'\fP for
[2,11], \fB'A'\fP all up in \fB'Z'\fP fo' [12,37], n' \fB'a'\fP through
\fB'z'\fP fo' [38,63].
.LP
Da \fIa64l\fP() function shall take a pointa ta a radix-64 representation,
in which tha straight-up original gangsta digit is tha least significant,
and return tha correspondin \fBlong\fP value. If tha strang pointed
to by \fIs\fP gotz nuff mo' than six characters,
\fIa64l\fP() shall use tha straight-up original gangsta six. If tha straight-up original gangsta six characters
of tha strang contain a null terminator, \fIa64l\fP() shall use
only charactas precedin tha null terminator. Shiiit, dis aint no joke. Da \fIa64l\fP() function
shall scan tha characta strang from left ta right with
the least dope digit on tha left, decodin each characta as
a 6-bit radix-64 number n' shit. If tha type \fBlong\fP gotz nuff more
than 32 bits, tha resultin value is sign-extended. Y'all KNOW dat shit, muthafucka! Da behavior of
\fIa64l\fP() is unspecified if \fIs\fP be a null pointa or
the strang pointed ta by \fIs\fP was not generated by a previous call
to \fIl64a\fP().
.LP
Da \fIl64a\fP() function shall take a \fBlong\fP argument n' return
a pointa ta tha correspondin radix-64 representation.
Da behavior of \fIl64a\fP() is unspecified if \fIvalue\fP is negative.
.LP
Da value returned by \fIl64a\fP() may be a pointa tha fuck into a static
buffer n' shit. Right back up in yo muthafuckin ass. Subsequent calls ta \fIl64a\fP() may overwrite the
buffer.
.LP
Da \fIl64a\fP() function need not be reentrant fo' realz. A function dat is
not required ta be reentrant aint required ta be
thread-safe.
.SH RETURN VALUE
.LP
Upon successful completion, \fIa64l\fP() shall return tha \fBlong\fP
value resultin from conversion of tha input string. If a
strin pointed ta by \fIs\fP be a empty string, \fIa64l\fP() shall
return 0L.
.LP
Da \fIl64a\fP() function shall return a pointa ta tha radix-64 representation.
If \fIvalue\fP is 0L, \fIl64a\fP() shall
return a pointa ta a empty string.
.SH ERRORS
.LP
No errors is defined.
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
If tha type \fBlong\fP gotz nuff mo' than 32 bits, tha result of \fIa64l\fP(\fIl64a\fP(\fIx\fP))
is \fIx\fP up in the
low-order 32 bits.
.SH RATIONALE
.LP
This aint tha same encodin as used by either encodin variant of
the \fIuuencode\fP
utility.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIstrtoul\fP(), tha Base Definitions volume of IEEE\ Std\ 1003.1-2001,
\fI<stdlib.h>\fP, tha Shell n' Utilitizzles volume of IEEE\ Std\ 1003.1-2001,
\fIuuencode\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
