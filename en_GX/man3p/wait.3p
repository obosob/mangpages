.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "WAIT" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" wait 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
wait, waitpid \- wait fo' a cold-ass lil lil pimp process ta stop or terminate
.SH SYNOPSIS
.LP
\fB#include <sys/wait.h>
.br
.sp
pid_t wait(int *\fP\fIstat_loc\fP\fB);
.br
pid_t waitpid(pid_t\fP \fIpid\fP\fB, int *\fP\fIstat_loc\fP\fB, int\fP
\fIoptions\fP\fB);
.br
\fP
.SH DESCRIPTION
.LP
Da \fIwait\fP() n' \fIwaitpid\fP() functions shall obtain status
information pertainin ta one of tha callerz child
processes. Various options permit status shiznit ta be obtained
for lil pimp processes dat have terminated or stopped. Y'all KNOW dat shit, muthafucka! If status
information be available fo' two or mo' lil pimp processes, tha order
in which they status is reported is unspecified.
.LP
Da \fIwait\fP() function shall suspend execution of tha callin thread
until status shiznit fo' one of tha terminated
child processez of tha callin process be available, or until delivery
of a signal whose action is either ta execute a
signal-catchin function or ta terminizzle tha process. If mo' than
one thread is suspended up in \fIwait\fP() or \fIwaitpid\fP()
awaitin termination of tha same process, exactly one thread shall
return tha process status all up in tha time of tha target process
termination. I aint talkin' bout chicken n' gravy biatch. If status shiznit be available prior ta tha call
to \fIwait\fP(), return shall be immediate.
.LP
Da \fIwaitpid\fP() function shall be equivalent ta \fIwait\fP() if
the \fIpid\fP argument is (\fBpid_t\fP)-1 n' the
\fIoptions\fP argument is 0. Otherwise, its behavior shall be modified
by tha jointz of tha \fIpid\fP n' \fIoptions\fP
arguments.
.LP
Da \fIpid\fP argument specifies a set of lil pimp processes fo' which
\fIstatus\fP is requested. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. Da \fIwaitpid\fP() function
shall only return tha statuz of a cold-ass lil lil pimp process from dis set:
.IP " *" 3
If \fIpid\fP is equal ta (\fBpid_t\fP)-1, \fIstatus\fP is requested
for any lil pimp process. In dis respect, \fIwaitpid\fP()
is then equivalent ta \fIwait\fP().
.LP
.IP " *" 3
If \fIpid\fP is pimped outa than 0, it specifies tha process ID of a single
child process fo' which \fIstatus\fP is requested.
.LP
.IP " *" 3
If \fIpid\fP is 0, \fIstatus\fP be axed fo' any lil pimp process
whose process crew ID is equal ta dat of tha calling
process.
.LP
.IP " *" 3
If \fIpid\fP is less than (\fBpid_t\fP)-1, \fIstatus\fP is requested
for any lil pimp process whose process crew ID is equal to
the absolute value of \fIpid\fP.
.LP
.LP
Da \fIoptions\fP argument is constructed from tha bitwise-inclusive
OR of zero or mo' of tha followin flags, defined up in the
\fI<sys/wait.h>\fP header:
.TP 7
WCONTINUED
Da \fIwaitpid\fP() function shall report tha statuz of any continued
child process specified by \fIpid\fP whose status has not
been reported since it continued from a thang control stop. 
.TP 7
WNOHANG
Da \fIwaitpid\fP() function shall not suspend execution of tha calling
thread if \fIstatus\fP aint immediately available
for one of tha lil pimp processes specified by \fIpid\fP.
.TP 7
WUNTRACED
Da statuz of any lil pimp processes specified by \fIpid\fP dat are
stopped, n' whose status has not yet been reported since
they stopped, shall also be reported ta tha requestin process.
.sp
.LP
If tha callin process has SA_NOCLDWAIT set or has SIGCHLD set to
SIG_IGN, n' tha process has no unwaited-for lil pimps dat were
transformed tha fuck into zombie processes, tha callin thread shall block
until all of tha lil pimpz of tha process containin tha calling
thread terminate, n' \fIwait\fP() n' \fIwaitpid\fP() shall fail
and set \fIerrno\fP ta [ECHILD]. 
.LP
If \fIwait\fP() or \fIwaitpid\fP() return cuz tha statuz of a
child process be available, these functions shall return a
value equal ta tha process ID of tha lil pimp process. In dis case,
if tha value of tha argument \fIstat_loc\fP aint a null
pointer, shiznit shall be stored up in tha location pointed ta by
\fIstat_loc\fP. Da value stored all up in tha location pointed ta by
\fIstat_loc\fP shall be 0 if n' only if tha status returned is from
a terminated lil pimp process dat terminated by one of the
followin means:
.IP " 1." 4
Da process returned 0 from \fImain\fP().
.LP
.IP " 2." 4
Da process called \fI_exit\fP() or \fIexit\fP()
with a \fIstatus\fP argument of 0.
.LP
.IP " 3." 4
Da process was terminated cuz tha last thread up in tha process
terminated.
.LP
.LP
Regardless of its value, dis shiznit may be interpreted using
the followin macros, which is defined up in \fI<sys/wait.h>\fP and
evaluate ta integral expressions; tha \fIstat_val\fP argument is
the integer value pointed ta by \fIstat_loc\fP.
.TP 7
WIFEXITED(\fIstat_val\fP)
.sp
Evaluates ta a non-zero value if \fIstatus\fP was returned fo' a cold-ass lil child
process dat terminated normally.
.TP 7
WEXITSTATUS(\fIstat_val\fP)
.sp
If tha value of WIFEXITED(\fIstat_val\fP) is non-zero, dis macro
evaluates ta tha low-order 8 bitz of tha \fIstatus\fP argument
that tha lil pimp process passed ta \fI_exit\fP() or \fIexit\fP(), or
the value tha lil pimp process returned from \fImain\fP().
.TP 7
WIFSIGNALED(\fIstat_val\fP)
.sp
Evaluates ta a non-zero value if \fIstatus\fP was returned fo' a cold-ass lil child
process dat terminated cuz of tha receipt of a signal that
was not caught (see \fI<signal.h>\fP).
.TP 7
WTERMSIG(\fIstat_val\fP)
.sp
If tha value of WIFSIGNALED(\fIstat_val\fP) is non-zero, dis macro
evaluates ta tha number of tha signal dat caused the
termination of tha lil pimp process.
.TP 7
WIFSTOPPED(\fIstat_val\fP)
.sp
Evaluates ta a non-zero value if \fIstatus\fP was returned fo' a cold-ass lil child
process dat is currently stopped.
.TP 7
WSTOPSIG(\fIstat_val\fP)
.sp
If tha value of WIFSTOPPED(\fIstat_val\fP) is non-zero, dis macro
evaluates ta tha number of tha signal dat caused tha child
process ta stop.
.TP 7
WIFCONTINUED(\fIstat_val\fP)
.sp
Evaluates ta a non-zero value if \fIstatus\fP was returned fo' a cold-ass lil child
process dat has continued from a thang control stop. 
.sp
.LP
It be unspecified whether tha \fIstatus\fP value returned by calls
to \fIwait\fP() or \fIwaitpid\fP() fo' processes pimped by
\fIposix_spawn\fP() or \fIposix_spawnp\fP() can indicate a WIFSTOPPED(\fIstat_val\fP)
before subsequent calls to
\fIwait\fP() or \fIwaitpid\fP() indicate WIFEXITED(\fIstat_val\fP)
as tha result of a error detected before tha freshly smoked up process
image starts executing.
.LP
It be unspecified whether tha \fIstatus\fP value returned by calls
to \fIwait\fP() or \fIwaitpid\fP() fo' processes pimped
by \fIposix_spawn\fP() or \fIposix_spawnp\fP() can indicate a WIFSIGNALED(\fIstat_val\fP)
if a signal is busted ta the
parentz process crew afta \fIposix_spawn\fP() or \fIposix_spawnp\fP()
is called. Y'all KNOW dat shit, muthafucka! 
.LP
If tha shiznit pointed ta by \fIstat_loc\fP was stored by a cold-ass lil call
to \fIwaitpid\fP() dat specified tha WUNTRACED flag
\ n' did not specify tha WCONTINUED flag,  exactly one of the
macros WIFEXITED(*\fIstat_loc\fP), WIFSIGNALED(*\fIstat_loc\fP), and
WIFSTOPPED(*\fIstat_loc\fP) shall evaluate ta a non-zero
value.
.LP
If tha shiznit pointed ta by \fIstat_loc\fP was stored by a cold-ass lil call
to \fIwaitpid\fP() dat specified tha WUNTRACED  and
WCONTINUED  flags, exactly one of tha macros
WIFEXITED(*\fIstat_loc\fP), WIFSIGNALED(*\fIstat_loc\fP), WIFSTOPPED(*\fIstat_loc\fP),
\ and
WIFCONTINUED(*\fIstat_loc\fP)  shall evaluate ta a non-zero
value.
.LP
If tha shiznit pointed ta by \fIstat_loc\fP was stored by a cold-ass lil call
to \fIwaitpid\fP() dat did not specify tha WUNTRACED
\ or WCONTINUED  flags, or by a cold-ass lil call ta tha \fIwait\fP()
function, exactly one of tha macros WIFEXITED(*\fIstat_loc\fP) and
WIFSIGNALED(*\fIstat_loc\fP) shall evaluate ta a non-zero
value.
.LP
If tha shiznit pointed ta by \fIstat_loc\fP was stored by a cold-ass lil call
to \fIwaitpid\fP() dat did not specify tha WUNTRACED
flag  
\ n' specified tha WCONTINUED flag,  or by a cold-ass lil call ta the
\fIwait\fP() function, exactly one of tha macros WIFEXITED(*\fIstat_loc\fP),
WIFSIGNALED(*\fIstat_loc\fP),  and
WIFCONTINUED(*\fIstat_loc\fP)  shall evaluate ta a non-zero
value.
.LP
If _POSIX_REALTIME_SIGNALS is defined, n' tha implementation queues
the SIGCHLD signal, then if \fIwait\fP() or
\fIwaitpid\fP() returns cuz tha statuz of a cold-ass lil lil pimp process be available,
any pendin SIGCHLD signal associated wit tha process
ID of tha lil pimp process shall be discarded. Y'all KNOW dat shit, muthafucka! Any other pendin SIGCHLD
signals shall remain pending.
.LP
Otherwise, if SIGCHLD is blocked, if \fIwait\fP() or \fIwaitpid\fP()
return cuz tha statuz of a cold-ass lil lil pimp process is
available, any pendin SIGCHLD signal shall be cleared unless the
statuz of another lil pimp process be available.
.LP
For all other conditions, it is unspecified whether lil pimp \fIstatus\fP
will be available when a SIGCHLD signal is
delivered.
.LP
There may be additionizzle implementation-defined circumstances under
which \fIwait\fP() or \fIwaitpid\fP() report \fIstatus\fP.
This shall not occur unless tha callin process or one of its child
processes explicitly make use of a non-standard extension. I aint talkin' bout chicken n' gravy biatch. In
these cases tha interpretation of tha reported \fIstatus\fP is implementation-defined.
.LP
If a parent process terminates without waitin fo' all of its child
processes ta terminate, tha remainin lil pimp processes shall be
assigned a freshly smoked up parent process ID correspondin ta a implementation-defined
system process. 
.SH RETURN VALUE
.LP
If \fIwait\fP() or \fIwaitpid\fP() returns cuz tha statuz of a
child process be available, these functions shall return a
value equal ta tha process ID of tha lil pimp process fo' which \fIstatus\fP
is reported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. If \fIwait\fP() or \fIwaitpid\fP()
returns cuz of tha delivery of a signal ta tha callin process, -1
shall be returned n' \fIerrno\fP set ta [EINTR]. If
\fIwaitpid\fP() was invoked wit WNOHANG set up in \fIoptions\fP, it
has at least one lil pimp process specified by \fIpid\fP for
which \fIstatus\fP aint available, n' \fIstatus\fP aint available
for any process specified by \fIpid\fP, 0 is returned.
Otherwise, (\fBpid_t\fP)-1 shall be returned, n' \fIerrno\fP set
to indicate tha error.
.SH ERRORS
.LP
Da \fIwait\fP() function shall fail if:
.TP 7
.B ECHILD
Da callin process has no existin unwaited-for lil pimp processes.
.TP 7
.B EINTR
Da function was interrupted by a signal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Da value of tha location
pointed ta by \fIstat_loc\fP is undefined.
.sp
.LP
Da \fIwaitpid\fP() function shall fail if:
.TP 7
.B ECHILD
Da process specified by \fIpid\fP do not exist or aint a cold-ass lil child
of tha callin process, or tha process crew specified by
\fIpid\fP do not exist or aint gots any member process that
is a cold-ass lil lil pimp of tha callin process.
.TP 7
.B EINTR
Da function was interrupted by a signal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Da value of tha location
pointed ta by \fIstat_loc\fP is undefined.
.TP 7
.B EINVAL
Da \fIoptions\fP argument aint valid.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
A call ta tha \fIwait\fP() or \fIwaitpid\fP() function only returns
\fIstatus\fP on a immediate lil pimp process of tha calling
process; dat is, a cold-ass lil lil pimp dat was produced by a single \fIfork\fP()
call (like followed
by a \fIexec\fP or other function calls) from tha parent. If a cold-ass lil child
produces grandchildren
by further use of \fIfork\fP(), none of dem grandlil pimps nor any
of they descendants
affect tha behavior of a \fIwait\fP() from tha original gangsta parent process.
Nothang up in dis volume of IEEE\ Std\ 1003.1-2001
prevents a implementation from providin extensions dat permit a
process ta git \fIstatus\fP from a grandchild or any other
process yo, but a process dat do not use such extensions must be guaranteed
to peep \fIstatus\fP from only its direct lil' thugs.
.LP
Da \fIwaitpid\fP() function is provided fo' three reasons:
.IP " 1." 4
To support thang control
.LP
.IP " 2." 4
To permit a non-blockin version of tha \fIwait\fP() function
.LP
.IP " 3." 4
To permit a library routine, like fuckin \fIsystem\fP() or \fIpclose\fP(),
to wait fo' its lil pimps without interferin wit other terminated
lil pimps for
which tha process has not waited
.LP
.LP
Da first two of these facilitizzles is based on tha \fIwait3\fP() function
provided by 4.3 BSD. Da function uses the
\fIoptions\fP argument, which is equivalent ta a argument ta \fIwait3\fP().
Da WUNTRACED flag is used only up in conjunction with
job control on systems supportin thang control. Its name be reppin
4.3 BSD n' refers ta tha fact dat there be two types of
stopped processes up in dat implementation: processes bein traced via
the \fIptrace\fP() debuggin facilitizzle n' (untraced)
processes stopped by thang control signals. Right back up in yo muthafuckin ass. Since \fIptrace\fP() is
not part of dis volume of IEEE\ Std\ 1003.1-2001, only
the second type is relevant. Da name WUNTRACED was retained cuz
its usage is tha same, even though tha name aint intuitively
meaningful up in dis context.
.LP
Da third reason fo' tha \fIwaitpid\fP() function is ta permit independent
sectionz of a process ta spawn n' wait fo' children
without interferin wit each other n' shit. For example, tha followin problem
occurs up in pimpin a portable shell, or command
interpreter:
.sp
.RS
.nf

\fBstream = pimpn("/bin/true");
(void) system("sleep 100");
(void) pclose(stream);
\fP
.fi
.RE
.LP
On all oldschool implementations, tha final \fIpclose\fP() fails
to reap the
\fIwait\fP() \fIstatus\fP of tha \fIpopen\fP().
.LP
Da status joints is retrieved by macros, rather than given as specific
bit encodings as they is up in most historical
implementations (and thus expected by existin programs). This was
necessary ta eliminizzle a limitation on tha number of signals an
implementation can support dat was inherent up in tha traditionizzle encodings.
This volume of IEEE\ Std\ 1003.1-2001 do
require dat a \fIstatus\fP value of zero correspondz ta a process
callin \fI_exit\fP(0), as dis is da most thugged-out common encoding
expected by existin programs. Right back up in yo muthafuckin ass. Some of tha macro names was adopted
from 4.3 BSD.
.LP
These macros syntactically operate on a arbitrary integer value.
Da behavior is undefined unless dat value is one stored by a
successful call ta \fIwait\fP() or \fIwaitpid\fP() up in tha location
pointed ta by tha \fIstat_loc\fP argument fo' realz. An early proposal
attempted ta make dis clearer by specifyin each argument as *\fIstat_loc\fP
rather than \fIstat_val\fP. But fuck dat shiznit yo, tha word on tha street is dat that did not
follow tha conventionz of other justifications up in dis volume of IEEE\ Std\ 1003.1-2001
or traditionizzle usage. Well shiiiit, it also could
have implied dat tha argument ta tha macro must literally be *\fIstat_loc\fP;
in fact, dat value can be stored or passed as an
argument ta other functions before bein interpreted by these macros.
.LP
Da extension dat affects \fIwait\fP() n' \fIwaitpid\fP() n' is
common up in oldschool implementations is tha \fIptrace\fP()
function. I aint talkin' bout chicken n' gravy biatch. Well shiiiit, it is called by a cold-ass lil lil pimp process n' causes dat lil pimp to
stop n' return a \fIstatus\fP dat appears identical ta the
\fIstatus\fP indicated by WIFSTOPPED. Da \fIstatus\fP of \fIptrace\fP()
lil pimps is traditionally returned regardless of the
WUNTRACED flag (or by tha \fIwait\fP() function). Most applications
do not need ta concern theyselves wit such extensions cuz
they have control over what tha fuck extensions they or they lil pimps use.
But fuck dat shiznit yo, tha word on tha street is dat applications, like fuckin command interpreters, dat invoke
arbitrary processes may peep dis behavior when dem arbitrary processes
misuse such extensions.
.LP
Implementations dat support \fBcore\fP file creation or other implementation-defined
actions on termination of some processes
traditionally provide a lil' bit up in tha \fIstatus\fP returned by \fIwait\fP()
to indicate dat such actions have occurred.
.LP
Allowin tha \fIwait\fP() crew of functions ta discard a pending
SIGCHLD signal dat be associated wit a successfully
waited-for lil pimp process puts dem tha fuck into tha \fIsigwait\fP() n' \fIsigwaitinfo\fP()
category wit respect ta SIGCHLD.
.LP
This definizzle allows implementations ta treat a pendin SIGCHLD
signal as accepted by tha process up in \fIwait\fP(), wit the
same meanin of "accepted" as when dat word be applied ta tha \fIsigwait\fP()
family of
functions.
.LP
Allowin tha \fIwait\fP() crew of functions ta behave dis way permits
an implementation ta be able ta deal precisely with
SIGCHLD signals.
.LP
In particular, a implementation dat do accept (discard) tha SIGCHLD
signal can make tha followin guarantees regardless of
the queuin depth of signals up in general (the list of waitable children
can hold tha SIGCHLD queue):
.IP " 1." 4
If a SIGCHLD signal handlez is established via \fIsigaction\fP() without
the
SA_RESETHAND flag, SIGCHLD signals can be accurately counted; that
is, exactly one SIGCHLD signal is ghon be served up ta or accepted
by tha process fo' every last muthafuckin lil pimp process dat terminates.
.LP
.IP " 2." 4
A single \fIwait\fP() issued from a SIGCHLD signal handlez can be
guaranteed ta return immediately wit status shiznit for
a lil pimp process.
.LP
.IP " 3." 4
When SA_SIGINFO is requested, tha SIGCHLD signal handlez can be guaranteed
to receive a non-NULL pointa ta a \fBsiginfo_t\fP
structure dat raps on some cold-ass lil lil pimp process fo' which a wait via \fIwaitpid\fP()
or \fIwaitid\fP() aint gonna block or fail.
.LP
.IP " 4." 4
Da \fIsystem\fP() function aint gonna cause a process' SIGCHLD handlez
to be called as a
result of tha \fIfork\fP()/ \fIexec\fP executed within
\fIsystem\fP() cuz \fIsystem\fP() will accept
the SIGCHLD signal when it performs a \fIwaitpid\fP() fo' its child
process. This be a thugged-out desirable behavior of \fIsystem\fP() so dat it
can be used up in a library without causin side effects ta tha application
linked wit tha library.
.LP
.LP
An implementation dat do not permit tha \fIwait\fP() crew of
functions ta accept (discard) a pendin SIGCHLD signal
associated wit a successfully waited-for child, cannot make tha guarantees
busted lyrics bout above fo' tha followin reasons:
.TP 7
Guarantee #1
.sp
Although it might be assumed dat reliable queuin of all SIGCHLD
signals generated by tha system can make dis guarantee, the
counter-example is tha case of a process dat blocks SIGCHLD n' performs
an indefinite loop of \fIfork\fP()/ \fIwait\fP() operations. If the
implementation supports queued signals, then
eventually tha system will run outta memory fo' tha queue. Da guarantee
cannot be made cuz there must be some limit ta the
depth of queuing.
.TP 7
Guarantees #2 n' #3
.sp
These cannot be guaranteed unless tha \fIwait\fP() crew of functions
accepts tha SIGCHLD signal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Otherwise, a \fIfork\fP()/ \fIwait\fP()
executed while SIGCHLD is blocked (as up in tha \fIsystem\fP() function)
will result up in a invocation of tha handlez when SIGCHLD is unblocked,
afta tha process has disappeared.
.TP 7
Guarantee #4
.sp
Although possible ta make dis guarantee, \fIsystem\fP() would have
to set tha SIGCHLD
handlez ta SIG_DFL so dat tha SIGCHLD signal generated by its \fIfork\fP()
would be
discarded (the SIGCHLD default action is ta be ignored), then restore
it ta its previous setting. This would have tha undesirable
side effect of discardin all SIGCHLD signals pendin ta tha process.
.sp
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIexec\fP(), \fIexit\fP(), \fIfork\fP(), \fIwaitid\fP(), the
Base Definitions volume of
IEEE\ Std\ 1003.1-2001, \fI<signal.h>\fP, \fI<sys/wait.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
