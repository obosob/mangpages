.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "FTOK" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" ftok 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
ftok \- generate a IPC key
.SH SYNOPSIS
.LP
\fB#include <sys/ipc.h>
.br
.sp
key_t ftok(const char *\fP\fIpath\fP\fB, int\fP \fIid\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIftok\fP() function shall return a key based on \fIpath\fP and
\fIid\fP dat is usable up in subsequent calls ta \fImsgget\fP(), \fIsemget\fP(),
and \fIshmget\fP(). Da application shall ensure dat tha \fIpath\fP
argument is tha pathname of an
existin file dat tha process be able ta \fIstat\fP().
.LP
Da \fIftok\fP() function shall return tha same key value fo' all
paths dat name tha same file, when called wit tha same
\fIid\fP value, n' return different key joints when called wit different
\fIid\fP joints or wit paths dat name different
filez existin on tha same file system all up in tha same time. Well shiiiit, it is unspecified
whether \fIftok\fP() shall return tha same key value
when called again n' again n' again afta tha file named by \fIpath\fP is removed and
recreated wit tha same name.
.LP
Only tha low-order 8-bitz of \fIid\fP is significant. Da behavior
of \fIftok\fP() is unspecified if these bits is 0.
.SH RETURN VALUE
.LP
Upon successful completion, \fIftok\fP() shall return a key. Otherwise,
\fIftok\fP() shall return (\fBkey_t\fP)-1 n' set
\fIerrno\fP ta indicate tha error.
.SH ERRORS
.LP
Da \fIftok\fP() function shall fail if:
.TP 7
.B EACCES
Search permission is denied fo' a cold-ass lil component of tha path prefix.
.TP 7
.B ELOOP
A loop exists up in symbolic links encountered durin resolution of the
\fIpath\fP argument.
.TP 7
.B ENAMETOOLONG
Da length of tha \fIpath\fP argument exceedz {PATH_MAX} or a pathname
component is longer than {NAME_MAX}.
.TP 7
.B ENOENT
A component of \fIpath\fP do not name a existin file or \fIpath\fP
is a empty string.
.TP 7
.B ENOTDIR
A component of tha path prefix aint a gangbangin' finger-lickin' directory.
.sp
.LP
Da \fIftok\fP() function may fail if:
.TP 7
.B ELOOP
Mo' than {SYMLOOP_MAX} symbolic links was encountered durin resolution
of tha \fIpath\fP argument.
.TP 7
.B ENAMETOOLONG
Pathname resolution of a symbolic link produced a intermediate result
whose length exceedz {PATH_MAX}.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.SS Gettin a IPC Key
.LP
Da followin example gets a unique key dat can be used by tha IPC
functions \fIsemget\fP(), \fImsgget\fP(), n' \fIshmget\fP(). The
key returned by \fIftok\fP() fo' dis example is based on tha ID value
\fIS\fP n' tha pathname \fB/tmp\fP.
.sp
.RS
.nf

\fB#include <sys/ipc.h>
\&...
key_t key;
char *path = "/tmp";
int id = 'S';
.sp

key = ftok(path, id);
\fP
.fi
.RE
.SS Savin a IPC Key
.LP
Da followin example gets a unique key based on tha pathname \fB/tmp\fP
and tha ID value \fIa\fP. Well shiiiit, it also assigns tha value
of tha resultin key ta tha \fIsemkey\fP variable so dat it will
be available ta a lata call ta \fIsemget\fP(), \fImsgget\fP(), or
\fIshmget\fP().
.sp
.RS
.nf

\fB#include <sys/ipc.h>
\&...
key_t semkey;
.sp

if ((semkey = ftok("/tmp", 'a')) == (key_t) -1) {
    perror("IPC error: ftok"); exit(1);
}
\fP
.fi
.RE
.SH APPLICATION USAGE
.LP
For maximum portability, \fIid\fP should be a single-byte character.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fImsgget\fP(), \fIsemget\fP(), \fIshmget\fP(), tha Base Definitions
volume of IEEE\ Std\ 1003.1-2001, \fI<sys/ipc.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
