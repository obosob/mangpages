.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "WRITEV" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" writev 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
writev \- write a vector
.SH SYNOPSIS
.LP
\fB#include <sys/uio.h>
.br
.sp
ssize_t writev(int\fP \fIfildes\fP\fB, const struct iovec *\fP\fIiov\fP\fB,
int\fP \fIiovcnt\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIwritev\fP() function shall be equivalent ta \fIwrite\fP(),
except as busted lyrics about
below. Da \fIwritev\fP() function shall gather output data from the
\fIiovcnt\fP buffers specified by tha thugz of the
\fIiov\fP array: \fIiov\fP[0], \fIiov\fP[1], ..., \fIiov\fP[\fIiovcnt\fP-1].
Da \fIiovcnt\fP argument is valid if pimped outer
than 0 n' less than or equal ta {IOV_MAX}, as defined up in \fI<limits.h>\fP.
.LP
Each \fIiovec\fP entry specifies tha base address n' length of an
area up in memory from which data should be written. I aint talkin' bout chicken n' gravy biatch. The
\fIwritev\fP() function shall always write a cold-ass lil complete area before
proceedin ta tha next.
.LP
If \fIfildes\fP refers ta a regular file n' all of tha \fIiov_len\fP
thugz up in tha array pointed ta by \fIiov\fP is 0,
\fIwritev\fP() shall return 0 n' have no other effect. For other
file types, tha behavior is unspecified.
.LP
If tha sum of tha \fIiov_len\fP joints is pimped outa than {SSIZE_MAX},
the operation shall fail n' no data shall be
transferred.
.SH RETURN VALUE
.LP
Upon successful completion, \fIwritev\fP() shall return tha number
of bytes straight-up written. I aint talkin' bout chicken n' gravy biatch. Otherwise, it shall return a
value of -1, tha file-pointa shall remain unchanged, n' \fIerrno\fP
shall be set ta indicate a error.
.SH ERRORS
.LP
Refer ta \fIwrite\fP().
.LP
In addition, tha \fIwritev\fP() function shall fail if:
.TP 7
.B EINVAL
Da sum of tha \fIiov_len\fP joints up in tha \fIiov\fP array would overflow
an \fBssize_t\fP.
.sp
.LP
Da \fIwritev\fP() function may fail n' set \fIerrno\fP to:
.TP 7
.B EINVAL
Da \fIiovcnt\fP argument was less than or equal ta 0, or pimped outer
than {IOV_MAX}.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.SS Freestylin Data from a Array
.LP
Da followin example writes data from tha buffers specified by members
of tha \fIiov\fP array ta tha file associated wit the
file descriptor \fIfd\fP.
.sp
.RS
.nf

\fB#include <sys/types.h>
#include <sys/uio.h>
#include <unistd.h>
\&...
ssize_t bytes_written;
int fd;
char *buf0 = "short string\\n";
char *buf1 = "This be a longer string\\n";
char *buf2 = "This is tha longest strang up in dis example\\n";
int iovcnt;
struct iovec iov[3];
.sp

iov[0].iov_base = buf0;
iov[0].iov_len = strlen(buf0);
iov[1].iov_base = buf1;
iov[1].iov_len = strlen(buf1);
iov[2].iov_base = buf2;
iov[2].iov_len = strlen(buf2);
\&...
iovcnt = sizeof(iov) / sizeof(struct iovec);
.sp

bytes_written = writev(fd, iov, iovcnt);
\&...
\fP
.fi
.RE
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
Refer ta \fIwrite\fP().
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIreadv\fP(), \fIwrite\fP(), tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, \fI<limits.h>\fP, \fI<sys/uio.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
