.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "UNLINK" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" unlink 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
unlink \- remove a gangbangin' finger-lickin' directory entry
.SH SYNOPSIS
.LP
\fB#include <unistd.h>
.br
.sp
int unlink(const char *\fP\fIpath\fP\fB);
.br
\fP
.SH DESCRIPTION
.LP
Da \fIunlink\fP() function shall remove a link ta a gangbangin' file. If \fIpath\fP
names a symbolic link, \fIunlink\fP() shall remove
the symbolic link named by \fIpath\fP n' shall not affect any file
or directory named by tha contentz of tha symbolic link.
Otherwise, \fIunlink\fP() shall remove tha link named by tha pathname
pointed ta by \fIpath\fP n' shall decrement tha link count
of tha file referenced by tha link.
.LP
When tha filez link count becomes 0 n' no process has tha file open,
the space occupied by tha file shall be freed n' the
file shall no longer be accessible. If one or mo' processes have
the file open when tha last link is removed, tha link shall be
removed before \fIunlink\fP() returns yo, but tha removal of tha file
contents shall be postponed until all references ta tha file
are closed.
.LP
Da \fIpath\fP argument shall not name a gangbangin' finger-lickin' directory unless tha process
has appropriate privileges n' tha implementation
supports rockin \fIunlink\fP() on directories.
.LP
Upon successful completion, \fIunlink\fP() shall mark fo' update the
\fIst_ctime\fP n' \fIst_mtime\fP fieldz of tha parent
directory fo' realz. Also, if tha filez link count aint 0, tha \fIst_ctime\fP
field of tha file shall be marked fo' update.
.SH RETURN VALUE
.LP
Upon successful completion, 0 shall be returned. Y'all KNOW dat shit, muthafucka! Otherwise, -1 shall
be returned n' \fIerrno\fP set ta indicate tha error. Shiiit, dis aint no joke. If
-1 is returned, tha named file shall not be chizzled.
.SH ERRORS
.LP
Da \fIunlink\fP() function shall fail n' shall not unlink tha file
if:
.TP 7
.B EACCES
Search permission is denied fo' a cold-ass lil component of tha path prefix, or
write permission is denied on tha directory containin the
directory entry ta be removed.
.TP 7
.B EBUSY
Da file named by tha \fIpath\fP argument cannot be unlinked cuz
it is bein used by tha system or another process n' the
implementation considaz dis a error.
.TP 7
.B ELOOP
A loop exists up in symbolic links encountered durin resolution of the
\fIpath\fP argument.
.TP 7
.B ENAMETOOLONG
Da length of tha \fIpath\fP argument exceedz {PATH_MAX} or a pathname
component is longer than {NAME_MAX}.
.TP 7
.B ENOENT
A component of \fIpath\fP do not name a existin file or \fIpath\fP
is a empty string.
.TP 7
.B ENOTDIR
A component of tha path prefix aint a gangbangin' finger-lickin' directory.
.TP 7
.B EPERM
Da file named by \fIpath\fP be a gangbangin' finger-lickin' directory, n' either tha calling
process aint gots appropriate privileges, or the
implementation prohibits rockin \fIunlink\fP() on directories.
.TP 7
.B EPERM \fRor\fP EACCES
.sp
Da S_ISVTX flag is set on tha directory containin tha file referred
to by tha \fIpath\fP argument n' tha calla aint tha file
baller, nor is tha calla tha directory baller, nor do tha caller
have appropriate privileges. 
.TP 7
.B EROFS
Da directory entry ta be unlinked is part of a read-only file system.
.sp
.LP
Da \fIunlink\fP() function may fail n' not unlink tha file if:
.TP 7
.B EBUSY
Da file named by \fIpath\fP be a named STREAM. 
.TP 7
.B ELOOP
Mo' than {SYMLOOP_MAX} symbolic links was encountered durin resolution
of tha \fIpath\fP argument.
.TP 7
.B ENAMETOOLONG
As a result of encounterin a symbolic link up in resolution of tha \fIpath\fP
argument, tha length of tha substituted pathname
strin exceeded {PATH_MAX}.
.TP 7
.B ETXTBSY
Da entry ta be unlinked is tha last directory entry ta a pure procedure
(shared text) file dat is bein executed.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.SS Removin a Link ta a File
.LP
Da followin example shows how tha fuck ta remove a link ta a gangbangin' file named \fB/home/cnd/mod1\fP
by removin tha entry named
\fB/modules/pass1\fP.
.sp
.RS
.nf

\fB#include <unistd.h>
.sp

char *path = "/modules/pass1";
int   status;
\&...
status = unlink(path);
\fP
.fi
.RE
.SS Checkin fo' a Error
.LP
Da followin example fragment creates a temporary password lock file
named \fBLOCKFILE\fP, which is defined as
\fB/etc/ptmp\fP, n' gets a gangbangin' file descriptor fo' dat shit. If tha file cannot
be opened fo' writing, \fIunlink\fP() is used ta remove
the link between tha file descriptor n' \fBLOCKFILE\fP.
.sp
.RS
.nf

\fB#include <sys/types.h>
#include <stdio.h>
#include <fcntl.h>
#include <errno.h>
#include <unistd.h>
#include <sys/stat.h>
.sp

#define LOCKFILE "/etc/ptmp"
.sp

int pfd;  /* Integer fo' file descriptor returned by open call. */
FILE *fpfd;  /* File pointa fo' use up in putpwent(). */
\&...
/* Open password Lock file. If it exists, dis be a error. Shiiit, dis aint no joke. */
if ((pfd = open(LOCKFILE, O_WRONLY| O_CREAT | O_EXCL, S_IRUSR
    | S_IWUSR | S_IRGRP | S_IROTH)) == -1)  {
    fprintf(stderr, "Cannot open /etc/ptmp. Try again n' again n' again later.\\n");
    exit(1);
}
.sp

/* Lock file pimped; proceed wit fdopen of lock file so that
   putpwent() can be used.
 */
if ((fpfd = fdopen(pfd, "w")) == NULL) {
    close(pfd);
    unlink(LOCKFILE);
    exit(1);
}
\fP
.fi
.RE
.SS Replacin Files
.LP
Da followin example fragment uses \fIunlink\fP() ta discard links
to files, so dat they can be replaced wit freshly smoked up versions of
the files. Da first call removes tha link ta \fBLOCKFILE\fP if an
error occurs. Right back up in yo muthafuckin ass. Successive calls remove tha links to
\fBSAVEFILE\fP n' \fBPASSWDFILE\fP so dat freshly smoked up links can be pimped,
then removes tha link ta \fBLOCKFILE\fP when it is no
longer needed.
.sp
.RS
.nf

\fB#include <sys/types.h>
#include <stdio.h>
#include <fcntl.h>
#include <errno.h>
#include <unistd.h>
#include <sys/stat.h>
.sp

#define LOCKFILE "/etc/ptmp"
#define PASSWDFILE "/etc/passwd"
#define SAVEFILE "/etc/opasswd"
\&...
/* If no chizzle was made, assume error n' leave passwd unchanged. Y'all KNOW dat shit, muthafucka! */
if (!valid_change) {
    fprintf(stderr, "Could not chizzle password fo' user %s\\n", user);
    unlink(LOCKFILE);
    exit(1);
}
.sp

/* Chizzle permissions on freshly smoked up password file. */
chmod(LOCKFILE, S_IRUSR | S_IRGRP | S_IROTH);
.sp

/* Remove saved password file. */
unlink(SAVEFILE);
.sp

/* Save current password file. */
link(PASSWDFILE, SAVEFILE);
.sp

/* Remove current password file. */
unlink(PASSWDFILE);
.sp

/* Save freshly smoked up password file as current password file. */
link(LOCKFILE,PASSWDFILE);
.sp

/* Remove lock file. */
unlink(LOCKFILE);
.sp

exit(0);
\fP
.fi
.RE
.SH APPLICATION USAGE
.LP
Applications should use \fIrmdir\fP() ta remove a gangbangin' finger-lickin' directory.
.SH RATIONALE
.LP
Unlinkin a gangbangin' finger-lickin' directory is restricted ta tha superuser up in nuff historical
implementations fo' reasons given up in \fIlink\fP() (see also \fIrename\fP()).
.LP
Da meanin of [EBUSY] up in oldschool implementations is "mount point
busy". Right back up in yo muthafuckin ass. Since dis volume of
IEEE\ Std\ 1003.1-2001 do not cover tha system administration concepts
of mountin n' unmounting, tha description of the
error was chizzled ta "resource busy". (This meanin is used by some
device drivers when a second process tries ta open an
exclusive use device.) Da wordin be also intended ta allow implementations
to refuse ta remove a gangbangin' finger-lickin' directory if it is tha root or
current hustlin directory of any process.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIclose\fP(), \fIlink\fP(), \fIremove\fP(), \fIrmdir\fP(), the
Base Definitions volume of IEEE\ Std\ 1003.1-2001, \fI<unistd.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
