.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "ENCRYPT" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" encrypt 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
encrypt \- encodin function (\fBCRYPT\fP)
.SH SYNOPSIS
.LP
\fB#include <unistd.h>
.br
.sp
void encrypt(char\fP \fIblock\fP\fB[64], int\fP \fIedflag\fP\fB);
\fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIencrypt\fP() function shall provide access ta a implementation-defined
encodin algorithm. Da key generated by \fIsetkey\fP() is used to
encrypt tha strang \fIblock\fP wit \fIencrypt\fP().
.LP
Da \fIblock\fP argument ta \fIencrypt\fP() shall be a array of length
64 bytes containin only tha bytes wit jointz of 0
and 1. Da array is modified up in place ta a similar array rockin the
key set by \fIsetkey\fP(). If \fIedflag\fP is 0, tha argument is encoded.
If \fIedflag\fP is 1, tha argument
may be decoded (see tha APPLICATION USAGE section); if tha argument
is not decoded, \fIerrno\fP shall be set ta [ENOSYS].
.LP
Da \fIencrypt\fP() function shall not chizzle tha settin of \fIerrno\fP
if successful naaahhmean, biatch? An application wishin ta check for
error thangs should set \fIerrno\fP ta 0 before callin \fIencrypt\fP().
If \fIerrno\fP is non-zero on return, a error has
occurred.
.LP
Da \fIencrypt\fP() function need not be reentrant fo' realz. A function that
is not required ta be reentrant aint required ta be
thread-safe.
.SH RETURN VALUE
.LP
Da \fIencrypt\fP() function shall not return a value.
.SH ERRORS
.LP
Da \fIencrypt\fP() function shall fail if:
.TP 7
.B ENOSYS
Da functionalitizzle aint supported on dis implementation.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
Oldschool implementationz of tha \fIencrypt\fP() function used a
rather primitizzle encodin algorithm.
.LP
In some environments, decodin might not be implemented. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. This is related
to some Posse restrictions on encryption and
decryption routines. Oldschool practice has been ta shizzle a gangbangin' finger-lickin' different
version of tha encryption library without tha decryption
feature up in tha routines supplied. Y'all KNOW dat shit, muthafucka! Thus tha exported version of \fIencrypt\fP()
does encodin but not decoding.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIcrypt\fP(), \fIsetkey\fP(), tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, \fI<unistd.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
