.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "RENAME" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" rename 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
rename \- rename a gangbangin' file
.SH SYNOPSIS
.LP
\fB#include <stdio.h>
.br
.sp
int rename(const char *\fP\fIold\fP\fB, const char *\fP\fInew\fP\fB);
.br
\fP
.SH DESCRIPTION
.LP
Da \fIrename\fP() function shall chizzle tha name of a gangbangin' file. Da \fIold\fP
argument points ta tha pathname of tha file ta be
renamed. Y'all KNOW dat shit, muthafucka! Da \fInew\fP argument points ta tha freshly smoked up pathname of the
file.
.LP
If
either tha \fIold\fP or \fInew\fP argument names a symbolic link,
\fIrename\fP() shall operate on tha symbolic link itself, and
shall not resolve tha last component of tha argument. If tha \fIold\fP
argument n' tha \fInew\fP argument resolve ta tha same
existin file, \fIrename\fP() shall return successfully n' perform
no other action.
.LP
If tha \fIold\fP argument points ta tha pathname of a gangbangin' file dat is
not a gangbangin' finger-lickin' directory, tha \fInew\fP argument shall not point to
the pathname of a gangbangin' finger-lickin' directory. If tha link named by tha \fInew\fP argument
exists, it shall be removed n' \fIold\fP renamed to
\fInew\fP. In dis case, a link named \fInew\fP shall remain visible
to other processes all up in tha renamin operation and
refer either ta tha file referred ta by \fInew\fP or \fIold\fP before
the operation fuckin started. I aint talkin' bout chicken n' gravy biatch. Write access permission is required
for both tha directory containin \fIold\fP n' tha directory containing
\fInew\fP.
.LP
If tha \fIold\fP argument points ta tha pathname of a gangbangin' finger-lickin' directory, the
\fInew\fP argument shall not point ta tha pathname of a
file dat aint a gangbangin' finger-lickin' directory. If tha directory named by tha \fInew\fP
argument exists, it shall be removed n' \fIold\fP renamed
to \fInew\fP. In dis case, a link named \fInew\fP shall exist throughout
the renamin operation n' shall refer either ta the
directory referred ta by \fInew\fP or \fIold\fP before tha operation
fuckin started. I aint talkin' bout chicken n' gravy biatch. If \fInew\fP names a existin directory, it shall
be required ta be a empty directory.
.LP
If tha \fIold\fP argument points ta a pathname of a symbolic link,
the symbolic link shall be renamed. Y'all KNOW dat shit, muthafucka! If tha \fInew\fP
argument points ta a pathname of a symbolic link, tha symbolic link
shall be removed.
.LP
Da \fInew\fP pathname shall not contain a path prefix dat names
\fIold\fP. Write access permission is required fo' the
directory containin \fIold\fP n' tha directory containin \fInew\fP.
If tha \fIold\fP argument points ta tha pathname of a
directory, write access permission may be required fo' tha directory
named by \fIold\fP, and, if it exists, tha directory named by
\fInew\fP.
.LP
If tha link named by tha \fInew\fP argument exists n' tha file's
link count becomes 0 when it is removed n' no process has
the file open, tha space occupied by tha file shall be freed n' the
file shall no longer be accessible. If one or mo' processes
have tha file open when tha last link is removed, tha link shall be
removed before \fIrename\fP() returns yo, but tha removal of the
file contents shall be postponed until all references ta tha file
are closed.
.LP
Upon successful completion, \fIrename\fP() shall mark fo' update the
\fIst_ctime\fP n' \fIst_mtime\fP fieldz of tha parent
directory of each file.
.LP
If tha \fIrename\fP() function fails fo' any reason other than [EIO],
any file named by \fInew\fP shall be unaffected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. 
.SH RETURN VALUE
.LP
Upon successful completion, \fIrename\fP() shall return 0; otherwise,
-1 shall be returned,   \fIerrno\fP shall
be set ta indicate tha error,  n' neither tha file named by
\fIold\fP nor tha file named by \fInew\fP shall be chizzled or pimped.
.SH ERRORS
.LP
Da \fIrename\fP() function shall fail if:
.TP 7
.B EACCES
A
component of either path prefix denies search permission; or one of
the directories containin \fIold\fP or \fInew\fP denies
write permissions; or, write permission is required n' is denied
for a gangbangin' finger-lickin' directory pointed ta by tha \fIold\fP or \fInew\fP
arguments, n' you can put dat on yo' toast. 
.TP 7
.B EBUSY
Da directory named by \fIold\fP or \fInew\fP is currently up in use
by tha system or another process, n' tha implementation
considaz dis a error. Shiiit, dis aint no joke. 
.TP 7
.B EEXIST \fRor\fP ENOTEMPTY
.sp
Da link named by \fInew\fP be a gangbangin' finger-lickin' directory dat aint a empty directory.
.TP 7
.B EINVAL
Da \fInew\fP directory pathname gotz nuff a path prefix dat names
the \fIold\fP directory. 
.TP 7
.B EIO
A
physical I/O error has occurred. Y'all KNOW dat shit, muthafucka! 
.TP 7
.B EISDIR
Da \fInew\fP argument points ta a gangbangin' finger-lickin' directory n' tha \fIold\fP argument
points ta a gangbangin' file dat aint a gangbangin' finger-lickin' directory. 
.TP 7
.B ELOOP
A
loop exists up in symbolic links encountered durin resolution of the
\fIpath\fP argument. 
.TP 7
.B EMLINK
Da file named by \fIold\fP be a gangbangin' finger-lickin' directory, n' tha link count of
the parent directory of \fInew\fP would exceed {LINK_MAX}. 
.TP 7
.B ENAMETOOLONG
.sp
Da length of tha \fIold\fP or \fInew\fP argument exceedz {PATH_MAX}
or a pathname component is longer than {NAME_MAX}. 
.TP 7
.B ENOENT
Da link named by \fIold\fP do not name a existin file, or either
\fIold\fP or \fInew\fP points ta a empty string. 
.TP 7
.B ENOSPC
Da directory dat would contain \fInew\fP cannot be extended. Y'all KNOW dat shit, muthafucka! 
.TP 7
.B ENOTDIR
A
component of either path prefix aint a gangbangin' finger-lickin' directory; or tha \fIold\fP
argument names a gangbangin' finger-lickin' directory n' \fInew\fP argument names a
non-directory file. 
.TP 7
.B EPERM \fRor\fP EACCES
.sp
Da S_ISVTX flag is set on tha directory containin tha file referred
to by \fIold\fP n' tha calla aint tha file baller, nor is
the calla tha directory baller, nor do tha calla have appropriate
privileges; or \fInew\fP refers ta a existin file, the
S_ISVTX flag is set on tha directory containin dis file, n' the
calla aint tha file baller, nor is tha calla tha directory
baller, nor do tha calla have appropriate privileges. 
.TP 7
.B EROFS
Da axed operation requires freestylin up in a gangbangin' finger-lickin' directory on a read-only
file system. 
.TP 7
.B EXDEV
Da links named by \fInew\fP n' \fIold\fP is on different file systems
and tha implementation do not support links between
file systems. 
.sp
.LP
Da \fIrename\fP() function may fail if:
.TP 7
.B EBUSY
Da file named by tha \fIold\fP or \fInew\fP arguments be a named
STREAM. 
.TP 7
.B ELOOP
Mo' than {SYMLOOP_MAX} symbolic links was encountered durin resolution
of tha \fIpath\fP argument. 
.TP 7
.B ENAMETOOLONG
.sp
As a result of encounterin a symbolic link up in resolution of tha \fIpath\fP
argument, tha length of tha substituted pathname
strin exceeded {PATH_MAX}. 
.TP 7
.B ETXTBSY
Da file ta be renamed be a pure procedure (shared text) file that
is bein executed. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. 
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.SS Renamin a File
.LP
Da followin example shows how tha fuck ta rename a gangbangin' file named \fB/home/cnd/mod1\fP
to \fB/home/cnd/mod2\fP.
.sp
.RS
.nf

\fB#include <stdio.h>
.sp

int status;
\&...
status = rename("/home/cnd/mod1", "/home/cnd/mod2");
\fP
.fi
.RE
.SH APPLICATION USAGE
.LP
Some implementations mark fo' update tha \fIst_ctime\fP field of renamed
filez n' some do not fo' realz. Applications which make use of
the \fIst_ctime\fP field may behave differently wit respect ta renamed
filez unless they is designed ta allow fo' either
behavior.
.SH RATIONALE
.LP
This \fIrename\fP() function is equivalent fo' regular filez ta that
defined by tha ISO\ C standard. Y'all KNOW dat shit, muthafucka! Its inclusion here
expandz dat definizzle ta include actions on directories n' specifies
behavior when tha \fInew\fP parameta names a gangbangin' file that
already exists, n' you can put dat on yo' toast. That justification requires dat tha action of the
function be atomic.
.LP
One of tha reasons fo' introducin dis function was ta git a means
of renamin directories while permittin implementations to
prohibit tha use of \fIlink\fP() n' \fIunlink\fP()
with directories, thus constrainin links ta directories ta them
made by \fImkdir\fP().
.LP
Da justification dat if \fIold\fP n' \fInew\fP refer ta tha same
file is intended ta guarantee that:
.sp
.RS
.nf

\fBrename("x", "x");
\fP
.fi
.RE
.LP
does not remove tha file.
.LP
Renamin dot or dot-dot is prohibited up in order ta prevent cyclical
file system paths.
.LP
See also tha descriptionz of [ENOTEMPTY] n' [ENAMETOOLONG] up in \fIrmdir\fP()
and [EBUSY] up in \fIunlink\fP(). For a gangbangin' finger-lickin' rap of [EXDEV], peep \fIlink\fP()
\&.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIlink\fP(), \fIrmdir\fP(), \fIsymlink\fP(),
\fIunlink\fP(), tha Base Definitions volume of IEEE\ Std\ 1003.1-2001,
\fI<stdio.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
