.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "RECV" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" recv 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
recv \- receive a message from a cold-ass lil connected socket
.SH SYNOPSIS
.LP
\fB#include <sys/socket.h>
.br
.sp
ssize_t recv(int\fP \fIsocket\fP\fB, void *\fP\fIbuffer\fP\fB, size_t\fP
\fIlength\fP\fB, int\fP
\fIflags\fP\fB);
.br
\fP
.SH DESCRIPTION
.LP
Da \fIrecv\fP() function shall receive a message from a cold-ass lil connection-mode
or connectionless-mode socket. Well shiiiit, it is normally used
with connected sockets cuz it do not permit tha application
to retrieve tha source address of received data.
.LP
Da \fIrecv\fP() function takes tha followin arguments:
.TP 7
\fIsocket\fP
Specifies tha socket file descriptor.
.TP 7
\fIbuffer\fP
Points ta a funky-ass buffer where tha message should be stored.
.TP 7
\fIlength\fP
Specifies tha length up in bytez of tha buffer pointed ta by tha \fIbuffer\fP
argument.
.TP 7
\fIflags\fP
Specifies tha type of message reception. I aint talkin' bout chicken n' gravy biatch. Valuez of dis argument are
formed by logically OR'in zero or mo' of tha following
values: 
.TP 7
MSG_PEEK
.RS
Peeks at a incomin message. Da data is treated as unread n' the
next \fIrecv\fP() or similar function shall still return
this data.
.RE
.TP 7
MSG_OOB
.RS
Requests out-of-band data. Da significizzle n' semantics of out-of-band
data is protocol-specific.
.RE
.TP 7
MSG_WAITALL
.RS
On SOCK_STREAM sockets dis requests dat tha function block until
the full amount of data can be returned. Y'all KNOW dat shit, muthafucka! Da function may
return tha smalla amount of data if tha socket be a message-based
socket, if a signal is caught, if tha connection is terminated,
if MSG_PEEK was specified, or if a error is pendin fo' tha socket.
.RE
.sp
.sp
.LP
Da \fIrecv\fP() function shall return tha length of tha message written
to tha buffer pointed ta by tha \fIbuffer\fP
argument. For message-based sockets, like fuckin SOCK_DGRAM n' SOCK_SEQPACKET,
the entire message shall be read up in a single operation.
If a message is too long ta fit up in tha supplied buffer, n' MSG_PEEK
is not set up in tha \fIflags\fP argument, tha excess bytes
shall be discarded. Y'all KNOW dat shit, muthafucka! For stream-based sockets, like fuckin SOCK_STREAM,
message boundaries shall be ignored. Y'all KNOW dat shit, muthafucka! In dis case, data shall be
returned ta tha user as soon as it becomes available, n' no data
shall be discarded.
.LP
If tha MSG_WAITALL flag aint set, data shall be returned only up
to tha end of tha straight-up original gangsta message.
.LP
If no lyrics is available all up in tha socket n' O_NONBLOCK aint set
on tha socketz file descriptor, \fIrecv\fP() shall block
until a message arrives. If no lyrics is available all up in tha socket
and O_NONBLOCK is set on tha socketz file descriptor,
\fIrecv\fP() shall fail n' set \fIerrno\fP ta [EAGAIN] or [EWOULDBLOCK].
.SH RETURN VALUE
.LP
Upon successful completion, \fIrecv\fP() shall return tha length of
the message up in bytes. If no lyrics is available ta be
received n' tha peer has performed a orderly shutdown, \fIrecv\fP()
shall return 0. Otherwise, -1 shall be returned and
\fIerrno\fP set ta indicate tha error.
.SH ERRORS
.LP
Da \fIrecv\fP() function shall fail if:
.TP 7
.B EAGAIN \fRor\fP EWOULDBLOCK
.sp
Da socketz file descriptor is marked O_NONBLOCK n' no data is waiting
to be received; or MSG_OOB is set n' no out-of-band data
is available n' either tha socketz file descriptor is marked O_NONBLOCK
or tha socket do not support blockin ta await
out-of-band data.
.TP 7
.B EBADF
Da \fIsocket\fP argument aint a valid file descriptor.
.TP 7
.B ECONNRESET
A connection was forcibly closed by a peer.
.TP 7
.B EINTR
Da \fIrecv\fP() function was interrupted by a signal dat was caught,
before any data was available.
.TP 7
.B EINVAL
Da MSG_OOB flag is set n' no out-of-band data be available.
.TP 7
.B ENOTCONN
A receive be attempted on a cold-ass lil connection-mode socket dat aint connected.
.TP 7
.B ENOTSOCK
Da \fIsocket\fP argument do not refer ta a socket.
.TP 7
.B EOPNOTSUPP
Da specified flags is not supported fo' dis socket type or protocol.
.TP 7
.B ETIMEDOUT
Da connection timed up durin connection establishment, or due to
a transmission timeout on actizzle connection.
.sp
.LP
Da \fIrecv\fP() function may fail if:
.TP 7
.B EIO
An I/O error occurred while readin from or freestylin ta tha file system.
.TP 7
.B ENOBUFS
Insufficient resources was available up in tha system ta big-ass up the
operation.
.TP 7
.B ENOMEM
Insufficient memory was available ta fulfill tha request.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
Da \fIrecv\fP() function is equivalent ta \fIrecvfrom\fP() wit a
zero
\fIaddress_len\fP argument, n' ta \fIread\fP() if no flags is used.
.LP
Da \fIselect\fP() n' \fIpoll\fP() functions can
be used ta determine when data be available ta be received.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIpoll\fP(), \fIread\fP(), \fIrecvmsg\fP(), \fIrecvfrom\fP(),
\fIselect\fP(), \fIsend\fP(), \fIsendmsg\fP(), \fIsendto\fP(),
\fIshutdown\fP(), \fIsocket\fP(), \fIwrite\fP(), the
Base Definitions volume of IEEE\ Std\ 1003.1-2001, \fI<sys/socket.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
