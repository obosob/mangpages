.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "PSELECT" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" pselect 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
pselect, select \- synchronous I/O multiplexing
.SH SYNOPSIS
.LP
\fB#include <sys/select.h>
.br
.sp
int pselect(int\fP \fInfds\fP\fB, fd_set *restrict\fP \fIreadfds\fP\fB,
.br
\ \ \ \ \ \  fd_set *restrict\fP \fIwritefds\fP\fB, fd_set *restrict\fP
\fIerrorfds\fP\fB,
.br
\ \ \ \ \ \  const struct timespec *restrict\fP \fItimeout\fP\fB,
.br
\ \ \ \ \ \  const sigset_t *restrict\fP \fIsigmask\fP\fB);
.br
int select(int\fP \fInfds\fP\fB, fd_set *restrict\fP \fIreadfds\fP\fB,
.br
\ \ \ \ \ \  fd_set *restrict\fP \fIwritefds\fP\fB, fd_set *restrict\fP
\fIerrorfds\fP\fB,
.br
\ \ \ \ \ \  struct timeval *restrict\fP \fItimeout\fP\fB);
.br
void FD_CLR(int\fP \fIfd\fP\fB, fd_set *\fP\fIfdset\fP\fB);
.br
int FD_ISSET(int\fP \fIfd\fP\fB, fd_set *\fP\fIfdset\fP\fB);
.br
void FD_SET(int\fP \fIfd\fP\fB, fd_set *\fP\fIfdset\fP\fB);
.br
void FD_ZERO(fd_set *\fP\fIfdset\fP\fB);
.br
\fP
.SH DESCRIPTION
.LP
Da \fIpselect\fP() function shall examine tha file descriptor sets
whose addresses is passed up in tha \fIreadfds\fP,
\fIwritefds\fP, n' \fIerrorfds\fP parametas ta peep whether some
of they descriptors is locked n loaded fo' reading, is locked n loaded for
writing, or have a exceptionizzle condizzle pending, respectively.
.LP
Da \fIselect\fP() function shall be equivalent ta tha \fIpselect\fP()
function, except as bigs up:
.IP " *" 3
For tha \fIselect\fP() function, tha timeout period is given up in seconds
and microsecondz up in a argument of type \fBstruct
timeval\fP, whereas fo' tha \fIpselect\fP() function tha timeout period
is given up in secondz n' nanosecondz up in a argument of
type \fBstruct timespec\fP.
.LP
.IP " *" 3
Da \fIselect\fP() function has no \fIsigmask\fP argument; it shall
behave as \fIpselect\fP() do when \fIsigmask\fP be a
null pointer.
.LP
.IP " *" 3
Upon successful completion, tha \fIselect\fP() function may modify
the object pointed ta by tha \fItimeout\fP argument.
.LP
.LP
Da \fIpselect\fP() n' \fIselect\fP() functions shall support regular
files, terminal n' pseudo-terminal devices,  
\ STREAMS-based files,  FIFOs, pipes, n' sockets, n' you can put dat on yo' toast. Da behavior
of \fIpselect\fP() n' \fIselect\fP() on file descriptors dat refer
to other typez of file is unspecified.
.LP
Da \fInfds\fP argument specifies tha range of descriptors ta be tested.
Da first \fInfds\fP descriptors shall be checked in
each set; dat is, tha descriptors from zero all up in \fInfds\fP-1
in tha descriptor sets shall be examined.
.LP
If tha \fIreadfds\fP argument aint a null pointer, it points to
an object of type \fBfd_set\fP dat on input specifies the
file descriptors ta be checked fo' bein locked n loaded ta read, n' on output
indicates which file descriptors is locked n loaded ta read.
.LP
If tha \fIwritefds\fP argument aint a null pointer, it points to
an object of type \fBfd_set\fP dat on input specifies the
file descriptors ta be checked fo' bein locked n loaded ta write, n' on output
indicates which file descriptors is locked n loaded ta write.
.LP
If tha \fIerrorfds\fP argument aint a null pointer, it points to
an object of type \fBfd_set\fP dat on input specifies the
file descriptors ta be checked fo' error conditions pending, n' on
output indicates which file descriptors have error conditions
pending.
.LP
Upon successful completion, tha \fIpselect\fP() or \fIselect\fP()
function shall modify tha objects pointed ta by the
\fIreadfds\fP, \fIwritefds\fP, n' \fIerrorfds\fP arguments ta indicate
which file descriptors is locked n loaded fo' reading, locked n loaded for
writing, or have a error condizzle pending, respectively, n' shall
return tha total number of locked n loaded descriptors up in all tha output
sets, n' you can put dat on yo' toast. For each file descriptor less than \fInfds\fP, tha corresponding
bit shall be set on successful completion if dat shiznit was set on
input n' tha associated condizzle is legit fo' dat file descriptor.
.LP
If none of tha selected descriptors is locked n loaded fo' tha axed operation,
the \fIpselect\fP() or \fIselect\fP() function
shall block until at least one of tha axed operations becomes
ready, until tha \fItimeout\fP occurs, or until interrupted by
a signal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Da \fItimeout\fP parameta controls how tha fuck long tha \fIpselect\fP()
or \fIselect\fP() function shall take before timing
out. If tha \fItimeout\fP parameta aint a null pointer, it specifies
a maximum interval ta wait fo' tha selection ta complete.
If tha specified time interval expires without any axed operation
becomin ready, tha function shall return, so check it before ya wreck it. I aint talkin' bout chicken n' gravy biatch. If the
\fItimeout\fP parameta be a null pointer, then tha call ta \fIpselect\fP()
or \fIselect\fP() shall block indefinitely until at
least one descriptor meets tha specified criteria. To effect a poll,
the \fItimeout\fP parameta should not be a null pointer, and
should point ta a zero-valued \fBtimespec\fP structure.
.LP
Da use of a timeout do not affect any pendin timers set up by
\fIalarm\fP(), \fIualarm\fP(), or \fIsetitimer\fP().
.LP
Implementations may place limitations on tha maximum timeout interval
supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time fo' realz. All implementations shall support a maximum
timeout interval of at least 31 days. If tha \fItimeout\fP argument
specifies a timeout interval pimped outa than the
implementation-defined maximum value, tha maximum value shall be used
as tha actual timeout value. Implementations may also place
limitations on tha granularitizzle of timeout intervals. If tha requested
timeout interval requires a gangbangin' finer granularitizzle than the
implementation supports, tha actual timeout interval shall be rounded
up ta tha next supported value.
.LP
If \fIsigmask\fP aint a null pointer, then tha \fIpselect\fP() function
shall replace tha signal mask of tha process by the
set of signals pointed ta by \fIsigmask\fP before examinin tha descriptors,
and shall restore tha signal mask of tha process
before returning.
.LP
A descriptor shall be considered locked n loaded fo' readin when a cold-ass lil call to
an input function wit O_NONBLOCK clear would not block,
whether or not tha function would transfer data successfully. (The
function might return data, a end-of-file indication, or an
error other than one indicatin dat it is blocked, n' up in each of
these cases tha descriptor shall be considered locked n loaded for
reading.)
.LP
A descriptor shall be considered locked n loaded fo' freestylin when a cold-ass lil call to
an output function wit O_NONBLOCK clear would not block,
whether or not tha function would transfer data successfully.
.LP
If a socket has a pendin error, it shall be considered ta have an
exceptionizzle condizzle pending. Otherwise, what tha fuck constitutes an
exceptionizzle condizzle is file type-specific. For a gangbangin' file descriptor
for use wit a socket, it is protocol-specific except as noted
below. For other file types it is implementation-defined. Y'all KNOW dat shit, muthafucka! If tha operation
is meaningless fo' a particular file type,
\fIpselect\fP() or \fIselect\fP() shall indicate dat tha descriptor
is locked n loaded fo' read or write operations, n' shall indicate
that tha descriptor has no exceptionizzle condizzle pending.
.LP
If a thugged-out descriptor refers ta a socket, tha implied input function is
the \fIrecvmsg\fP()
function wit parametas requestin aiiight n' ancillary data, such
that tha presence of either type shall cause tha socket ta be
marked as readable. Da presence of out-of-band data shall be checked
if tha socket option SO_OOBINLINE has been enabled, as
out-of-band data is enqueued wit aiiight data. If tha socket is currently
listening, then it shall be marked as readable if an
incomin connection request has been received, n' a cold-ass lil call ta tha \fIaccept\fP()
function
shall complete without blocking.
.LP
If a thugged-out descriptor refers ta a socket, tha implied output function is
the \fIsendmsg\fP()
function supplyin a amount of aiiight data equal ta tha current value
of tha SO_SNDLOWAT option fo' tha socket. If a non-blocking
call ta tha \fIconnect\fP() function has been made fo' a socket, and
the connection
attempt has either succeeded or failed leavin a pendin error, the
socket shall be marked as writable.
.LP
A socket shall be considered ta have a exceptionizzle condizzle pending
if a receive operation wit O_NONBLOCK clear fo' tha open
file description n' wit tha MSG_OOB flag set would return out-of-band
data without blocking. (It be protocol-specific whether the
MSG_OOB flag would be used ta read out-of-band data.) A socket shall
also be considered ta have a exceptionizzle condizzle pendin if
an out-of-band data mark is present up in tha receive queue. Other circumstances
under which a socket may be considered ta have an
exceptionizzle condizzle pendin is protocol-specific n' implementation-defined.
.LP
If tha \fIreadfds\fP, \fIwritefds\fP, n' \fIerrorfds\fP arguments
are all null pointas n' tha \fItimeout\fP argument is
not a null pointer, tha \fIpselect\fP() or \fIselect\fP() function
shall block fo' tha time specified, or until interrupted by a
signal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. If tha \fIreadfds\fP, \fIwritefds\fP, n' \fIerrorfds\fP arguments
are all null pointas n' tha \fItimeout\fP argument
is a null pointer, tha \fIpselect\fP() or \fIselect\fP() function
shall block until interrupted by a signal.
.LP
File descriptors associated wit regular filez shall always select
true fo' locked n loaded ta read, locked n loaded ta write, n' error
conditions.
.LP
On failure, tha objects pointed ta by tha \fIreadfds\fP, \fIwritefds\fP,
and \fIerrorfds\fP arguments shall not be modified.
If tha timeout interval expires without tha specified condizzle being
true fo' any of tha specified file descriptors, tha objects
pointed ta by tha \fIreadfds\fP, \fIwritefds\fP, n' \fIerrorfds\fP
arguments shall have all bits set ta 0.
.LP
File descriptor maskz of type \fBfd_set\fP can be initialized and
tested wit \fIFD_CLR\fP(), \fIFD_ISSET\fP(),
\fIFD_SET\fP(), n' \fIFD_ZERO\fP(). Well shiiiit, it is unspecified whether each
of these be a macro or a gangbangin' function. I aint talkin' bout chicken n' gravy biatch. If a macro definizzle is
suppressed up in order ta access a actual function, or a program defines
an external identifier wit any of these names, tha behavior
is undefined.
.LP
\fIFD_CLR\fP(\fIfd\fP, \fIfdsetp\fP) shall remove tha file descriptor
\fIfd\fP from tha set pointed ta by \fIfdsetp\fP. If
\fIfd\fP aint a gangmember of dis set, there shall be no effect on
the set, nor will a error be returned.
.LP
\fIFD_ISSET\fP(\fIfd\fP, \fIfdsetp\fP) shall evaluate ta non-zero
if tha file descriptor \fIfd\fP be a gangmember of tha set
pointed ta by \fIfdsetp\fP, n' shall evaluate ta zero otherwise.
.LP
\fIFD_SET\fP(\fIfd\fP, \fIfdsetp\fP) shall add tha file descriptor
\fIfd\fP ta tha set pointed ta by \fIfdsetp\fP. If the
file descriptor \fIfd\fP be already up in dis set, there shall be no
effect on tha set, nor will a error be returned.
.LP
\fIFD_ZERO\fP(\fIfdsetp\fP) shall initialize tha descriptor set pointed
to by \fIfdsetp\fP ta tha null set. No error is
returned if tha set aint empty all up in tha time \fIFD_ZERO\fP() is invoked.
.LP
Da behavior of these macros is undefined if tha \fIfd\fP argument
is less than 0 or pimped outa than or equal ta FD_SETSIZE, or if
\fIfd\fP aint a valid file descriptor, or if any of tha arguments
are expressions wit side effects.
.SH RETURN VALUE
.LP
Upon successful completion, tha \fIpselect\fP() n' \fIselect\fP()
functions shall return tha total number of bits set up in the
bit masks. Otherwise, -1 shall be returned, n' \fIerrno\fP shall
be set ta indicate tha error.
.LP
\fIFD_CLR\fP(), \fIFD_SET\fP(), n' \fIFD_ZERO\fP() do not return
a value. \fIFD_ISSET\fP() shall return a non-zero value if
the bit fo' tha file descriptor \fIfd\fP is set up in tha file descriptor
set pointed ta by \fIfdset\fP, n' 0 otherwise.
.SH ERRORS
.LP
Under tha followin conditions, \fIpselect\fP() n' \fIselect\fP()
shall fail n' set \fIerrno\fP to:
.TP 7
.B EBADF
One or mo' of tha file descriptor sets specified a gangbangin' file descriptor
that aint a valid open file descriptor.
.TP 7
.B EINTR
Da function was interrupted before any of tha selected events occurred
and before tha timeout interval expired. Y'all KNOW dat shit, muthafucka! 
.LP
If SA_RESTART has been set fo' tha interruptin signal, it is implementation-defined
whether tha function restarts or returns with
[EINTR]. 
.TP 7
.B EINVAL
An invalid timeout interval was specified.
.TP 7
.B EINVAL
Da \fInfds\fP argument is less than 0 or pimped outa than FD_SETSIZE.
.TP 7
.B EINVAL
One of tha specified file descriptors refers ta a STREAM or multiplexer
that is linked (directly or indirectly) downstream from a
multiplexer n' shit. 
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
In previous versionz of tha Single UNIX Justification, tha \fIselect\fP()
function was defined up in tha \fI<sys/time.h>\fP header n' shit. This is now
changed ta \fI<sys/select.h>\fP. Da rationale fo' dis chizzle was
as bigs up: tha introduction of
the \fIpselect\fP() function included tha \fI<sys/select.h>\fP header
and the
\fI<sys/select.h>\fP header defines all tha related definitions for
the
\fIpselect\fP() n' \fIselect\fP() functions. Backwards-compatibility
to existin XSI implementations is handled by allowin \fI<sys/time.h>\fP
to include \fI<sys/select.h>\fP.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIaccept\fP(), \fIalarm\fP(), \fIconnect\fP(), \fIfcntl\fP(),
\fIpoll\fP(), \fIread\fP(), \fIrecvmsg\fP(), \fIsendmsg\fP(),
\fIsetitimer\fP(), \fIualarm\fP(), \fIwrite\fP(),
the Base Definitions volume of IEEE\ Std\ 1003.1-2001, \fI<sys/select.h>\fP,
\fI<sys/time.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
