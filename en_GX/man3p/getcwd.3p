.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "GETCWD" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" getcwd 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
getcwd \- git tha pathname of tha current hustlin directory
.SH SYNOPSIS
.LP
\fB#include <unistd.h>
.br
.sp
char *getcwd(char *\fP\fIbuf\fP\fB, size_t\fP \fIsize\fP\fB);
.br
\fP
.SH DESCRIPTION
.LP
Da \fIgetcwd\fP() function shall place a absolute pathname of the
current hustlin directory up in tha array pointed ta by
\fIbuf\fP, n' return \fIbuf\fP. Da pathname copied ta tha array
shall contain no components dat is symbolic links. The
\fIsize\fP argument is tha size up in bytez of tha characta array pointed
to by tha \fIbuf\fP argument. If \fIbuf\fP be a null
pointer, tha behavior of \fIgetcwd\fP() is unspecified.
.SH RETURN VALUE
.LP
Upon successful completion, \fIgetcwd\fP() shall return tha \fIbuf\fP
argument. Otherwise, \fIgetcwd\fP() shall return a null
pointa n' set \fIerrno\fP ta indicate tha error. Shiiit, dis aint no joke. Da contents of
the array pointed ta by \fIbuf\fP is then undefined.
.SH ERRORS
.LP
Da \fIgetcwd\fP() function shall fail if:
.TP 7
.B EINVAL
Da \fIsize\fP argument is 0.
.TP 7
.B ERANGE
Da \fIsize\fP argument is pimped outa than 0 yo, but is smalla than the
length of tha pathname +1.
.sp
.LP
Da \fIgetcwd\fP() function may fail if:
.TP 7
.B EACCES
Read or search permission was denied fo' a cold-ass lil component of tha pathname.
.TP 7
.B ENOMEM
Insufficient storage space be available.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.SS Determinin tha Absolute Pathname of tha Current Workin Directory
.LP
Da followin example returns a pointa ta a array dat holdz the
absolute pathname of tha current hustlin directory. The
pointa is returned up in tha \fIptr\fP variable, which points ta the
\fIbuf\fP array where tha pathname is stored.
.sp
.RS
.nf

\fB#include <stdlib.h>
#include <unistd.h>
\&...
long size;
char *buf;
char *ptr;
.sp

size = pathconf(".", _PC_PATH_MAX);
.sp

if ((buf = (char *)malloc((size_t)size)) != NULL)
    ptr = getcwd(buf, (size_t)size);
\&...
\fP
.fi
.RE
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
Since tha maximum pathname length be arbitrary unless {PATH_MAX} is
defined, a application generally cannot supply a \fIbuf\fP
with \fIsize\fP {{PATH_MAX}+1}.
.LP
Havin \fIgetcwd\fP() take no arguments n' instead use tha \fImalloc\fP()
function to
produce space fo' tha returned argument was considered. Y'all KNOW dat shit, muthafucka! Da advantage
is dat \fIgetcwd\fP() knows how tha fuck big-ass tha hustlin directory
pathname be n' can allocate a appropriate amount of space. But the
programmer would gotta use tha \fIfree\fP() function ta free the
resultin object, or each use of \fIgetcwd\fP() would further
reduce tha available memory fo' realz. Also, \fImalloc\fP() n' \fIfree\fP()
are used nowhere else up in dis volume of IEEE\ Std\ 1003.1-2001. Finally,
\fIgetcwd\fP() is taken from tha SVID where it has tha two arguments
used up in dis volume of IEEE\ Std\ 1003.1-2001.
.LP
Da olda function \fIgetwd\fP() was rejected fo' use up in dis context
because it had only
a buffer argument n' no \fIsize\fP argument, n' thus had no way
to prevent overwritin tha buffer, except ta depend on the
programmer ta provide a big-ass enough buffer.
.LP
On some implementations, if \fIbuf\fP be a null pointer, \fIgetcwd\fP()
may obtain \fIsize\fP bytez of memory rockin \fImalloc\fP(). In this
case, tha pointa returned by \fIgetcwd\fP() may be used as tha argument
in a subsequent call ta \fIfree\fP(). Invokin \fIgetcwd\fP() with
\fIbuf\fP as a null
pointa aint recommended up in conformin applications.
.LP
If a program is operatin up in a gangbangin' finger-lickin' directory where some (grand)parent
directory do not permit reading, \fIgetcwd\fP() may fail,
as up in most implementations it must read tha directory ta determine
the name of tha file. This can occur if search yo, but not read,
permission is granted up in a intermediate directory, or if tha program
is placed up in dat directory by some mo' privileged process
(for example, login). Includin tha [EACCES] error condizzle makes
the reportin of tha error consistent n' warns tha application
writa dat \fIgetcwd\fP() can fail fo' reasons beyond tha control
of tha application writa or user n' shit. Right back up in yo muthafuckin ass. Some implementations can
avoid dis occurrence (for example, by implementin \fIgetcwd\fP()
usin \fIpwd\fP, where \fIpwd\fP be a set-user-root process), thus
the error was made optional. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Right back up in yo muthafuckin ass. Since dis volume of
IEEE\ Std\ 1003.1-2001 permits tha addizzle of other errors, this
would be a cold-ass lil common addizzle n' yet one dat applications
could not be sposed ta fuckin deal wit without dis addition.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fImalloc\fP(), tha Base Definitions volume of IEEE\ Std\ 1003.1-2001,
\fI<unistd.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
