.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "PTHREAD_MUTEXATTR_DESTROY" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" pthread_mutexattr_destroy 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
pthread_mutexattr_destroy, pthread_mutexattr_init \- destroy n' initialize
the mutex attributes object
.SH SYNOPSIS
.LP
\fB#include <pthread.h>
.br
.sp
int pthread_mutexattr_destroy(pthread_mutexattr_t *\fP\fIattr\fP\fB);
.br
int pthread_mutexattr_init(pthread_mutexattr_t *\fP\fIattr\fP\fB);
\fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIpthread_mutexattr_destroy\fP() function shall destroy a mutex
attributes object; tha object becomes, up in effect,
uninitialized. Y'all KNOW dat shit, muthafucka! An implementation may cause \fIpthread_mutexattr_destroy\fP()
to set tha object referenced by \fIattr\fP ta an
invalid value fo' realz. A destroyed \fIattr\fP attributes object can be reinitialized
usin \fIpthread_mutexattr_init\fP(); tha thangs up in dis biatch of
otherwise referencin tha object afta it has been destroyed is undefined.
.LP
Da \fIpthread_mutexattr_init\fP() function shall initialize a mutex
attributes object \fIattr\fP wit tha default value for
all of tha attributes defined by tha implementation.
.LP
Results is undefined if \fIpthread_mutexattr_init\fP() is called
specifyin a already initialized \fIattr\fP attributes
object.
.LP
Afta a mutex attributes object has been used ta initialize one or
more mutexes, any function affectin tha attributes object
(includin destruction) shall not affect any previously initialized
mutexes.
.SH RETURN VALUE
.LP
Upon successful completion, \fIpthread_mutexattr_destroy\fP() and
\fIpthread_mutexattr_init\fP() shall return zero; otherwise,
an error number shall be moonwalked back ta indicate tha error.
.SH ERRORS
.LP
Da \fIpthread_mutexattr_destroy\fP() function may fail if:
.TP 7
.B EINVAL
Da value specified by \fIattr\fP is invalid.
.sp
.LP
Da \fIpthread_mutexattr_init\fP() function shall fail if:
.TP 7
.B ENOMEM
Insufficient memory exists ta initialize tha mutex attributes object.
.sp
.LP
These functions shall not return a error code of [EINTR].
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
See \fIpthread_attr_init\fP() fo' a general explanation of attributes.
Attributes objects
allow implementations ta experiment wit useful extensions n' permit
extension of dis volume of IEEE\ Std\ 1003.1-2001
without changin tha existin functions. Thus, they provide fo' future
extensibilitizzle of dis volume of
IEEE\ Std\ 1003.1-2001 n' reduce tha temptation ta standardize prematurely
on semantics dat is not yet widely
implemented or understood.
.LP
Examplez of possible additionizzle mutex attributes dat done been discussed
are \fIspin_only\fP, \fIlimited_spin\fP,
\fIno_spin\fP, \fIrecursive\fP, n' \fImetered\fP. (To explain what
the latta attributes might mean: recursive mutexes would
allow fo' multiple re-lockin by tha current baller; metered mutexes
would transparently keep recordz of queue length, wait time,
and so on.) Since there aint yet wide agreement on tha usefulness
of these resultin from shared implementation n' usage
experience, they is not yet specified up in dis volume of IEEE\ Std\ 1003.1-2001.
Mutex attributes objects, however, make it
possible ta test up these concepts fo' possible standardization at
a lata time.
.SS Mutex Attributes n' Performance
.LP
Care has been taken ta ensure dat tha default jointz of tha mutex
attributes done been defined such dat mutexes initialized
with tha defaults have simple enough semantics so dat tha locking
and unlockin can be done wit tha equivalent of a test-and-set
instruction (plus possibly all dem other basic instructions).
.LP
There be at least one implementation method dat can be used ta reduce
the cost of testin at lock-time if a mutex has
non-default attributes. One such method dat a implementation can
employ (and dis can be made straight-up transparent ta fully
conformin POSIX applications) is ta secretly pre-lock any mutexes
that is initialized ta non-default attributes fo' realz. Any later
attempt ta lock such a mutex causes tha implementation ta branch to
the "slow path" as if tha mutex was unavailable; then, on
the slow path, tha implementation can do tha "real work" ta lock a
non-default mutex. Da underlyin unlock operation is more
fucked up since tha implementation never straight-up wants ta release
the pre-lock on dis kind of mutex. This illustrates that,
dependin on tha hardware, there may be certain optimizations that
can be used so dat whatever mutex attributes is considered
"most frequently used" can be processed most efficiently.
.SS Process Shared Memory n' Synchronization
.LP
Da existence of memory mappin functions up in dis volume of IEEE\ Std\ 1003.1-2001
leadz ta tha possibilitizzle dat an
application may allocate tha synchronization objects from dis section
in memory dat be accessed by multiple processes (and
therefore, by threadz of multiple processes).
.LP
In order ta permit such usage, while all up in tha same time keepin the
usual case (that is, usage within a single process) efficient,
a \fIprocess-shared\fP option has been defined.
.LP
If a implementation supports tha _POSIX_THREAD_PROCESS_SHARED option,
then tha \fIprocess-shared\fP attribute can be used to
indicate dat mutexes or condizzle variablez may be accessed by threads
of multiple processes.
.LP
Da default settin of PTHREAD_PROCESS_PRIVATE has been chosen for
the \fIprocess-shared\fP attribute so dat da most thugged-out
efficient formz of these synchronization objects is pimped by default.
.LP
Synchronization variablez dat is initialized wit tha PTHREAD_PROCESS_PRIVATE
\fIprocess-shared\fP attribute may only be
operated on by threadz up in tha process dat initialized em. Right back up in yo muthafuckin ass. Synchronization
variablez dat is initialized wit the
PTHREAD_PROCESS_SHARED \fIprocess-shared\fP attribute may be operated
on by any thread up in any process dat has access ta dat shit. In
particular, these processes may exist beyond tha gametime of tha initializing
process. For example, tha followin code implements a
simple countin semaphore up in a mapped file dat may be used by many
processes.
.sp
.RS
.nf

\fB/* sem.h */
struct semaphore {
    pthread_mutex_t lock;
    pthread_cond_t nonzero;
    unsigned count;
};
typedef struct semaphore semaphore_t;
.sp

semaphore_t *semaphore_create(char *semaphore_name);
semaphore_t *semaphore_open(char *semaphore_name);
void semaphore_post(semaphore_t *semap);
void semaphore_wait(semaphore_t *semap);
void semaphore_close(semaphore_t *semap);
.sp

/* sem.c */
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/mman.h>
#include <fcntl.h>
#include <pthread.h>
#include "sem.h"
.sp

semaphore_t *
semaphore_create(char *semaphore_name)
{
int fd;
    semaphore_t *semap;
    pthread_mutexattr_t psharedm;
    pthread_condattr_t psharedc;
.sp

    fd = open(semaphore_name, O_RDWR | O_CREAT | O_EXCL, 0666);
    if (fd < 0)
        return (NULL);
    (void) ftruncate(fd, sizeof(semaphore_t));
    (void) pthread_mutexattr_init(&psharedm);
    (void) pthread_mutexattr_setpshared(&psharedm,
        PTHREAD_PROCESS_SHARED);
    (void) pthread_condattr_init(&psharedc);
    (void) pthread_condattr_setpshared(&psharedc,
        PTHREAD_PROCESS_SHARED);
    semap = (semaphore_t *) mmap(NULL, sizeof(semaphore_t),
            PROT_READ | PROT_WRITE, MAP_SHARED,
            fd, 0);
    close (fd);
    (void) pthread_mutex_init(&semap->lock, &psharedm);
    (void) pthread_cond_init(&semap->nonzero, &psharedc);
    semap->count = 0;
    return (semap);
}
.sp

semaphore_t *
semaphore_open(char *semaphore_name)
{
    int fd;
    semaphore_t *semap;
.sp

    fd = open(semaphore_name, O_RDWR, 0666);
    if (fd < 0)
        return (NULL);
    semap = (semaphore_t *) mmap(NULL, sizeof(semaphore_t),
            PROT_READ | PROT_WRITE, MAP_SHARED,
            fd, 0);
    close (fd);
    return (semap);
}
.sp

void
semaphore_post(semaphore_t *semap)
{
    pthread_mutex_lock(&semap->lock);
    if (semap->count == 0)
        pthread_cond_signal(&semapx->nonzero);
    semap->count++;
    pthread_mutex_unlock(&semap->lock);
}
.sp

void
semaphore_wait(semaphore_t *semap)
{
    pthread_mutex_lock(&semap->lock);
    while (semap->count == 0)
        pthread_cond_wait(&semap->nonzero, &semap->lock);
    semap->count--;
    pthread_mutex_unlock(&semap->lock);
}
.sp

void
semaphore_close(semaphore_t *semap)
{
    munmap((void *) semap, sizeof(semaphore_t));
}
\fP
.fi
.RE
.LP
Da followin code is fo' three separate processes dat create, post,
and wait on a semaphore up in tha file \fB/tmp/semaphore\fP.
Once tha file is pimped, tha post n' wait programs increment and
decrement tha countin semaphore (waitin n' wakin as
required) even though they did not initialize tha semaphore.
.sp
.RS
.nf

\fB/* create.c */
#include "pthread.h"
#include "sem.h"
.sp

int
main()
{
    semaphore_t *semap;
.sp

    semap = semaphore_create("/tmp/semaphore");
    if (semap == NULL)
        exit(1);
    semaphore_close(semap);
    return (0);
}
.sp

/* post */
#include "pthread.h"
#include "sem.h"
.sp

int
main()
{
    semaphore_t *semap;
.sp

    semap = semaphore_open("/tmp/semaphore");
    if (semap == NULL)
        exit(1);
    semaphore_post(semap);
    semaphore_close(semap);
    return (0);
}
.sp

/* wait */
#include "pthread.h"
#include "sem.h"
.sp

int
main()
{
    semaphore_t *semap;
.sp

    semap = semaphore_open("/tmp/semaphore");
    if (semap == NULL)
        exit(1);
    semaphore_wait(semap);
    semaphore_close(semap);
    return (0);
}
\fP
.fi
.RE
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIpthread_cond_destroy\fP(), \fIpthread_create\fP(), \fIpthread_mutex_destroy\fP(),
pthread_mutexattr_destroy, tha Base Definitions volume of IEEE\ Std\ 1003.1-2001,
\fI<pthread.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
