.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "PERROR" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" perror 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
perror \- write error lyrics ta standard error
.SH SYNOPSIS
.LP
\fB#include <stdio.h>
.br
.sp
void perror(const char *\fP\fIs\fP\fB);
.br
\fP
.SH DESCRIPTION
.LP
Da \fIperror\fP() function shall map tha error number accessed through
the symbol \fIerrno\fP ta a language-dependent error
message, which shall be freestyled ta tha standard error stream as bigs up:
.IP " *" 3
First (if \fIs\fP aint a null pointa n' tha characta pointed
to by \fIs\fP aint tha null byte), tha strang pointed to
by \fIs\fP followed by a cold-ass lil colon n' a <space>.
.LP
.IP " *" 3
Then a error message strang followed by a <newline>.
.LP
.LP
Da contentz of tha error message strings shall be tha same as them
returned by \fIstrerror\fP() wit argument \fIerrno\fP.
.LP
The
\fIperror\fP() function shall mark tha file associated wit tha standard
error stream as havin been freestyled (\fIst_ctime\fP,
\fIst_mtime\fP marked fo' update) at some time between its successful
completion n' \fIexit\fP(), \fIabort\fP(), or tha completion of \fIfflush\fP()
or \fIfclose\fP() on \fIstderr\fP. 
.LP
Da \fIperror\fP() function shall not chizzle tha orientation of the
standard error stream.
.SH RETURN VALUE
.LP
Da \fIperror\fP() function shall not return a value.
.SH ERRORS
.LP
No errors is defined.
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.SS Printin a Error Message fo' a Function
.LP
Da followin example replaces \fIbufptr\fP wit a funky-ass buffer dat is
the necessary size. If a error occurs, tha \fIperror\fP()
function prints a message n' tha program exits.
.sp
.RS
.nf

\fB#include <stdio.h>
#include <stdlib.h>
\&...
char *bufptr;
size_t szbuf;
\&...
if ((bufptr = malloc(szbuf)) == NULL) {
    perror("malloc"); exit(2);
}
\&...
\fP
.fi
.RE
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIstrerror\fP(), tha Base Definitions volume of IEEE\ Std\ 1003.1-2001,
\fI<stdio.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
