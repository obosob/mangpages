.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "FOPEN" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" fopen 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
fopen \- open a stream
.SH SYNOPSIS
.LP
\fB#include <stdio.h>
.br
.sp
FILE *fopen(const char *restrict\fP \fIfilename\fP\fB, const char
*restrict\fP \fImode\fP\fB);
.br
\fP
.SH DESCRIPTION
.LP
Da \fIfopen\fP() function shall open tha file whose pathname is the
strin pointed ta by \fIfilename\fP, n' associates a
stream wit dat shit.
.LP
Da \fImode\fP argument points ta a string. If tha strang is one of
the following, tha file shall be opened up in tha indicated
mode. Otherwise, tha behavior is undefined.
.TP 7
\fIr\fP\ or\ \fIrb\fP
Open file fo' reading.
.TP 7
\fIw\fP\ or\ \fIwb\fP
Truncate ta zero length or create file fo' writing.
.TP 7
\fIa\fP\ or\ \fIab\fP
Append; open or create file fo' freestylin at end-of-file.
.TP 7
\fIr+\fP\ or\ \fIrb+\fP\ or\ \fIr+b\fP
Open file fo' update (readin n' writing).
.TP 7
\fIw+\fP\ or\ \fIwb+\fP\ or\ \fIw+b\fP
Truncate ta zero length or create file fo' update.
.TP 7
\fIa+\fP\ or\ \fIab+\fP\ or\ \fIa+b\fP
Append; open or create file fo' update, freestylin at end-of-file.
.sp
.LP
The
characta \fB'b'\fP shall have no effect yo, but be allowed fo' ISO\ C
standard conformance.  Openin a gangbangin' file wit read mode (\fIr\fP as the
first characta up in tha \fImode\fP argument) shall
fail if tha file do not exist or cannot be read.
.LP
Openin a gangbangin' file wit append mode (\fIa\fP as tha straight-up original gangsta characta in
the \fImode\fP argument) shall cause all subsequent writes
to tha file ta be forced ta tha then current end-of-file, regardless
of intervenin calls ta \fIfseek\fP().
.LP
When a gangbangin' file is opened wit update mode ( \fB'+'\fP as tha second or
third characta up in tha \fImode\fP argument), both input
and output may be performed on tha associated stream. But fuck dat shiznit yo, tha word on tha street is dat the
application shall ensure dat output aint directly followed by
input without a intervenin call ta \fIfflush\fP() or ta a gangbangin' file positioning
function ( \fIfseek\fP(), \fIfsetpos\fP(), or \fIrewind\fP()), and
input aint directly followed by output without a intervenin call
to a gangbangin' file
positionin function, unless tha input operation encountas end-of-file.
.LP
When opened, a stream is straight-up buffered if n' only if it can be determined
not ta refer ta a interactizzle device. Da error and
end-of-file indicators fo' tha stream shall be cleared.
.LP
If
\fImode\fP is \fIw\fP, \fIwb\fP, \fIa\fP, \fIab\fP, \fIw\fP+, \fIwb\fP+,
\fIw\fP+\fIb\fP, \fIa\fP+, \fIab\fP+, or
\fIa\fP+\fIb\fP, n' tha file did not previously exist, upon successful
completion, tha \fIfopen\fP() function shall mark for
update tha \fIst_atime\fP, \fIst_ctime\fP, n' \fIst_mtime\fP fields
of tha file n' tha \fIst_ctime\fP n' \fIst_mtime\fP
fieldz of tha parent directory.
.LP
If \fImode\fP is \fIw\fP, \fIwb\fP, \fIw\fP+, \fIwb\fP+, or \fIw\fP+\fIb\fP,
and tha file did previously exist, upon
successful completion, \fIfopen\fP() shall mark fo' update tha \fIst_ctime\fP
and \fIst_mtime\fP fieldz of tha file. The
\fIfopen\fP() function shall allocate a gangbangin' file descriptor as \fIopen\fP()
does. 
.LP
Afta a successful call ta tha \fIfopen\fP() function, tha orientation
of tha stream shall be cleared,  tha encoding
rule shall be cleared,  n' tha associated \fBmbstate_t\fP object
shall be set ta describe a initial conversion state.
.LP
The
largest value dat can be represented erectly up in a object of type
\fBoff_t\fP shall be established as tha offset maximum up in the
open file description. I aint talkin' bout chicken n' gravy biatch. 
.SH RETURN VALUE
.LP
Upon successful completion, \fIfopen\fP() shall return a pointa to
the object controllin tha stream. Otherwise, a null
pointa shall be returned,  n' \fIerrno\fP shall be set ta indicate
the error. Shiiit, dis aint no joke. 
.SH ERRORS
.LP
Da \fIfopen\fP() function shall fail if:
.TP 7
.B EACCES
Search permission is denied on a cold-ass lil component of tha path prefix, or
the file exists n' tha permissions specified by \fImode\fP are
denied, or tha file do not exist n' write permission is denied
for tha parent directory of tha file ta be pimped. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. 
.TP 7
.B EINTR
A
signal was caught durin \fIfopen\fP(). 
.TP 7
.B EISDIR
Da named file be a gangbangin' finger-lickin' directory n' \fImode\fP requires write access.
.TP 7
.B ELOOP
A
loop exists up in symbolic links encountered durin resolution of the
\fIpath\fP argument. 
.TP 7
.B EMFILE
{OPEN_MAX} file descriptors is currently open up in tha callin process.
.TP 7
.B ENAMETOOLONG
.sp
Da length of tha \fIfilename\fP argument exceedz {PATH_MAX} or a
pathname component is longer than {NAME_MAX}. 
.TP 7
.B ENFILE
Da maximum allowable number of filez is currently open up in tha system.
.TP 7
.B ENOENT
A
component of \fIfilename\fP do not name a existin file or \fIfilename\fP
is a empty string. 
.TP 7
.B ENOSPC
Da directory or file system dat would contain tha freshly smoked up file cannot
be expanded, tha file do not exist, n' tha file was ta be
created. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. 
.TP 7
.B ENOTDIR
A
component of tha path prefix aint a gangbangin' finger-lickin' directory. 
.TP 7
.B ENXIO
Da named file be a cold-ass lil characta special or block special file, n' the
device associated wit dis special file do not exist. 
.TP 7
.B EOVERFLOW
Da named file be a regular file n' tha size of tha file cannot be
represented erectly up in a object of type \fBoff_t\fP. 
.TP 7
.B EROFS
Da named file resides on a read-only file system n' \fImode\fP requires
write access. 
.sp
.LP
Da \fIfopen\fP() function may fail if:
.TP 7
.B EINVAL
Da value of tha \fImode\fP argument aint valid. Y'all KNOW dat shit, muthafucka! 
.TP 7
.B ELOOP
Mo' than {SYMLOOP_MAX} symbolic links was encountered durin resolution
of tha \fIpath\fP argument. 
.TP 7
.B EMFILE
{FOPEN_MAX} streams is currently open up in tha callin process. 
.TP 7
.B EMFILE
{STREAM_MAX} streams is currently open up in tha callin process. 
.TP 7
.B ENAMETOOLONG
.sp
Pathname resolution of a symbolic link produced a intermediate result
whose length exceedz {PATH_MAX}. 
.TP 7
.B ENOMEM
Insufficient storage space be available. 
.TP 7
.B ETXTBSY
Da file be a pure procedure (shared text) file dat is bein executed
and \fImode\fP requires write access. 
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.SS Openin a File
.LP
Da followin example tries ta open tha file named \fBfile\fP for
reading. Da \fIfopen\fP() function returns a gangbangin' file pointer
that is used up in subsequent \fIfgets\fP() n' \fIfclose\fP() calls.
If tha program cannot open tha file, it just ignores dat shit.
.sp
.RS
.nf

\fB#include <stdio.h>
\&...
FILE *fp;
\&...
void rgrep(const char *file)
{
\&...
    if ((fp = fopen(file, "r")) == NULL)
        return;
\&...
}
\fP
.fi
.RE
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIfclose\fP(), \fIfdopen\fP(), \fIfreopen\fP(), tha Base Definitions
volume of IEEE\ Std\ 1003.1-2001, \fI<stdio.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
