.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "SETPGID" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" setpgid 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
setpgid \- set process crew ID fo' thang control
.SH SYNOPSIS
.LP
\fB#include <unistd.h>
.br
.sp
int setpgid(pid_t\fP \fIpid\fP\fB, pid_t\fP \fIpgid\fP\fB);
.br
\fP
.SH DESCRIPTION
.LP
Da \fIsetpgid\fP() function shall either join a existin process
group or create a freshly smoked up process crew within tha session of
the callin process. Da process crew ID of a session leader shall
not chizzle. Upon successful completion, tha process crew ID of
the process wit a process ID dat matches \fIpid\fP shall be set
to \fIpgid\fP fo' realz. As a special case, if \fIpid\fP is 0, the
process ID of tha callin process shall be used. Y'all KNOW dat shit, muthafucka! Also, if \fIpgid\fP
is 0, tha process ID of tha indicated process shall be
used.
.SH RETURN VALUE
.LP
Upon successful completion, \fIsetpgid\fP() shall return 0; otherwise,
-1 shall be returned n' \fIerrno\fP shall be set to
indicate tha error.
.SH ERRORS
.LP
Da \fIsetpgid\fP() function shall fail if:
.TP 7
.B EACCES
Da value of tha \fIpid\fP argument matches tha process ID of a cold-ass lil child
process of tha callin process n' tha lil pimp process has
successfully executed one of tha \fIexec\fP functions.
.TP 7
.B EINVAL
Da value of tha \fIpgid\fP argument is less than 0, or aint a value
supported by tha implementation.
.TP 7
.B EPERM
Da process indicated by tha \fIpid\fP argument be a session leader.
.TP 7
.B EPERM
Da value of tha \fIpid\fP argument matches tha process ID of a cold-ass lil child
process of tha callin process n' tha lil pimp process is
not up in tha same session as tha callin process.
.TP 7
.B EPERM
Da value of tha \fIpgid\fP argument is valid but do not match the
process ID of tha process indicated by tha \fIpid\fP
argument n' there is no process wit a process crew ID dat matches
the value of tha \fIpgid\fP argument up in tha same session as
the callin process.
.TP 7
.B ESRCH
Da value of tha \fIpid\fP argument do not match tha process ID
of tha callin process or of a cold-ass lil lil pimp process of tha calling
process.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
None.
.SH RATIONALE
.LP
Da \fIsetpgid\fP() function shall crew processes together fo' the
purpose of signaling, placement up in foreground or
background, n' other thang control actions.
.LP
Da \fIsetpgid\fP() function is similar ta tha \fIsetpgrp\fP() function
of 4.2 BSD,
except dat 4.2 BSD allowed tha specified freshly smoked up process crew ta assume
any value. This presents certain securitizzle problems n' is
more flexible than necessary ta support thang control.
.LP
To provide tighta security, \fIsetpgid\fP() only allows tha calling
process ta join a process crew already up in use inside its
session or create a freshly smoked up process crew whose process crew ID was equal
to its process ID.
.LP
When a thang control shell spawns a freshly smoked up thang, tha processes up in tha thang
must be placed tha fuck into a freshly smoked up process crew via
\fIsetpgid\fP(). There is two timin constraints involved up in this
action:
.IP " 1." 4
Da freshly smoked up process must be placed up in tha freshly smoked up process crew before the
appropriate program is launched via one of tha \fIexec\fP functions.
.LP
.IP " 2." 4
Da freshly smoked up process must be placed up in tha freshly smoked up process crew before the
shell can erectly bust signals ta tha freshly smoked up process
group.
.LP
.LP
To address these constraints, tha followin actions is performed.
Da freshly smoked up processes call \fIsetpgid\fP() ta alta they own
process crews afta \fIfork\fP() but before \fIexec\fP. This satisfies
the first constraint. Under 4.3 BSD, tha second constraint is satisfied
by
the synchronization property of \fIvfork\fP(); dat is, tha shell
is suspended until the
child has completed tha \fIexec\fP, thus ensurin dat tha lil pimp has
completed the
\fIsetpgid\fP() fo' realz. A freshly smoked up version of \fIfork\fP() wit dis same synchronization
property was
considered yo, but dat shiznit was decided instead ta merely allow tha parent
shell process ta adjust tha process crew of its lil pimp processes
via \fIsetpgid\fP(). Both timin constraints is now satisfied by
havin both tha parent shell n' tha lil pimp attempt ta adjust the
process crew of tha lil pimp process; it do not matta which succeeds
first.
.LP
Since it would be confusin ta a application ta have its process
group chizzle afta it fuckin started executin (that is, afta \fIexec\fP),
and cuz tha lil pimp process would already have adjusted its process
group before
this, tha [EACCES] error was added ta disallow all dis bullshit.
.LP
One non-obvious use of \fIsetpgid\fP() is ta allow a thang control shell
to return itself ta its original gangsta process crew (the one
in effect when tha thang control shell was executed) fo' realz. A thang control
shell do dis before returnin control back ta its parent when
it is terminatin or suspendin itself as a way of restorin its thang
control "state" back ta what tha fuck its parent would expect. (Note
that tha original gangsta process crew of tha thang control shell typically
matches tha process crew of its parent yo, but dis is not
necessarily always tha case.)
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIexec\fP(), \fIgetpgrp\fP(), \fIsetsid\fP(), \fItcsetpgrp\fP(),
the Base Definitions volume of
IEEE\ Std\ 1003.1-2001, \fI<sys/types.h>\fP, \fI<unistd.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
