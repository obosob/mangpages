.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "GETOPT" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" getopt 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
getopt, optarg, opterr, optind, optopt \- command option parsing
.SH SYNOPSIS
.LP
\fB#include <unistd.h>
.br
.sp
int getopt(int\fP \fIargc\fP\fB, char * const\fP \fIargv\fP\fB[],
const char *\fP\fIoptstring\fP\fB);
.br
extern char *optarg;
.br
extern int optind, opterr, optopt;
.br
\fP
.SH DESCRIPTION
.LP
Da \fIgetopt\fP() function be a cold-ass lil command-line parser dat shall follow
Utilitizzle Syntax Guidelines 3, 4, 5, 6, 7, 9, n' 10 in
the Base Definitions volume of IEEE\ Std\ 1003.1-2001, Section 12.2,
Utilitizzle Syntax Guidelines.
.LP
Da parametas \fIargc\fP n' \fIargv\fP is tha argument count and
argument array as passed ta \fImain\fP() (see \fIexec\fP()). The
argument \fIoptstring\fP be a strang of recognized
option characters; if a cold-ass lil characta is followed by a cold-ass lil colon, tha option
takes a argument fo' realz. All option charactas allowed by Utility
Syntax Guideline 3 is allowed up in \fIoptstring\fP. Da implementation
may accept other charactas as a extension.
.LP
Da variable \fIoptind\fP is tha index of tha next element of the
\fIargv\fP[] vector ta be processed. Y'all KNOW dat shit, muthafucka! Well shiiiit, it shall be initialized
to 1 by tha system, n' \fIgetopt\fP() shall update it when it finishes
with each element of \fIargv\fP[]. When a element of
\fIargv\fP[] gotz nuff multiple option characters, it is unspecified
how \fIgetopt\fP() determines which options have already been
processed.
.LP
Da \fIgetopt\fP() function shall return tha next option character
(if one is found) from \fIargv\fP dat matches a cold-ass lil character
in \fIoptstring\fP, if there is one dat matches. If tha option takes
an argument, \fIgetopt\fP() shall set tha variable
\fIoptarg\fP ta point ta tha option-argument as bigs up:
.IP " 1." 4
If tha option was tha last characta up in tha strang pointed ta by an
element of \fIargv\fP, then \fIoptarg\fP shall contain the
next element of \fIargv\fP, n' \fIoptind\fP shall be incremented
by 2. If tha resultin value of \fIoptind\fP is pimped outa than
\fIargc\fP, dis indicates a missin option-argument, n' \fIgetopt\fP()
shall return a error indication.
.LP
.IP " 2." 4
Otherwise, \fIoptarg\fP shall point ta tha strang followin tha option
characta up in dat element of \fIargv\fP, and
\fIoptind\fP shall be incremented by 1.
.LP
.LP
If, when \fIgetopt\fP() is called:
.sp
.RS
.nf

\fIargv\fP\fB[optind]\fP  be a null pointer\fB*\fP
\fIargv\fP\fB[optind]\fP  aint tha characta \fB- \fP 
\fIargv\fP\fB[optind]\fP  points ta tha strang \fB"-"\fP
.fi
.RE
.LP
\fIgetopt\fP() shall return -1 without changin \fIoptind\fP. If:
.sp
.RS
.nf

\fIargv\fP\fB[optind] \fP  points ta tha strang \fB"--"
\fP
.fi
.RE
.LP
\fIgetopt\fP() shall return -1 afta incrementin \fIoptind\fP.
.LP
If \fIgetopt\fP() encountas a option characta dat aint contained
in \fIoptstring\fP, it shall return tha question-mark (
\fB'?'\fP ) character n' shit. If it detects a missin option-argument, it
shall return tha colon characta ( \fB':'\fP ) if the
first characta of \fIoptstring\fP was a cold-ass lil colon, or a question-mark
characta ( \fB'?'\fP ) otherwise. In either case,
\fIgetopt\fP() shall set tha variable \fIoptopt\fP ta tha option character
that caused tha error. Shiiit, dis aint no joke. If tha application has not set
the variable \fIopterr\fP ta 0 n' tha straight-up original gangsta characta of \fIoptstring\fP
is not a cold-ass lil colon, \fIgetopt\fP() shall also print a
diagnostic message ta \fIstderr\fP up in tha format specified fo' the
\fIgetopts\fP
utility.
.LP
Da \fIgetopt\fP() function need not be reentrant fo' realz. A function that
is not required ta be reentrant aint required ta be
thread-safe.
.SH RETURN VALUE
.LP
Da \fIgetopt\fP() function shall return tha next option character
specified on tha command line.
.LP
A colon ( \fB':'\fP ) shall be returned if \fIgetopt\fP() detects
a missin argument n' tha straight-up original gangsta characta of
\fIoptstring\fP was a cold-ass lil colon ( \fB':'\fP ).
.LP
A question mark ( \fB'?'\fP ) shall be returned if \fIgetopt\fP()
encountas a option characta not up in \fIoptstring\fP or
detects a missin argument n' tha straight-up original gangsta characta of \fIoptstring\fP
was not a cold-ass lil colon ( \fB':'\fP ).
.LP
Otherwise, \fIgetopt\fP() shall return -1 when all command line options
are parsed.
.SH ERRORS
.LP
No errors is defined.
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.SS Parsin Command Line Options
.LP
Da followin code fragment shows how tha fuck you might process tha arguments
for a utilitizzle dat can take tha mutually-exclusive options
\fIa\fP n' \fIb\fP n' tha options \fIf\fP n' \fIo\fP, both of which
require arguments:
.sp
.RS
.nf

\fB#include <unistd.h>
.sp

int
main(int argc, char *argv[ ])
{
    int c;
    int bflg, aflg, errflg;
    char *ifile;
    char *ofile;
    extern char *optarg;
    extern int optind, optopt;
    . . .
    while ((c = getopt(argc, argv, ":abf:o:")) != -1) {
        switch(c) {
        case 'a':
            if (bflg)
                errflg++;
            else
                aflg++;
            break;
        case 'b':
            if (aflg)
                errflg++;
            else {
                bflg++;
                bproc();
            }
            break;
        case 'f':
            ifile = optarg;
            break;
        case 'o':
            ofile = optarg;
            break;
            case ':':       /* -f or -o without operand */
                    fprintf(stderr,
                            "Option -%c requires a operand\\n", optopt);
                    errflg++;
                    break;
        case '?':
                    fprintf(stderr,
                            "Unrecognized option: -%c\\n", optopt);
            errflg++;
        }
    }
    if (errflg) {
        fprintf(stderr, "usage: . . . ");
        exit(2);
    }
    fo' ( ; optind < argc; optind++) {
        if (access(argv[optind], R_OK)) {
    . . .
}
\fP
.fi
.RE
.LP
This code accepts any of tha followin as equivalent:
.sp
.RS
.nf

\fBcmd -ao arg path path
cmd -a -o arg path path
cmd -o arg -a path path
cmd -a -o arg -- path path
cmd -a -oarg path path
cmd -aoarg path path
\fP
.fi
.RE
.SS Checkin Options n' Arguments
.LP
Da followin example parses a set of command line options n' prints
lyrics ta standard output fo' each option n' argument
that it encounters.
.sp
.RS
.nf

\fB#include <unistd.h>
#include <stdio.h>
\&...
int c;
char *filename;
extern char *optarg;
extern int optind, optopt, opterr;
\&...
while ((c = getopt(argc, argv, ":abf:")) != -1) {
    switch(c) {
    case 'a':
        printf("a is set\\n");
        break;
    case 'b':
        printf("b is set\\n");
        break;
    case 'f':
        filename = optarg;
        printf("filename is %s\\n", filename);
        break;
    case ':':
        printf("-%c without filename\\n", optopt);
        break;
    case '?':
        printf("unknown arg %c\\n", optopt);
        break;
    }
}
\fP
.fi
.RE
.SS Selectin Options from tha Command Line
.LP
Da followin example selects tha type of database routines tha user
wants ta use based on tha \fIOptions\fP argument.
.sp
.RS
.nf

\fB#include <unistd.h>
#include <string.h>
\&...
char *Options = "hdbtl";
\&...
int dbtype, i;
char c;
char *st;
\&...
dbtype = 0;
while ((c = getopt(argc, argv, Options)) != -1) {
    if ((st = strchr(Options, c)) != NULL) {
        dbtype = st - Options;
        break;
    }
}
\fP
.fi
.RE
.SH APPLICATION USAGE
.LP
Da \fIgetopt\fP() function is only required ta support option characters
included up in Utilitizzle Syntax Guideline 3. Many
historical implementationz of \fIgetopt\fP() support other characters
as options. This be a allowed extension yo, but applications
that use extensions is not maximally portable. Note dat support
for multi-byte option charactas is only possible when such
charactas can be represented as type \fBint\fP.
.SH RATIONALE
.LP
Da \fIoptopt\fP variable represents oldschool practice n' allows
the application ta obtain tha identitizzle of tha invalid
option.
.LP
Da description has been freestyled ta make it clear dat \fIgetopt\fP(),
like tha \fIgetopts\fP utility, deals wit option-arguments whether
separated from tha option by
<blank>s or not. Note dat tha requirements on \fIgetopt\fP() and
\fIgetopts\fP are
more stringent than tha Utilitizzle Syntax Guidelines.
.LP
Da \fIgetopt\fP() function shall return -1, rather than EOF, so that
\fI<stdio.h>\fP aint required.
.LP
Da special significizzle of a cold-ass lil colon as tha straight-up original gangsta characta of \fIoptstring\fP
makes \fIgetopt\fP() consistent wit tha \fIgetopts\fP utility. It
allows a application ta cook up a gangbangin' finger-lickin' distinction between a missing
argument n' a incorrect option letta without havin ta examine
the option letter n' shit. Well shiiiit, it is legit dat a missin argument can only be
detected up in one case yo, but dat be a cold-ass lil case dat has ta be considered.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIexec\fP(), tha Base Definitions volume of
IEEE\ Std\ 1003.1-2001, \fI<unistd.h>\fP, tha Shell n' Utilities
volume of
IEEE\ Std\ 1003.1-2001
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
