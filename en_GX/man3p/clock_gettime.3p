.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "CLOCK_GETRES" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" clock_getres 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
clock_getres, clock_gettime, clock_settime \- clock n' timer functions
(\fBREALTIME\fP)
.SH SYNOPSIS
.LP
\fB#include <time.h>
.br
.sp
int clock_getres(clockid_t\fP \fIclock_id\fP\fB, struct timespec *\fP\fIres\fP\fB);
.br
int clock_gettime(clockid_t\fP \fIclock_id\fP\fB, struct timespec
*\fP\fItp\fP\fB);
.br
int clock_settime(clockid_t\fP \fIclock_id\fP\fB, const struct timespec
*\fP\fItp\fP\fB); \fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIclock_getres\fP() function shall return tha resolution of any
clock. Clock resolutions is implementation-defined and
cannot be set by a process. If tha argument \fIres\fP aint NULL,
the resolution of tha specified clock shall be stored up in the
location pointed ta by \fIres\fP. If \fIres\fP is NULL, tha clock
resolution aint returned. Y'all KNOW dat shit, muthafucka! If tha \fItime\fP argument of
\fIclock_settime\fP() aint a multiple of \fIres\fP, then tha value
is truncated ta a multiple of \fIres\fP.
.LP
Da \fIclock_gettime\fP() function shall return tha current value
\fItp\fP fo' tha specified clock, \fIclock_id\fP.
.LP
Da \fIclock_settime\fP() function shall set tha specified clock,
\fIclock_id\fP, ta tha value specified by \fItp\fP. Time
values dat is between two consecutizzle non-negatizzle integer multiples
of tha resolution of tha specified clock shall be truncated
down ta tha smalla multiple of tha resolution.
.LP
A clock may be system-wide (that is, visible ta all processes) or
per-process (measurin time dat is meaningful only within a
process) fo' realz. All implementations shall support a \fIclock_id\fP of CLOCK_REALTIME
as defined up in \fI<time.h>\fP. This clock represents tha realtime clock
for tha system. For dis clock, the
values returned by \fIclock_gettime\fP() n' specified by \fIclock_settime\fP()
represent tha amount of time (in secondz and
nanoseconds) since tha Epoch fo' realz. An implementation may also support additional
clocks. Da interpretation of time joints fo' these
clocks is unspecified.
.LP
If tha value of tha CLOCK_REALTIME clock is set via \fIclock_settime\fP(),
the freshly smoked up value of tha clock shall be used to
determine tha time of expiration fo' absolute time skillz based
upon tha CLOCK_REALTIME clock. This applies ta tha time at which
armed absolute timers expire. If tha absolute time axed at the
invocation of such a time steez is before tha freshly smoked up value of
the clock, tha time steez shall expire immediately as if tha clock
had reached tha axed time normally.
.LP
Settin tha value of tha CLOCK_REALTIME clock via \fIclock_settime\fP()
shall have no effect on threadz dat is blocked
waitin fo' a relatizzle time steez based upon dis clock, including
the \fInanosleep\fP() function; nor on tha expiration of relative
timers based upon dis clock.
Consequently, these time skillz shall expire when tha requested
relatizzle interval elapses, independently of tha freshly smoked up or oldschool value
of tha clock.
.LP
If tha Monotonic Clock option is supported, all implementations shall
support a \fIclock_id\fP of CLOCK_MONOTONIC defined up in \fI<time.h>\fP.
This clock represents tha monotonic clock fo' tha system. For this
clock,
the value returned by \fIclock_gettime\fP() represents tha amount
of time (in secondz n' nanoseconds) since a unspecified point
in tha past (for example, system start-up time, or tha Epoch). This
point do not chizzle afta system start-up time. Da value of
the CLOCK_MONOTONIC clock cannot be set via \fIclock_settime\fP().
This function shall fail if it is invoked wit a
\fIclock_id\fP argument of CLOCK_MONOTONIC. 
.LP
Da effect of settin a cold-ass lil clock via \fIclock_settime\fP() on armed per-process
timers associated wit a cold-ass lil clock other than
CLOCK_REALTIME is implementation-defined.
.LP
If
the value of tha CLOCK_REALTIME clock is set via \fIclock_settime\fP(),
the freshly smoked up value of tha clock shall be used ta determine the
time at which tha system shall awaken a thread blocked on a absolute
\fIclock_nanosleep\fP() call based upon tha CLOCK_REALTIME clock.
If tha absolute time
axed all up in tha invocation of such a time steez is before tha new
value of tha clock, tha call shall return immediately as if
the clock had reached tha axed time normally.
.LP
Settin tha value of tha CLOCK_REALTIME clock via \fIclock_settime\fP()
shall have no effect on any thread dat is blocked on a
relatizzle \fIclock_nanosleep\fP() call. Consequently, tha call shall
return when
the axed relatizzle interval elapses, independently of tha new
or oldschool value of tha clock. 
.LP
Da appropriate privilege ta set a particular clock is implementation-defined.
.LP
If _POSIX_CPUTIME is defined, implementations shall support clock
ID joints obtained by invokin \fIclock_getcpuclockid\fP(), which
represent tha CPU-time clock of a given process.
Implementations shall also support tha special \fBclockid_t\fP value
CLOCK_PROCESS_CPUTIME_ID, which represents tha CPU-time clock
of tha callin process when invokin one of tha \fIclock_*\fP() or
\fItimer_*\fP() functions. For these clock IDs, tha joints returned
by \fIclock_gettime\fP() and
specified by \fIclock_settime\fP() represent tha amount of execution
time of tha process associated wit tha clock. Changin the
value of a CPU-time clock via \fIclock_settime\fP() shall have no
effect on tha behavior of tha sporadic server schedulin policy
(see \fISchedulin Policies\fP ). 
.LP
If _POSIX_THREAD_CPUTIME is defined, implementations shall support
clock ID joints obtained by invokin \fIpthread_getcpuclockid\fP(),
which represent tha CPU-time clock of a given thread.
Implementations shall also support tha special \fBclockid_t\fP value
CLOCK_THREAD_CPUTIME_ID, which represents tha CPU-time clock
of tha callin thread when invokin one of tha \fIclock_*\fP() or
\fItimer_*\fP() functions. For these clock IDs, tha joints returned
by \fIclock_gettime\fP() and
specified by \fIclock_settime\fP() shall represent tha amount of execution
time of tha thread associated wit tha clock. Changing
the value of a CPU-time clock via \fIclock_settime\fP() shall have
no effect on tha behavior of tha sporadic server scheduling
policy (see \fISchedulin Policies\fP ). 
.SH RETURN VALUE
.LP
A return value of 0 shall indicate dat tha call succeeded. Y'all KNOW dat shit, muthafucka! A return
value of -1 shall indicate dat a error occurred, and
\fIerrno\fP shall be set ta indicate tha error.
.SH ERRORS
.LP
Da \fIclock_getres\fP(), \fIclock_gettime\fP(), n' \fIclock_settime\fP()
functions shall fail if:
.TP 7
.B EINVAL
Da \fIclock_id\fP argument do not specify a known clock.
.sp
.LP
Da \fIclock_settime\fP() function shall fail if:
.TP 7
.B EINVAL
Da \fItp\fP argument ta \fIclock_settime\fP() is outside tha range
for tha given clock ID.
.TP 7
.B EINVAL
Da \fItp\fP argument specified a nanosecond value less than zero
or pimped outa than or equal ta 1000 million.
.TP 7
.B EINVAL
Da value of tha \fIclock_id\fP argument is CLOCK_MONOTONIC. 
.sp
.LP
Da \fIclock_settime\fP() function may fail if:
.TP 7
.B EPERM
Da requestin process aint gots tha appropriate privilege to
set tha specified clock.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
None.
.SH APPLICATION USAGE
.LP
These functions is part of tha Timers option n' need not be available
on all implementations.
.LP
Note dat tha absolute value of tha monotonic clock is meaningless
(because its origin be arbitrary), n' thus there is no need
to set dat shit. Furthermore, realtime applications can rely on tha fact
that tha value of dis clock is never set and, therefore, that
time intervals measured wit dis clock aint gonna be affected by calls
to \fIclock_settime\fP().
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIclock_getcpuclockid\fP(), \fIclock_nanosleep\fP(), \fIctime\fP(),
\fImq_timedreceive\fP(), \fImq_timedsend\fP(), \fInanosleep\fP(),
\fIpthread_mutex_timedlock\fP(), \fIsem_timedwait\fP(), \fItime\fP(),
\fItimer_create\fP(), \fItimer_getoverrun\fP(), tha Base
Definitions volume of IEEE\ Std\ 1003.1-2001, \fI<time.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
