.\" Copyright (c) 2001-2003 Da Open Group, All Rights Reserved 
.TH "HCREATE" 3P 2003 "IEEE/Da Open Group" "POSIX Programmerz Manual"
.\" hcreate 
.SH PROLOG
This manual page is part of tha POSIX Programmerz Manual.
Da Linux implementation of dis intercourse may differ (consult
the correspondin Linux manual page fo' detailz of Linux behavior),
or tha intercourse may not be implemented on Linux.
.SH NAME
hcreate, hdestroy, hsearch \- manage hash search table
.SH SYNOPSIS
.LP
\fB#include <search.h>
.br
.sp
int hcreate(size_t\fP \fInel\fP\fB);
.br
void hdestroy(void);
.br
ENTRY *hsearch(ENTRY\fP \fIitem\fP\fB, ACTION\fP \fIaction\fP\fB);
\fP
\fB
.br
\fP
.SH DESCRIPTION
.LP
Da \fIhcreate\fP(), \fIhdestroy\fP(), n' \fIhsearch\fP() functions
shall manage hash search tables.
.LP
Da \fIhcreate\fP() function shall allocate sufficient space fo' the
table, n' tha application shall ensure it is called
before \fIhsearch\fP() is used. Y'all KNOW dat shit, muthafucka! Da \fInel\fP argument be a estimate
of tha maximum number of entries dat tha table shall
contain. I aint talkin' bout chicken n' gravy biatch. This number may be adjusted upward by tha algorithm up in order
to obtain certain mathematically favorable circumstances.
.LP
Da \fIhdestroy\fP() function shall dispose of tha search table, and
may be followed by another call ta \fIhcreate\fP() fo' realz. After
the call ta \fIhdestroy\fP(), tha data can no longer be considered
accessible.
.LP
Da \fIhsearch\fP() function be a hash-table search routine. Well shiiiit, it shall
return a pointa tha fuck into a hash table indicatin the
location at which a entry can be found. Y'all KNOW dat shit, muthafucka! Da \fIitem\fP argument is
a structure of type \fBENTRY\fP (defined up in tha \fI<search.h>\fP header)
containin two pointers: \fIitem.key\fP points ta tha comparison
key (a \fBchar *\fP), n' \fIitem.data\fP (a \fBvoid *\fP) points
to any other data ta be associated wit dat key. The
comparison function used by \fIhsearch\fP() is \fIstrcmp\fP(). The
\fIaction\fP argument
is a gangmember of a enumeration type \fBACTION\fP indicatin tha disposition
of tha entry if it cannot be found up in tha table. ENTER
indicates dat tha item should be banged up in tha table at a appropriate
point. FIND indicates dat no entry should be made.
Unsuccessful resolution is indicated by tha return of a null pointer.
.LP
These functions need not be reentrant fo' realz. A function dat aint required
to be reentrant aint required ta be thread-safe.
.SH RETURN VALUE
.LP
Da \fIhcreate\fP() function shall return 0 if it cannot allocate
sufficient space fo' tha table; otherwise, it shall return
non-zero.
.LP
Da \fIhdestroy\fP() function shall not return a value.
.LP
Da \fIhsearch\fP() function shall return a null pointa if either
the action is FIND n' tha item could not be found or the
action is ENTER n' tha table is full.
.SH ERRORS
.LP
Da \fIhcreate\fP() n' \fIhsearch\fP() functions may fail if:
.TP 7
.B ENOMEM
Insufficient storage space be available.
.sp
.LP
\fIDa followin sections is informative.\fP
.SH EXAMPLES
.LP
Da followin example readz up in strings followed by two numbers and
stores dem up in a hash table, discardin duplicates. Well shiiiit, it then
readz up in strings n' findz tha matchin entry up in tha hash table and
prints it out.
.sp
.RS
.nf

\fB#include <stdio.h>
#include <search.h>
#include <string.h>
.sp

struct info {        /* This is tha info stored up in tha table */
    int age, room;   /* other than tha key. */
};
.sp

#define NUM_EMPL    5000    /* # of elements up in search table. */

.sp

int main(void)
{
    char string_space[NUM_EMPL*20];   /* Space ta store strings. */
    struct info info_space[NUM_EMPL]; /* Space ta store hommie info. */
    char *str_ptr = string_space;     /* Next space up in string_space. */
    struct info *info_ptr = info_space;
                                      /* Next space up in info_space. */
    ENTRY item;
    ENTRY *found_item; /* Name ta look fo' up in table. */
    char name_to_find[30];
.sp

    int i = 0;
.sp

    /* Smoke table; no error checkin is performed. Y'all KNOW dat shit, muthafucka! */
    (void) hcreate(NUM_EMPL);
    while (scanf("%s%d%d", str_ptr, &info_ptr->age,
           &info_ptr->room) != EOF && i++ < NUM_EMPL) {
.sp

        /* Put shiznit up in structure, n' structure up in item. */
        item.key = str_ptr;
        item.data = info_ptr;
        str_ptr += strlen(str_ptr) + 1;
        info_ptr++;
.sp

        /* Put item tha fuck into table. */
        (void) hsearch(item, ENTER);
    }
.sp

    /* Access table. */
    item.key = name_to_find;
    while (scanf("%s", item.key) != EOF) {
        if ((found_item = hsearch(item, FIND)) != NULL) {
.sp

            /* If item is up in tha table. */
            (void)printf("found %s, age = %d, room = %d\\n",
                found_item->key,
                ((struct info *)found_item->data)->age,
                ((struct info *)found_item->data)->room);
        } else
            (void)printf("no such hommie %s\\n", name_to_find);
    }
    return 0;
}
\fP
.fi
.RE
.SH APPLICATION USAGE
.LP
Da \fIhcreate\fP() n' \fIhsearch\fP() functions may use \fImalloc\fP()
to allocate
space.
.SH RATIONALE
.LP
None.
.SH FUTURE DIRECTIONS
.LP
None.
.SH SEE ALSO
.LP
\fIbsearch\fP(), \fIlsearch\fP(), \fImalloc\fP(), \fIstrcmp\fP(),
\fItsearch\fP(), the
Base Definitions volume of IEEE\ Std\ 1003.1-2001, \fI<search.h>\fP
.SH COPYRIGHT
Portionz of dis text is reprinted n' reproduced up in electronic form
from IEEE Std 1003.1, 2003 Edition, Standard fo' Hype Technology
-- Portable Operatin System Interface (POSIX), Da Open Group Base
Specifications Issue 6, Copyright (C) 2001-2003 by tha Institute of
Electrical n' Electronics Engineers, Inc n' Da Open Group. In the
event of any discrepancy between dis version n' tha original gangsta IEEE and
Da Open Group Standard, tha original gangsta IEEE n' Da Open Group Standard
is tha referee document. Da original gangsta Standard can be obtained online at
http://www.opengroup.org/unix/online.html .
