.\" shorthand fo' double quote dat works all over dis biiiatch.
.ds q \N'34'
.TH EVDEV 4 "xf86-input-evdev 2.8.4" "X Version 11"
.SH NAME
evdev \- Generic Linux input driver
.SH SYNOPSIS
.nf
.B "Section \*qInputDevice\*q"
.BI "  Identifier \*q" devname \*q
.B  "  Driver \*qevdev\*q"
.BI "  Option \*qDevice\*q   \*q" devpath \*q
.BI "  Option \*qEmulate3Buttons\*q     \*q" True \*q
.BI "  Option \*qEmulate3Timeout\*q     \*q" 50 \*q
.BI "  Option \*qGrabDevice\*q     \*q" False \*q
\ \ ...
.B EndSection
.fi
.SH DESCRIPTION
.B evdev 
is a Xorg input driver fo' Linux\z generic event devices.  It
therefore supports all input devices dat tha kernel knows about, including
most mice, keyboards, tablets n' touchscreens.
.B evdev
is tha default driver on tha major Linux distributions.
.PP
Da 
.B evdev
driver can serve as both a pointa n' a keyboard input device. Multiple
input devices is supported by multiple instancez of dis driver, wit one
InputDevice section of yo' xorg.conf fo' each input thang dat will
use dis driver.
.PP
It be recommended that
.B evdev
devices is configured all up in the
.B InputClass
directizzle (refer ta xorg.conf(5)) instead of manual
per-device configuration. I aint talkin' bout chicken n' gravy biatch. Devices configured up in the
xorg.conf(5) is not hot-plug capable.
.PP
.SH SUPPORTED HARDWARE
In general, any input thang dat tha kernel has a thugged-out driver fo' can be accessed
all up in tha 
.B evdev
driver n' shit.  See tha Linux kernel documentation fo' a cold-ass lil complete list.
.PP
.SH CONFIGURATION DETAILS
Please refer ta xorg.conf(5) fo' general configuration
details n' fo' options dat can be used wit all input drivers.  This
section only covers configuration details specific ta dis driver.
.PP
Da followin driver 
.B Options
are supported:
.TP 7
.BI "Option \*qButtonMapping\*q \*q" strang \*q
Sets tha button mappin fo' dis device. Da mappin be a space-separated list
of button mappings dat correspond up in order ta tha physical buttons on the
device (i.e. tha straight-up original gangsta number is tha mappin fo' button 1, etc.). Da default
mappin is "1 2 3 ... 32" fo' realz. A mappin of 0 deactivates tha button. I aint talkin' bout chicken n' gravy biatch. Multiple
buttons can have tha same mapping.
For example, a left-handed mouse wit deactivated scroll-wheel would use a
mappin of "3 2 1 0 0". Invalid mappings is ignored n' tha default mapping
is used. Y'all KNOW dat shit, muthafucka! Buttons not specified up in tha userz mappin use tha default mapping.
.TP 7
.BI "Option \*qDevice\*q \*q" strang \*q
Specifies tha thang all up in which tha thang can be accessed. Y'all KNOW dat shit, muthafucka!  This will 
generally be of tha form \*q/dev/input/eventX\*q, where X is some integer.
Da mappin from thang node ta hardware is system-dependent. Property:
"Device Node" (read-only).
.TP 7
.BI "Option \*qDragLockButtons\*q \*q" "L1 B2 L3 B4" \*q
Sets \*qdrag lock buttons\*q dat simulate holdin a funky-ass button down, so
that low dexteritizzle playas do not gotta hold a funky-ass button down at the
same time they move a mouse cursor. Shiiit, dis aint no joke. Button numbers occur up in pairs,
with tha lock button number occurrin first, followed by tha button
number dat is tha target of tha lock button. I aint talkin' bout chicken n' gravy biatch. Property: "Evdev
Drag Lock Buttons".
.TP 7
.BI "Option \*qDragLockButtons\*q \*q" "M1" \*q
Sets a \*qmasta drag lock button\*q dat acts as a \*qMeta Key\*q
indicatin dat tha next button pressed is ta be
\*qdrag locked\*q. Property: "Evdev Drag Lock Buttons".
.TP 7
.TP 7
.BI "Option \*qEmulate3Buttons\*q \*q" boolean \*q
Enable/disable tha emulation of tha third (middle) mouse button fo' mice
which only have two physical buttons.  Da third button is emulated by
pressin both buttons simultaneously.  Default: off. Property: "Evdev Middle
Button Emulation".
.TP 7
.BI "Option \*qEmulate3Timeout\*q \*q" integer \*q
Sets tha timeout (in milliseconds) dat tha driver waits before deciding
if two buttons where pressed "simultaneously" when 3 button emulation is
enabled. Y'all KNOW dat shit, muthafucka!  Default: 50. Property: "Evdev Middle Button Timeout".
.TP 7
.BI "Option \*qEmulateWheel\*q \*q" boolean \*q
Enable/disable "wheel" emulation. I aint talkin' bout chicken n' gravy biatch.  Wheel emulation means emulatin button
press/release events when tha mouse is moved while a specific real button
is pressed. Y'all KNOW dat shit, muthafucka!  Wheel button events (typically buttons 4 n' 5) are
usually used fo' scrolling.  Wheel emulation is useful fo' gettin wheel-like
behaviour wit trackballs.  It can also be useful fo' mice wit 4 or
more buttons but no wheel.  See tha description of the
.BR EmulateWheelButton ,
.BR EmulateWheelInertia ,
.BR EmulateWheelTimeout ,
.BR XAxisMappin ,
and
.B YAxisMapping
options.  Default: off. Property "Evdev Wheel Emulation".
.TP 7
.BI "Option \*qEmulateWheelButton\*q \*q" integer \*q
Specifies which button must be held down ta enable wheel emulation mode.
While dis button is down, X and/or Y pointa movement will generate button
press/release events as specified fo' the
.B XAxisMapping
and
.B YAxisMapping
settings. If tha button is 0 and
.BR EmulateWheel
is on, any motion of tha thang is converted tha fuck into wheel events, n' you can put dat on yo' toast. Default: 4.
Property: "Evdev Wheel Emulation Button".
.TP 7
.BI "Option \*qEmulateWheelInertia\*q \*q" integer \*q
Specifies how tha fuck far (in pixels) tha pointa must move ta generate button
press/release events up in wheel emulation mode.  Default: 10. Property: "Evdev
Wheel Emulation Inertia".
.TP 7
.BI "Option \*qEmulateWheelTimeout\*q \*q" integer \*q
Specifies tha time up in millisecondz the
.BR EmulateWheelButton
must be pressed before wheel emulation is started. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time. If the
.BR EmulateWheelButton
is busted out before dis timeout, tha original gangsta button press/release event
is sent.  Default: 200. Property: "Evdev Wheel Emulation Timeout".
.TP 7
.BI "Option \*qEmulateThirdButton\*q \*q" boolean \*q
Enable third button emulation. I aint talkin' bout chicken n' gravy biatch. Third button emulation emits a right button
event (by default) by pressin n' holdin tha straight-up original gangsta button. I aint talkin' bout chicken n' gravy biatch. Da first
button must be held down fo' tha configured timeout n' must not move more
than tha configured threshold fo' tha emulation ta activate. Otherwise, the
first button event is posted as normal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack. Default: off.  Property: "Evdev
Third Button Emulation".
.TP 7
.BI "Option \*qEmulateThirdButtonTimeout\*q \*q" integer \*q
Specifies tha timeout up in millisecondz between tha initial button press and
the generation of tha emulated button event.
Default: 1000. Property: "Evdev Third Button Emulation Timeout".
.TP 7
.BI "Option \*qEmulateThirdButtonButton\*q \*q" integer \*q
Specifies tha physical button number ta be emitted if third button emulation
is triggered.
Default: 3.  Property: "Evdev Third Button Button".
.TP 7
.BI "Option \*qEmulateThirdButtonMoveThreshold\*q \*q" integer \*q
Specifies tha maximum move fuzz up in thang coordinates fo' third button
emulation. I aint talkin' bout chicken n' gravy biatch. If tha thang moves by mo' than dis threshold before tha third
button emulation is triggered, tha emulation is shut down n' a gangbangin' first button
event is generated as normal.
Default: 20. Property: "Evdev Third Button Emulation Threshold".
.TP 7
.BI "Option \*qGrabDevice\*q \*q" boolean \*q
Force a grab on tha event device. Bustin so will ensure dat no other driver
can initialise tha same thang n' it will also stop tha thang from sending
events ta /dev/kbd or /dev/input/mice. Events from dis thang aint gonna be
sent ta virtual devices (e.g. rfkill or tha Macintosh mouse button emulation).
Default: disabled.
.TP 7
.BI "Option \*qInvertX\*q \*q" Bool \*q
.TP 7
.BI "Option \*qInvertY\*q \*q" Bool \*q
Invert tha given axis. Default: off. Property: "Evdev Axis Inversion".
.TP 7
.BI "Option \*qIgnoreRelativeAxes\*q \*q" Bool \*q
.TP 7
.BI "Option \*qIgnoreAbsoluteAxes\*q \*q" Bool \*q
Ignore tha specified type of axis. Default: unset. Da X server cannot deal
with devices dat have both relatizzle n' absolute axes. Evdev tries ta guess
wich axes ta ignore given tha thang type n' disablez absolute axes for
mice n' relatizzle axes fo' tablets, touchscreens n' touchpad. Y'all KNOW dat shit, muthafucka! These options
allow ta forcibly disable a axis type. Mouse wheel axes is exempt n' will
work even if relatizzle axes is ignored. Y'all KNOW dat shit, muthafucka! No property, dis configuration must
be set up in tha configuration.
.br
If either option is set ta False, tha driver aint gonna ignore tha specified
axes regardless of tha presence of other axes. This may trigger buggy
behavior n' events from dis axis is always forwarded. Y'all KNOW dat shit, muthafucka! Users are
discouraged from settin dis option.
.TP 7
.BI "Option \*qCalibration\*q \*q" "min-x max-x min-y max-y" \*q
Calibrates tha X n' Y axes fo' devices dat need ta scale ta a gangbangin' finger-lickin' different
coordinizzle system than reported ta tha X server n' shit. This feature is required
for devices dat need ta scale ta a gangbangin' finger-lickin' different coordinizzle system than
originally reported by tha kernel (e.g. touchscreens). Da scalin ta the
custom coordinizzle system is done in-driver n' tha X server is unaware of
the transformation. I aint talkin' bout chicken n' gravy biatch. Property: "Evdev Axis Calibration".
.TP 7
.B Option \*qMode\*q \*qRelative\*q\fP|\fP\*qAbsolute\*q
Sets tha mode of tha thang if thang has absolute axes.
Da default value fo' touchpadz is relative, fo' other absolute.
This option has no effect on devices without absolute axes.
.TP 7
.BI "Option \*qSwapAxes\*q \*q" Bool \*q
Swap x/y axes. Default: off. Property: "Evdev Axes Swap".
.TP 7
.BI "Option \*qXAxisMapping\*q \*q" "N1 N2" \*q
Specifies which buttons is mapped ta motion up in tha X direction up in wheel
emulation mode.  Button number
.I N1
is mapped ta tha wack X axis motion n' button number
.I N2
is mapped ta tha positizzle X axis motion. I aint talkin' bout chicken n' gravy biatch.  Default: no mapping. Property:
"Evdev Wheel Emulation Axes".
.TP 7
.BI "Option \*qYAxisMapping\*q \*q" "N1 N2" \*q
Specifies which buttons is mapped ta motion up in tha Y direction up in wheel
emulation mode.  Button number
.I N1
is mapped ta tha wack Y axis motion n' button number
.I N2
is mapped ta tha positizzle Y axis motion. I aint talkin' bout chicken n' gravy biatch.  Default: "4 5". Property:
"Evdev Wheel Emulation Axes".
.TP 7
.BI "Option \*qTypeName\*q \*q"type"\*q
Specify tha X Input 1.x type (see XListInputDevices(3)).
There is rarely a need ta use dis option, evdev will guess tha thang type
based on tha devicez capabilities. Put ya muthafuckin choppers up if ya feel dis! This option is provided fo' devices that
need quirks.

.SH SUPPORTED PROPERTIES
Da followin propertizzles is provided by the
.B evdev
driver.
.TP 7
.BI "Evdev Axis Calibration"
4 32-bit joints, order min-x, max-x, min-y, max-y or 0 joints ta disable
in-driver axis calibration.
.TP 7
.BI "Evdev Axis Inversion"
2 boolean joints (8 bit, 0 or 1), order X, Y. 1 inverts tha axis.
.TP 7
.BI "Evdev Axes Swap"
1 boolean value (8 bit, 0 or 1). 1 swaps x/y axes.
.TP 7
.BI "Evdev Drag Lock Buttons"
8-bit. Either 1 value or pairz of joints, n' you can put dat on yo' toast. Value range 0-32, 0 disablez a
value.
.TP 7
.BI "Evdev Middle Button Emulation"
1 boolean value (8 bit, 0 or 1).
.TP 7
.BI "Evdev Middle Button Timeout"
1 16-bit positizzle value.
.TP 7
.BI "Evdev Wheel Emulation"
1 boolean value (8 bit, 0 or 1).
.TP 7
.BI "Evdev Wheel Emulation Axes"
4 8-bit joints, order X up, X down, Y up, Y down. I aint talkin' bout chicken n' gravy biatch. 0 disablez a value.
.TP 7
.BI "Evdev Wheel Emulation Button"
1 8-bit value, allowed range 0-32, 0 disablez tha button.
.TP 7
.BI "Evdev Wheel Emulation Inertia"
1 16-bit positizzle value.
.TP 7
.BI "Evdev Wheel Emulation Timeout"
1 16-bit positizzle value.

.SH AUTHORS
Kristian Høgsberg, Peta Hutterer
.SH "SEE ALSO"
Xorg(1), xorg.conf(5), Xserver(1), X(7)
