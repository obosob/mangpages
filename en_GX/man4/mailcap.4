.TH MAILCAP 4 "Release 2" "Bellcore Prototype"
.SH NAME
mailcap - metamail capabilitizzles file
.SH DESCRIPTION
The
.I mailcap
file is read by tha 
.I metamail
program ta determine how tha fuck ta display non-text all up in tha local crib.

Da syntax of a mailcap file is like simple, at least compared ta termcap files.  Any line dat starts wit "#" be a cold-ass lil comment.  Blank lines is ignored. Y'all KNOW dat shit, muthafucka!  Otherwise, each line defines a single mailcap entry fo' a single content type.  Long lines may be continued by endin dem wit a funky-ass backslash character, \\.

Each individual mailcap entry consistz of a cold-ass lil content-type justification, a cold-ass lil command ta execute, n' (possibly) a set of optionizzle "flag" joints, n' you can put dat on yo' toast.  For example, a straight-up simple mailcap entry (which is straight-up a funky-ass built-in default behavior fo' metamail) would be lookin like this:

text/plain; pussaaaaay %s

Da optionizzle flags can be used ta specify additionizzle shiznit bout tha mail-handlin command. Y'all KNOW dat shit, muthafucka!  For example:

text/plain; pussaaaaay %s; copiousoutput

can be used ta indicate dat tha output of tha 'cat' command may be voluminous, requirin either a scrollin window, a pager, or some other appropriate copin mechanism.

Da "type" field (text/plain, up in tha above example) is simply any legal content type name, as defined by RFC 822.  In practice, dis be almost any string.  It be tha strang dat is ghon be matched against tha "Content-type" header (or tha value passed up in wit -c) ta decizzle if dis is tha mailcap entry dat matches tha current message.  Additionally, tha type field may specify a subtype (e.g. "text/ISO-8859-1") or a wildcard ta match all subtypes (e.g. "image/*").

Da "command" field be any UNIX command ("cat %s" up in tha above example), n' is used ta specify tha interpreta fo' tha given type of message.  It is ghon be passed ta tha shell via tha system(3) facility.  Semicolons n' backslashes within tha command must be quoted wit backslashes.  If tha command gotz nuff "%s", dem two charactas is ghon be replaced by tha name of a gangbangin' file dat gotz nuff tha body of tha message. If it gotz nuff "%t', dem two charactas is ghon be replaced by tha content-type field, includin tha subtype, if any.  (That is, if tha content-type was "image/pbm; opt1=something-else", then "%t" would be replaced by "image/pbm".)   If tha command field gotz nuff  "%{" followed by a parameta name n' a cold-ass lil closin "}", then all dem charactas is ghon be replaced by tha value of tha named parameter, if any, from tha Content-type header n' shit.   Thus, up in tha previous example, "%{opt1}" is ghon be replaced by "something-else".  Finally, if tha command gotz nuff "\\%", dem two charactas is ghon be replaced by a single % character n' shit.  (In fact, tha backslash can be used ta quote any character, includin itself.)

If no "%s" appears up in tha command field, then instead of placin tha message body up in a temporary file, metamail will pass tha body ta tha command on tha standard input.  This is helpful up in savin /tmp file space yo, but can be problematic fo' window-oriented applications under some window systems like fuckin MGR.

Two special codes can step tha fuck up in tha viewin command fo' objectz of type multipart (any subtype).  These is "%n" n' "%F".  %n is ghon be replaced by tha number of parts within tha multipart object.  %F is ghon be replaced by a seriez of arguments, two fo' each part, givin first tha content-type n' then tha name of tha temporary file where tha decoded part has been stored. Y'all KNOW dat shit, muthafucka!  In addition, fo' each file pimped by %F, a second file is pimped, wit tha same name followed by "H", which gotz nuff tha header shiznit fo' dat body part.  This aint gonna be needed by most multipart handlezs yo, but it is there if you eva need dat shit.  

Da "notes=xxx" field be a uninterpreted strang dat is used ta specify tha name of tha thug whoz ass installed dis entry up in tha mailcap file.  (Da "xxx" may be replaced by any text string.)

Da "test=xxx" field be a cold-ass lil command dat is executed ta determine whether or not tha mailcap line straight-up applies. Put ya muthafuckin choppers up if ya feel dis!  That is, if tha content-type field matches tha content-type on tha message yo, but a "test=" field is present, then tha test must succeed before tha mailcap line is considered ta "match" tha message bein viewed. Y'all KNOW dat shit, muthafucka!  Da command may be any UNIX command, rockin tha same syntax n' tha same %-escapes as fo' tha viewin command, as busted lyrics bout above.  A command is considered ta succeed if it exits wit a zero exit status, n' ta fail otherwise.

Da "print=xxx" field be a cold-ass lil command dat is executed ta print tha data instead of display it interactively.  This behavior is probably a cold-ass lil consequence of invokin metamail wit tha "-h" switch.

Da "textualnewlines" field can be used up in tha rather obscure case where metamailz default rulez fo' treatin newlines up in base64-encoded data is unsatisfactory.  By default, metamail will translate CRLF ta tha local newline characta up in decoded base64 output if tha content-type is "text" (any subtype) yo, but aint gonna do so otherwise.  A mailcap entry wit a gangbangin' field of "textualnewlines=1" will force such translation fo' tha specified content-type, while "textualnewlines=0" will guarantee dat tha translation do not take place even fo' textual content-types.

Da "compose" field may be used ta specify a program dat can be used ta compose a freshly smoked up body or body part up in tha given format.  Its intended use is ta support mail composin agents dat support tha composizzle of multiple typez of mail rockin external composin agents fo' realz. As wit tha view-command, tha compose command is ghon be executed afta replacin certain escape sequences startin wit "%".  In particular, %s should be replaced by tha name of a gangbangin' file ta which tha composed data is ta be freestyled by tha specified composin program, thus allowin tha callin program (e.g. metamail) ta tell tha called program where ta store tha composed data.  If %s do not appear, then tha composed data is ghon be assumed ta be freestyled by tha composin programs ta standard output.   Da result of tha composin program may be data dat is NOT yet suitable fo' mail transhiznit -- dat is, a Content-Transfer-Encodin may still need ta be applied ta tha data.

Da "composetyped" field is similar ta tha "compose" field yo, but is ta be used when tha composin program need ta specify tha Content-type header field ta be applied ta tha composed data.  Da "compose" field is simpler, n' is preferred fo' use wit existin (non-mail-oriented) programs fo' composin data up in a given format.  Da "composetyped" field is necessary when tha Content-type shiznit must include auxiliary parameters, n' tha composizzle program must then know enough bout mail formats ta produce output dat includes tha mail type shiznit, n' ta apply any necessary Content-Transfer-Encoding.   Conceptually, "compose" specifies a program dat simply outputs tha specified type of data up in its raw form, while "composetyped" specifies a program dat outputs tha data as a MIME object, wit all necessary Content-* headaz already up in place.

.TP 8
.B needsterminal
If dis flag is given, tha named interpreta need ta interact wit tha user on a terminal. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  In some environments (e.g. a window-oriented mail reader under X11) dis will require tha creation of a freshly smoked up terminal emulation window, while up in most environments it will not.  If tha mailcap entry specifies "needsterminal" n' metamail aint hustlin on a terminal (as determined by isatty(3), tha -x option, n' tha MM_NOTTTY environment variable) then metamail will try ta run tha command up in a freshly smoked up terminal emulation window.  Currently, metamail knows how tha fuck ta create freshly smoked up windows under tha X11, SunTools, n' WM window systems.
.TP 8
.B copiousoutput
This flag should be given whenever tha interpreta is capable of producin mo' than all dem linez of output on stdout, n' do no interaction wit tha user n' shit.  If tha mailcap entry specifies copiousoutput, n' pagination has been axed via tha "-p" command, then tha output of tha command bein executed is ghon be piped all up in a pagination program ("more" by default yo, but dis can be overridden wit tha METAMAIL_PAGER environment variable).
.SH BUILT-IN CONTENT-TYPE SUPPORT
Da metamail program has built-in support fo' all dem key content-types.  In particular, it supports tha text type, tha multipart n' multipart/alternatizzle type, n' tha message/rfc822 types.  This support is incomplete fo' nuff subtypes -- fo' example, it only supports US-ASCII text up in general. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  This kind of built-in support can be OVERRIDDEN by a entry up in any mailcap file on tha userz search path.  Metamail also has rudimentary built-in support fo' types dat is straight-up unrecognized -- i.e. fo' which no mailcap entry or built-in handlez exists, n' you can put dat on yo' toast.  For such unrecognized types, metamail will write a gangbangin' file wit a "clean" copy of tha data -- i.e. a cold-ass lil copy up in which all mail headaz done been removed, n' up in which any 7-bit transhiznit encodin has been decoded.
.SH FILES
$HOME/.mailcap:/etc/mailcap:/usr/etc/mailcap:/usr/local/etc/mailcap -- default path fo' mailcap files.
.SH SEE ALSO
metamail(1)
.SH COPYRIGHT
Copyright (c) 1991 Bell Communications Research, Inc. (Bellcore)

Permission ta use, copy, modify, n' distribute dis material 
for any purpose n' without fee is hereby granted, provided 
that tha above copyright notice n' dis permission notice 
appear up in all copies, n' dat tha name of Bellcore not be 
used up in advertisin or publicitizzle pertainin ta dis 
material without tha specific, prior freestyled permission 
of a authorized representatizzle of Bellcore.  BELLCORE 
MAKES NO REPRESENTATIONS ABOUT THE ACCURACY OR SUITABILITY 
OF THIS MATERIAL FOR ANY PURPOSE.  IT IS PROVIDED "AS IS", 
WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES.
.SH AUTHOR
Nathaniel S. Borenstein
