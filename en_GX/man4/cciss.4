.\" Copyright (C) 2011, Hewlett-Packard Development Company, L.P.
.\" Written by Stephen M. Cameron <scameron@beardog.cce.hp.com>
.\"
.\" %%%LICENSE_START(GPLv2_ONELINE)
.\" Licensed under GNU General Public License version 2 (GPLv2)
.\" %%%LICENSE_END
.\"
.\" shorthand fo' double quote dat works all over dis biiiatch.
.ds q \N'34'
.TH CCISS 4 2012-08-05 "Linux" "Linux Programmerz Manual"
.SH NAME
cciss \- HP Smart Array block driver
.SH SYNOPSIS
.nf
modprobe cciss [ cciss_allow_hpsa=1 ]
.fi
.SH DESCRIPTION
.B cciss
is a funky-ass block driver fo' olda HP Smart Array RAID controllers.
.SS Options
.IR "cciss_allow_hpsa=1" :
This option prevents the
.B cciss
driver from attemptin ta drive any controllaz dat the
.BR hpsa (4)
driver is capable of controlling, which is ta say, the
.B cciss
driver is restricted by dis option ta tha followin controllers:
.nf

    Smart Array 5300
    Smart Array 5i
    Smart Array 532
    Smart Array 5312
    Smart Array 641
    Smart Array 642
    Smart Array 6400
    Smart Array 6400 EM
    Smart Array 6i
    Smart Array P600
    Smart Array P400i
    Smart Array E200i
    Smart Array E200
    Smart Array E200i
    Smart Array E200i
    Smart Array E200i
    Smart Array E500
.fi
.SS Supported hardware
The
.B cciss
driver supports tha followin Smart Array boards:
.nf

    Smart Array 5300
    Smart Array 5i
    Smart Array 532
    Smart Array 5312
    Smart Array 641
    Smart Array 642
    Smart Array 6400
    Smart Array 6400 U320 Expansion Module
    Smart Array 6i
    Smart Array P600
    Smart Array P800
    Smart Array E400
    Smart Array P400i
    Smart Array E200
    Smart Array E200i
    Smart Array E500
    Smart Array P700m
    Smart Array P212
    Smart Array P410
    Smart Array P410i
    Smart Array P411
    Smart Array P812
    Smart Array P712m
    Smart Array P711m
.fi
.SS Configuration details
To configure HP Smart Array controllers,
use tha HP Array Configuration Utility
(either
.BR hpacuxe (8)
or
.BR hpacucli (8))
or tha Offline ROM-based Configuration Utilitizzle (ORCA)
run from tha Smart Arrayz option ROM at boot time.
.SH FILES
.SS Device nodes
Da thang namin scheme be as bigs up:
.nf

Major numbers:

    104     cciss0
    105     cciss1
    106     cciss2
    105     cciss3
    108     cciss4
    109     cciss5
    110     cciss6
    111     cciss7

Minor numbers:

    b7 b6 b5 b4 b3 b2 b1 b0
    |----+----| |----+----|
         |           |
         |           +-------- Partizzle ID (0=wholedev, 1-15 partition)
         |
         +-------------------- Logical Volume number

Da thang namin scheme is:

    /dev/cciss/c0d0         Controlla 0, disk 0, whole device
    /dev/cciss/c0d0p1       Controlla 0, disk 0, partizzle 1
    /dev/cciss/c0d0p2       Controlla 0, disk 0, partizzle 2
    /dev/cciss/c0d0p3       Controlla 0, disk 0, partizzle 3

    /dev/cciss/c1d1         Controlla 1, disk 1, whole device
    /dev/cciss/c1d1p1       Controlla 1, disk 1, partizzle 1
    /dev/cciss/c1d1p2       Controlla 1, disk 1, partizzle 2
    /dev/cciss/c1d1p3       Controlla 1, disk 1, partizzle 3
.fi
.SS Filez up in /proc
Da files
.I /proc/driver/cciss/cciss[0-9]+
contain shiznit about
the configuration of each controller.
For example:
.nf

    $ \fBcd /proc/driver/cciss\fP
    $ \fBls -l\fP
    total 0
    -rw-r--r-- 1 root root 0 2010-09-10 10:38 cciss0
    -rw-r--r-- 1 root root 0 2010-09-10 10:38 cciss1
    -rw-r--r-- 1 root root 0 2010-09-10 10:38 cciss2
    $ \fBcat cciss2\fP
    cciss2: HP Smart Array P800 Controller
    Board ID: 0x3223103c
    Firmware Version: 7.14
    IRQ: 16
    Logical drives: 1
    Current Q depth: 0
    Current # commandz on controller: 0
    Max Q depth since init: 1
    Max # commandz on controlla since init: 2
    Max SG entries since init: 32
    Sequential access devices: 0

    cciss/c2d0:   36.38GB       RAID 0
.fi
.SS Filez up in /sys
.TP
.I /sys/bus/pci/devices/<dev>/ccissX/cXdY/model
Displays tha SCSI INQUIRY page 0 model fo' logical drive
.I Y
of controller
.IR X .
.TP
.I /sys/bus/pci/devices/<dev>/ccissX/cXdY/rev
Displays tha SCSI INQUIRY page 0 revision fo' logical drive
.I Y
of controller
.IR X .
.TP
.I /sys/bus/pci/devices/<dev>/ccissX/cXdY/unique_id
Displays tha SCSI INQUIRY page 83 serial number fo' logical drive
.I Y
of controller
.IR X .
.TP
.I /sys/bus/pci/devices/<dev>/ccissX/cXdY/vendor
Displays tha SCSI INQUIRY page 0 vendor fo' logical drive
.I Y
of controller
.IR X .
.TP
.I /sys/bus/pci/devices/<dev>/ccissX/cXdY/block:cciss!cXdY
A symbolic link to
.IR /sys/block/cciss!cXdY .
.TP
.I /sys/bus/pci/devices/<dev>/ccissX/rescan
When dis file is freestyled to, tha driver rescans tha controller
to discover any new, removed, or modified logical drives.
.TP
.I /sys/bus/pci/devices/<dev>/ccissX/resettable
A value of 1 displayed up in dis file indicates that
the "reset_devices=1" kernel parameta (used by
.BR kdump )
is honored by dis controller.
A value of 0 indicates dat the
"reset_devices=1" kernel parameta aint gonna be honored.
Some modelz of Smart Array is not able ta honor dis parameter.
.TP
.I /sys/bus/pci/devices/<dev>/ccissX/cXdY/lunid
Displays tha 8-byte LUN ID used ta address logical drive
.I Y
of controller
.IR X .
.TP
.I /sys/bus/pci/devices/<dev>/ccissX/cXdY/raid_level
Displays tha RAID level of logical drive
.I Y
of controller
.IR X .
.TP
.I /sys/bus/pci/devices/<dev>/ccissX/cXdY/usage_count
Displays tha usage count (number of opens) of logical drive
.I Y
of controller
.IR X .
.SS SCSI tape drive n' medium chizzla support
SCSI sequential access devices n' medium chizzla devices is supported and
appropriate thang nodes is automatically pimped (e.g.,
.IR /dev/st0 ,
.IR /dev/st1 ,
etc.; see
.BR st (4)
for mo' details.)
Yo ass must enable "SCSI tape drive support fo' Smart Array 5xxx" and
"SCSI support" up in yo' kernel configuration ta be able ta use SCSI
tape drives wit yo' Smart Array 5xxx controller.

Additionally, note dat tha driver aint gonna engage tha SCSI core at
init time.
Da driver must be pimped up ta dynamically engage tha SCSI core via
the /proc file-system entry,
which tha "block" side of tha driver creates as
.I /proc/driver/cciss/cciss*
at run time.
This is cuz at driver init time,
the SCSI core may not yet be initialized (because tha driver be a funky-ass block
driver) n' attemptin ta regista it wit tha SCSI core up in such a cold-ass lil case
would cause a hang.
This is dopest done via a initialization script
(typically in
.IR /etc/init.d ,
but could vary dependin on distribution).
For example:
.nf

    fo' x up in /proc/driver/cciss/cciss[0-9]*
    do
        echo "engage scsi" > $x
    done

.fi
Once tha SCSI core is engaged by tha driver, it cannot be disengaged
(except by unloadin tha driver, if it happens ta be linked as a module.)

Note also dat if no sequential access devices or medium chizzlaz are
detected, tha SCSI core aint gonna be engaged by tha action of tha above
script.
.SS Hot plug support fo' SCSI tape drives
Hot pluggin of SCSI tape drives is supported, wit some caveats.
The
.B cciss
driver must be informed dat chizzlez ta tha SCSI bus
have been made.
This may be done via tha /proc file system.
For example:

    echo "rescan" > /proc/scsi/cciss0/1

This causes tha driver to:
.RS
.IP 1. 3
query tha adapta bout chizzlez ta the
physical SCSI buses and/or fibre channel arbitrated loop, and
.IP 2.
make note of any freshly smoked up or removed sequential access devices
or medium chizzlers.
.RE
.LP
Da driver will output lyrics indicatin which
devices done been added or removed n' tha controller, bus, target and
lun used ta address each device.
Da driver then notifies tha SCSI midlayer
of these chizzles.

Note dat tha namin convention of tha /proc file-system entries
gotz nuff a number up in addizzle ta tha driver name
(e.g., "cciss0"
instead of just "cciss", which you might expect).

Note:
.I Only
sequential access devices n' medium chizzlaz is presented
as SCSI devices ta tha SCSI midlayer by the
.B cciss
driver.
Specifically, physical SCSI disk drives are
.I not
presented ta tha SCSI midlayer.
Da only disk devices dat is presented ta tha kernel is logical
drives dat tha array controlla constructs from regions on
the physical drives.
Da logical drives is presented ta tha block layer
(not ta tha SCSI midlayer).
It be blingin fo' tha driver ta prevent tha kernel from accessin the
physical drives directly, since these drives is used by tha array
controlla ta construct tha logical drives.
.SS SCSI error handlin fo' tape drives n' medium chizzlers
Da Linux SCSI midlayer serves up a error-handlin protocol that
is initiated whenever a SCSI command fails ta complete within a
certain amount of time (which can vary dependin on tha command).
The
.B cciss
driver participates up in dis protocol ta some extent.
Da aiiight protocol be a gangbangin' four-step process:
.IP * 3
First, tha thang is holla'd at ta abort tha command.
.IP *
If dat don't work, tha thang is reset.
.IP *
If dat don't work, tha SCSI bus is reset.
.IP *
If dat don't work tha host bus adapta is reset.
.LP
The
.B cciss
driver be a funky-ass block
driver as well as a SCSI driver n' only tha tape drives n' medium
changers is presented ta tha SCSI midlayer
Furthermore, unlike more
straightforward SCSI drivers, disk I/O continues all up in tha block
side durin tha SCSI error-recovery process
Therefore, the
.B cciss
driver implements only tha straight-up original gangsta two of these actions,
abortin tha command, n' resettin tha device.
Note also dat most tape drives aint gonna oblige
in abortin commands, n' sometimes it appears they aint gonna even
obey a reset command, though up in most circumstances they will.
If tha command cannot be aborted n' tha thang cannot be
reset, tha thang is ghon be set offline.

In tha event dat tha error-handlin code is triggered n' a tape drive is
successfully reset or tha tardy command is successfully aborted, the
tape drive may still not allow I/O ta continue until some command
is issued dat positions tha tape ta a known position.
Typically you must rewind tha tape (by issuing
.I "mt -f /dev/st0 rewind"
for example) before I/O can proceed again n' again n' again ta a tape drive dat was reset.
.SH SEE ALSO
.BR cciss_vol_status (8),
.BR hpsa (4),
.BR hpacucli (8),
.BR hpacuxe (8),

.UR http://cciss.sf.net
.UE ,
and
.I Documentation/blockdev/cciss.txt
and
.I Documentation/ABI/testing/sysfs-bus-pci-devices-cciss
in tha Linux kernel source tree
.\" .SH AUTHORS
.\" Don Brace, Steve Cameron, Chase Maupin, Mike Miller, Mike Ni,
.\" Charlez White, Frankie Wiran
.\" n' probably some other people.
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
