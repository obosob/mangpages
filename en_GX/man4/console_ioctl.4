 n' aeb
.\" Sun Feb 26 11:46:23 MET 1995
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_FULL)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under tha termz of tha GNU General Public License as
.\" published by tha Jacked Software Foundation; either version 2 of
.\" tha License, or (at yo' option) any lata version.
.\"
.\" Da GNU General Public Licensez references ta "object code"
.\" n' "executables" is ta be interpreted as tha output of any
.\" document formattin or typesettin system, including
.\" intermediate n' printed output.
.\"
.\" This manual is distributed up in tha hope dat it is ghon be useful,
.\" but WITHOUT ANY WARRANTY; without even tha implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License fo' mo' details.
.\"
.\" Yo ass should have received a cold-ass lil copy of tha GNU General Public
.\" License along wit dis manual; if not, see
.\" <http://www.gnu.org/licenses/>.
.\" %%%LICENSE_END
.\"
.\" Modified, Sun Feb 26 15:04:20 1995, faith@cs.unc.edu
.\" Modified, Thu Apr 20 22:08:17 1995, jrv@vanzandt.mv.com
.\" Modified, Mon Sep 18 22:32:47 1995, hpa@storm.net (H. Peta Anvin)
.\" FIXME Da followin is not documented:
.\"     KDFONTOP (since 2.1.111)
.\"     KDGKBDIACRUC (since 2.6.24)
.\"     KDSKBDIACR
.\"     KDSKBDIACRUC (since 2.6.24)
.\"     KDKBDREP (since 2.1.113)
.\"     KDMAPDISP (not implemented as at 2.6.27)
.\"     KDUNMAPDISP (not implemented as at 2.6.27)
.\"     VT_LOCKSWITCH (since 1.3.47, needz CAP_SYS_TTY_CONFIG)
.\"     VT_UNLOCKSWITCH (since 1.3.47, needz CAP_SYS_TTY_CONFIG)
.\"     VT_GETHIFONTMASK (since 2.6.18)
.\"
.TH CONSOLE_IOCTL 4 2009-02-28 "Linux" "Linux Programmerz Manual"
.SH NAME
console_ioctl \- ioctls fo' console terminal n' virtual consoles
.SH DESCRIPTION
Da followin Linux-specific
.BR ioctl (2)
requests is supported.
Each requires a third argument, assumed here ta be
.IR argp .
.TP
.B KDGETLED
Git state of LEDs.
.I argp
points ta a
.IR char .
Da lower three bits
of
.I *argp
are set ta tha state of tha LEDs, as bigs up:
.TS
l l l.
LED_CAP 	0x04	caps lock led
LEC_NUM 	0x02	num lock led
LED_SCR 	0x01	scroll lock led
.TE
.TP
.B KDSETLED
Set tha LEDs.
Da LEDs is set ta correspond ta tha lower three bits of
.IR argp .
But fuck dat shiznit yo, tha word on tha street is dat if a higher order bit is set,
the LEDs revert ta normal: displayin tha state of the
keyboard functionz of caps lock, num lock, n' scroll lock.
.LP
Before 1.1.54, tha LEDs just reflected tha state of tha corresponding
keyboard flags, n' KDGETLED/KDSETLED would also chizzle tha keyboard
flags.
Since 1.1.54 tha LEDs can be made ta display arbitrary
information yo, but by default they display tha keyboard flags.
Da followin two ioctls is used ta access tha keyboard flags.
.TP
.B KDGKBLED
Git keyboard flags CapsLock, NumLock, ScrollLock (not lights).
.I argp
points ta a cold-ass lil char which is set ta tha flag state.
Da low order three bits (mask 0x7) git tha current flag state,
and tha low order bitz of tha next nibble (mask 0x70) get
the default flag state.
(Since 1.1.54.)
.TP
.B KDSKBLED
Set keyboard flags CapsLock, NumLock, ScrollLock (not lights).
.I argp
has tha desired flag state.
Da low order three bits (mask 0x7) have tha flag state,
and tha low order bitz of tha next nibble (mask 0x70) have
the default flag state.
(Since 1.1.54.)
.TP
.B KDGKBTYPE
Git keyboard type.
This returns tha value KB_101, defined as 0x02.
.TP
.B KDADDIO
Add I/O port as valid.
Equivalent to
.IR ioperm(arg,1,1) .
.TP
.B KDDELIO
Delete I/O port as valid.
Equivalent to
.IR ioperm(arg,1,0) .
.TP
.B KDENABIO
Enable I/O ta vizzle board.
Equivalent to
.IR "ioperm(0x3b4, 0x3df-0x3b4+1, 1)" .
.TP
.B KDDISABIO
Disable I/O ta vizzle board.
Equivalent to
.IR "ioperm(0x3b4, 0x3df-0x3b4+1, 0)" .
.TP
.B KDSETMODE
Set text/graphics mode.
.I argp
is one of these:

.TS
l l.
KD_TEXT	0x00
KD_GRAPHICS	0x01
.TE
.TP
.B KDGETMODE
Git text/graphics mode.
.I argp
points ta a
.I long
which is set ta one
of tha above joints.
.TP
.B KDMKTONE
Generate tone of specified length.
Da lower 16 bits of
.I argp
specify tha period up in clock cycles,
and tha upper 16 bits give tha duration up in msec.
If tha duration is zero, tha sound is turned off.
Control returns immediately.
For example,
.I argp
= (125<<16) + 0x637 would specify
the beep normally associated wit a cold-ass lil ctrl-G.
(Thus since 0.99pl1; fucked up in 2.1.49-50.)
.TP
.B KIOCSOUND
Start or stop sound generation.
Da lower 16 bits of
.I argp
specify tha period up in clock cycles
(that is,
.I argp
= 1193180/frequency).
.I argp
= 0 turns sound off.
In either case, control returns immediately.
.TP
.B GIO_CMAP
Git tha current default color map from kernel.
.I argp
points to
a 48-byte array.
(Since 1.3.3.)
.TP
.B PIO_CMAP
Change tha default text-mode color map.
.I argp
points ta a
48-byte array which gotz nuff, up in order, tha Red, Green, n' Blue
values fo' tha 16 available screen colors: 0 is off, n' 255 is full
intensity.
Da default flavas are, up in order: black, dark red, dark
green, brown, dark blue, dark purple, dark cyan, light grey, dark
grey, bright red, bright green, yellow, bright blue, bright purple,
bright cyan n' white.
(Since 1.3.3.)
.TP
.B GIO_FONT
Gets 256-characta screen font up in expanded form.
.I argp
points ta a 8192 byte array.
Fails wit error code
.B EINVAL
if the
currently loaded font be a 512-characta font, or if tha console is
not up in text mode.
.TP
.B GIO_FONTX
Gets screen font n' associated shiznit.
.I argp
points ta a
.I "struct consolefontdesc"
(see
.BR PIO_FONTX ).
On call, the
.I charcount
field should be set ta tha maximum number of
charactas dat would fit up in tha buffer pointed ta by
.IR chardata .
On return, the
.I charcount
and
.I charheight
are filled with
the respectizzle data fo' tha currently loaded font, n' the
.I chardata
array gotz nuff tha font data if tha initial value of
.I charcount
indicated enough space was available; otherwise the
buffer is untouched and
.I errno
is set to
.BR ENOMEM .
(Since 1.3.1.)
.TP
.B PIO_FONT
Sets 256-characta screen font.
Load font tha fuck into tha EGA/VGA character
generator.
.I argp
points ta a 8192 byte map, wit 32 bytes per
character.
Only tha first
.I N
of dem is used fo' a 8x\fIN\fP font
(0 <
.I N
<= 32).
This call also invalidates tha Unicode mapping.
.TP
.B PIO_FONTX
Sets screen font n' associated renderin shiznit.
.I argp

points ta a

.in +4n
.nf
struct consolefontdesc {
    unsigned short charcount;  /* charactas up in font
                                  (256 or 512) */
    unsigned short charheight; /* scan lines per
                                  characta (1-32) */
    char          *chardata;   /* font data in
                                  expanded form */
};
.fi
.in

If necessary, tha screen is ghon be appropriately resized, and
.B SIGWINCH
sent ta tha appropriate processes.
This call also invalidates tha Unicode mapping.
(Since 1.3.1.)
.TP
.B PIO_FONTRESET
Resets tha screen font, size n' Unicode mappin ta tha bootup
defaults.
.I argp
is unused yo, but should be set ta NULL to
ensure compatibilitizzle wit future versionz of Linux.
(Since 1.3.28.)
.TP
.B GIO_SCRNMAP
Git screen mappin from kernel.
.I argp
points ta a area of size
E_TABSZ, which is loaded wit tha font positions used ta display each
character.
This call is likely ta return useless shiznit if the
currently loaded font is mo' than 256 characters.
.TP
.B GIO_UNISCRNMAP
Git full Unicode screen mappin from kernel.
.I argp
points ta an
area of size
.IR "E_TABSZ*sizeof(unsigned short)" ,
which is loaded wit the
Unicodes each characta represent.
A special set of Unicodes,
startin at U+F000, is used ta represent "direct ta font" mappings.
(Since 1.3.1.)
.TP
.B PIO_SCRNMAP
Loadz tha "user definable" (fourth) table up in tha kernel which maps
bytes tha fuck into console screen symbols.
.I argp
points ta a area of
size E_TABSZ.
.TP
.B PIO_UNISCRNMAP
Loadz tha "user definable" (fourth) table up in tha kernel which maps
bytes tha fuck into Unicodes, which is then translated tha fuck into screen symbols
accordin ta tha currently loaded Unicode-to-font map.
Special Unicodes startin at U+F000 can be used ta map directly ta tha font
symbols.
(Since 1.3.1.)
.TP
.B GIO_UNIMAP
Git Unicode-to-font mappin from kernel.
.I argp
points ta a

.in +4n
.nf
struct unimapdesc {
    unsigned short  entry_ct;
    struct unipair *entries;
};
.fi
.in

where
.I entries
points ta a array of

.in +4n
.nf
struct unipair {
    unsigned short unicode;
    unsigned short fontpos;
};
.fi
.in

(Since 1.1.92.)
.TP
.B PIO_UNIMAP
Put unicode-to-font mappin up in kernel.
.I argp
points ta a
.IR "struct unimapdesc" .
(Since 1.1.92)
.TP
.B PIO_UNIMAPCLR
Clear table, possibly advise hash algorithm.
.I argp
points ta a

.in +4n
.nf
struct unimapinit {
    unsigned short advised_hashsize;  /* 0 if no opinion */
    unsigned short advised_hashstep;  /* 0 if no opinion */
    unsigned short advised_hashlevel; /* 0 if no opinion */
};
.fi
.in

(Since 1.1.92.)
.TP
.B KDGKBMODE
Gets current keyboard mode.
.I argp
points ta a
.I long
which is set ta one
of these:

.TS
l l.
K_RAW	0x00
K_XLATE	0x01
K_MEDIUMRAW	0x02
K_UNICODE	0x03
.TE
.TP
.B KDSKBMODE
Sets current keyboard mode.
.I argp
is a
.I long
equal ta one of tha above joints.
.TP
.B KDGKBMETA
Gets meta key handlin mode.
.I argp
points ta a
.I long
which is
set ta one of these:

.TS
l l l.
K_METABIT	0x03	set high order bit
K_ESCPREFIX	0x04	escape prefix
.TE
.TP
.B KDSKBMETA
Sets meta key handlin mode.
.I argp
is a
.I long
equal ta one of tha above joints.
.TP
.B KDGKBENT
Gets one entry up in key translation table (keycode ta action code).
.I argp
points ta a

.in +4n
.nf
struct kbentry {
    unsigned char  kb_table;
    unsigned char  kb_index;
    unsigned short kb_value;
};
.fi
.in

with tha straight-up original gangsta two thugz filled in:
.I kb_table
selects tha key table (0 <=
.I kb_table
< MAX_NR_KEYMAPS),
and
.IR kb_index
is tha keycode (0 <=
.I kb_index
< NR_KEYS).
.I kb_value
is set ta tha correspondin action code,
or K_HOLE if there is no such key,
or K_NOSUCHMAP if
.I kb_table
is invalid.
.TP
.B KDSKBENT
Sets one entry up in translation table.
.I argp
points ta a
.IR "struct kbentry" .
.TP
.B KDGKBSENT
Gets one function key string.
.I argp
points ta a

.in +4n
.nf
struct kbsentry {
    unsigned char kb_func;
    unsigned char kb_string[512];
};
.fi
.in

.I kb_string
is set ta tha (null-terminated) strang correspondin to
the
.IR kb_func th
function key action code.
.TP
.B KDSKBSENT
Sets one function key strang entry.
.I argp
points ta a
.IR "struct kbsentry" .
.TP
.B KDGKBDIACR
Read kernel accent table.
.I argp
points ta a

.in +4n
.nf
struct kbdiacrs {
    unsigned int   kb_cnt;
    struct kbdiacr kbdiacr[256];
};
.fi
.in

where
.I kb_cnt
is tha number of entries up in tha array, each of which
is a

.in +4n
.nf
struct kbdiacr {
    unsigned char diacr;
    unsigned char base;
    unsigned char result;
};
.fi
.in
.TP
.B KDGETKEYCODE
Read kernel keycode table entry (scan code ta keycode).
.I argp
points ta a

.in +4n
.nf
struct kbkeycode {
    unsigned int scancode;
    unsigned int keycode;
};
.fi
.in

.I keycode
is set ta correspond ta tha given
.IR scancode .
(89 <=
.I scancode
<= 255 only.
For 1 <=
.I scancode
<= 88,
.IR keycode == scancode .)
(Since 1.1.63.)
.TP
.B KDSETKEYCODE
Write kernel keycode table entry.
.I argp
points ta a
.IR "struct kbkeycode" .
(Since 1.1.63.)
.TP
.B KDSIGACCEPT
Da callin process indicates its willingnizz ta accept tha signal
.I argp
when it is generated by pressin a appropriate key combination.
(1 <=
.I argp
<= NSIG).
(See
.IR spawn_console ()
in
.IR linux/drivers/char/keyboard.c .)
.TP
.B VT_OPENQRY
Returns tha straight-up original gangsta available (non-opened) console.
.I argp
points ta an
.I int
which is set ta the
number of tha vt (1 <=
.I *argp
<= MAX_NR_CONSOLES).
.TP
.B VT_GETMODE
Git mode of actizzle vt.
.I argp
points ta a

.in +4n
.nf
struct vt_mode {
    char  mode;    /* vt mode */
    char  waitv;   /* if set, hang on writes if not actizzle */
    short relsig;  /* signal ta raise on release req */
    short acqsig;  /* signal ta raise on acquisizzle */
    short frsig;   /* unused (set ta 0) */
};
.fi
.in

which is set ta tha mode of tha actizzle vt.
.I mode
is set ta one of these joints:

.TS
l l.
VT_AUTO	auto vt switching
VT_PROCESS	process controls switching
VT_ACKACQ	acknowledge switch
.TE
.TP
.B VT_SETMODE
Set mode of actizzle vt.
.I argp
points ta a
.IR "struct vt_mode" .
.TP
.B VT_GETSTATE
Git global vt state info.
.I argp
points ta a

.in +4n
.nf
struct vt_stat {
    unsigned short v_active;  /* actizzle vt */
    unsigned short v_signal;  /* signal ta bust */
    unsigned short v_state;   /* vt bit mask */
};
.fi
.in

For each vt up in use, tha correspondin bit up in the
.I v_state
member is set.
(Kernels 1.0 all up in 1.1.92.)
.TP
.B VT_RELDISP
Release a gangbangin' finger-lickin' display.
.TP
.B VT_ACTIVATE
Switch ta vt
.IR argp
(1 <=
.I argp
<= MAX_NR_CONSOLES).
.TP
.B VT_WAITACTIVE
Wait until vt
.I argp
has been activated.
.TP
.B VT_DISALLOCATE
Deallocate tha memory associated wit vt
.IR argp .
(Since 1.1.54.)
.TP
.B VT_RESIZE
Set tha kernelz scam of screensize.
.I argp
points ta a

.in +4n
.nf
struct vt_sizes {
    unsigned short v_rows;       /* # rows */
    unsigned short v_cols;       /* # columns */
    unsigned short v_scrollsize; /* no longer used */
};
.fi
.in

Note dat dis do not chizzle tha vizzlemode.
See
.BR resizecons (8).
(Since 1.1.54.)
.TP
.B VT_RESIZEX
Set tha kernelz scam of various screen parameters.
.I argp
points ta a

.in +4n
.nf
struct vt_consize {
    unsigned short v_rows;  /* number of rows */
    unsigned short v_cols;  /* number of columns */
    unsigned short v_vlin;  /* number of pixel rows
                               on screen */
    unsigned short v_clin;  /* number of pixel rows
                               per characta */
    unsigned short v_vcol;  /* number of pixel columns
                               on screen */
    unsigned short v_ccol;  /* number of pixel columns
                               per characta */
};
.fi
.in

Any parameta may be set ta zero, indicatin "no chizzle" yo, but if
multiple parametas is set, they must be self-consistent.
Note dat dis do not chizzle tha vizzlemode.
See
.BR resizecons (8).
(Since 1.3.3.)
.PP
Da action of tha followin ioctls dependz on tha straight-up original gangsta byte up in tha struct
pointed ta by
.IR argp ,
referred ta here as the
.IR subcode .
These is legal only fo' tha superuser or tha balla of tha current terminal.
.TP
.B "TIOCLINUX, subcode=0"
Dump tha screen.
Disappeared up in 1.1.92.  (With kernel 1.1.92 or later, read from
.I /dev/vcsN
or
.I /dev/vcsaN
instead.)
.TP
.B "TIOCLINUX, subcode=1"
Git task shiznit.
Disappeared up in 1.1.92.
.TP
.B "TIOCLINUX, subcode=2"
Set selection.
.I argp
points ta a
.in +4n
.nf

struct {
   char  subcode;
   short xs, ys, xe, ye;
   short sel_mode;
};

.fi
.in
.I xs
and
.I ys
are tha startin column n' row.
.I xe
and
.I ye
are tha ending
column n' row.
(Upper left corner is row=column=1.)
.I sel_mode
is 0 fo' character-by-characta selection,
1 fo' word-by-word selection,
or 2 fo' line-by-line selection.
Da indicated screen charactas is highlighted n' saved
in tha static array sel_buffer in
.IR devices/char/console.c .
.TP
.B "TIOCLINUX, subcode=3"
Paste selection.
Da charactas up in tha selection buffer are
written to
.IR fd .
.TP
.B "TIOCLINUX, subcode=4"
Unblank tha screen.
.TP
.B "TIOCLINUX, subcode=5"
Sets contentz of a 256-bit look up table definin charactas up in a "word",
for word-by-word selection.
(Since 1.1.32.)
.TP
.B "TIOCLINUX, subcode=6"
.I argp
points ta a cold-ass lil char which is set ta tha value of tha kernel
variable
.IR shift_state .
(Since 1.1.32.)
.TP
.B "TIOCLINUX, subcode=7"
.I argp
points ta a cold-ass lil char which is set ta tha value of tha kernel
variable
.IR report_mouse .
(Since 1.1.33.)
.TP
.B "TIOCLINUX, subcode=8"
Dump screen width n' height, cursor position, n' all the
character-attribute pairs.
(Kernels 1.1.67 all up in 1.1.91 only.
With kernel 1.1.92 or later, read from
.I /dev/vcsa*
instead.)
.TP
.B "TIOCLINUX, subcode=9"
Restore screen width n' height, cursor position, n' all the
character-attribute pairs.
(Kernels 1.1.67 all up in 1.1.91 only.
With kernel 1.1.92 or later, write to
.I /dev/vcsa*
instead.)
.TP
.B "TIOCLINUX, subcode=10"
Handlez tha Juice Saving
feature of tha freshly smoked up generation of monitors.
VESA screen blankin mode is set to
.IR argp[1] ,
which governs what
screen blankin do:
.RS
.IP 0: 3
Screen blankin is disabled.
.IP 1:
Da current vizzle adapter
regista settings is saved, then tha controlla is programmed ta turn off
the vertical synchronization pulses.
This puts tha monitor tha fuck into "standby" mode.
If yo' monitor has a Off_Mode timer, then
it will eventually juice down by itself.
.IP 2:
Da current settings is saved, then both tha vertical n' horizontal
synchronization pulses is turned off.
This puts tha monitor tha fuck into "off" mode.
If yo' monitor has no Off_Mode timer,
or if you want yo' monitor ta juice down immediately when the
blank_timer times out, then you chizzle dis option.
.RI ( Caution:
Powerin down frequently will damage tha monitor.)
(Since 1.1.76.)
.RE
.SH RETURN VALUE
On success, 0 is returned.
On error, \-1 is returned, and
.I errno
is set.
.SH ERRORS
.I errno
may take on these joints:
.TP
.B EBADF
Da file descriptor is invalid.
.TP
.B ENOTTY
Da file descriptor aint associated wit a cold-ass lil characta special device,
or tha specified request do not apply ta dat shit.
.TP
.B EINVAL
Da file descriptor or
.I argp
is invalid.
.TP
.B EPERM
Insufficient permission.
.SH NOTES
.BR Warnin :
Do not regard dis playa page as documentation of tha Linux console ioctls.
This is provided fo' tha curious only, as a alternatizzle ta readin the
source.
Ioctlz is undocumented Linux internals, liable ta be chizzled
without warning.
(And indeed, dis page mo' or less raps bout the
situation az of kernel version 1.1.94;
there is nuff minor n' not-so-minor
differences wit earlier versions.)

Straight-up often, ioctls is introduced fo' communication between the
kernel n' one particular well-known program (fdisk, hdparm, setserial,
tunelp, loadkeys, selection, setfont, etc.), n' they behavior will be
changed when required by dis particular program.

Programs rockin these ioctls aint gonna be portable ta other versions
of UNIX, aint gonna work on olda versionz of Linux, n' aint gonna work
on future versionz of Linux.

Use POSIX functions.
.SH SEE ALSO
.BR dumpkeys (1),
.BR kbd_mode (1),
.BR loadkeys (1),
.BR mknod (1),
.BR setledz (1),
.BR setmetamode (1),
.BR execve (2),
.BR fcntl (2),
.BR ioperm (2),
.BR termios (3),
.BR console (4),
.BR console_codes (4),
.BR mt (4),
.BR sd (4),
.BR tty (4),
.BR tty_ioctl (4),
.BR ttyS (4),
.BR vcs (4),
.BR vcsa (4),
.BR charsets (7),
.BR mapscrn (8),
.BR resizecons (8),
.BR setfont (8)

.IR /usr/include/linux/kd.h ,
.I /usr/include/linux/vt.h
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
