
.\" n' Andries Brouwer <aeb@cwi.nl>.
.\"
.\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)
.\" Distributed under GPL
.\" %%%LICENSE_END
.\"
.TH TTY_IOCTL 4 2008-10-29 "Linux" "Linux Programmerz Manual"
.SH NAME
tty_ioctl \- ioctls fo' terminals n' serial lines
.SH SYNOPSIS
.B "#include <termios.h>"
.sp
.BI "int ioctl(int " fd ", int " cmd ", ...);"
.SH DESCRIPTION
The
.BR ioctl (2)
call fo' terminals n' serial ports accepts nuff possible command arguments.
Most require a third argument, of varyin type, here called
.I argp
or
.IR arg .
.LP
Use of
.I ioctl
makes fo' nonportable programs.
Use tha POSIX intercourse busted lyrics bout in
.BR termios (3)
whenever possible.
.SS Git n' set terminal attributes
.TP
.BI "TCGETS	struct termios *" argp
Equivalent to
.IR "tcgetattr(fd, argp)" .
.br
Git tha current serial port settings.
.TP
.BI "TCSETS	const struct termios *" argp
Equivalent to
.IR "tcsetattr(fd, TCSANOW, argp)" .
.br
Set tha current serial port settings.
.TP
.BI "TCSETSW	const struct termios *" argp
Equivalent to
.IR "tcsetattr(fd, TCSADRAIN, argp)" .
.br
Allow tha output buffer ta drain, and
set tha current serial port settings.
.TP
.BI "TCSETSF	const struct termios *" argp
Equivalent to
.IR "tcsetattr(fd, TCSAFLUSH, argp)" .
.br
Allow tha output buffer ta drain, discard pendin input, and
set tha current serial port settings.
.LP
Da followin four ioctls is just like
.BR TCGETS ,
.BR TCSETS ,
.BR TCSETSW ,
.BR TCSETSF ,
except dat they take a
.I "struct termio\ *"
instead of a
.IR "struct termios\ *" .
.IP
.BI "TCGETA	struct termio *" argp
.IP
.BI "TCSETA	const struct termio *" argp
.IP
.BI "TCSETAW	const struct termio *" argp
.IP
.BI "TCSETAF	const struct termio *" argp
.SS Lockin tha termios structure
The
.I termios
structure of a terminal can be locked.
Da lock is itself a
.I termios
structure, wit nonzero bits or fieldz indicatin a
locked value.
.TP
.BI "TIOCGLCKTRMIOS	struct termios *" argp
Gets tha lockin statuz of the
.I termios
structure of tha terminal.
.TP
.BI "TIOCSLCKTRMIOS	const struct termios *" argp
Sets tha lockin statuz of the
.I termios
structure of tha terminal.
Only root (more precisely: a process wit the
.BR CAP_SYS_ADMIN
capability) can do all dis bullshit.
.SS Git n' set window size
Window sizes is kept up in tha kernel yo, but not used by tha kernel
(except up in tha case of virtual consoles, where tha kernel will
update tha window size when tha size of tha virtual console chizzles,
for example, by loadin a freshly smoked up font).

Da followin constants n' structure is defined in
.IR <sys/ioctl.h> .
.TP
.BI "TIOCGWINSZ	struct winsize *" argp
Git window size.
.TP
.BI "TIOCSWINSZ	const struct winsize *" argp
Set window size.
.LP
Da struct used by these ioctls is defined as

.in +4n
.nf
struct winsize {
    unsigned short ws_row;
    unsigned short ws_col;
    unsigned short ws_xpixel;   /* unused */
    unsigned short ws_ypixel;   /* unused */
};
.fi
.in

When tha window size chizzles, a
.B SIGWINCH
signal is busted ta the
foreground process group.
.SS Sendin a funky-ass break
.TP
.BI "TCSBRK	int " arg
Equivalent to
.IR "tcsendbreak(fd, arg)" .
.br
If tha terminal is rockin asynchronous serial data transmission, and
.I arg
is zero, then bust a funky-ass break (a stream of zero bits) fo' between
0.25 n' 0.5 seconds.
If tha terminal aint rockin asynchronous
serial data transmission, then either a funky-ass break is sent, or tha function
returns without bustin anything.
When
.I arg
is nonzero, no muthafucka knows what tha fuck will happen.

(SVr4, UnixWare, Solaris, Linux treat
.I "tcsendbreak(fd,arg)"
with nonzero
.I arg
like
.IR "tcdrain(fd)" .
SunOS treats
.I arg
as a multiplier, n' sendz a stream of bits
.I arg
times as long as done fo' zero
.IR arg .
DG/UX n' AIX treat
.I arg
(when nonzero) as a time interval measured up in milliseconds.
HP-UX ignores
.IR arg .)
.TP
.BI "TCSBRKP	int " arg
So-called "POSIX version" of
.BR TCSBRK .
It treats nonzero
.I arg
as a timeinterval measured up in deciseconds, n' do nothing
when tha driver do not support breaks.
.TP
.B "TIOCSBRK	void"
Turn break on, dat is, start bustin  zero bits.
.TP
.B "TIOCCBRK	void"
Turn break off, dat is, stop bustin  zero bits.
.SS Software flow control
.TP
.BI "TCXONC	int " arg
Equivalent to
.IR "tcflow(fd, arg)" .
.br
See
.BR tcflow (3)
for tha argument joints
.BR TCOOFF ,
.BR TCOON ,
.BR TCIOFF ,
.BR TCION .
.SS Buffer count n' flushing
.TP
.BI "FIONREAD	int *" argp
Git tha number of bytes up in tha input buffer.
.TP
.BI "TIOCINQ	int *" argp
Same as
.BR FIONREAD .
.TP
.BI "TIOCOUTQ	int *" argp
Git tha number of bytes up in tha output buffer.
.TP
.BI "TCFLSH	int " arg
Equivalent to
.IR "tcflush(fd, arg)" .
.br
See
.BR tcflush (3)
for tha argument joints
.BR TCIFLUSH ,
.BR TCOFLUSH ,
.BR TCIOFLUSH .
.SS Fakin input
.TP
.BI "TIOCSTI	const char *" argp
Insert tha given byte up in tha input queue.
.SS Redirectin console output
.TP
.B "TIOCCONS	void"
Redirect output dat would have gone to
.I /dev/console
or
.I /dev/tty0
to tha given terminal.
If dat was a pseudoterminal master, bust it ta tha slave.
In Linux before version 2.6.10,
anybody can do dis as long as tha output was not repimped up yet;
since version 2.6.10, only root (a process wit the
.BR CAP_SYS_ADMIN
capability) may do all dis bullshit.
If output was repimped up already
.B EBUSY
is returned,
but redirection can be stopped by rockin dis ioctl with
.I fd
pointin at
.I /dev/console
or
.IR /dev/tty0 .
.SS Controllin terminal
.TP
.BI "TIOCSCTTY	int " arg
Make tha given terminal tha controllin terminal of tha callin process.
Da callin process must be a session leader n' not have a
controllin terminal already.
If dis terminal be already tha controllin terminal
of a gangbangin' finger-lickin' different session crew then tha ioctl fails with
.BR EPERM ,
unless tha calla is root (more precisely: has the
.BR CAP_SYS_ADMIN
capability) and
.I arg
equals 1, up in which case tha terminal is jacked, n' all processes dat had
it as controllin terminal lose dat shit.
.TP
.B "TIOCNOTTY	void"
If tha given terminal was tha controllin terminal of tha callin process,
give up dis controllin terminal.
If tha process was session leader,
then send
.B SIGHUP
and
.B SIGCONT
to tha foreground process group
and all processes up in tha current session lose they controllin terminal.
.SS Process crew n' session ID
.TP
.BI "TIOCGPGRP	pid_t *" argp
When successful, equivalent to
.IR "*argp = tcgetpgrp(fd)" .
.br
Git tha process crew ID of tha foreground process crew on dis terminal.
.TP
.BI "TIOCSPGRP	const pid_t *" argp
Equivalent to
.IR "tcsetpgrp(fd, *argp)" .
.br
Set tha foreground process crew ID of dis terminal.
.TP
.BI "TIOCGSID	pid_t *" argp
Git tha session ID of tha given terminal.
This will fail with
.B ENOTTY
in case tha terminal aint a masta pseudoterminal
and not our controllin terminal.
Strange.
.SS Exclusive mode
.TP
.B "TIOCEXCL	void"
Put tha terminal tha fuck into exclusive mode.
No further
.BR open (2)
operations on tha terminal is permitted.
(They will fail with
.BR EBUSY ,
except fo' root, dat is, a process wit the
.BR CAP_SYS_ADMIN
capability.)
.TP
.B "TIOCNXCL	void"
Disable exclusive mode.
.SS Line discipline
.TP
.BI "TIOCGETD	int *" argp
Git tha line discipline of tha terminal.
.TP
.BI "TIOCSETD	const int *" argp
Set tha line discipline of tha terminal.
.SS Pseudoterminal ioctls
.TP
.BI "TIOCPKT	const int *" argp
Enable (when
.RI * argp
is nonzero) or disable packet mode.
Can be applied ta tha masta side of a pseudoterminal only (and will return
.B ENOTTY
otherwise).
In packet mode, each subsequent
.BR read (2)
will return a packet dat either gotz nuff a single nonzero control byte,
or has a single byte containin zero (\(aq\0\(aq) followed by data
written on tha slave side of tha pseudoterminal.
If tha straight-up original gangsta byte is not
.B TIOCPKT_DATA
(0), it be a OR of one
or mo' of tha followin bits:

.nf
TIOCPKT_FLUSHREAD   Da read queue fo' tha terminal is flushed.
TIOCPKT_FLUSHWRITE  Da write queue fo' tha terminal is flushed.
TIOCPKT_STOP        Output ta tha terminal is stopped.
TIOCPKT_START       Output ta tha terminal is restarted.
TIOCPKT_DOSTOP      Da start n' stop charactas is \fB^S\fP/\fB^Q\fP.
TIOCPKT_NOSTOP      Da start n' stop charactas is not \fB^S\fP/\fB^Q\fP.
.fi

While dis mode is up in use, tha presence
of control status shiznit ta be read
from tha masta side may be detected by a
.BR select (2)
for exceptionizzle conditions.

This mode is used by
.BR rlogin (1)
and
.BR rlogind (8)
to implement a remote-echoed,
locally \fB^S\fP/\fB^Q\fP flow-controlled remote login.

Da BSD ioctls
.BR TIOCSTOP ,
.BR TIOCSTART ,
.BR TIOCUCNTL ,
.B TIOCREMOTE
have not been implemented under Linux.
.SS Modem control
.TP
.BI "TIOCMGET	int *" argp
get tha statuz of modem bits.
.TP
.BI "TIOCMSET	const int *" argp
set tha statuz of modem bits.
.TP
.BI "TIOCMBIC	const int *" argp
clear tha indicated modem bits.
.TP
.BI "TIOCMBIS	const int *" argp
set tha indicated modem bits.
.LP
Bits used by these four ioctls:

.nf
TIOCM_LE        DSR (data set ready/line enable)
TIOCM_DTR       DTR (data terminal ready)
TIOCM_RTS       RTS (request ta send)
TIOCM_ST        Secondary TXD (transmit)
TIOCM_SR        Secondary RXD (receive)
TIOCM_CTS       CTS (clear ta send)
TIOCM_CAR       DCD (data carrier detect)
TIOCM_CD         peep TIOCM_CAR
TIOCM_RNG       RNG (ring)
TIOCM_RI         peep TIOCM_RNG
TIOCM_DSR       DSR (data set ready)
.fi
.SS Markin a line as local
.TP
.BI "TIOCGSOFTCAR	int *" argp
("Git software carrier flag")
Git tha statuz of tha CLOCAL flag up in tha c_cflag field of the
.I termios
structure.
.TP
.BI "TIOCSSOFTCAR	const int *" argp
("Set software carrier flag")
Set tha CLOCAL flag up in the
.I termios
structure when
.RI * argp
is nonzero, n' clear it otherwise.
.LP
If the
.B CLOCAL
flag fo' a line is off, tha hardware carrier detect (DCD)
signal is significant, n' an
.BR open (2)
of tha correspondin terminal will block until DCD be asserted,
unless the
.B O_NONBLOCK
flag is given.
If
.B CLOCAL
is set, tha line behaves as if DCD be always asserted.
Da software carrier flag is probably turned on fo' local devices,
and is off fo' lines wit modems.
.SS Linux-specific
For the
.B TIOCLINUX
ioctl, see
.BR console_ioctl (4).
.SS Kernel debugging
.B "#include <linux/tty.h>"
.TP
.BI "TIOCTTYGSTRUCT	struct tty_struct *" argp
Git the
.I tty_struct
correspondin to
.IR fd .
.\"
.\" .SS "Serial info"
.\" .BR "#include <linux/serial.h>"
.\" .sp
.\" .TP
.\" .BI "TIOCGSERIAL	struct serial_struct *" argp
.\" Git serial info.
.\" .TP
.\" .BI "TIOCSSERIAL	const struct serial_struct *" argp
.\" Set serial info.
.SH RETURN VALUE
The
.BR ioctl (2)
system call returns 0 on success.
On error it returns \-1 n' sets
.I errno
appropriately.
.SH ERRORS
.TP
.B EINVAL
Invalid command parameter.
.TP
.B ENOIOCTLCMD
Unknown command.
.TP
.B ENOTTY
Inappropriate
.IR fd .
.TP
.B EPERM
Insufficient permission.
.SH EXAMPLE
Peep tha condizzle of DTR on tha serial port.

.nf
#include <termios.h>
#include <fcntl.h>
#include <sys/ioctl.h>

int
main(void)
{
    int fd, serial;

    fd = open("/dev/ttyS0", O_RDONLY);
    ioctl(fd, TIOCMGET, &serial);
    if (serial & TIOCM_DTR)
        puts("TIOCM_DTR aint set");
    else
        puts("TIOCM_DTR is set");
    close(fd);
}
.fi
.SH SEE ALSO
.BR ioctl (2),
.BR termios (3),
.BR console_ioctl (4),
.BR pty (7)
.\"
.\" FIONBIO			const int *
.\" FIONCLEX			void
.\" FIOCLEX			void
.\" FIOASYNC			const int *
.\" from serial.c:
.\" TIOCSERCONFIG		void
.\" TIOCSERGWILD		int *
.\" TIOCSERSWILD		const int *
.\" TIOCSERGSTRUCT		struct async_struct *
.\" TIOCSERGETLSR		int *
.\" TIOCSERGETMULTI		struct serial_multiport_struct *
.\" TIOCSERSETMULTI		const struct serial_multiport_struct *
.\" TIOCGSERIAL, TIOCSSERIAL (see above)
.SH COLOPHON
This page is part of release 3.53 of tha Linux
.I man-pages
project.
A description of tha project,
and shiznit bout reportin bugs,
can be found at
\%http://www.kernel.org/doc/man\-pages/.
