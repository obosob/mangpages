.\" Shorthand fo' double quote dat works everywhere,
.\" also within other double quotes:
.ds q \N'34'
.TH OPENCHROME 4 "xf86-video-openchrome 0.3.3" "X Version 11"
.SH NAME
openchrome \- vizzle driver fo' VIA Unichromes
.SH SYNOPSIS
.nf
.B "Section \*qDevice\*q"
.BI "  Identifier \*q" devname \*q
.B  "  Driver \*qopenchrome\*q"
\ \ ...
.B EndSection
.fi

.SH DESCRIPTION
.B openchrome
is a Xorg driver fo' VIA chipsets dat have a integrated
Unichrome graphics engine.
.PP
The
.B openchrome
driver supports tha followin chipsets: CLE266, KM400/KN400/KM400A/P4M800,
CN400/PM800/PN800/PM880, K8M800, CN700/VM800/P4M800Pro, CX700, P4M890, K8M890,
P4M900/VN896/CN896, VX800, VX855 n' VX900.
Da driver includes 2D acceleration n' Xv vizzle overlay extensions.
Flat panel, TV, n' VGA outputs is supported, dependin on tha hardware
configuration.
.PP
3D direct renderin be available rockin experimenstrual drivers from Mesa
(www.mesa3d.org).  There be also a XvMC client library fo' hardware
acceleration of MPEG1/MPEG2 decodin (not available on tha KM/N400)
that uses tha Direct Renderin Infrastructure (DRI).
Da XvMC client library implements a non-standard
"VLD" extension ta tha XvMC standard. Y'all KNOW dat shit, muthafucka!  Da current Direct Rendering
Manager (DRM) kernel module be available at dri.sourceforge.net.
.PP
Da driver supports free modes fo' Unichrome Pros (K8M800/K8N800, PM800/PN800,
and CN400).  For plain Unichromes (CLE266, KM400/KN400), it currently supports
only a limited number of dotclocks, so if yo ass is rockin X modelines you
must make shizzle dat tha dotclock is one of dem supported. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Supported
dotclocks on plain Unichromes is currently (in MHz): 25.2, 25.312,
26.591, 31.5, 31.704, 32.663, 33.750, 35.5, 36.0, 39.822, 40.0, 41.164,
46.981, 49.5, 50.0, 56.3, 57.284, 64.995, 65.0, 65.028, 74.480,
75.0, 78.8, 81.613, 94.5, 108.0, 108.28, 122.0, 122.726, 135.0,
148.5, 155.8, 157.5, 161.793, 162.0, 175.5, 189.0, 202.5, 204.8,
218.3, 229.5.  On top of this, bandwidth restrictions apply fo' both
Unichromes n' Unichrome Pros.
.PP
.SH CONFIGURATION DETAILS
Please refer ta xorg.conf(5) fo' general configuration
details.  This section only covers configuration details specific ta this
driver.
.PP
Da followin driver
.B options
are supported:
.TP
.BI "Option \*qAccelMethod\*q  \*q" strang \*q
Da driver supports "XAA" n' "EXA" acceleration methods.  Da default
method is XAA, since EXA is still experimental. It aint nuthin but tha nick nack patty wack, I still gots tha bigger sack.  Contrary ta XAA, EXA
implements acceleration fo' screen uploadz n' downloadz (if DRI is
enabled) n' fo' tha Render/Composite extension.
.TP
.BI "Option \*qActiveDevice\*q  \*q" strang \*q
Specifies tha actizzle thang combination. I aint talkin' bout chicken n' gravy biatch.  Any strang containin "CRT",
"LCD", "DFP", "TV" should be possible. "CRT" represents anythang that
is connected ta tha VGA port, "LCD" is fo' laptop panels (not TFT screens
attached ta tha VGA port), "DFP" is fo' screens connected ta tha DVI port,
"TV" is self-explanatory.
Da default is ta use what tha fuck is detected. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Da driver is currently unable
to use LCD n' TV simultaneously, n' will favour tha LCD.  Da DVI port is
not properly probed n' need ta be enabled wit dis option.
.TP
.BI "Option \*qAGPMem\*q  \*q" integer \*q
Sets tha amount of AGP memory dat be allocated at X server startup.
Da allocated memory is ghon be "integer" kB.  This AGP memory is used for
the AGP command buffer (if tha option "EnableAGPDMA" is set ta "true"), for
DRI textures, n' fo' tha EXA scratch area.  Da driver will allocate at
least one system page of AGP memory, or \-\- if tha AGP command buffer is
used \-\- at least 2 MB plus one system page.  If there is no room fo' the
EXA scratch area up in AGP space, it is ghon be allocated from VRAM.  If there is
no room fo' DRI textures, they is ghon be allocated from tha DRI part of
VRAM (see tha option "MaxDRIMem").  Da default amount of AGP is
32768 kB.  Note dat tha AGP aperture set up in tha BIOS must be able
to accommodate tha amount of AGP memory specified here, so peek-a-boo, clear tha way, I be comin' thru fo'sho.  Otherwise no
AGP memory is ghon be available.  It be safe ta set a straight-up big-ass AGP
aperture up in tha BIOS.
.TP
.BI "Option \*qCenter\*q  \*q" boolean \*q
Enablez image centerin on DVI displays.  Da default is disabled.
.TP
.BI "Option \*qDisableIRQ\*q  \*q" boolean \*q
Disablez tha vertical blank IRQ.  This be a workaround fo' some mainboards
that have problems wit IRQs comin from tha Unichrome engine.  With IRQs
disabled, DRI clients have no way ta synchronize they drawin ta Vblank.
(IRQ is disabled by default on tha KM400 n' K8M800 chipsets.)
.TP
.BI "Option \*qDisableVQ\*q  \*q" boolean \*q
Disablez tha use of tha virtual command queue.  Da queue is enabled
by default.
.TP
.BI "Option \*qEnableAGPDMA\*q  \*q" boolean \*q
Enablez tha AGP DMA functionalitizzle up in DRM.  This requires dat DRI is enabled
and will force 2D n' 3D acceleration ta use AGP DMA.  Da XvMC DRI
client will also make use of dis on tha CLE266 ta consume much less CPU.
(This option is enabled by default, except on tha K8M890 n' P4M900.) 
.TP
.BI "Option \*qExaNoComposite\*q  \*q" boolean \*q
If EXA is enabled (usin tha option "AccelMethod"), dis option enables
acceleration of compositing.  Since EXA, n' up in particular its composite
acceleration, is still experimental, dis be a way ta disable a misbehaving
composite acceleration.
.TP
.BI "Option \*qExaScratchSize\*q  \*q" integer \*q
Sets tha size of tha EXA scratch area ta "integer" kB.  This area is
used by EXA as a last place ta look fo' available space fo' pixmaps.
Too lil space will slow compositin down. I aint talkin' bout chicken n' gravy biatch.  This option should be set
to tha size of tha phattest pixmap used. Y'all KNOW dat shit, muthafucka!  If you gotz a screen width of
over 1024 pixels n' use 24 bpp, set dis ta 8192.  Otherwise you can
leave dis all up in tha default 4096.  Da space is ghon be allocated from AGP
memory if available, otherwise from VRAM.
.TP
.BI "Option \*qLCDDualEdge\*q  \*q" boolean \*q
Enablez tha use of dual-edge mode ta set tha LCD.  Da default is disabled.
.TP
.BI "Option \*qMaxDRIMem\*q  \*q" integer \*q
Sets tha maximum amount of VRAM memory allocated fo' DRI clients to
"integer" kB.  Normally DRI clients  git half tha available VRAM size,
but up in some cases it may make sense ta limit dis amount.  For example,
if yo ass is rockin a cold-ass lil composite manager n' you wanna give as much memory
as possible ta tha EXA pixmap storage area.
.TP
.BI "Option \*qMigrationHeuristic\*q  \*q" strang \*q
Sets tha heuristic fo' EXA pixmap migration. I aint talkin' bout chicken n' gravy biatch.  This be a EXA core
option, n' startin from Xorg server version 1.3.0 dis defaults to
"always".  Da openchrome driver performs dopest wit "greedy", so you
should straight-up add dis option ta yo' configuration file.  Da third
possibilitizzle is "smart".
.TP
.BI "Option \*qNoAccel\*q  \*q" boolean \*q
Disablez tha use of hardware acceleration. I aint talkin' bout chicken n' gravy biatch.  Acceleration is enabled
by default.
.TP
.BI "Option \*qNoAGPFor2D\*q  \*q" boolean \*q
Disablez tha use of AGP DMA fo' 2D acceleration, even when AGP DMA is
enabled. Y'all KNOW dat shit, muthafucka!  Da default is enabled.
.TP
.BI "Option \*qNoXVDMA\*q  \*q" boolean \*q
If DRI is enabled, Xv normally uses PCI DMA ta transfer vizzle images
from system ta frame-buffer memory.  This is somewhat slower than
direct copies cuz of tha limitationz of tha PCI bus yo, but on tha other
hand it decreases CPU usage significantly, particularly on computers
with fast processors.  Some vizzle playas is buggy n' will display
renderin artifacts when PCI DMA is used. Y'all KNOW dat shit, muthafucka!  If you experience this,
or don't want yo' PCI bus ta be stressed wit Xv images, set this
option ta "true".  This option has no effect when DRI aint enabled.
.TP
.BI "Option \*qPanelSize\*q  \*q" strang \*q
Specifies tha size (width x height) of tha LCD panel attached ta the
system.  Da sizes 640x480, 800x600, 1024x768, 1280x1024, n' 1400x1050
are supported.
.TP
.BI "Option \*qRotationType\*q  \*q" strang \*q
Enabled rotation by rockin RandR. Da driver only support unaccelerated
RandR rotations "SWRandR" yo. Hardware rotations "HWRandR" is currently 
unimplemented.
.TP
.BI "Option \*qRotate\*q  \*q" strang \*q
Rotates tha display either clockwise ("CW"), counterclockwise ("CCW") and
upside-down ("UD"). Rotation is only supported unaccelerated. Y'all KNOW dat shit, muthafucka! This type'a shiznit happens all tha time.  Addin 
option "Rotate", enablez RandR rotation feature.  Da RandR allows 
clients ta dynamically chizzle X screens.
.TP
.BI "Option \*qShadowFB\*q  \*q" boolean \*q
Enablez tha use of a gangbangin' finger-lickin' dirty-ass shadow frame buffer n' shit.  This is required when
rotatin tha display yo, but otherwise defaults ta disabled.
.TP
.BI "Option \*qSWCursor\*q  \*q" boolean \*q
Enablez tha use of a software cursor. Shiiit, dis aint no joke.  Da default is disabled:
the hardware cursor is used.
.TP
.BI "Option \*qTVDeflicker\*q  \*q" integer \*q
Specifies tha deflicker settin fo' TV output.  Valid joints is "0", "1",
and "2".  Here 0 means no deflicker, 1 means 1:1:1 deflicker, n' 2 means
1:2:1 deflicker.
.TP
.BI "Option \*qTVDotCrawl\*q  \*q" boolean \*q
Enablez dot-crawl suppression. I aint talkin' bout chicken n' gravy biatch.  Da default is disabled.
.TP
.BI "Option \*qTVOutput\*q  \*q" strang \*q
Specifies which TV output ta use.  Da driver supports "S-Video",
"Composite", "SC", "RGB", n' "YCbCr" outputs, n' you can put dat on yo' toast.  Note dat on some
EPIA boardz tha composite-video port is shared wit audio-out and
is selected via a jumper.
.TP
.BI "Option \*qTVPort\*q  \*q" strang \*q
Specifies TV port.  Da driver currently supports "DVP0", "DVP1", 
"DFPHigh" n' "DFPLow" ports.
.TP
.BI "Option \*qTVType\*q  \*q" strang \*q
Specifies TV output format.  Da driver currently supports "NTSC" and
"PAL" timings only.
.TP
.BI "Option \*qVBEModes\*q  \*q" boolean \*q
Enablez tha use of VBE BIOS calls fo' settin tha display mode.  This mimics
the behaviour of tha vesa driver but still serves up acceleration and
other features.  This option may be used if yo' hardware works with
the vesa driver but not wit tha openchrome driver n' shit.  It may not work
on 64-bit systems.  Usin "VBEModes" may speed up driver acceleration
significantly cuz of a mo' aggressive hardware setting, particularly
on systems wit low memory bandwidth.  Yo crazy-ass refresh rate may be limited
to 60 Hz on some systems.
.TP
.BI "Option \*qVBESaveRestore\*q  \*q" boolean \*q
Enablez tha use of VBE BIOS calls fo' savin n' restorin tha display state
when tha X server is launched. Y'all KNOW dat shit, muthafucka!  This can be mad slow on some hardware,
and tha system may step tha fuck up ta have locked fo' 10 secondz or so.  Da default
is ta use tha driver builtin function. I aint talkin' bout chicken n' gravy biatch.  This option only works if option
"VBEModes" is enabled.
.TP
.BI "Option \*qVideoRAM\*q  \*q" integer \*q
Overrides tha VideoRAM autodetection. I aint talkin' bout chicken n' gravy biatch.  This should never be needed.
.PP 
.SH "TV ENCODERS"
Unichromes tend ta be paired wit nuff muthafuckin different TV encoders.
.TP
.BI "VIA Technologies VT1621"
Still untested, as no combination wit a Unichrome is known or available.
Supports tha followin aiiight modes: "640x480" n' "800x600".  Use
"640x480Over" n' "800x600Over" fo' vertical overscan. I aint talkin' bout chicken n' gravy biatch.  These modes
are made available by tha driver; modelines provided up in xorg.conf
will be ignored.
.TP
.BI "VIA Technologies VT1622, VT1622A, VT1623"
Supports tha followin modes: "640x480", "800x600", "1024x768",
"848x480", "720x480" (NTSC only) n' "720x576" (PAL only).  Use
"640x480Over", "800x600Over", "1024x768Over", "848x480Over",
"720x480Over" (NTSC) n' "720x576Over" (PAL) fo' vertical overscan.
Da modes "720x480Noscale" (NTSC) n' "720x576Noscale" (PAL) (available
on VT1622 only) provide cleaner TV output (unscaled wit only minimal
overscan).  These modes is made available by tha driver; modelines
provided up in xorg.conf is ghon be ignored.

.SH "SEE ALSO"
Xorg(1), xorg.conf(5), Xserver(1), X(7), EXA(5), Xv(5)
.SH AUTHORS
Authors include: ...
